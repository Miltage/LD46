// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var SceneName = $hxEnums["SceneName"] = { __ename__ : true, __constructs__ : ["TITLE","GAME"]
	,TITLE: {_hx_index:0,__enum__:"SceneName",toString:$estr}
	,GAME: {_hx_index:1,__enum__:"SceneName",toString:$estr}
};
SceneName.__empty_constructs__ = [SceneName.TITLE,SceneName.GAME];
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
h3d_IDrawable.prototype = {
	__class__: h3d_IDrawable
};
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,setScene: function(scene,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		var new2D = ((scene) instanceof h2d_Scene) ? scene : null;
		var new3D = ((scene) instanceof h3d_scene_Scene) ? scene : null;
		if(new2D != null) {
			this.sevents.removeScene(this.s2d);
			this.sevents.addScene(scene,0);
		} else {
			if(new3D != null) {
				this.sevents.removeScene(this.s3d);
			}
			this.sevents.addScene(scene);
		}
		if(disposePrevious) {
			if(new2D != null) {
				this.s2d.dispose();
			} else if(new3D != null) {
				this.s3d.dispose();
			} else {
				throw new js__$Boot_HaxeError("Can't dispose previous scene");
			}
		}
		if(new2D != null) {
			this.s2d = new2D;
		}
		if(new3D != null) {
			this.s3d = new3D;
		}
	}
	,setCurrent: function() {
		var _gthis = this;
		this.engine = h3d_Engine.CURRENT;
		this.isDisposed = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			_gthis.onResize();
		};
		hxd_System.setLoop($bind(this,this.mainLoop));
	}
	,setScene2D: function(s2d,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		this.sevents.removeScene(this.s2d);
		this.sevents.addScene(s2d,0);
		if(disposePrevious) {
			this.s2d.dispose();
		}
		this.s2d = s2d;
	}
	,setScene3D: function(s3d,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		this.sevents.removeScene(this.s3d);
		this.sevents.addScene(s3d);
		if(disposePrevious) {
			this.s3d.dispose();
		}
		this.s3d = s3d;
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,dispose: function() {
		this.engine.onResized = hxd_App.staticHandler;
		this.engine.onContextLost = hxd_App.staticHandler;
		this.isDisposed = true;
		this.s2d.dispose();
		this.s3d.dispose();
		this.sevents.dispose();
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var Main = function() {
	hxd_App.call(this);
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	new Main();
};
Main.__super__ = hxd_App;
Main.prototype = $extend(hxd_App.prototype,{
	init: function() {
		hxd_Res.set_loader(new hxd_res_Loader(new hxd_fs_EmbedFileSystem(haxe_Unserializer.run("oy9:anvil.pngty8:room.pngty9:title.pngty14:television.pngty10:radial.pngty11:toaster.pngty10:junior.pngty11:cleaver.pngtg"))));
		var tf = new h2d_Text(hxd_res_DefaultFont.get(),this.s2d);
		tf.set_text("Hello World!");
		this.game = new me_miltage_Game();
		this.title = new me_miltage_Title();
		this.setScene(this.title);
		this.currentScene = SceneName.TITLE;
	}
	,update: function(dt) {
		if(this.currentScene == SceneName.TITLE) {
			this.title.update(dt);
		} else if(this.currentScene == SceneName.GAME) {
			this.game.update(dt);
		}
	}
	,__class__: Main
});
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(child.nodeType));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var box2D_collision_B2AABB = function() {
	this.lowerBound = new box2D_common_math_B2Vec2();
	this.upperBound = new box2D_common_math_B2Vec2();
};
$hxClasses["box2D.collision.B2AABB"] = box2D_collision_B2AABB;
box2D_collision_B2AABB.__name__ = "box2D.collision.B2AABB";
box2D_collision_B2AABB.prototype = {
	isValid: function() {
		var dX = this.upperBound.x - this.lowerBound.x;
		var dY = this.upperBound.y - this.lowerBound.y;
		var valid = dX >= 0.0 && dY >= 0.0;
		valid = valid && this.lowerBound.isValid() && this.upperBound.isValid();
		return valid;
	}
	,getCenter: function() {
		return new box2D_common_math_B2Vec2((this.lowerBound.x + this.upperBound.x) / 2,(this.lowerBound.y + this.upperBound.y) / 2);
	}
	,getExtents: function() {
		return new box2D_common_math_B2Vec2((this.upperBound.x - this.lowerBound.x) / 2,(this.upperBound.y - this.lowerBound.y) / 2);
	}
	,contains: function(aabb) {
		var result = true;
		result = result && this.lowerBound.x <= aabb.lowerBound.x;
		result = result && this.lowerBound.y <= aabb.lowerBound.y;
		result = result && aabb.upperBound.x <= this.upperBound.x;
		result = result && aabb.upperBound.y <= this.upperBound.y;
		return result;
	}
	,rayCast: function(output,input) {
		var tmin = -Number.MAX_VALUE;
		var tmax = Number.MAX_VALUE;
		var pX = input.p1.x;
		var pY = input.p1.y;
		var dX = input.p2.x - input.p1.x;
		var dY = input.p2.y - input.p1.y;
		var absDX = Math.abs(dX);
		var absDY = Math.abs(dY);
		var normal = output.normal;
		var inv_d;
		var t1;
		var t2;
		var t3;
		var s;
		if(absDX < Number.MIN_VALUE) {
			if(pX < this.lowerBound.x || this.upperBound.x < pX) {
				return false;
			}
		} else {
			inv_d = 1.0 / dX;
			t1 = (this.lowerBound.x - pX) * inv_d;
			t2 = (this.upperBound.x - pX) * inv_d;
			s = -1.0;
			if(t1 > t2) {
				t3 = t1;
				t1 = t2;
				t2 = t3;
				s = 1.0;
			}
			if(t1 > tmin) {
				normal.x = s;
				normal.y = 0;
				tmin = t1;
			}
			tmax = Math.min(tmax,t2);
			if(tmin > tmax) {
				return false;
			}
		}
		if(absDY < Number.MIN_VALUE) {
			if(pY < this.lowerBound.y || this.upperBound.y < pY) {
				return false;
			}
		} else {
			inv_d = 1.0 / dY;
			t1 = (this.lowerBound.y - pY) * inv_d;
			t2 = (this.upperBound.y - pY) * inv_d;
			s = -1.0;
			if(t1 > t2) {
				t3 = t1;
				t1 = t2;
				t2 = t3;
				s = 1.0;
			}
			if(t1 > tmin) {
				normal.y = s;
				normal.x = 0;
				tmin = t1;
			}
			tmax = Math.min(tmax,t2);
			if(tmin > tmax) {
				return false;
			}
		}
		output.fraction = tmin;
		return true;
	}
	,testOverlap: function(other) {
		var d1X = other.lowerBound.x - this.upperBound.x;
		var d1Y = other.lowerBound.y - this.upperBound.y;
		var d2X = this.lowerBound.x - other.upperBound.x;
		var d2Y = this.lowerBound.y - other.upperBound.y;
		if(d1X > 0.0 || d1Y > 0.0) {
			return false;
		}
		if(d2X > 0.0 || d2Y > 0.0) {
			return false;
		}
		return true;
	}
	,combine: function(aabb1,aabb2) {
		this.lowerBound.x = Math.min(aabb1.lowerBound.x,aabb2.lowerBound.x);
		this.lowerBound.y = Math.min(aabb1.lowerBound.y,aabb2.lowerBound.y);
		this.upperBound.x = Math.max(aabb1.upperBound.x,aabb2.upperBound.x);
		this.upperBound.y = Math.max(aabb1.upperBound.y,aabb2.upperBound.y);
	}
	,__class__: box2D_collision_B2AABB
};
var box2D_common_math_B2Vec2 = function(x_,y_) {
	if(y_ == null) {
		y_ = 0;
	}
	if(x_ == null) {
		x_ = 0;
	}
	this.x = x_;
	this.y = y_;
};
$hxClasses["box2D.common.math.B2Vec2"] = box2D_common_math_B2Vec2;
box2D_common_math_B2Vec2.__name__ = "box2D.common.math.B2Vec2";
box2D_common_math_B2Vec2.make = function(x_,y_) {
	return new box2D_common_math_B2Vec2(x_,y_);
};
box2D_common_math_B2Vec2.prototype = {
	setZero: function() {
		this.x = 0.0;
		this.y = 0.0;
	}
	,set: function(x_,y_) {
		if(y_ == null) {
			y_ = 0;
		}
		if(x_ == null) {
			x_ = 0;
		}
		this.x = x_;
		this.y = y_;
	}
	,setV: function(v) {
		this.x = v.x;
		this.y = v.y;
	}
	,getNegative: function() {
		return new box2D_common_math_B2Vec2(-this.x,-this.y);
	}
	,negativeSelf: function() {
		this.x = -this.x;
		this.y = -this.y;
	}
	,copy: function() {
		return new box2D_common_math_B2Vec2(this.x,this.y);
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
	}
	,subtract: function(v) {
		this.x -= v.x;
		this.y -= v.y;
	}
	,multiply: function(a) {
		this.x *= a;
		this.y *= a;
	}
	,mulM: function(A) {
		var tX = this.x;
		this.x = A.col1.x * tX + A.col2.x * this.y;
		this.y = A.col1.y * tX + A.col2.y * this.y;
	}
	,mulTM: function(A) {
		var tX = box2D_common_math_B2Math.dot(this,A.col1);
		this.y = box2D_common_math_B2Math.dot(this,A.col2);
		this.x = tX;
	}
	,crossVF: function(s) {
		var tX = this.x;
		this.x = s * this.y;
		this.y = -s * tX;
	}
	,crossFV: function(s) {
		var tX = this.x;
		this.x = -s * this.y;
		this.y = s * tX;
	}
	,minV: function(b) {
		this.x = this.x < b.x ? this.x : b.x;
		this.y = this.y < b.y ? this.y : b.y;
	}
	,maxV: function(b) {
		this.x = this.x > b.x ? this.x : b.x;
		this.y = this.y > b.y ? this.y : b.y;
	}
	,abs: function() {
		if(this.x < 0) {
			this.x = -this.x;
		}
		if(this.y < 0) {
			this.y = -this.y;
		}
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,normalize: function() {
		var length = Math.sqrt(this.x * this.x + this.y * this.y);
		if(length < Number.MIN_VALUE) {
			return 0.0;
		}
		var invLength = 1.0 / length;
		this.x *= invLength;
		this.y *= invLength;
		return length;
	}
	,isValid: function() {
		if(box2D_common_math_B2Math.isValid(this.x)) {
			return box2D_common_math_B2Math.isValid(this.y);
		} else {
			return false;
		}
	}
	,__class__: box2D_common_math_B2Vec2
};
var box2D_collision_ClipVertex = function() {
	this.v = new box2D_common_math_B2Vec2();
	this.id = new box2D_collision_B2ContactID();
};
$hxClasses["box2D.collision.ClipVertex"] = box2D_collision_ClipVertex;
box2D_collision_ClipVertex.__name__ = "box2D.collision.ClipVertex";
box2D_collision_ClipVertex.prototype = {
	set: function(other) {
		this.v.setV(other.v);
		this.id.set(other.id);
	}
	,__class__: box2D_collision_ClipVertex
};
var box2D_collision_B2ContactID = function() {
	this._key = 0;
	this.features = new box2D_collision_Features();
	this.features._m_id = this;
};
$hxClasses["box2D.collision.B2ContactID"] = box2D_collision_B2ContactID;
box2D_collision_B2ContactID.__name__ = "box2D.collision.B2ContactID";
box2D_collision_B2ContactID.prototype = {
	set: function(id) {
		this.set_key(id._key);
	}
	,copy: function() {
		var id = new box2D_collision_B2ContactID();
		id.set_key(this.get_key());
		return id;
	}
	,get_key: function() {
		return this._key;
	}
	,set_key: function(value) {
		this._key = value;
		this.features._referenceEdge = this._key & 255;
		this.features._incidentEdge = (this._key & 65280) >> 8 & 255;
		this.features._incidentVertex = (this._key & 16711680) >> 16 & 255;
		this.features._flip = (this._key & -16777216) >> 24 & 255;
		return this._key;
	}
	,__class__: box2D_collision_B2ContactID
	,__properties__: {set_key:"set_key",get_key:"get_key"}
};
var box2D_collision_Features = function() {
	this._flip = 0;
	this._incidentVertex = 0;
	this._incidentEdge = 0;
	this._referenceEdge = 0;
};
$hxClasses["box2D.collision.Features"] = box2D_collision_Features;
box2D_collision_Features.__name__ = "box2D.collision.Features";
box2D_collision_Features.prototype = {
	get_referenceEdge: function() {
		return this._referenceEdge;
	}
	,set_referenceEdge: function(value) {
		this._referenceEdge = value;
		this._m_id._key = this._m_id._key & -256 | this._referenceEdge & 255;
		return value;
	}
	,get_incidentEdge: function() {
		return this._incidentEdge;
	}
	,set_incidentEdge: function(value) {
		this._incidentEdge = value;
		this._m_id._key = this._m_id._key & -65281 | this._incidentEdge << 8 & 65280;
		return value;
	}
	,get_incidentVertex: function() {
		return this._incidentVertex;
	}
	,set_incidentVertex: function(value) {
		this._incidentVertex = value;
		this._m_id._key = this._m_id._key & -16711681 | this._incidentVertex << 16 & 16711680;
		return value;
	}
	,get_flip: function() {
		return this._flip;
	}
	,set_flip: function(value) {
		this._flip = value;
		this._m_id._key = this._m_id._key & 16777215 | this._flip << 24 & -16777216;
		return value;
	}
	,__class__: box2D_collision_Features
	,__properties__: {set_flip:"set_flip",get_flip:"get_flip",set_incidentVertex:"set_incidentVertex",get_incidentVertex:"get_incidentVertex",set_incidentEdge:"set_incidentEdge",get_incidentEdge:"get_incidentEdge",set_referenceEdge:"set_referenceEdge",get_referenceEdge:"get_referenceEdge"}
};
var box2D_collision_B2Collision = function() { };
$hxClasses["box2D.collision.B2Collision"] = box2D_collision_B2Collision;
box2D_collision_B2Collision.__name__ = "box2D.collision.B2Collision";
box2D_collision_B2Collision.clipSegmentToLine = function(vOut,vIn,normal,offset) {
	var numOut = 0;
	var cv = vIn[0];
	var vIn0 = cv.v;
	cv = vIn[1];
	var vIn1 = cv.v;
	var distance0 = normal.x * vIn0.x + normal.y * vIn0.y - offset;
	var distance1 = normal.x * vIn1.x + normal.y * vIn1.y - offset;
	if(distance0 <= 0.0) {
		vOut[numOut++].set(vIn[0]);
	}
	if(distance1 <= 0.0) {
		vOut[numOut++].set(vIn[1]);
	}
	if(distance0 * distance1 < 0.0) {
		var interp = distance0 / (distance0 - distance1);
		cv = vOut[numOut];
		var tVec = cv.v;
		tVec.x = vIn0.x + interp * (vIn1.x - vIn0.x);
		tVec.y = vIn0.y + interp * (vIn1.y - vIn0.y);
		cv = vOut[numOut];
		var cv2;
		if(distance0 > 0.0) {
			cv2 = vIn[0];
			cv.id = cv2.id;
		} else {
			cv2 = vIn[1];
			cv.id = cv2.id;
		}
		++numOut;
	}
	return numOut;
};
box2D_collision_B2Collision.edgeSeparation = function(poly1,xf1,edge1,poly2,xf2) {
	var count1 = poly1.m_vertexCount;
	var vertices1 = poly1.m_vertices;
	var normals1 = poly1.m_normals;
	var count2 = poly2.m_vertexCount;
	var vertices2 = poly2.m_vertices;
	var tMat = xf1.R;
	var tVec = normals1[edge1];
	var normal1WorldX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
	var normal1WorldY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
	tMat = xf2.R;
	var normal1X = tMat.col1.x * normal1WorldX + tMat.col1.y * normal1WorldY;
	var normal1Y = tMat.col2.x * normal1WorldX + tMat.col2.y * normal1WorldY;
	var index = 0;
	var minDot = Number.MAX_VALUE;
	var _g = 0;
	var _g1 = count2;
	while(_g < _g1) {
		var i = _g++;
		tVec = vertices2[i];
		var dot = tVec.x * normal1X + tVec.y * normal1Y;
		if(dot < minDot) {
			minDot = dot;
			index = i;
		}
	}
	tVec = vertices1[edge1];
	tMat = xf1.R;
	var v1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var v1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tVec = vertices2[index];
	tMat = xf2.R;
	var v2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var v2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	v2X -= v1X;
	v2Y -= v1Y;
	var separation = v2X * normal1WorldX + v2Y * normal1WorldY;
	return separation;
};
box2D_collision_B2Collision.findMaxSeparation = function(edgeIndex,poly1,xf1,poly2,xf2) {
	var count1 = poly1.m_vertexCount;
	var normals1 = poly1.m_normals;
	var tMat = xf2.R;
	var tVec = poly2.m_centroid;
	var dX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var dY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tMat = xf1.R;
	tVec = poly1.m_centroid;
	dX -= xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	dY -= xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	var dLocal1X = dX * xf1.R.col1.x + dY * xf1.R.col1.y;
	var dLocal1Y = dX * xf1.R.col2.x + dY * xf1.R.col2.y;
	var edge = 0;
	var maxDot = -Number.MAX_VALUE;
	var _g = 0;
	var _g1 = count1;
	while(_g < _g1) {
		var i = _g++;
		tVec = normals1[i];
		var dot = tVec.x * dLocal1X + tVec.y * dLocal1Y;
		if(dot > maxDot) {
			maxDot = dot;
			edge = i;
		}
	}
	var s = box2D_collision_B2Collision.edgeSeparation(poly1,xf1,edge,poly2,xf2);
	var prevEdge = edge - 1 >= 0 ? edge - 1 : count1 - 1;
	var sPrev = box2D_collision_B2Collision.edgeSeparation(poly1,xf1,prevEdge,poly2,xf2);
	var nextEdge = edge + 1 < count1 ? edge + 1 : 0;
	var sNext = box2D_collision_B2Collision.edgeSeparation(poly1,xf1,nextEdge,poly2,xf2);
	var bestEdge;
	var bestSeparation;
	var increment;
	if(sPrev > s && sPrev > sNext) {
		increment = -1;
		bestEdge = prevEdge;
		bestSeparation = sPrev;
	} else if(sNext > s) {
		increment = 1;
		bestEdge = nextEdge;
		bestSeparation = sNext;
	} else {
		edgeIndex[0] = edge;
		return s;
	}
	while(true) {
		if(increment == -1) {
			edge = bestEdge - 1 >= 0 ? bestEdge - 1 : count1 - 1;
		} else {
			edge = bestEdge + 1 < count1 ? bestEdge + 1 : 0;
		}
		s = box2D_collision_B2Collision.edgeSeparation(poly1,xf1,edge,poly2,xf2);
		if(s > bestSeparation) {
			bestEdge = edge;
			bestSeparation = s;
		} else {
			break;
		}
	}
	edgeIndex[0] = bestEdge;
	return bestSeparation;
};
box2D_collision_B2Collision.findIncidentEdge = function(c,poly1,xf1,edge1,poly2,xf2) {
	var count1 = poly1.m_vertexCount;
	var normals1 = poly1.m_normals;
	var count2 = poly2.m_vertexCount;
	var vertices2 = poly2.m_vertices;
	var normals2 = poly2.m_normals;
	var tMat = xf1.R;
	var tVec = normals1[edge1];
	var normal1X = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
	var normal1Y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
	tMat = xf2.R;
	var tX = tMat.col1.x * normal1X + tMat.col1.y * normal1Y;
	normal1Y = tMat.col2.x * normal1X + tMat.col2.y * normal1Y;
	normal1X = tX;
	var index = 0;
	var minDot = Number.MAX_VALUE;
	var _g = 0;
	var _g1 = count2;
	while(_g < _g1) {
		var i = _g++;
		tVec = normals2[i];
		var dot = normal1X * tVec.x + normal1Y * tVec.y;
		if(dot < minDot) {
			minDot = dot;
			index = i;
		}
	}
	var i1 = index;
	var i2 = i1 + 1 < count2 ? i1 + 1 : 0;
	var tClip = c[0];
	tVec = vertices2[i1];
	tMat = xf2.R;
	tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tClip.id.features.set_referenceEdge(edge1);
	tClip.id.features.set_incidentEdge(i1);
	tClip.id.features.set_incidentVertex(0);
	tClip = c[1];
	tVec = vertices2[i2];
	tMat = xf2.R;
	tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tClip.id.features.set_referenceEdge(edge1);
	tClip.id.features.set_incidentEdge(i2);
	tClip.id.features.set_incidentVertex(1);
};
box2D_collision_B2Collision.makeClipPointVector = function() {
	var r = [];
	r[0] = new box2D_collision_ClipVertex();
	r[1] = new box2D_collision_ClipVertex();
	return r;
};
box2D_collision_B2Collision.collidePolygons = function(manifold,polyA,xfA,polyB,xfB) {
	var cv;
	manifold.m_pointCount = 0;
	var totalRadius = polyA.m_radius + polyB.m_radius;
	var edgeA = 0;
	box2D_collision_B2Collision.s_edgeAO[0] = edgeA;
	var separationA = box2D_collision_B2Collision.findMaxSeparation(box2D_collision_B2Collision.s_edgeAO,polyA,xfA,polyB,xfB);
	edgeA = box2D_collision_B2Collision.s_edgeAO[0];
	if(separationA > totalRadius) {
		return;
	}
	var edgeB = 0;
	box2D_collision_B2Collision.s_edgeBO[0] = edgeB;
	var separationB = box2D_collision_B2Collision.findMaxSeparation(box2D_collision_B2Collision.s_edgeBO,polyB,xfB,polyA,xfA);
	edgeB = box2D_collision_B2Collision.s_edgeBO[0];
	if(separationB > totalRadius) {
		return;
	}
	var poly1;
	var poly2;
	var xf1;
	var xf2;
	var edge1;
	var flip;
	var k_relativeTol = 0.98;
	var k_absoluteTol = 0.001;
	if(separationB > k_relativeTol * separationA + k_absoluteTol) {
		poly1 = polyB;
		poly2 = polyA;
		xf1 = xfB;
		xf2 = xfA;
		edge1 = edgeB;
		manifold.m_type = box2D_collision_B2ManifoldType.FACE_B;
		flip = 1;
	} else {
		poly1 = polyA;
		poly2 = polyB;
		xf1 = xfA;
		xf2 = xfB;
		edge1 = edgeA;
		manifold.m_type = box2D_collision_B2ManifoldType.FACE_A;
		flip = 0;
	}
	var incidentEdge = box2D_collision_B2Collision.s_incidentEdge;
	box2D_collision_B2Collision.findIncidentEdge(incidentEdge,poly1,xf1,edge1,poly2,xf2);
	var count1 = poly1.m_vertexCount;
	var vertices1 = poly1.m_vertices;
	var local_v11 = vertices1[edge1];
	var local_v12;
	if(edge1 + 1 < count1) {
		local_v12 = vertices1[edge1 + 1 | 0];
	} else {
		local_v12 = vertices1[0];
	}
	var localTangent = box2D_collision_B2Collision.s_localTangent;
	localTangent.set(local_v12.x - local_v11.x,local_v12.y - local_v11.y);
	localTangent.normalize();
	var localNormal = box2D_collision_B2Collision.s_localNormal;
	localNormal.x = localTangent.y;
	localNormal.y = -localTangent.x;
	var planePoint = box2D_collision_B2Collision.s_planePoint;
	planePoint.set(0.5 * (local_v11.x + local_v12.x),0.5 * (local_v11.y + local_v12.y));
	var tangent = box2D_collision_B2Collision.s_tangent;
	var tMat = xf1.R;
	tangent.x = tMat.col1.x * localTangent.x + tMat.col2.x * localTangent.y;
	tangent.y = tMat.col1.y * localTangent.x + tMat.col2.y * localTangent.y;
	var tangent2 = box2D_collision_B2Collision.s_tangent2;
	tangent2.x = -tangent.x;
	tangent2.y = -tangent.y;
	var normal = box2D_collision_B2Collision.s_normal;
	normal.x = tangent.y;
	normal.y = -tangent.x;
	var v11 = box2D_collision_B2Collision.s_v11;
	var v12 = box2D_collision_B2Collision.s_v12;
	v11.x = xf1.position.x + (tMat.col1.x * local_v11.x + tMat.col2.x * local_v11.y);
	v11.y = xf1.position.y + (tMat.col1.y * local_v11.x + tMat.col2.y * local_v11.y);
	v12.x = xf1.position.x + (tMat.col1.x * local_v12.x + tMat.col2.x * local_v12.y);
	v12.y = xf1.position.y + (tMat.col1.y * local_v12.x + tMat.col2.y * local_v12.y);
	var frontOffset = normal.x * v11.x + normal.y * v11.y;
	var sideOffset1 = -tangent.x * v11.x - tangent.y * v11.y + totalRadius;
	var sideOffset2 = tangent.x * v12.x + tangent.y * v12.y + totalRadius;
	var clipPoints1 = box2D_collision_B2Collision.s_clipPoints1;
	var clipPoints2 = box2D_collision_B2Collision.s_clipPoints2;
	var np = box2D_collision_B2Collision.clipSegmentToLine(clipPoints1,incidentEdge,tangent2,sideOffset1);
	if(np < 2) {
		return;
	}
	np = box2D_collision_B2Collision.clipSegmentToLine(clipPoints2,clipPoints1,tangent,sideOffset2);
	if(np < 2) {
		return;
	}
	manifold.m_localPlaneNormal.setV(localNormal);
	manifold.m_localPoint.setV(planePoint);
	var pointCount = 0;
	var _g = 0;
	var _g1 = box2D_common_B2Settings.b2_maxManifoldPoints;
	while(_g < _g1) {
		var i = _g++;
		cv = clipPoints2[i];
		var separation = normal.x * cv.v.x + normal.y * cv.v.y - frontOffset;
		if(separation <= totalRadius) {
			var cp = manifold.m_points[pointCount];
			tMat = xf2.R;
			var tX = cv.v.x - xf2.position.x;
			var tY = cv.v.y - xf2.position.y;
			cp.m_localPoint.x = tX * tMat.col1.x + tY * tMat.col1.y;
			cp.m_localPoint.y = tX * tMat.col2.x + tY * tMat.col2.y;
			cp.m_id.set(cv.id);
			cp.m_id.features.set_flip(flip);
			++pointCount;
		}
	}
	manifold.m_pointCount = pointCount;
};
box2D_collision_B2Collision.collideCircles = function(manifold,circle1,xf1,circle2,xf2) {
	manifold.m_pointCount = 0;
	var tMat = xf1.R;
	var tVec = circle1.m_p;
	var p1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var p1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	tMat = xf2.R;
	tVec = circle2.m_p;
	var p2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var p2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	var dX = p2X - p1X;
	var dY = p2Y - p1Y;
	var distSqr = dX * dX + dY * dY;
	var radius = circle1.m_radius + circle2.m_radius;
	if(distSqr > radius * radius) {
		return;
	}
	manifold.m_type = box2D_collision_B2ManifoldType.CIRCLES;
	manifold.m_localPoint.setV(circle1.m_p);
	manifold.m_localPlaneNormal.setZero();
	manifold.m_pointCount = 1;
	manifold.m_points[0].m_localPoint.setV(circle2.m_p);
	manifold.m_points[0].m_id.set_key(0);
};
box2D_collision_B2Collision.collidePolygonAndCircle = function(manifold,polygon,xf1,circle,xf2) {
	manifold.m_pointCount = 0;
	var tPoint;
	var positionX;
	var positionY;
	var tMat = xf2.R;
	var tVec = circle.m_p;
	var cX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
	var cY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	var dX = cX - xf1.position.x;
	var dY = cY - xf1.position.y;
	tMat = xf1.R;
	var cLocalX = dX * tMat.col1.x + dY * tMat.col1.y;
	var cLocalY = dX * tMat.col2.x + dY * tMat.col2.y;
	var dist;
	var normalIndex = 0;
	var separation = -Number.MAX_VALUE;
	var radius = polygon.m_radius + circle.m_radius;
	var vertexCount = polygon.m_vertexCount;
	var vertices = polygon.m_vertices;
	var normals = polygon.m_normals;
	var _g = 0;
	var _g1 = vertexCount;
	while(_g < _g1) {
		var i = _g++;
		tVec = vertices[i];
		dX = cLocalX - tVec.x;
		dY = cLocalY - tVec.y;
		tVec = normals[i];
		var s = tVec.x * dX + tVec.y * dY;
		if(s > radius) {
			return;
		}
		if(s > separation) {
			separation = s;
			normalIndex = i;
		}
	}
	var vertIndex1 = normalIndex;
	var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;
	var v1 = vertices[vertIndex1];
	var v2 = vertices[vertIndex2];
	if(separation < Number.MIN_VALUE) {
		manifold.m_pointCount = 1;
		manifold.m_type = box2D_collision_B2ManifoldType.FACE_A;
		manifold.m_localPlaneNormal.setV(normals[normalIndex]);
		manifold.m_localPoint.x = 0.5 * (v1.x + v2.x);
		manifold.m_localPoint.y = 0.5 * (v1.y + v2.y);
		manifold.m_points[0].m_localPoint.setV(circle.m_p);
		manifold.m_points[0].m_id.set_key(0);
		return;
	}
	var u1 = (cLocalX - v1.x) * (v2.x - v1.x) + (cLocalY - v1.y) * (v2.y - v1.y);
	var u2 = (cLocalX - v2.x) * (v1.x - v2.x) + (cLocalY - v2.y) * (v1.y - v2.y);
	if(u1 <= 0.0) {
		if((cLocalX - v1.x) * (cLocalX - v1.x) + (cLocalY - v1.y) * (cLocalY - v1.y) > radius * radius) {
			return;
		}
		manifold.m_pointCount = 1;
		manifold.m_type = box2D_collision_B2ManifoldType.FACE_A;
		manifold.m_localPlaneNormal.x = cLocalX - v1.x;
		manifold.m_localPlaneNormal.y = cLocalY - v1.y;
		manifold.m_localPlaneNormal.normalize();
		manifold.m_localPoint.setV(v1);
		manifold.m_points[0].m_localPoint.setV(circle.m_p);
		manifold.m_points[0].m_id.set_key(0);
	} else if(u2 <= 0) {
		if((cLocalX - v2.x) * (cLocalX - v2.x) + (cLocalY - v2.y) * (cLocalY - v2.y) > radius * radius) {
			return;
		}
		manifold.m_pointCount = 1;
		manifold.m_type = box2D_collision_B2ManifoldType.FACE_A;
		manifold.m_localPlaneNormal.x = cLocalX - v2.x;
		manifold.m_localPlaneNormal.y = cLocalY - v2.y;
		manifold.m_localPlaneNormal.normalize();
		manifold.m_localPoint.setV(v2);
		manifold.m_points[0].m_localPoint.setV(circle.m_p);
		manifold.m_points[0].m_id.set_key(0);
	} else {
		var faceCenterX = 0.5 * (v1.x + v2.x);
		var faceCenterY = 0.5 * (v1.y + v2.y);
		separation = (cLocalX - faceCenterX) * normals[vertIndex1].x + (cLocalY - faceCenterY) * normals[vertIndex1].y;
		if(separation > radius) {
			return;
		}
		manifold.m_pointCount = 1;
		manifold.m_type = box2D_collision_B2ManifoldType.FACE_A;
		manifold.m_localPlaneNormal.x = normals[vertIndex1].x;
		manifold.m_localPlaneNormal.y = normals[vertIndex1].y;
		manifold.m_localPlaneNormal.normalize();
		manifold.m_localPoint.set(faceCenterX,faceCenterY);
		manifold.m_points[0].m_localPoint.setV(circle.m_p);
		manifold.m_points[0].m_id.set_key(0);
	}
};
box2D_collision_B2Collision.testOverlap = function(a,b) {
	var t1 = b.lowerBound;
	var t2 = a.upperBound;
	var d1X = t1.x - t2.x;
	var d1Y = t1.y - t2.y;
	t1 = a.lowerBound;
	t2 = b.upperBound;
	var d2X = t1.x - t2.x;
	var d2Y = t1.y - t2.y;
	if(d1X > 0.0 || d1Y > 0.0) {
		return false;
	}
	if(d2X > 0.0 || d2Y > 0.0) {
		return false;
	}
	return true;
};
var box2D_collision_B2ContactPoint = function() {
	this.position = new box2D_common_math_B2Vec2();
	this.velocity = new box2D_common_math_B2Vec2();
	this.normal = new box2D_common_math_B2Vec2();
	this.id = new box2D_collision_B2ContactID();
};
$hxClasses["box2D.collision.B2ContactPoint"] = box2D_collision_B2ContactPoint;
box2D_collision_B2ContactPoint.__name__ = "box2D.collision.B2ContactPoint";
box2D_collision_B2ContactPoint.prototype = {
	__class__: box2D_collision_B2ContactPoint
};
var box2D_collision_B2Simplex = function() {
	this.m_count = 0;
	this.m_v1 = new box2D_collision_B2SimplexVertex();
	this.m_v2 = new box2D_collision_B2SimplexVertex();
	this.m_v3 = new box2D_collision_B2SimplexVertex();
	this.m_vertices = [];
	this.m_vertices[0] = this.m_v1;
	this.m_vertices[1] = this.m_v2;
	this.m_vertices[2] = this.m_v3;
};
$hxClasses["box2D.collision.B2Simplex"] = box2D_collision_B2Simplex;
box2D_collision_B2Simplex.__name__ = "box2D.collision.B2Simplex";
box2D_collision_B2Simplex.prototype = {
	readCache: function(cache,proxyA,transformA,proxyB,transformB) {
		box2D_common_B2Settings.b2Assert(0 <= cache.count && cache.count <= 3);
		var wALocal;
		var wBLocal;
		this.m_count = cache.count;
		var vertices = this.m_vertices;
		var v;
		var _g = 0;
		var _g1 = this.m_count;
		while(_g < _g1) {
			var i = _g++;
			v = vertices[i];
			v.indexA = cache.indexA[i];
			v.indexB = cache.indexB[i];
			wALocal = proxyA.getVertex(v.indexA);
			wBLocal = proxyB.getVertex(v.indexB);
			v.wA = box2D_common_math_B2Math.mulX(transformA,wALocal);
			v.wB = box2D_common_math_B2Math.mulX(transformB,wBLocal);
			v.w = box2D_common_math_B2Math.subtractVV(v.wB,v.wA);
			v.a = 0;
		}
		if(this.m_count > 1) {
			var metric1 = cache.metric;
			var metric2 = this.getMetric();
			if(metric2 < .5 * metric1 || 2.0 * metric1 < metric2 || metric2 < Number.MIN_VALUE) {
				this.m_count = 0;
			}
		}
		if(this.m_count == 0) {
			v = vertices[0];
			v.indexA = 0;
			v.indexB = 0;
			wALocal = proxyA.getVertex(0);
			wBLocal = proxyB.getVertex(0);
			v.wA = box2D_common_math_B2Math.mulX(transformA,wALocal);
			v.wB = box2D_common_math_B2Math.mulX(transformB,wBLocal);
			v.w = box2D_common_math_B2Math.subtractVV(v.wB,v.wA);
			this.m_count = 1;
		}
	}
	,writeCache: function(cache) {
		cache.metric = this.getMetric();
		cache.count = this.m_count | 0;
		var vertices = this.m_vertices;
		var _g = 0;
		var _g1 = this.m_count;
		while(_g < _g1) {
			var i = _g++;
			cache.indexA[i] = vertices[i].indexA | 0;
			cache.indexB[i] = vertices[i].indexB | 0;
		}
	}
	,getSearchDirection: function() {
		switch(this.m_count) {
		case 1:
			return this.m_v1.w.getNegative();
		case 2:
			var e12 = box2D_common_math_B2Math.subtractVV(this.m_v2.w,this.m_v1.w);
			var sgn = box2D_common_math_B2Math.crossVV(e12,this.m_v1.w.getNegative());
			if(sgn > 0.0) {
				return box2D_common_math_B2Math.crossFV(1.0,e12);
			} else {
				return box2D_common_math_B2Math.crossVF(e12,1.0);
			}
			break;
		default:
			box2D_common_B2Settings.b2Assert(false);
			return new box2D_common_math_B2Vec2();
		}
	}
	,getClosestPoint: function() {
		switch(this.m_count) {
		case 0:
			box2D_common_B2Settings.b2Assert(false);
			return new box2D_common_math_B2Vec2();
		case 1:
			return this.m_v1.w;
		case 2:
			return new box2D_common_math_B2Vec2(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x,this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
		default:
			box2D_common_B2Settings.b2Assert(false);
			return new box2D_common_math_B2Vec2();
		}
	}
	,getWitnessPoints: function(pA,pB) {
		switch(this.m_count) {
		case 0:
			box2D_common_B2Settings.b2Assert(false);
			break;
		case 1:
			pA.setV(this.m_v1.wA);
			pB.setV(this.m_v1.wB);
			break;
		case 2:
			pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
			pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
			pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
			pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
			break;
		case 3:
			pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
			pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
			break;
		default:
			box2D_common_B2Settings.b2Assert(false);
		}
	}
	,getMetric: function() {
		switch(this.m_count) {
		case 0:
			box2D_common_B2Settings.b2Assert(false);
			return 0.0;
		case 1:
			return 0.0;
		case 2:
			return box2D_common_math_B2Math.subtractVV(this.m_v1.w,this.m_v2.w).length();
		case 3:
			return box2D_common_math_B2Math.crossVV(box2D_common_math_B2Math.subtractVV(this.m_v2.w,this.m_v1.w),box2D_common_math_B2Math.subtractVV(this.m_v3.w,this.m_v1.w));
		default:
			box2D_common_B2Settings.b2Assert(false);
			return 0.0;
		}
	}
	,solve2: function() {
		var w1 = this.m_v1.w;
		var w2 = this.m_v2.w;
		var e12 = box2D_common_math_B2Math.subtractVV(w2,w1);
		var d12_2 = -(w1.x * e12.x + w1.y * e12.y);
		if(d12_2 <= 0.0) {
			this.m_v1.a = 1.0;
			this.m_count = 1;
			return;
		}
		var d12_1 = w2.x * e12.x + w2.y * e12.y;
		if(d12_1 <= 0.0) {
			this.m_v2.a = 1.0;
			this.m_count = 1;
			this.m_v1.set(this.m_v2);
			return;
		}
		var inv_d12 = 1.0 / (d12_1 + d12_2);
		this.m_v1.a = d12_1 * inv_d12;
		this.m_v2.a = d12_2 * inv_d12;
		this.m_count = 2;
	}
	,solve3: function() {
		var w1 = this.m_v1.w;
		var w2 = this.m_v2.w;
		var w3 = this.m_v3.w;
		var e12 = box2D_common_math_B2Math.subtractVV(w2,w1);
		var w1e12 = box2D_common_math_B2Math.dot(w1,e12);
		var w2e12 = box2D_common_math_B2Math.dot(w2,e12);
		var d12_1 = w2e12;
		var d12_2 = -w1e12;
		var e13 = box2D_common_math_B2Math.subtractVV(w3,w1);
		var w1e13 = box2D_common_math_B2Math.dot(w1,e13);
		var w3e13 = box2D_common_math_B2Math.dot(w3,e13);
		var d13_1 = w3e13;
		var d13_2 = -w1e13;
		var e23 = box2D_common_math_B2Math.subtractVV(w3,w2);
		var w2e23 = box2D_common_math_B2Math.dot(w2,e23);
		var w3e23 = box2D_common_math_B2Math.dot(w3,e23);
		var d23_1 = w3e23;
		var d23_2 = -w2e23;
		var n123 = box2D_common_math_B2Math.crossVV(e12,e13);
		var d123_1 = n123 * box2D_common_math_B2Math.crossVV(w2,w3);
		var d123_2 = n123 * box2D_common_math_B2Math.crossVV(w3,w1);
		var d123_3 = n123 * box2D_common_math_B2Math.crossVV(w1,w2);
		if(d12_2 <= 0.0 && d13_2 <= 0.0) {
			this.m_v1.a = 1.0;
			this.m_count = 1;
			return;
		}
		if(d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {
			var inv_d12 = 1.0 / (d12_1 + d12_2);
			this.m_v1.a = d12_1 * inv_d12;
			this.m_v2.a = d12_2 * inv_d12;
			this.m_count = 2;
			return;
		}
		if(d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {
			var inv_d13 = 1.0 / (d13_1 + d13_2);
			this.m_v1.a = d13_1 * inv_d13;
			this.m_v3.a = d13_2 * inv_d13;
			this.m_count = 2;
			this.m_v2.set(this.m_v3);
			return;
		}
		if(d12_1 <= 0.0 && d23_2 <= 0.0) {
			this.m_v2.a = 1.0;
			this.m_count = 1;
			this.m_v1.set(this.m_v2);
			return;
		}
		if(d13_1 <= 0.0 && d23_1 <= 0.0) {
			this.m_v3.a = 1.0;
			this.m_count = 1;
			this.m_v1.set(this.m_v3);
			return;
		}
		if(d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {
			var inv_d23 = 1.0 / (d23_1 + d23_2);
			this.m_v2.a = d23_1 * inv_d23;
			this.m_v3.a = d23_2 * inv_d23;
			this.m_count = 2;
			this.m_v1.set(this.m_v3);
			return;
		}
		var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);
		this.m_v1.a = d123_1 * inv_d123;
		this.m_v2.a = d123_2 * inv_d123;
		this.m_v3.a = d123_3 * inv_d123;
		this.m_count = 3;
	}
	,__class__: box2D_collision_B2Simplex
};
var box2D_collision_B2SimplexVertex = function() {
	this.indexB = 0;
	this.indexA = 0;
	this.a = 0;
};
$hxClasses["box2D.collision.B2SimplexVertex"] = box2D_collision_B2SimplexVertex;
box2D_collision_B2SimplexVertex.__name__ = "box2D.collision.B2SimplexVertex";
box2D_collision_B2SimplexVertex.prototype = {
	set: function(other) {
		this.wA.setV(other.wA);
		this.wB.setV(other.wB);
		this.w.setV(other.w);
		this.a = other.a;
		this.indexA = other.indexA;
		this.indexB = other.indexB;
	}
	,__class__: box2D_collision_B2SimplexVertex
};
var box2D_collision_B2Distance = function() { };
$hxClasses["box2D.collision.B2Distance"] = box2D_collision_B2Distance;
box2D_collision_B2Distance.__name__ = "box2D.collision.B2Distance";
box2D_collision_B2Distance.distance = function(output,cache,input) {
	++box2D_collision_B2Distance.b2_gjkCalls;
	var proxyA = input.proxyA;
	var proxyB = input.proxyB;
	var transformA = input.transformA;
	var transformB = input.transformB;
	var simplex = box2D_collision_B2Distance.s_simplex;
	simplex.readCache(cache,proxyA,transformA,proxyB,transformB);
	var vertices = simplex.m_vertices;
	var k_maxIters = 20;
	var saveA = box2D_collision_B2Distance.s_saveA;
	var saveB = box2D_collision_B2Distance.s_saveB;
	var saveCount = 0;
	var closestPoint = simplex.getClosestPoint();
	var distanceSqr1 = closestPoint.lengthSquared();
	var distanceSqr2 = distanceSqr1;
	var i;
	var p;
	var iter = 0;
	while(iter < k_maxIters) {
		saveCount = simplex.m_count;
		var _g = 0;
		var _g1 = saveCount;
		while(_g < _g1) {
			var i1 = _g++;
			saveA[i1] = vertices[i1].indexA;
			saveB[i1] = vertices[i1].indexB;
		}
		switch(simplex.m_count) {
		case 1:
			break;
		case 2:
			simplex.solve2();
			break;
		case 3:
			simplex.solve3();
			break;
		default:
			box2D_common_B2Settings.b2Assert(false);
		}
		if(simplex.m_count == 3) {
			break;
		}
		p = simplex.getClosestPoint();
		distanceSqr2 = p.lengthSquared();
		var tmp = distanceSqr2 > distanceSqr1;
		distanceSqr1 = distanceSqr2;
		var d = simplex.getSearchDirection();
		if(d.lengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE) {
			break;
		}
		var vertex = vertices[simplex.m_count];
		vertex.indexA = proxyA.getSupport(box2D_common_math_B2Math.mulTMV(transformA.R,d.getNegative())) | 0;
		vertex.wA = box2D_common_math_B2Math.mulX(transformA,proxyA.getVertex(vertex.indexA));
		vertex.indexB = proxyB.getSupport(box2D_common_math_B2Math.mulTMV(transformB.R,d)) | 0;
		vertex.wB = box2D_common_math_B2Math.mulX(transformB,proxyB.getVertex(vertex.indexB));
		vertex.w = box2D_common_math_B2Math.subtractVV(vertex.wB,vertex.wA);
		++iter;
		++box2D_collision_B2Distance.b2_gjkIters;
		var duplicate = false;
		var _g3 = 0;
		var _g4 = saveCount;
		while(_g3 < _g4) {
			var i2 = _g3++;
			if(vertex.indexA == saveA[i2] && vertex.indexB == saveB[i2]) {
				duplicate = true;
				break;
			}
		}
		if(duplicate) {
			break;
		}
		++simplex.m_count;
	}
	box2D_collision_B2Distance.b2_gjkMaxIters = box2D_common_math_B2Math.max(box2D_collision_B2Distance.b2_gjkMaxIters,iter) | 0;
	simplex.getWitnessPoints(output.pointA,output.pointB);
	output.distance = box2D_common_math_B2Math.subtractVV(output.pointA,output.pointB).length();
	output.iterations = iter;
	simplex.writeCache(cache);
	if(input.useRadii) {
		var rA = proxyA.m_radius;
		var rB = proxyB.m_radius;
		if(output.distance > rA + rB && output.distance > Number.MIN_VALUE) {
			output.distance -= rA + rB;
			var normal = box2D_common_math_B2Math.subtractVV(output.pointB,output.pointA);
			normal.normalize();
			output.pointA.x += rA * normal.x;
			output.pointA.y += rA * normal.y;
			output.pointB.x -= rB * normal.x;
			output.pointB.y -= rB * normal.y;
		} else {
			p = new box2D_common_math_B2Vec2();
			p.x = .5 * (output.pointA.x + output.pointB.x);
			p.y = .5 * (output.pointA.y + output.pointB.y);
			output.pointA.x = output.pointB.x = p.x;
			output.pointA.y = output.pointB.y = p.y;
			output.distance = 0.0;
		}
	}
};
var box2D_collision_B2DistanceInput = function() {
};
$hxClasses["box2D.collision.B2DistanceInput"] = box2D_collision_B2DistanceInput;
box2D_collision_B2DistanceInput.__name__ = "box2D.collision.B2DistanceInput";
box2D_collision_B2DistanceInput.prototype = {
	__class__: box2D_collision_B2DistanceInput
};
var box2D_collision_B2DistanceOutput = function() {
	this.pointA = new box2D_common_math_B2Vec2();
	this.pointB = new box2D_common_math_B2Vec2();
};
$hxClasses["box2D.collision.B2DistanceOutput"] = box2D_collision_B2DistanceOutput;
box2D_collision_B2DistanceOutput.__name__ = "box2D.collision.B2DistanceOutput";
box2D_collision_B2DistanceOutput.prototype = {
	__class__: box2D_collision_B2DistanceOutput
};
var box2D_collision_B2DistanceProxy = function() {
	this.m_radius = 0;
	this.m_count = 0;
	this.m_vertices = [];
};
$hxClasses["box2D.collision.B2DistanceProxy"] = box2D_collision_B2DistanceProxy;
box2D_collision_B2DistanceProxy.__name__ = "box2D.collision.B2DistanceProxy";
box2D_collision_B2DistanceProxy.prototype = {
	set: function(shape) {
		switch(shape.getType()) {
		case 1:
			var circle = js_Boot.__cast(shape , box2D_collision_shapes_B2CircleShape);
			this.m_vertices = [];
			this.m_vertices[0] = circle.m_p;
			this.m_count = 1;
			this.m_radius = circle.m_radius;
			break;
		case 2:
			var polygon = js_Boot.__cast(shape , box2D_collision_shapes_B2PolygonShape);
			this.m_vertices = polygon.m_vertices;
			this.m_count = polygon.m_vertexCount;
			this.m_radius = polygon.m_radius;
			break;
		default:
			box2D_common_B2Settings.b2Assert(false);
		}
	}
	,getSupport: function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		var _g = 1;
		var _g1 = this.m_count;
		while(_g < _g1) {
			var i = _g++;
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if(value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return bestIndex;
	}
	,getSupportVertex: function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		var _g = 1;
		var _g1 = this.m_count;
		while(_g < _g1) {
			var i = _g++;
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if(value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return this.m_vertices[bestIndex];
	}
	,getVertexCount: function() {
		return this.m_count;
	}
	,getVertex: function(index) {
		box2D_common_B2Settings.b2Assert(0 <= index && index < this.m_count);
		return this.m_vertices[index];
	}
	,__class__: box2D_collision_B2DistanceProxy
};
var box2D_collision_B2DynamicTree = function() {
	this.m_root = null;
	this.m_freeList = null;
	this.m_path = 0;
	this.m_insertionCount = 0;
};
$hxClasses["box2D.collision.B2DynamicTree"] = box2D_collision_B2DynamicTree;
box2D_collision_B2DynamicTree.__name__ = "box2D.collision.B2DynamicTree";
box2D_collision_B2DynamicTree.prototype = {
	createProxy: function(aabb,userData) {
		var node = this.allocateNode();
		var extendX = box2D_common_B2Settings.b2_aabbExtension;
		var extendY = box2D_common_B2Settings.b2_aabbExtension;
		node.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
		node.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
		node.aabb.upperBound.x = aabb.upperBound.x + extendX;
		node.aabb.upperBound.y = aabb.upperBound.y + extendY;
		node.userData = userData;
		this.insertLeaf(node);
		return node;
	}
	,destroyProxy: function(proxy) {
		this.removeLeaf(proxy);
		this.freeNode(proxy);
	}
	,moveProxy: function(proxy,aabb,displacement) {
		box2D_common_B2Settings.b2Assert(proxy.isLeaf());
		if(proxy.aabb.contains(aabb)) {
			return false;
		}
		this.removeLeaf(proxy);
		var extendX = box2D_common_B2Settings.b2_aabbExtension + box2D_common_B2Settings.b2_aabbMultiplier * (displacement.x > 0 ? displacement.x : -displacement.x);
		var extendY = box2D_common_B2Settings.b2_aabbExtension + box2D_common_B2Settings.b2_aabbMultiplier * (displacement.y > 0 ? displacement.y : -displacement.y);
		proxy.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
		proxy.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
		proxy.aabb.upperBound.x = aabb.upperBound.x + extendX;
		proxy.aabb.upperBound.y = aabb.upperBound.y + extendY;
		this.insertLeaf(proxy);
		return true;
	}
	,rebalance: function(iterations) {
		if(this.m_root == null) {
			return;
		}
		var _g = 0;
		var _g1 = iterations;
		while(_g < _g1) {
			var i = _g++;
			var node = this.m_root;
			var bit = 0;
			while(node.isLeaf() == false) {
				node = (this.m_path >> bit & 1) != 0 ? node.child2 : node.child1;
				bit = bit + 1 & 31;
			}
			++this.m_path;
			this.removeLeaf(node);
			this.insertLeaf(node);
		}
	}
	,getFatAABB: function(proxy) {
		return proxy.aabb;
	}
	,getUserData: function(proxy) {
		return proxy.userData;
	}
	,query: function(callbackMethod,aabb) {
		if(this.m_root == null) {
			return;
		}
		var stack = [];
		var count = 0;
		stack[count++] = this.m_root;
		while(count > 0) {
			var node = stack[--count];
			if(node.aabb.testOverlap(aabb)) {
				if(node.isLeaf()) {
					var proceed = callbackMethod(node);
					if(!proceed) {
						return;
					}
				} else {
					stack[count++] = node.child1;
					stack[count++] = node.child2;
				}
			}
		}
	}
	,rayCast: function(callbackMethod,input) {
		if(this.m_root == null) {
			return;
		}
		var p1 = input.p1;
		var p2 = input.p2;
		var r = box2D_common_math_B2Math.subtractVV(p1,p2);
		r.normalize();
		var v = box2D_common_math_B2Math.crossFV(1.0,r);
		var abs_v = box2D_common_math_B2Math.absV(v);
		var maxFraction = input.maxFraction;
		var segmentAABB = new box2D_collision_B2AABB();
		var tX;
		var tY;
		tX = p1.x + maxFraction * (p2.x - p1.x);
		tY = p1.y + maxFraction * (p2.y - p1.y);
		segmentAABB.lowerBound.x = Math.min(p1.x,tX);
		segmentAABB.lowerBound.y = Math.min(p1.y,tY);
		segmentAABB.upperBound.x = Math.max(p1.x,tX);
		segmentAABB.upperBound.y = Math.max(p1.y,tY);
		var stack = [];
		var count = 0;
		stack[count++] = this.m_root;
		while(count > 0) {
			var node = stack[--count];
			if(node.aabb.testOverlap(segmentAABB) == false) {
				continue;
			}
			var c = node.aabb.getCenter();
			var h = node.aabb.getExtents();
			var separation = Math.abs(v.x * (p1.x - c.x) + v.y * (p1.y - c.y)) - abs_v.x * h.x - abs_v.y * h.y;
			if(separation > 0.0) {
				continue;
			}
			if(node.isLeaf()) {
				var subInput = new box2D_collision_B2RayCastInput();
				subInput.p1 = input.p1;
				subInput.p2 = input.p2;
				subInput.maxFraction = input.maxFraction;
				maxFraction = callbackMethod(subInput,node);
				if(maxFraction == 0.0) {
					return;
				}
				tX = p1.x + maxFraction * (p2.x - p1.x);
				tY = p1.y + maxFraction * (p2.y - p1.y);
				segmentAABB.lowerBound.x = Math.min(p1.x,tX);
				segmentAABB.lowerBound.y = Math.min(p1.y,tY);
				segmentAABB.upperBound.x = Math.max(p1.x,tX);
				segmentAABB.upperBound.y = Math.max(p1.y,tY);
			} else {
				stack[count++] = node.child1;
				stack[count++] = node.child2;
			}
		}
	}
	,allocateNode: function() {
		if(this.m_freeList != null) {
			var node = this.m_freeList;
			this.m_freeList = node.parent;
			node.parent = null;
			node.child1 = null;
			node.child2 = null;
			return node;
		}
		return new box2D_collision_B2DynamicTreeNode();
	}
	,freeNode: function(node) {
		node.parent = this.m_freeList;
		this.m_freeList = node;
	}
	,insertLeaf: function(leaf) {
		++this.m_insertionCount;
		if(this.m_root == null) {
			this.m_root = leaf;
			this.m_root.parent = null;
			return;
		}
		var center = leaf.aabb.getCenter();
		var sibling = this.m_root;
		if(sibling.isLeaf() == false) {
			while(true) {
				var child1 = sibling.child1;
				var child2 = sibling.child2;
				var norm1 = Math.abs((child1.aabb.lowerBound.x + child1.aabb.upperBound.x) / 2 - center.x) + Math.abs((child1.aabb.lowerBound.y + child1.aabb.upperBound.y) / 2 - center.y);
				var norm2 = Math.abs((child2.aabb.lowerBound.x + child2.aabb.upperBound.x) / 2 - center.x) + Math.abs((child2.aabb.lowerBound.y + child2.aabb.upperBound.y) / 2 - center.y);
				if(norm1 < norm2) {
					sibling = child1;
				} else {
					sibling = child2;
				}
				if(!(sibling.isLeaf() == false)) {
					break;
				}
			}
		}
		var node1 = sibling.parent;
		var node2 = this.allocateNode();
		node2.parent = node1;
		node2.userData = null;
		node2.aabb.combine(leaf.aabb,sibling.aabb);
		if(node1 != null) {
			if(sibling.parent.child1 == sibling) {
				node1.child1 = node2;
			} else {
				node1.child2 = node2;
			}
			node2.child1 = sibling;
			node2.child2 = leaf;
			sibling.parent = node2;
			leaf.parent = node2;
			while(!node1.aabb.contains(node2.aabb)) {
				node1.aabb.combine(node1.child1.aabb,node1.child2.aabb);
				node2 = node1;
				node1 = node1.parent;
				if(!(node1 != null)) {
					break;
				}
			}
		} else {
			node2.child1 = sibling;
			node2.child2 = leaf;
			sibling.parent = node2;
			leaf.parent = node2;
			this.m_root = node2;
		}
	}
	,removeLeaf: function(leaf) {
		if(leaf == this.m_root) {
			this.m_root = null;
			return;
		}
		var node2 = leaf.parent;
		var node1 = node2.parent;
		var sibling;
		if(node2.child1 == leaf) {
			sibling = node2.child2;
		} else {
			sibling = node2.child1;
		}
		if(node1 != null) {
			if(node1.child1 == node2) {
				node1.child1 = sibling;
			} else {
				node1.child2 = sibling;
			}
			sibling.parent = node1;
			this.freeNode(node2);
			while(node1 != null) {
				var oldAABB = node1.aabb;
				node1.aabb = new box2D_collision_B2AABB();
				node1.aabb.combine(node1.child1.aabb,node1.child2.aabb);
				if(oldAABB.contains(node1.aabb)) {
					break;
				}
				node1 = node1.parent;
			}
		} else {
			this.m_root = sibling;
			sibling.parent = null;
			this.freeNode(node2);
		}
	}
	,__class__: box2D_collision_B2DynamicTree
};
var box2D_collision_IBroadPhase = function() { };
$hxClasses["box2D.collision.IBroadPhase"] = box2D_collision_IBroadPhase;
box2D_collision_IBroadPhase.__name__ = "box2D.collision.IBroadPhase";
box2D_collision_IBroadPhase.__isInterface__ = true;
box2D_collision_IBroadPhase.prototype = {
	__class__: box2D_collision_IBroadPhase
};
var box2D_collision_B2DynamicTreeBroadPhase = function() {
	this.m_tree = new box2D_collision_B2DynamicTree();
	this.m_moveBuffer = [];
	this.m_pairBuffer = [];
	this.m_pairCount = 0;
	this.m_proxyCount = 0;
};
$hxClasses["box2D.collision.B2DynamicTreeBroadPhase"] = box2D_collision_B2DynamicTreeBroadPhase;
box2D_collision_B2DynamicTreeBroadPhase.__name__ = "box2D.collision.B2DynamicTreeBroadPhase";
box2D_collision_B2DynamicTreeBroadPhase.__interfaces__ = [box2D_collision_IBroadPhase];
box2D_collision_B2DynamicTreeBroadPhase.prototype = {
	createProxy: function(aabb,userData) {
		var proxy = this.m_tree.createProxy(aabb,userData);
		++this.m_proxyCount;
		this.bufferMove(proxy);
		return proxy;
	}
	,destroyProxy: function(proxy) {
		this.unBufferMove(proxy);
		--this.m_proxyCount;
		this.m_tree.destroyProxy(proxy);
	}
	,moveProxy: function(proxy,aabb,displacement) {
		var buffer = this.m_tree.moveProxy(proxy,aabb,displacement);
		if(buffer) {
			this.bufferMove(proxy);
		}
	}
	,testOverlap: function(proxyA,proxyB) {
		var aabbA = this.m_tree.getFatAABB(proxyA);
		var aabbB = this.m_tree.getFatAABB(proxyB);
		return aabbA.testOverlap(aabbB);
	}
	,getUserData: function(proxy) {
		return this.m_tree.getUserData(proxy);
	}
	,getFatAABB: function(proxy) {
		return this.m_tree.getFatAABB(proxy);
	}
	,getProxyCount: function() {
		return this.m_proxyCount;
	}
	,updatePairsQueryCallback: function(proxy) {
		if(proxy == this.m_queryProxy) {
			return true;
		}
		if(this.m_pairCount == this.m_pairBuffer.length) {
			this.m_pairBuffer[this.m_pairCount] = new box2D_collision_B2DynamicTreePair();
		}
		var pair = this.m_pairBuffer[this.m_pairCount];
		if(proxy.id < this.m_queryProxy.id) {
			pair.proxyA = proxy;
			pair.proxyB = this.m_queryProxy;
		} else {
			pair.proxyA = this.m_queryProxy;
			pair.proxyB = proxy;
		}
		++this.m_pairCount;
		return true;
	}
	,updatePairs: function(callbackMethod) {
		this.m_pairCount = 0;
		var _g = 0;
		var _g1 = this.m_moveBuffer;
		while(_g < _g1.length) {
			var queryProxy = _g1[_g];
			++_g;
			this.m_queryProxy = queryProxy;
			var fatAABB = this.m_tree.getFatAABB(queryProxy);
			this.m_tree.query($bind(this,this.updatePairsQueryCallback),fatAABB);
		}
		this.m_moveBuffer = [];
		var pairing = true;
		var i = 0;
		while(pairing) if(i >= this.m_pairCount) {
			pairing = false;
		} else {
			var primaryPair = this.m_pairBuffer[i];
			var userDataA = this.m_tree.getUserData(primaryPair.proxyA);
			var userDataB = this.m_tree.getUserData(primaryPair.proxyB);
			callbackMethod(userDataA,userDataB);
			++i;
			while(i < this.m_pairCount) {
				var pair = this.m_pairBuffer[i];
				if(pair.proxyA != primaryPair.proxyA || pair.proxyB != primaryPair.proxyB) {
					break;
				}
				++i;
			}
		}
	}
	,query: function(callbackMethod,aabb) {
		this.m_tree.query(callbackMethod,aabb);
	}
	,rayCast: function(callbackMethod,input) {
		this.m_tree.rayCast(callbackMethod,input);
	}
	,validate: function() {
	}
	,rebalance: function(iterations) {
		this.m_tree.rebalance(iterations);
	}
	,bufferMove: function(proxy) {
		this.m_moveBuffer[this.m_moveBuffer.length] = proxy;
	}
	,unBufferMove: function(proxy) {
		HxOverrides.remove(this.m_moveBuffer,proxy);
	}
	,comparePairs: function(pair1,pair2) {
		return 0;
	}
	,__class__: box2D_collision_B2DynamicTreeBroadPhase
};
var box2D_collision_B2DynamicTreeNode = function() {
	this.aabb = new box2D_collision_B2AABB();
	this.id = box2D_collision_B2DynamicTreeNode.currentID++;
};
$hxClasses["box2D.collision.B2DynamicTreeNode"] = box2D_collision_B2DynamicTreeNode;
box2D_collision_B2DynamicTreeNode.__name__ = "box2D.collision.B2DynamicTreeNode";
box2D_collision_B2DynamicTreeNode.prototype = {
	isLeaf: function() {
		return this.child1 == null;
	}
	,__class__: box2D_collision_B2DynamicTreeNode
};
var box2D_collision_B2DynamicTreePair = function() {
};
$hxClasses["box2D.collision.B2DynamicTreePair"] = box2D_collision_B2DynamicTreePair;
box2D_collision_B2DynamicTreePair.__name__ = "box2D.collision.B2DynamicTreePair";
box2D_collision_B2DynamicTreePair.prototype = {
	__class__: box2D_collision_B2DynamicTreePair
};
var box2D_collision_B2Manifold = function() {
	this.m_pointCount = 0;
	this.m_points = [];
	var _g = 0;
	var _g1 = box2D_common_B2Settings.b2_maxManifoldPoints;
	while(_g < _g1) {
		var i = _g++;
		this.m_points[i] = new box2D_collision_B2ManifoldPoint();
	}
	this.m_localPlaneNormal = new box2D_common_math_B2Vec2();
	this.m_localPoint = new box2D_common_math_B2Vec2();
};
$hxClasses["box2D.collision.B2Manifold"] = box2D_collision_B2Manifold;
box2D_collision_B2Manifold.__name__ = "box2D.collision.B2Manifold";
box2D_collision_B2Manifold.prototype = {
	reset: function() {
		var _g = 0;
		var _g1 = box2D_common_B2Settings.b2_maxManifoldPoints;
		while(_g < _g1) {
			var i = _g++;
			this.m_points[i].reset();
		}
		this.m_localPlaneNormal.setZero();
		this.m_localPoint.setZero();
		this.m_type = box2D_collision_B2ManifoldType.CIRCLES;
		this.m_pointCount = 0;
	}
	,set: function(m) {
		this.m_pointCount = m.m_pointCount;
		var _g = 0;
		var _g1 = box2D_common_B2Settings.b2_maxManifoldPoints;
		while(_g < _g1) {
			var i = _g++;
			this.m_points[i].set(m.m_points[i]);
		}
		this.m_localPlaneNormal.setV(m.m_localPlaneNormal);
		this.m_localPoint.setV(m.m_localPoint);
		this.m_type = m.m_type;
	}
	,copy: function() {
		var copy = new box2D_collision_B2Manifold();
		copy.set(this);
		return copy;
	}
	,__class__: box2D_collision_B2Manifold
};
var box2D_collision_B2ManifoldPoint = function() {
	this.m_localPoint = new box2D_common_math_B2Vec2();
	this.m_id = new box2D_collision_B2ContactID();
	this.reset();
};
$hxClasses["box2D.collision.B2ManifoldPoint"] = box2D_collision_B2ManifoldPoint;
box2D_collision_B2ManifoldPoint.__name__ = "box2D.collision.B2ManifoldPoint";
box2D_collision_B2ManifoldPoint.prototype = {
	reset: function() {
		this.m_localPoint.setZero();
		this.m_normalImpulse = 0.0;
		this.m_tangentImpulse = 0.0;
		this.m_id.set_key(0);
	}
	,set: function(m) {
		this.m_localPoint.setV(m.m_localPoint);
		this.m_normalImpulse = m.m_normalImpulse;
		this.m_tangentImpulse = m.m_tangentImpulse;
		this.m_id.set(m.m_id);
	}
	,__class__: box2D_collision_B2ManifoldPoint
};
var box2D_collision_B2ManifoldType = $hxEnums["box2D.collision.B2ManifoldType"] = { __ename__ : true, __constructs__ : ["CIRCLES","FACE_A","FACE_B"]
	,CIRCLES: {_hx_index:0,__enum__:"box2D.collision.B2ManifoldType",toString:$estr}
	,FACE_A: {_hx_index:1,__enum__:"box2D.collision.B2ManifoldType",toString:$estr}
	,FACE_B: {_hx_index:2,__enum__:"box2D.collision.B2ManifoldType",toString:$estr}
};
box2D_collision_B2ManifoldType.__empty_constructs__ = [box2D_collision_B2ManifoldType.CIRCLES,box2D_collision_B2ManifoldType.FACE_A,box2D_collision_B2ManifoldType.FACE_B];
var box2D_collision_B2OBB = function() {
	this.R = new box2D_common_math_B2Mat22();
	this.center = new box2D_common_math_B2Vec2();
	this.extents = new box2D_common_math_B2Vec2();
};
$hxClasses["box2D.collision.B2OBB"] = box2D_collision_B2OBB;
box2D_collision_B2OBB.__name__ = "box2D.collision.B2OBB";
box2D_collision_B2OBB.prototype = {
	__class__: box2D_collision_B2OBB
};
var box2D_collision_B2RayCastInput = function(p1,p2,maxFraction) {
	if(maxFraction == null) {
		maxFraction = 1;
	}
	this.p1 = new box2D_common_math_B2Vec2();
	this.p2 = new box2D_common_math_B2Vec2();
	if(p1 != null) {
		this.p1.setV(p1);
	}
	if(p2 != null) {
		this.p2.setV(p2);
	}
	this.maxFraction = maxFraction;
};
$hxClasses["box2D.collision.B2RayCastInput"] = box2D_collision_B2RayCastInput;
box2D_collision_B2RayCastInput.__name__ = "box2D.collision.B2RayCastInput";
box2D_collision_B2RayCastInput.prototype = {
	__class__: box2D_collision_B2RayCastInput
};
var box2D_collision_B2RayCastOutput = function() {
	this.normal = new box2D_common_math_B2Vec2();
};
$hxClasses["box2D.collision.B2RayCastOutput"] = box2D_collision_B2RayCastOutput;
box2D_collision_B2RayCastOutput.__name__ = "box2D.collision.B2RayCastOutput";
box2D_collision_B2RayCastOutput.prototype = {
	__class__: box2D_collision_B2RayCastOutput
};
var box2D_collision_B2SeparationFunction = function() {
	this.m_localPoint = new box2D_common_math_B2Vec2();
	this.m_axis = new box2D_common_math_B2Vec2();
};
$hxClasses["box2D.collision.B2SeparationFunction"] = box2D_collision_B2SeparationFunction;
box2D_collision_B2SeparationFunction.__name__ = "box2D.collision.B2SeparationFunction";
box2D_collision_B2SeparationFunction.prototype = {
	initialize: function(cache,proxyA,transformA,proxyB,transformB) {
		this.m_proxyA = proxyA;
		this.m_proxyB = proxyB;
		var count = cache.count;
		box2D_common_B2Settings.b2Assert(0 < count && count < 3);
		var localPointA = new box2D_common_math_B2Vec2();
		var localPointA1;
		var localPointA2;
		var localPointB = new box2D_common_math_B2Vec2();
		var localPointB1;
		var localPointB2;
		var pointAX;
		var pointAY;
		var pointBX;
		var pointBY;
		var normalX;
		var normalY;
		var tMat;
		var tVec;
		var s;
		var sgn;
		if(count == 1) {
			this.m_type = box2D_collision_B2SeparationFunctionType.POINTS;
			localPointA = this.m_proxyA.getVertex(cache.indexA[0]);
			localPointB = this.m_proxyB.getVertex(cache.indexB[0]);
			tVec = localPointA;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointB;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			this.m_axis.x = pointBX - pointAX;
			this.m_axis.y = pointBY - pointAY;
			this.m_axis.normalize();
		} else if(cache.indexB[0] == cache.indexB[1]) {
			this.m_type = box2D_collision_B2SeparationFunctionType.FACE_A;
			localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);
			localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);
			localPointB = this.m_proxyB.getVertex(cache.indexB[0]);
			this.m_localPoint.x = 0.5 * (localPointA1.x + localPointA2.x);
			this.m_localPoint.y = 0.5 * (localPointA1.y + localPointA2.y);
			this.m_axis = box2D_common_math_B2Math.crossVF(box2D_common_math_B2Math.subtractVV(localPointA2,localPointA1),1.0);
			this.m_axis.normalize();
			tVec = this.m_axis;
			tMat = transformA.R;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tVec = this.m_localPoint;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointB;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			s = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
			if(s < 0.0) {
				this.m_axis.negativeSelf();
			}
		} else if(cache.indexA[0] == cache.indexA[0]) {
			this.m_type = box2D_collision_B2SeparationFunctionType.FACE_B;
			localPointB1 = this.m_proxyB.getVertex(cache.indexB[0]);
			localPointB2 = this.m_proxyB.getVertex(cache.indexB[1]);
			localPointA = this.m_proxyA.getVertex(cache.indexA[0]);
			this.m_localPoint.x = 0.5 * (localPointB1.x + localPointB2.x);
			this.m_localPoint.y = 0.5 * (localPointB1.y + localPointB2.y);
			this.m_axis = box2D_common_math_B2Math.crossVF(box2D_common_math_B2Math.subtractVV(localPointB2,localPointB1),1.0);
			this.m_axis.normalize();
			tVec = this.m_axis;
			tMat = transformB.R;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tVec = this.m_localPoint;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointA;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			s = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
			if(s < 0.0) {
				this.m_axis.negativeSelf();
			}
		} else {
			localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);
			localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);
			localPointB1 = this.m_proxyB.getVertex(cache.indexB[0]);
			localPointB2 = this.m_proxyB.getVertex(cache.indexB[1]);
			var pA = box2D_common_math_B2Math.mulX(transformA,localPointA);
			var dA = box2D_common_math_B2Math.mulMV(transformA.R,box2D_common_math_B2Math.subtractVV(localPointA2,localPointA1));
			var pB = box2D_common_math_B2Math.mulX(transformB,localPointB);
			var dB = box2D_common_math_B2Math.mulMV(transformB.R,box2D_common_math_B2Math.subtractVV(localPointB2,localPointB1));
			var a = dA.x * dA.x + dA.y * dA.y;
			var e = dB.x * dB.x + dB.y * dB.y;
			var r = box2D_common_math_B2Math.subtractVV(dB,dA);
			var c = dA.x * r.x + dA.y * r.y;
			var f = dB.x * r.x + dB.y * r.y;
			var b = dA.x * dB.x + dA.y * dB.y;
			var denom = a * e - b * b;
			s = 0.0;
			if(denom != 0.0) {
				s = box2D_common_math_B2Math.clamp((b * f - c * e) / denom,0.0,1.0);
			}
			var t = (b * s + f) / e;
			if(t < 0.0) {
				t = 0.0;
				s = box2D_common_math_B2Math.clamp((b - c) / a,0.0,1.0);
			}
			localPointA = new box2D_common_math_B2Vec2();
			localPointA.x = localPointA1.x + s * (localPointA2.x - localPointA1.x);
			localPointA.y = localPointA1.y + s * (localPointA2.y - localPointA1.y);
			localPointB = new box2D_common_math_B2Vec2();
			localPointB.x = localPointB1.x + s * (localPointB2.x - localPointB1.x);
			localPointB.y = localPointB1.y + s * (localPointB2.y - localPointB1.y);
			if(s == 0.0 || s == 1.0) {
				this.m_type = box2D_collision_B2SeparationFunctionType.FACE_B;
				this.m_axis = box2D_common_math_B2Math.crossVF(box2D_common_math_B2Math.subtractVV(localPointB2,localPointB1),1.0);
				this.m_axis.normalize();
				this.m_localPoint = localPointB;
				tVec = this.m_axis;
				tMat = transformB.R;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tVec = this.m_localPoint;
				tMat = transformB.R;
				pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				tVec = localPointA;
				tMat = transformA.R;
				pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				sgn = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
				if(s < 0.0) {
					this.m_axis.negativeSelf();
				}
			} else {
				this.m_type = box2D_collision_B2SeparationFunctionType.FACE_A;
				this.m_axis = box2D_common_math_B2Math.crossVF(box2D_common_math_B2Math.subtractVV(localPointA2,localPointA1),1.0);
				this.m_localPoint = localPointA;
				tVec = this.m_axis;
				tMat = transformA.R;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tVec = this.m_localPoint;
				tMat = transformA.R;
				pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				tVec = localPointB;
				tMat = transformB.R;
				pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				sgn = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
				if(s < 0.0) {
					this.m_axis.negativeSelf();
				}
			}
		}
	}
	,evaluate: function(transformA,transformB) {
		var axisA;
		var axisB;
		var localPointA;
		var localPointB;
		var pointA;
		var pointB;
		var seperation;
		var normal;
		switch(this.m_type._hx_index) {
		case 0:
			axisA = box2D_common_math_B2Math.mulTMV(transformA.R,this.m_axis);
			axisB = box2D_common_math_B2Math.mulTMV(transformB.R,this.m_axis.getNegative());
			localPointA = this.m_proxyA.getSupportVertex(axisA);
			localPointB = this.m_proxyB.getSupportVertex(axisB);
			pointA = box2D_common_math_B2Math.mulX(transformA,localPointA);
			pointB = box2D_common_math_B2Math.mulX(transformB,localPointB);
			seperation = (pointB.x - pointA.x) * this.m_axis.x + (pointB.y - pointA.y) * this.m_axis.y;
			return seperation;
		case 1:
			normal = box2D_common_math_B2Math.mulMV(transformA.R,this.m_axis);
			pointA = box2D_common_math_B2Math.mulX(transformA,this.m_localPoint);
			axisB = box2D_common_math_B2Math.mulTMV(transformB.R,normal.getNegative());
			localPointB = this.m_proxyB.getSupportVertex(axisB);
			pointB = box2D_common_math_B2Math.mulX(transformB,localPointB);
			seperation = (pointB.x - pointA.x) * normal.x + (pointB.y - pointA.y) * normal.y;
			return seperation;
		case 2:
			normal = box2D_common_math_B2Math.mulMV(transformB.R,this.m_axis);
			pointB = box2D_common_math_B2Math.mulX(transformB,this.m_localPoint);
			axisA = box2D_common_math_B2Math.mulTMV(transformA.R,normal.getNegative());
			localPointA = this.m_proxyA.getSupportVertex(axisA);
			pointA = box2D_common_math_B2Math.mulX(transformA,localPointA);
			seperation = (pointA.x - pointB.x) * normal.x + (pointA.y - pointB.y) * normal.y;
			return seperation;
		}
	}
	,__class__: box2D_collision_B2SeparationFunction
};
var box2D_collision_B2SeparationFunctionType = $hxEnums["box2D.collision.B2SeparationFunctionType"] = { __ename__ : true, __constructs__ : ["POINTS","FACE_A","FACE_B"]
	,POINTS: {_hx_index:0,__enum__:"box2D.collision.B2SeparationFunctionType",toString:$estr}
	,FACE_A: {_hx_index:1,__enum__:"box2D.collision.B2SeparationFunctionType",toString:$estr}
	,FACE_B: {_hx_index:2,__enum__:"box2D.collision.B2SeparationFunctionType",toString:$estr}
};
box2D_collision_B2SeparationFunctionType.__empty_constructs__ = [box2D_collision_B2SeparationFunctionType.POINTS,box2D_collision_B2SeparationFunctionType.FACE_A,box2D_collision_B2SeparationFunctionType.FACE_B];
var box2D_collision_B2SimplexCache = function() {
	this.count = 0;
	this.metric = 0;
	this.indexA = [];
	this.indexB = [];
};
$hxClasses["box2D.collision.B2SimplexCache"] = box2D_collision_B2SimplexCache;
box2D_collision_B2SimplexCache.__name__ = "box2D.collision.B2SimplexCache";
box2D_collision_B2SimplexCache.prototype = {
	__class__: box2D_collision_B2SimplexCache
};
var box2D_collision_B2TOIInput = function() {
	this.proxyA = new box2D_collision_B2DistanceProxy();
	this.proxyB = new box2D_collision_B2DistanceProxy();
	this.sweepA = new box2D_common_math_B2Sweep();
	this.sweepB = new box2D_common_math_B2Sweep();
};
$hxClasses["box2D.collision.B2TOIInput"] = box2D_collision_B2TOIInput;
box2D_collision_B2TOIInput.__name__ = "box2D.collision.B2TOIInput";
box2D_collision_B2TOIInput.prototype = {
	__class__: box2D_collision_B2TOIInput
};
var box2D_common_math_B2Transform = function(pos,r) {
	this.position = new box2D_common_math_B2Vec2();
	this.R = new box2D_common_math_B2Mat22();
	if(pos != null) {
		this.position.setV(pos);
		this.R.setM(r);
	}
};
$hxClasses["box2D.common.math.B2Transform"] = box2D_common_math_B2Transform;
box2D_common_math_B2Transform.__name__ = "box2D.common.math.B2Transform";
box2D_common_math_B2Transform.prototype = {
	initialize: function(pos,r) {
		this.position.setV(pos);
		this.R.setM(r);
	}
	,setIdentity: function() {
		this.position.setZero();
		this.R.setIdentity();
	}
	,set: function(x) {
		this.position.setV(x.position);
		this.R.setM(x.R);
	}
	,getAngle: function() {
		return Math.atan2(this.R.col1.y,this.R.col1.x);
	}
	,__class__: box2D_common_math_B2Transform
};
var box2D_common_math_B2Mat22 = function() {
	this.col1 = new box2D_common_math_B2Vec2(1.0,0);
	this.col2 = new box2D_common_math_B2Vec2(0,1.0);
};
$hxClasses["box2D.common.math.B2Mat22"] = box2D_common_math_B2Mat22;
box2D_common_math_B2Mat22.__name__ = "box2D.common.math.B2Mat22";
box2D_common_math_B2Mat22.fromAngle = function(angle) {
	var mat = new box2D_common_math_B2Mat22();
	mat.set(angle);
	return mat;
};
box2D_common_math_B2Mat22.fromVV = function(c1,c2) {
	var mat = new box2D_common_math_B2Mat22();
	mat.setVV(c1,c2);
	return mat;
};
box2D_common_math_B2Mat22.prototype = {
	set: function(angle) {
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		this.col1.x = c;
		this.col2.x = -s;
		this.col1.y = s;
		this.col2.y = c;
	}
	,setVV: function(c1,c2) {
		this.col1.setV(c1);
		this.col2.setV(c2);
	}
	,copy: function() {
		var mat = new box2D_common_math_B2Mat22();
		mat.setM(this);
		return mat;
	}
	,setM: function(m) {
		this.col1.setV(m.col1);
		this.col2.setV(m.col2);
	}
	,addM: function(m) {
		this.col1.x += m.col1.x;
		this.col1.y += m.col1.y;
		this.col2.x += m.col2.x;
		this.col2.y += m.col2.y;
	}
	,setIdentity: function() {
		this.col1.x = 1.0;
		this.col2.x = 0.0;
		this.col1.y = 0.0;
		this.col2.y = 1.0;
	}
	,setZero: function() {
		this.col1.x = 0.0;
		this.col2.x = 0.0;
		this.col1.y = 0.0;
		this.col2.y = 0.0;
	}
	,getAngle: function() {
		return Math.atan2(this.col1.y,this.col1.x);
	}
	,getInverse: function(out) {
		var a = this.col1.x;
		var b = this.col2.x;
		var c = this.col1.y;
		var d = this.col2.y;
		var det = a * d - b * c;
		if(det != 0.0) {
			det = 1.0 / det;
		}
		out.col1.x = det * d;
		out.col2.x = -det * b;
		out.col1.y = -det * c;
		out.col2.y = det * a;
		return out;
	}
	,solve: function(out,bX,bY) {
		var a11 = this.col1.x;
		var a12 = this.col2.x;
		var a21 = this.col1.y;
		var a22 = this.col2.y;
		var det = a11 * a22 - a12 * a21;
		if(det != 0.0) {
			det = 1.0 / det;
		}
		out.x = det * (a22 * bX - a12 * bY);
		out.y = det * (a11 * bY - a21 * bX);
		return out;
	}
	,abs: function() {
		this.col1.abs();
		this.col2.abs();
	}
	,__class__: box2D_common_math_B2Mat22
};
var box2D_collision_B2TimeOfImpact = function() { };
$hxClasses["box2D.collision.B2TimeOfImpact"] = box2D_collision_B2TimeOfImpact;
box2D_collision_B2TimeOfImpact.__name__ = "box2D.collision.B2TimeOfImpact";
box2D_collision_B2TimeOfImpact.timeOfImpact = function(input) {
	++box2D_collision_B2TimeOfImpact.b2_toiCalls;
	var proxyA = input.proxyA;
	var proxyB = input.proxyB;
	var sweepA = input.sweepA;
	var sweepB = input.sweepB;
	box2D_common_B2Settings.b2Assert(sweepA.t0 == sweepB.t0);
	box2D_common_B2Settings.b2Assert(1.0 - sweepA.t0 > Number.MIN_VALUE);
	var radius = proxyA.m_radius + proxyB.m_radius;
	var tolerance = input.tolerance;
	var alpha = 0.0;
	var k_maxIterations = 1000;
	var iter = 0;
	var target = 0.0;
	box2D_collision_B2TimeOfImpact.s_cache.count = 0;
	box2D_collision_B2TimeOfImpact.s_distanceInput.useRadii = false;
	while(true) {
		sweepA.getTransform(box2D_collision_B2TimeOfImpact.s_xfA,alpha);
		sweepB.getTransform(box2D_collision_B2TimeOfImpact.s_xfB,alpha);
		box2D_collision_B2TimeOfImpact.s_distanceInput.proxyA = proxyA;
		box2D_collision_B2TimeOfImpact.s_distanceInput.proxyB = proxyB;
		box2D_collision_B2TimeOfImpact.s_distanceInput.transformA = box2D_collision_B2TimeOfImpact.s_xfA;
		box2D_collision_B2TimeOfImpact.s_distanceInput.transformB = box2D_collision_B2TimeOfImpact.s_xfB;
		box2D_collision_B2Distance.distance(box2D_collision_B2TimeOfImpact.s_distanceOutput,box2D_collision_B2TimeOfImpact.s_cache,box2D_collision_B2TimeOfImpact.s_distanceInput);
		if(box2D_collision_B2TimeOfImpact.s_distanceOutput.distance <= 0.0) {
			alpha = 1.0;
			break;
		}
		box2D_collision_B2TimeOfImpact.s_fcn.initialize(box2D_collision_B2TimeOfImpact.s_cache,proxyA,box2D_collision_B2TimeOfImpact.s_xfA,proxyB,box2D_collision_B2TimeOfImpact.s_xfB);
		var separation = box2D_collision_B2TimeOfImpact.s_fcn.evaluate(box2D_collision_B2TimeOfImpact.s_xfA,box2D_collision_B2TimeOfImpact.s_xfB);
		if(separation <= 0.0) {
			alpha = 1.0;
			break;
		}
		if(iter == 0) {
			if(separation > radius) {
				target = box2D_common_math_B2Math.max(radius - tolerance,0.75 * radius);
			} else {
				target = box2D_common_math_B2Math.max(separation - tolerance,0.02 * radius);
			}
		}
		if(separation - target < 0.5 * tolerance) {
			if(iter == 0) {
				alpha = 1.0;
				break;
			}
			break;
		}
		var newAlpha = alpha;
		var x1 = alpha;
		var x2 = 1.0;
		var f1 = separation;
		sweepA.getTransform(box2D_collision_B2TimeOfImpact.s_xfA,x2);
		sweepB.getTransform(box2D_collision_B2TimeOfImpact.s_xfB,x2);
		var f2 = box2D_collision_B2TimeOfImpact.s_fcn.evaluate(box2D_collision_B2TimeOfImpact.s_xfA,box2D_collision_B2TimeOfImpact.s_xfB);
		if(f2 >= target) {
			alpha = 1.0;
			break;
		}
		var rootIterCount = 0;
		while(true) {
			var x;
			if((rootIterCount & 1) != 0) {
				x = x1 + (target - f1) * (x2 - x1) / (f2 - f1);
			} else {
				x = 0.5 * (x1 + x2);
			}
			sweepA.getTransform(box2D_collision_B2TimeOfImpact.s_xfA,x);
			sweepB.getTransform(box2D_collision_B2TimeOfImpact.s_xfB,x);
			var f = box2D_collision_B2TimeOfImpact.s_fcn.evaluate(box2D_collision_B2TimeOfImpact.s_xfA,box2D_collision_B2TimeOfImpact.s_xfB);
			if(box2D_common_math_B2Math.abs(f - target) < 0.025 * tolerance) {
				newAlpha = x;
				break;
			}
			if(f > target) {
				x1 = x;
				f1 = f;
			} else {
				x2 = x;
				f2 = f;
			}
			++rootIterCount;
			++box2D_collision_B2TimeOfImpact.b2_toiRootIters;
			if(rootIterCount == 50) {
				break;
			}
		}
		box2D_collision_B2TimeOfImpact.b2_toiMaxRootIters = box2D_common_math_B2Math.max(box2D_collision_B2TimeOfImpact.b2_toiMaxRootIters,rootIterCount) | 0;
		if(newAlpha < (1.0 + 100.0 * Number.MIN_VALUE) * alpha) {
			break;
		}
		alpha = newAlpha;
		++iter;
		++box2D_collision_B2TimeOfImpact.b2_toiIters;
		if(iter == k_maxIterations) {
			break;
		}
	}
	box2D_collision_B2TimeOfImpact.b2_toiMaxIters = box2D_common_math_B2Math.max(box2D_collision_B2TimeOfImpact.b2_toiMaxIters,iter) | 0;
	return alpha;
};
var box2D_collision_B2WorldManifold = function() {
	this.m_normal = new box2D_common_math_B2Vec2();
	this.m_points = [];
	var _g = 0;
	var _g1 = box2D_common_B2Settings.b2_maxManifoldPoints;
	while(_g < _g1) {
		var i = _g++;
		this.m_points[i] = new box2D_common_math_B2Vec2();
	}
};
$hxClasses["box2D.collision.B2WorldManifold"] = box2D_collision_B2WorldManifold;
box2D_collision_B2WorldManifold.__name__ = "box2D.collision.B2WorldManifold";
box2D_collision_B2WorldManifold.prototype = {
	initialize: function(manifold,xfA,radiusA,xfB,radiusB) {
		if(manifold.m_pointCount == 0) {
			return;
		}
		var i;
		var tVec;
		var tMat;
		var normalX;
		var normalY;
		var planePointX;
		var planePointY;
		var clipPointX;
		var clipPointY;
		switch(manifold.m_type._hx_index) {
		case 0:
			tMat = xfA.R;
			tVec = manifold.m_localPoint;
			var pointAX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			var pointAY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = xfB.R;
			tVec = manifold.m_points[0].m_localPoint;
			var pointBX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			var pointBY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			var dX = pointBX - pointAX;
			var dY = pointBY - pointAY;
			var d2 = dX * dX + dY * dY;
			if(d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
				var d = Math.sqrt(d2);
				this.m_normal.x = dX / d;
				this.m_normal.y = dY / d;
			} else {
				this.m_normal.x = 1;
				this.m_normal.y = 0;
			}
			var cAX = pointAX + radiusA * this.m_normal.x;
			var cAY = pointAY + radiusA * this.m_normal.y;
			var cBX = pointBX - radiusB * this.m_normal.x;
			var cBY = pointBY - radiusB * this.m_normal.y;
			this.m_points[0].x = 0.5 * (cAX + cBX);
			this.m_points[0].y = 0.5 * (cAY + cBY);
			break;
		case 1:
			tMat = xfA.R;
			tVec = manifold.m_localPlaneNormal;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = xfA.R;
			tVec = manifold.m_localPoint;
			planePointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			planePointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			this.m_normal.x = normalX;
			this.m_normal.y = normalY;
			var _g = 0;
			var _g1 = manifold.m_pointCount;
			while(_g < _g1) {
				var i1 = _g++;
				tMat = xfB.R;
				tVec = manifold.m_points[i1].m_localPoint;
				clipPointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				clipPointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				this.m_points[i1].x = clipPointX + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalX;
				this.m_points[i1].y = clipPointY + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalY;
			}
			break;
		case 2:
			tMat = xfB.R;
			tVec = manifold.m_localPlaneNormal;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = xfB.R;
			tVec = manifold.m_localPoint;
			planePointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			planePointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			this.m_normal.x = -normalX;
			this.m_normal.y = -normalY;
			var _g2 = 0;
			var _g11 = manifold.m_pointCount;
			while(_g2 < _g11) {
				var i2 = _g2++;
				tMat = xfA.R;
				tVec = manifold.m_points[i2].m_localPoint;
				clipPointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				clipPointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				this.m_points[i2].x = clipPointX + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalX;
				this.m_points[i2].y = clipPointY + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalY;
			}
			break;
		}
	}
	,__class__: box2D_collision_B2WorldManifold
};
var box2D_collision_shapes_B2Shape = function() {
	this.m_type = 0;
	this.m_radius = box2D_common_B2Settings.b2_linearSlop;
};
$hxClasses["box2D.collision.shapes.B2Shape"] = box2D_collision_shapes_B2Shape;
box2D_collision_shapes_B2Shape.__name__ = "box2D.collision.shapes.B2Shape";
box2D_collision_shapes_B2Shape.testOverlap = function(shape1,transform1,shape2,transform2) {
	var input = new box2D_collision_B2DistanceInput();
	input.proxyA = new box2D_collision_B2DistanceProxy();
	input.proxyA.set(shape1);
	input.proxyB = new box2D_collision_B2DistanceProxy();
	input.proxyB.set(shape2);
	input.transformA = transform1;
	input.transformB = transform2;
	input.useRadii = true;
	var simplexCache = new box2D_collision_B2SimplexCache();
	simplexCache.count = 0;
	var output = new box2D_collision_B2DistanceOutput();
	box2D_collision_B2Distance.distance(output,simplexCache,input);
	return output.distance < 10.0 * Number.MIN_VALUE;
};
box2D_collision_shapes_B2Shape.prototype = {
	copy: function() {
		return null;
	}
	,set: function(other) {
		this.m_radius = other.m_radius;
	}
	,getType: function() {
		return this.m_type;
	}
	,testPoint: function(xf,p) {
		return false;
	}
	,rayCast: function(output,input,transform) {
		return false;
	}
	,computeAABB: function(aabb,xf) {
	}
	,computeMass: function(massData,density) {
	}
	,computeSubmergedArea: function(normal,offset,xf,c) {
		return 0;
	}
	,__class__: box2D_collision_shapes_B2Shape
};
var box2D_collision_shapes_B2CircleShape = function(radius) {
	if(radius == null) {
		radius = 0;
	}
	box2D_collision_shapes_B2Shape.call(this);
	this.m_p = new box2D_common_math_B2Vec2();
	this.m_type = 1;
	this.m_radius = radius;
};
$hxClasses["box2D.collision.shapes.B2CircleShape"] = box2D_collision_shapes_B2CircleShape;
box2D_collision_shapes_B2CircleShape.__name__ = "box2D.collision.shapes.B2CircleShape";
box2D_collision_shapes_B2CircleShape.__super__ = box2D_collision_shapes_B2Shape;
box2D_collision_shapes_B2CircleShape.prototype = $extend(box2D_collision_shapes_B2Shape.prototype,{
	copy: function() {
		var s = new box2D_collision_shapes_B2CircleShape();
		s.set(this);
		return s;
	}
	,set: function(other) {
		box2D_collision_shapes_B2Shape.prototype.set.call(this,other);
		if(((other) instanceof box2D_collision_shapes_B2CircleShape)) {
			var other2 = js_Boot.__cast(other , box2D_collision_shapes_B2CircleShape);
			this.m_p.setV(other2.m_p);
		}
	}
	,testPoint: function(transform,p) {
		var tMat = transform.R;
		var dX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var dY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		dX = p.x - dX;
		dY = p.y - dY;
		return dX * dX + dY * dY <= this.m_radius * this.m_radius;
	}
	,rayCast: function(output,input,transform) {
		var tMat = transform.R;
		var positionX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var positionY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		var sX = input.p1.x - positionX;
		var sY = input.p1.y - positionY;
		var b = sX * sX + sY * sY - this.m_radius * this.m_radius;
		var rX = input.p2.x - input.p1.x;
		var rY = input.p2.y - input.p1.y;
		var c = sX * rX + sY * rY;
		var rr = rX * rX + rY * rY;
		var sigma = c * c - rr * b;
		if(sigma < 0.0 || rr < Number.MIN_VALUE) {
			return false;
		}
		var a = -(c + Math.sqrt(sigma));
		if(0.0 <= a && a <= input.maxFraction * rr) {
			a /= rr;
			output.fraction = a;
			output.normal.x = sX + a * rX;
			output.normal.y = sY + a * rY;
			output.normal.normalize();
			return true;
		}
		return false;
	}
	,computeAABB: function(aabb,transform) {
		var tMat = transform.R;
		var pX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var pY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		aabb.lowerBound.set(pX - this.m_radius,pY - this.m_radius);
		aabb.upperBound.set(pX + this.m_radius,pY + this.m_radius);
	}
	,computeMass: function(massData,density) {
		massData.mass = density * box2D_common_B2Settings.b2_pi * this.m_radius * this.m_radius;
		massData.center.setV(this.m_p);
		massData.I = massData.mass * (0.5 * this.m_radius * this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));
	}
	,computeSubmergedArea: function(normal,offset,xf,c) {
		var p = box2D_common_math_B2Math.mulX(xf,this.m_p);
		var l = -(box2D_common_math_B2Math.dot(normal,p) - offset);
		if(l < -this.m_radius + Number.MIN_VALUE) {
			return 0;
		}
		if(l > this.m_radius) {
			c.setV(p);
			return Math.PI * this.m_radius * this.m_radius;
		}
		var r2 = this.m_radius * this.m_radius;
		var l2 = l * l;
		var area = r2 * (Math.asin(l / this.m_radius) + Math.PI / 2) + l * Math.sqrt(r2 - l2);
		var com = -0.66666666666666663 * Math.pow(r2 - l2,1.5) / area;
		c.x = p.x + normal.x * com;
		c.y = p.y + normal.y * com;
		return area;
	}
	,getLocalPosition: function() {
		return this.m_p;
	}
	,setLocalPosition: function(position) {
		this.m_p.setV(position);
	}
	,getRadius: function() {
		return this.m_radius;
	}
	,setRadius: function(radius) {
		this.m_radius = radius;
	}
	,__class__: box2D_collision_shapes_B2CircleShape
});
var box2D_collision_shapes_B2EdgeShape = function(v1,v2) {
	box2D_collision_shapes_B2Shape.call(this);
	this.s_supportVec = new box2D_common_math_B2Vec2();
	this.m_v1 = new box2D_common_math_B2Vec2();
	this.m_v2 = new box2D_common_math_B2Vec2();
	this.m_coreV1 = new box2D_common_math_B2Vec2();
	this.m_coreV2 = new box2D_common_math_B2Vec2();
	this.m_normal = new box2D_common_math_B2Vec2();
	this.m_direction = new box2D_common_math_B2Vec2();
	this.m_cornerDir1 = new box2D_common_math_B2Vec2();
	this.m_cornerDir2 = new box2D_common_math_B2Vec2();
	this.m_type = 3;
	this.m_prevEdge = null;
	this.m_nextEdge = null;
	this.m_v1 = v1;
	this.m_v2 = v2;
	this.m_direction.set(this.m_v2.x - this.m_v1.x,this.m_v2.y - this.m_v1.y);
	this.m_length = this.m_direction.normalize();
	this.m_normal.set(this.m_direction.y,-this.m_direction.x);
	this.m_coreV1.set(-box2D_common_B2Settings.b2_toiSlop * (this.m_normal.x - this.m_direction.x) + this.m_v1.x,-box2D_common_B2Settings.b2_toiSlop * (this.m_normal.y - this.m_direction.y) + this.m_v1.y);
	this.m_coreV2.set(-box2D_common_B2Settings.b2_toiSlop * (this.m_normal.x + this.m_direction.x) + this.m_v2.x,-box2D_common_B2Settings.b2_toiSlop * (this.m_normal.y + this.m_direction.y) + this.m_v2.y);
	this.m_cornerDir1 = this.m_normal;
	this.m_cornerDir2.set(-this.m_normal.x,-this.m_normal.y);
};
$hxClasses["box2D.collision.shapes.B2EdgeShape"] = box2D_collision_shapes_B2EdgeShape;
box2D_collision_shapes_B2EdgeShape.__name__ = "box2D.collision.shapes.B2EdgeShape";
box2D_collision_shapes_B2EdgeShape.__super__ = box2D_collision_shapes_B2Shape;
box2D_collision_shapes_B2EdgeShape.prototype = $extend(box2D_collision_shapes_B2Shape.prototype,{
	testPoint: function(transform,p) {
		return false;
	}
	,rayCast: function(output,input,transform) {
		var rX = input.p2.x - input.p1.x;
		var rY = input.p2.y - input.p1.y;
		var tMat = transform.R;
		var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
		var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
		var nX = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y) - v1Y;
		var nY = -(transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y) - v1X);
		var k_slop = 100.0 * Number.MIN_VALUE;
		var denom = -(rX * nX + rY * nY);
		if(denom > k_slop) {
			var bX = input.p1.x - v1X;
			var bY = input.p1.y - v1Y;
			var a = bX * nX + bY * nY;
			if(0.0 <= a && a <= input.maxFraction * denom) {
				var mu2 = -rX * bY + rY * bX;
				if(-k_slop * denom <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
					a /= denom;
					output.fraction = a;
					var nLen = Math.sqrt(nX * nX + nY * nY);
					output.normal.x = nX / nLen;
					output.normal.y = nY / nLen;
					return true;
				}
			}
		}
		return false;
	}
	,computeAABB: function(aabb,transform) {
		var tMat = transform.R;
		var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
		var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
		var v2X = transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y);
		var v2Y = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y);
		if(v1X < v2X) {
			aabb.lowerBound.x = v1X;
			aabb.upperBound.x = v2X;
		} else {
			aabb.lowerBound.x = v2X;
			aabb.upperBound.x = v1X;
		}
		if(v1Y < v2Y) {
			aabb.lowerBound.y = v1Y;
			aabb.upperBound.y = v2Y;
		} else {
			aabb.lowerBound.y = v2Y;
			aabb.upperBound.y = v1Y;
		}
	}
	,computeMass: function(massData,density) {
		massData.mass = 0;
		massData.center.setV(this.m_v1);
		massData.I = 0;
	}
	,computeSubmergedArea: function(normal,offset,xf,c) {
		var v0 = new box2D_common_math_B2Vec2(normal.x * offset,normal.y * offset);
		var v1 = box2D_common_math_B2Math.mulX(xf,this.m_v1);
		var v2 = box2D_common_math_B2Math.mulX(xf,this.m_v2);
		var d1 = box2D_common_math_B2Math.dot(normal,v1) - offset;
		var d2 = box2D_common_math_B2Math.dot(normal,v2) - offset;
		if(d1 > 0) {
			if(d2 > 0) {
				return 0;
			} else {
				v1.x = -d2 / (d1 - d2) * v1.x + d1 / (d1 - d2) * v2.x;
				v1.y = -d2 / (d1 - d2) * v1.y + d1 / (d1 - d2) * v2.y;
			}
		} else if(d2 > 0) {
			v2.x = -d2 / (d1 - d2) * v1.x + d1 / (d1 - d2) * v2.x;
			v2.y = -d2 / (d1 - d2) * v1.y + d1 / (d1 - d2) * v2.y;
		}
		c.x = (v0.x + v1.x + v2.x) / 3;
		c.y = (v0.y + v1.y + v2.y) / 3;
		return 0.5 * ((v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x));
	}
	,getLength: function() {
		return this.m_length;
	}
	,getVertex1: function() {
		return this.m_v1;
	}
	,getVertex2: function() {
		return this.m_v2;
	}
	,getCoreVertex1: function() {
		return this.m_coreV1;
	}
	,getCoreVertex2: function() {
		return this.m_coreV2;
	}
	,getNormalVector: function() {
		return this.m_normal;
	}
	,getDirectionVector: function() {
		return this.m_direction;
	}
	,getCorner1Vector: function() {
		return this.m_cornerDir1;
	}
	,getCorner2Vector: function() {
		return this.m_cornerDir2;
	}
	,corner1IsConvex: function() {
		return this.m_cornerConvex1;
	}
	,corner2IsConvex: function() {
		return this.m_cornerConvex2;
	}
	,getFirstVertex: function(xf) {
		var tMat = xf.R;
		return new box2D_common_math_B2Vec2(xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y),xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y));
	}
	,getNextEdge: function() {
		return this.m_nextEdge;
	}
	,getPrevEdge: function() {
		return this.m_prevEdge;
	}
	,support: function(xf,dX,dY) {
		var tMat = xf.R;
		var v1X = xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y);
		var v1Y = xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y);
		var v2X = xf.position.x + (tMat.col1.x * this.m_coreV2.x + tMat.col2.x * this.m_coreV2.y);
		var v2Y = xf.position.y + (tMat.col1.y * this.m_coreV2.x + tMat.col2.y * this.m_coreV2.y);
		if(v1X * dX + v1Y * dY > v2X * dX + v2Y * dY) {
			this.s_supportVec.x = v1X;
			this.s_supportVec.y = v1Y;
		} else {
			this.s_supportVec.x = v2X;
			this.s_supportVec.y = v2Y;
		}
		return this.s_supportVec;
	}
	,setPrevEdge: function(edge,core,cornerDir,convex) {
		this.m_prevEdge = edge;
		this.m_coreV1 = core;
		this.m_cornerDir1 = cornerDir;
		this.m_cornerConvex1 = convex;
	}
	,setNextEdge: function(edge,core,cornerDir,convex) {
		this.m_nextEdge = edge;
		this.m_coreV2 = core;
		this.m_cornerDir2 = cornerDir;
		this.m_cornerConvex2 = convex;
	}
	,__class__: box2D_collision_shapes_B2EdgeShape
});
var box2D_collision_shapes_B2MassData = function() {
	this.mass = 0.0;
	this.center = new box2D_common_math_B2Vec2(0,0);
	this.I = 0.0;
};
$hxClasses["box2D.collision.shapes.B2MassData"] = box2D_collision_shapes_B2MassData;
box2D_collision_shapes_B2MassData.__name__ = "box2D.collision.shapes.B2MassData";
box2D_collision_shapes_B2MassData.prototype = {
	__class__: box2D_collision_shapes_B2MassData
};
var box2D_collision_shapes_B2PolygonShape = function() {
	this.m_vertexCount = 0;
	box2D_collision_shapes_B2Shape.call(this);
	this.m_type = 2;
	this.m_centroid = new box2D_common_math_B2Vec2();
	this.m_vertices = [];
	this.m_normals = [];
};
$hxClasses["box2D.collision.shapes.B2PolygonShape"] = box2D_collision_shapes_B2PolygonShape;
box2D_collision_shapes_B2PolygonShape.__name__ = "box2D.collision.shapes.B2PolygonShape";
box2D_collision_shapes_B2PolygonShape.asArray = function(vertices,vertexCount) {
	var polygonShape = new box2D_collision_shapes_B2PolygonShape();
	polygonShape.setAsArray(vertices,vertexCount);
	return polygonShape;
};
box2D_collision_shapes_B2PolygonShape.asVector = function(vertices,vertexCount) {
	var polygonShape = new box2D_collision_shapes_B2PolygonShape();
	polygonShape.setAsVector(vertices,vertexCount);
	return polygonShape;
};
box2D_collision_shapes_B2PolygonShape.asBox = function(hx,hy) {
	var polygonShape = new box2D_collision_shapes_B2PolygonShape();
	polygonShape.setAsBox(hx,hy);
	return polygonShape;
};
box2D_collision_shapes_B2PolygonShape.asOrientedBox = function(hx,hy,center,angle) {
	if(angle == null) {
		angle = 0.0;
	}
	var polygonShape = new box2D_collision_shapes_B2PolygonShape();
	polygonShape.setAsOrientedBox(hx,hy,center,angle);
	return polygonShape;
};
box2D_collision_shapes_B2PolygonShape.asEdge = function(v1,v2) {
	var polygonShape = new box2D_collision_shapes_B2PolygonShape();
	polygonShape.setAsEdge(v1,v2);
	return polygonShape;
};
box2D_collision_shapes_B2PolygonShape.computeCentroid = function(vs,count) {
	var c = new box2D_common_math_B2Vec2();
	var area = 0.0;
	var p1X = 0.0;
	var p1Y = 0.0;
	var inv3 = 0.33333333333333331;
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		var p2 = vs[i];
		var p3 = i + 1 < count ? vs[i + 1 | 0] : vs[0];
		var e1X = p2.x - p1X;
		var e1Y = p2.y - p1Y;
		var e2X = p3.x - p1X;
		var e2Y = p3.y - p1Y;
		var D = e1X * e2Y - e1Y * e2X;
		var triangleArea = 0.5 * D;
		area += triangleArea;
		c.x += triangleArea * inv3 * (p1X + p2.x + p3.x);
		c.y += triangleArea * inv3 * (p1Y + p2.y + p3.y);
	}
	c.x *= 1.0 / area;
	c.y *= 1.0 / area;
	return c;
};
box2D_collision_shapes_B2PolygonShape.computeOBB = function(obb,vs,count) {
	var i;
	var p = [];
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i1 = _g++;
		p[i1] = vs[i1];
	}
	p[count] = p[0];
	var minArea = Number.MAX_VALUE;
	var _g2 = 1;
	var _g3 = count + 1;
	while(_g2 < _g3) {
		var i2 = _g2++;
		var root = p[i2 - 1 | 0];
		var uxX = p[i2].x - root.x;
		var uxY = p[i2].y - root.y;
		var length = Math.sqrt(uxX * uxX + uxY * uxY);
		uxX /= length;
		uxY /= length;
		var uyX = -uxY;
		var uyY = uxX;
		var lowerX = Number.MAX_VALUE;
		var lowerY = Number.MAX_VALUE;
		var upperX = -Number.MAX_VALUE;
		var upperY = -Number.MAX_VALUE;
		var _g21 = 0;
		var _g31 = count;
		while(_g21 < _g31) {
			var j = _g21++;
			var dX = p[j].x - root.x;
			var dY = p[j].y - root.y;
			var rX = uxX * dX + uxY * dY;
			var rY = uyX * dX + uyY * dY;
			if(rX < lowerX) {
				lowerX = rX;
			}
			if(rY < lowerY) {
				lowerY = rY;
			}
			if(rX > upperX) {
				upperX = rX;
			}
			if(rY > upperY) {
				upperY = rY;
			}
		}
		var area = (upperX - lowerX) * (upperY - lowerY);
		if(area < 0.95 * minArea) {
			minArea = area;
			obb.R.col1.x = uxX;
			obb.R.col1.y = uxY;
			obb.R.col2.x = uyX;
			obb.R.col2.y = uyY;
			var centerX = 0.5 * (lowerX + upperX);
			var centerY = 0.5 * (lowerY + upperY);
			var tMat = obb.R;
			obb.center.x = root.x + (tMat.col1.x * centerX + tMat.col2.x * centerY);
			obb.center.y = root.y + (tMat.col1.y * centerX + tMat.col2.y * centerY);
			obb.extents.x = 0.5 * (upperX - lowerX);
			obb.extents.y = 0.5 * (upperY - lowerY);
		}
	}
};
box2D_collision_shapes_B2PolygonShape.__super__ = box2D_collision_shapes_B2Shape;
box2D_collision_shapes_B2PolygonShape.prototype = $extend(box2D_collision_shapes_B2Shape.prototype,{
	copy: function() {
		var s = new box2D_collision_shapes_B2PolygonShape();
		s.set(this);
		return s;
	}
	,set: function(other) {
		box2D_collision_shapes_B2Shape.prototype.set.call(this,other);
		if(((other) instanceof box2D_collision_shapes_B2PolygonShape)) {
			var other2 = js_Boot.__cast(other , box2D_collision_shapes_B2PolygonShape);
			this.m_centroid.setV(other2.m_centroid);
			this.m_vertexCount = other2.m_vertexCount;
			this.reserve(this.m_vertexCount);
			var _g = 0;
			var _g1 = this.m_vertexCount;
			while(_g < _g1) {
				var i = _g++;
				this.m_vertices[i].setV(other2.m_vertices[i]);
				this.m_normals[i].setV(other2.m_normals[i]);
			}
		}
	}
	,setAsArray: function(vertices,vertexCount) {
		if(vertexCount == null) {
			vertexCount = 0;
		}
		var v = [];
		var _g = 0;
		while(_g < vertices.length) {
			var tVec = vertices[_g];
			++_g;
			v.push(tVec);
		}
		this.setAsVector(v,vertexCount);
	}
	,setAsVector: function(vertices,vertexCount) {
		if(vertexCount == null) {
			vertexCount = 0;
		}
		if(vertexCount == 0) {
			vertexCount = vertices.length;
		}
		box2D_common_B2Settings.b2Assert(2 <= vertexCount);
		this.m_vertexCount = vertexCount | 0;
		this.reserve(vertexCount | 0);
		var i;
		var _g = 0;
		var _g1 = this.m_vertexCount;
		while(_g < _g1) {
			var i1 = _g++;
			this.m_vertices[i1].setV(vertices[i1]);
		}
		var _g2 = 0;
		var _g3 = this.m_vertexCount;
		while(_g2 < _g3) {
			var i2 = _g2++;
			var i11 = i2;
			var i21 = i2 + 1 < this.m_vertexCount ? i2 + 1 : 0;
			var edge = box2D_common_math_B2Math.subtractVV(this.m_vertices[i21],this.m_vertices[i11]);
			box2D_common_B2Settings.b2Assert(edge.lengthSquared() > Number.MIN_VALUE);
			this.m_normals[i2].setV(box2D_common_math_B2Math.crossVF(edge,1.0));
			this.m_normals[i2].normalize();
		}
		this.m_centroid = box2D_collision_shapes_B2PolygonShape.computeCentroid(this.m_vertices,this.m_vertexCount);
	}
	,setAsBox: function(hx,hy) {
		this.m_vertexCount = 4;
		this.reserve(4);
		this.m_vertices[0].set(-hx,-hy);
		this.m_vertices[1].set(hx,-hy);
		this.m_vertices[2].set(hx,hy);
		this.m_vertices[3].set(-hx,hy);
		this.m_normals[0].set(0.0,-1.0);
		this.m_normals[1].set(1.0,0.0);
		this.m_normals[2].set(0.0,1.0);
		this.m_normals[3].set(-1.0,0.0);
		this.m_centroid.setZero();
	}
	,setAsOrientedBox: function(hx,hy,center,angle) {
		if(angle == null) {
			angle = 0.0;
		}
		this.m_vertexCount = 4;
		this.reserve(4);
		this.m_vertices[0].set(-hx,-hy);
		this.m_vertices[1].set(hx,-hy);
		this.m_vertices[2].set(hx,hy);
		this.m_vertices[3].set(-hx,hy);
		this.m_normals[0].set(0.0,-1.0);
		this.m_normals[1].set(1.0,0.0);
		this.m_normals[2].set(0.0,1.0);
		this.m_normals[3].set(-1.0,0.0);
		this.m_centroid = center;
		var xf = new box2D_common_math_B2Transform();
		xf.position = center;
		xf.R.set(angle);
		var _g = 0;
		var _g1 = this.m_vertexCount;
		while(_g < _g1) {
			var i = _g++;
			this.m_vertices[i] = box2D_common_math_B2Math.mulX(xf,this.m_vertices[i]);
			this.m_normals[i] = box2D_common_math_B2Math.mulMV(xf.R,this.m_normals[i]);
		}
	}
	,setAsEdge: function(v1,v2) {
		this.m_vertexCount = 2;
		this.reserve(2);
		this.m_vertices[0].setV(v1);
		this.m_vertices[1].setV(v2);
		this.m_centroid.x = 0.5 * (v1.x + v2.x);
		this.m_centroid.y = 0.5 * (v1.y + v2.y);
		this.m_normals[0] = box2D_common_math_B2Math.crossVF(box2D_common_math_B2Math.subtractVV(v2,v1),1.0);
		this.m_normals[0].normalize();
		this.m_normals[1].x = -this.m_normals[0].x;
		this.m_normals[1].y = -this.m_normals[0].y;
	}
	,testPoint: function(xf,p) {
		var tVec;
		var tMat = xf.R;
		var tX = p.x - xf.position.x;
		var tY = p.y - xf.position.y;
		var pLocalX = tX * tMat.col1.x + tY * tMat.col1.y;
		var pLocalY = tX * tMat.col2.x + tY * tMat.col2.y;
		var _g = 0;
		var _g1 = this.m_vertexCount;
		while(_g < _g1) {
			var i = _g++;
			tVec = this.m_vertices[i];
			tX = pLocalX - tVec.x;
			tY = pLocalY - tVec.y;
			tVec = this.m_normals[i];
			var dot = tVec.x * tX + tVec.y * tY;
			if(dot > 0.0) {
				return false;
			}
		}
		return true;
	}
	,rayCast: function(output,input,transform) {
		var lower = 0.0;
		var upper = input.maxFraction;
		var tVec;
		var tX = input.p1.x - transform.position.x;
		var tY = input.p1.y - transform.position.y;
		var tMat = transform.R;
		var p1X = tX * tMat.col1.x + tY * tMat.col1.y;
		var p1Y = tX * tMat.col2.x + tY * tMat.col2.y;
		tX = input.p2.x - transform.position.x;
		tY = input.p2.y - transform.position.y;
		tMat = transform.R;
		var p2X = tX * tMat.col1.x + tY * tMat.col1.y;
		var p2Y = tX * tMat.col2.x + tY * tMat.col2.y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var index = -1;
		var _g = 0;
		var _g1 = this.m_vertexCount;
		while(_g < _g1) {
			var i = _g++;
			tVec = this.m_vertices[i];
			tX = tVec.x - p1X;
			tY = tVec.y - p1Y;
			tVec = this.m_normals[i];
			var numerator = tVec.x * tX + tVec.y * tY;
			var denominator = tVec.x * dX + tVec.y * dY;
			if(denominator == 0.0) {
				if(numerator < 0.0) {
					return false;
				}
			} else if(denominator < 0.0 && numerator < lower * denominator) {
				lower = numerator / denominator;
				index = i;
			} else if(denominator > 0.0 && numerator < upper * denominator) {
				upper = numerator / denominator;
			}
			if(upper < lower - Number.MIN_VALUE) {
				return false;
			}
		}
		if(index >= 0) {
			output.fraction = lower;
			tMat = transform.R;
			tVec = this.m_normals[index];
			output.normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			output.normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			return true;
		}
		return false;
	}
	,computeAABB: function(aabb,xf) {
		var tMat = xf.R;
		var tVec = this.m_vertices[0];
		var lowerX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		var lowerY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var upperX = lowerX;
		var upperY = lowerY;
		var _g = 1;
		var _g1 = this.m_vertexCount;
		while(_g < _g1) {
			var i = _g++;
			tVec = this.m_vertices[i];
			var vX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			var vY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			lowerX = lowerX < vX ? lowerX : vX;
			lowerY = lowerY < vY ? lowerY : vY;
			upperX = upperX > vX ? upperX : vX;
			upperY = upperY > vY ? upperY : vY;
		}
		aabb.lowerBound.x = lowerX - this.m_radius;
		aabb.lowerBound.y = lowerY - this.m_radius;
		aabb.upperBound.x = upperX + this.m_radius;
		aabb.upperBound.y = upperY + this.m_radius;
	}
	,computeMass: function(massData,density) {
		if(this.m_vertexCount == 2) {
			massData.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x);
			massData.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y);
			massData.mass = 0.0;
			massData.I = 0.0;
			return;
		}
		var centerX = 0.0;
		var centerY = 0.0;
		var area = 0.0;
		var I = 0.0;
		var p1X = 0.0;
		var p1Y = 0.0;
		var k_inv3 = 0.33333333333333331;
		var _g = 0;
		var _g1 = this.m_vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var p2 = this.m_vertices[i];
			var p3 = i + 1 < this.m_vertexCount ? this.m_vertices[i + 1 | 0] : this.m_vertices[0];
			var e1X = p2.x - p1X;
			var e1Y = p2.y - p1Y;
			var e2X = p3.x - p1X;
			var e2Y = p3.y - p1Y;
			var D = e1X * e2Y - e1Y * e2X;
			var triangleArea = 0.5 * D;
			area += triangleArea;
			centerX += triangleArea * k_inv3 * (p1X + p2.x + p3.x);
			centerY += triangleArea * k_inv3 * (p1Y + p2.y + p3.y);
			var px = p1X;
			var py = p1Y;
			var ex1 = e1X;
			var ey1 = e1Y;
			var ex2 = e2X;
			var ey2 = e2Y;
			var intx2 = k_inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;
			var inty2 = k_inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;
			I += D * (intx2 + inty2);
		}
		massData.mass = density * area;
		centerX *= 1.0 / area;
		centerY *= 1.0 / area;
		massData.center.set(centerX,centerY);
		massData.I = density * I;
	}
	,computeSubmergedArea: function(normal,offset,xf,c) {
		var normalL = box2D_common_math_B2Math.mulTMV(xf.R,normal);
		var offsetL = offset - box2D_common_math_B2Math.dot(normal,xf.position);
		var depths = [];
		var diveCount = 0;
		var intoIndex = -1;
		var outoIndex = -1;
		var lastSubmerged = false;
		var _g = 0;
		var _g1 = this.m_vertexCount;
		while(_g < _g1) {
			var i = _g++;
			depths[i] = box2D_common_math_B2Math.dot(normalL,this.m_vertices[i]) - offsetL;
			var isSubmerged = depths[i] < -Number.MIN_VALUE;
			if(i > 0) {
				if(isSubmerged) {
					if(!lastSubmerged) {
						intoIndex = i - 1;
						++diveCount;
					}
				} else if(lastSubmerged) {
					outoIndex = i - 1;
					++diveCount;
				}
			}
			lastSubmerged = isSubmerged;
		}
		switch(diveCount) {
		case 0:
			if(lastSubmerged) {
				var md = new box2D_collision_shapes_B2MassData();
				this.computeMass(md,1);
				c.setV(box2D_common_math_B2Math.mulX(xf,md.center));
				return md.mass;
			} else {
				return 0;
			}
			break;
		case 1:
			if(intoIndex == -1) {
				intoIndex = this.m_vertexCount - 1;
			} else {
				outoIndex = this.m_vertexCount - 1;
			}
			break;
		}
		var intoIndex2 = (intoIndex + 1) % this.m_vertexCount;
		var outoIndex2 = (outoIndex + 1) % this.m_vertexCount;
		var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);
		var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);
		var intoVec = new box2D_common_math_B2Vec2(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda,this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);
		var outoVec = new box2D_common_math_B2Vec2(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda,this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);
		var area = 0;
		var center = new box2D_common_math_B2Vec2();
		var p2 = this.m_vertices[intoIndex2];
		var p3;
		var i1 = intoIndex2;
		while(i1 != outoIndex2) {
			i1 = (i1 + 1) % this.m_vertexCount;
			if(i1 == outoIndex2) {
				p3 = outoVec;
			} else {
				p3 = this.m_vertices[i1];
			}
			var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));
			area += triangleArea;
			center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;
			center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;
			p2 = p3;
		}
		center.multiply(1 / area);
		c.setV(box2D_common_math_B2Math.mulX(xf,center));
		return area;
	}
	,getVertexCount: function() {
		return this.m_vertexCount;
	}
	,getVertices: function() {
		return this.m_vertices;
	}
	,getNormals: function() {
		return this.m_normals;
	}
	,getSupport: function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		var _g = 1;
		var _g1 = this.m_vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if(value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return bestIndex;
	}
	,getSupportVertex: function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		var _g = 1;
		var _g1 = this.m_vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if(value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return this.m_vertices[bestIndex];
	}
	,validate: function() {
		return false;
	}
	,reserve: function(count) {
		var _g = this.m_vertices.length;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			this.m_vertices[i] = new box2D_common_math_B2Vec2();
			this.m_normals[i] = new box2D_common_math_B2Vec2();
		}
	}
	,__class__: box2D_collision_shapes_B2PolygonShape
});
var box2D_common_B2Color = function(rr,gg,bb) {
	this._r = 255 * box2D_common_math_B2Math.clamp(rr,0.0,1.0) | 0;
	this._g = 255 * box2D_common_math_B2Math.clamp(gg,0.0,1.0) | 0;
	this._b = 255 * box2D_common_math_B2Math.clamp(bb,0.0,1.0) | 0;
};
$hxClasses["box2D.common.B2Color"] = box2D_common_B2Color;
box2D_common_B2Color.__name__ = "box2D.common.B2Color";
box2D_common_B2Color.prototype = {
	set: function(rr,gg,bb) {
		this._r = 255 * box2D_common_math_B2Math.clamp(rr,0.0,1.0) | 0;
		this._g = 255 * box2D_common_math_B2Math.clamp(gg,0.0,1.0) | 0;
		this._b = 255 * box2D_common_math_B2Math.clamp(bb,0.0,1.0) | 0;
	}
	,set_r: function(rr) {
		return this._r = 255 * box2D_common_math_B2Math.clamp(rr,0.0,1.0) | 0;
	}
	,set_g: function(gg) {
		return this._g = 255 * box2D_common_math_B2Math.clamp(gg,0.0,1.0) | 0;
	}
	,set_b: function(bb) {
		return this._b = 255 * box2D_common_math_B2Math.clamp(bb,0.0,1.0) | 0;
	}
	,get_color: function() {
		return this._r << 16 | this._g << 8 | this._b;
	}
	,__class__: box2D_common_B2Color
	,__properties__: {get_color:"get_color",set_b:"set_b",set_g:"set_g",set_r:"set_r"}
};
var box2D_common_B2Settings = function() { };
$hxClasses["box2D.common.B2Settings"] = box2D_common_B2Settings;
box2D_common_B2Settings.__name__ = "box2D.common.B2Settings";
box2D_common_B2Settings.b2MixFriction = function(friction1,friction2) {
	return Math.sqrt(friction1 * friction2);
};
box2D_common_B2Settings.b2MixRestitution = function(restitution1,restitution2) {
	if(restitution1 > restitution2) {
		return restitution1;
	} else {
		return restitution2;
	}
};
box2D_common_B2Settings.b2Assert = function(a) {
	if(!a) {
		throw new js__$Boot_HaxeError("Assertion Failed");
	}
};
var box2D_common_math_B2Mat33 = function(c1,c2,c3) {
	this.col1 = new box2D_common_math_B2Vec3();
	this.col2 = new box2D_common_math_B2Vec3();
	this.col3 = new box2D_common_math_B2Vec3();
	if(c1 == null && c2 == null && c3 == null) {
		this.col1.setZero();
		this.col2.setZero();
		this.col3.setZero();
	} else {
		this.col1.setV(c1);
		this.col2.setV(c2);
		this.col3.setV(c3);
	}
};
$hxClasses["box2D.common.math.B2Mat33"] = box2D_common_math_B2Mat33;
box2D_common_math_B2Mat33.__name__ = "box2D.common.math.B2Mat33";
box2D_common_math_B2Mat33.prototype = {
	setVVV: function(c1,c2,c3) {
		this.col1.setV(c1);
		this.col2.setV(c2);
		this.col3.setV(c3);
	}
	,copy: function() {
		return new box2D_common_math_B2Mat33(this.col1,this.col2,this.col3);
	}
	,setM: function(m) {
		this.col1.setV(m.col1);
		this.col2.setV(m.col2);
		this.col3.setV(m.col3);
	}
	,addM: function(m) {
		this.col1.x += m.col1.x;
		this.col1.y += m.col1.y;
		this.col1.z += m.col1.z;
		this.col2.x += m.col2.x;
		this.col2.y += m.col2.y;
		this.col2.z += m.col2.z;
		this.col3.x += m.col3.x;
		this.col3.y += m.col3.y;
		this.col3.z += m.col3.z;
	}
	,setIdentity: function() {
		this.col1.x = 1.0;
		this.col2.x = 0.0;
		this.col3.x = 0.0;
		this.col1.y = 0.0;
		this.col2.y = 1.0;
		this.col3.y = 0.0;
		this.col1.z = 0.0;
		this.col2.z = 0.0;
		this.col3.z = 1.0;
	}
	,setZero: function() {
		this.col1.x = 0.0;
		this.col2.x = 0.0;
		this.col3.x = 0.0;
		this.col1.y = 0.0;
		this.col2.y = 0.0;
		this.col3.y = 0.0;
		this.col1.z = 0.0;
		this.col2.z = 0.0;
		this.col3.z = 0.0;
	}
	,solve22: function(out,bX,bY) {
		var a11 = this.col1.x;
		var a12 = this.col2.x;
		var a21 = this.col1.y;
		var a22 = this.col2.y;
		var det = a11 * a22 - a12 * a21;
		if(det != 0.0) {
			det = 1.0 / det;
		}
		out.x = det * (a22 * bX - a12 * bY);
		out.y = det * (a11 * bY - a21 * bX);
		return out;
	}
	,solve33: function(out,bX,bY,bZ) {
		var a11 = this.col1.x;
		var a21 = this.col1.y;
		var a31 = this.col1.z;
		var a12 = this.col2.x;
		var a22 = this.col2.y;
		var a32 = this.col2.z;
		var a13 = this.col3.x;
		var a23 = this.col3.y;
		var a33 = this.col3.z;
		var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);
		if(det != 0.0) {
			det = 1.0 / det;
		}
		out.x = det * (bX * (a22 * a33 - a32 * a23) + bY * (a32 * a13 - a12 * a33) + bZ * (a12 * a23 - a22 * a13));
		out.y = det * (a11 * (bY * a33 - bZ * a23) + a21 * (bZ * a13 - bX * a33) + a31 * (bX * a23 - bY * a13));
		out.z = det * (a11 * (a22 * bZ - a32 * bY) + a21 * (a32 * bX - a12 * bZ) + a31 * (a12 * bY - a22 * bX));
		return out;
	}
	,__class__: box2D_common_math_B2Mat33
};
var box2D_common_math_B2Math = function() { };
$hxClasses["box2D.common.math.B2Math"] = box2D_common_math_B2Math;
box2D_common_math_B2Math.__name__ = "box2D.common.math.B2Math";
box2D_common_math_B2Math.__properties__ = {get_MAX_VALUE:"get_MAX_VALUE",get_MIN_VALUE:"get_MIN_VALUE"};
box2D_common_math_B2Math.isValid = function(x) {
	if(isNaN(x) || x == -Infinity || x == Infinity) {
		return false;
	}
	return true;
};
box2D_common_math_B2Math.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
};
box2D_common_math_B2Math.crossVV = function(a,b) {
	return a.x * b.y - a.y * b.x;
};
box2D_common_math_B2Math.crossVF = function(a,s) {
	var v = new box2D_common_math_B2Vec2(s * a.y,-s * a.x);
	return v;
};
box2D_common_math_B2Math.crossFV = function(s,a) {
	var v = new box2D_common_math_B2Vec2(-s * a.y,s * a.x);
	return v;
};
box2D_common_math_B2Math.mulMV = function(A,v) {
	var u = new box2D_common_math_B2Vec2(A.col1.x * v.x + A.col2.x * v.y,A.col1.y * v.x + A.col2.y * v.y);
	return u;
};
box2D_common_math_B2Math.mulTMV = function(A,v) {
	var u = new box2D_common_math_B2Vec2(box2D_common_math_B2Math.dot(v,A.col1),box2D_common_math_B2Math.dot(v,A.col2));
	return u;
};
box2D_common_math_B2Math.mulX = function(T,v) {
	var a = box2D_common_math_B2Math.mulMV(T.R,v);
	a.x += T.position.x;
	a.y += T.position.y;
	return a;
};
box2D_common_math_B2Math.mulXT = function(T,v) {
	var a = box2D_common_math_B2Math.subtractVV(v,T.position);
	var tX = a.x * T.R.col1.x + a.y * T.R.col1.y;
	a.y = a.x * T.R.col2.x + a.y * T.R.col2.y;
	a.x = tX;
	return a;
};
box2D_common_math_B2Math.addVV = function(a,b) {
	var v = new box2D_common_math_B2Vec2(a.x + b.x,a.y + b.y);
	return v;
};
box2D_common_math_B2Math.subtractVV = function(a,b) {
	var v = new box2D_common_math_B2Vec2(a.x - b.x,a.y - b.y);
	return v;
};
box2D_common_math_B2Math.distance = function(a,b) {
	var cX = a.x - b.x;
	var cY = a.y - b.y;
	return Math.sqrt(cX * cX + cY * cY);
};
box2D_common_math_B2Math.distanceSquared = function(a,b) {
	var cX = a.x - b.x;
	var cY = a.y - b.y;
	return cX * cX + cY * cY;
};
box2D_common_math_B2Math.mulFV = function(s,a) {
	var v = new box2D_common_math_B2Vec2(s * a.x,s * a.y);
	return v;
};
box2D_common_math_B2Math.addMM = function(A,B) {
	var C = box2D_common_math_B2Mat22.fromVV(box2D_common_math_B2Math.addVV(A.col1,B.col1),box2D_common_math_B2Math.addVV(A.col2,B.col2));
	return C;
};
box2D_common_math_B2Math.mulMM = function(A,B) {
	var C = box2D_common_math_B2Mat22.fromVV(box2D_common_math_B2Math.mulMV(A,B.col1),box2D_common_math_B2Math.mulMV(A,B.col2));
	return C;
};
box2D_common_math_B2Math.mulTMM = function(A,B) {
	var c1 = new box2D_common_math_B2Vec2(box2D_common_math_B2Math.dot(A.col1,B.col1),box2D_common_math_B2Math.dot(A.col2,B.col1));
	var c2 = new box2D_common_math_B2Vec2(box2D_common_math_B2Math.dot(A.col1,B.col2),box2D_common_math_B2Math.dot(A.col2,B.col2));
	var C = box2D_common_math_B2Mat22.fromVV(c1,c2);
	return C;
};
box2D_common_math_B2Math.abs = function(a) {
	if(a > 0.0) {
		return a;
	} else {
		return -a;
	}
};
box2D_common_math_B2Math.absV = function(a) {
	var b = new box2D_common_math_B2Vec2(box2D_common_math_B2Math.abs(a.x),box2D_common_math_B2Math.abs(a.y));
	return b;
};
box2D_common_math_B2Math.absM = function(A) {
	var B = box2D_common_math_B2Mat22.fromVV(box2D_common_math_B2Math.absV(A.col1),box2D_common_math_B2Math.absV(A.col2));
	return B;
};
box2D_common_math_B2Math.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
box2D_common_math_B2Math.minV = function(a,b) {
	var c = new box2D_common_math_B2Vec2(box2D_common_math_B2Math.min(a.x,b.x),box2D_common_math_B2Math.min(a.y,b.y));
	return c;
};
box2D_common_math_B2Math.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
box2D_common_math_B2Math.maxV = function(a,b) {
	var c = new box2D_common_math_B2Vec2(box2D_common_math_B2Math.max(a.x,b.x),box2D_common_math_B2Math.max(a.y,b.y));
	return c;
};
box2D_common_math_B2Math.clamp = function(a,low,high) {
	if(a < low) {
		return low;
	} else if(a > high) {
		return high;
	} else {
		return a;
	}
};
box2D_common_math_B2Math.clampV = function(a,low,high) {
	return box2D_common_math_B2Math.maxV(low,box2D_common_math_B2Math.minV(a,high));
};
box2D_common_math_B2Math.swap = function(a,b) {
	var tmp = a[0];
	a[0] = b[0];
	b[0] = tmp;
};
box2D_common_math_B2Math.random = function() {
	return Math.random() * 2 - 1;
};
box2D_common_math_B2Math.randomRange = function(lo,hi) {
	var r = Math.random();
	r = (hi - lo) * r + lo;
	return r;
};
box2D_common_math_B2Math.nextPowerOfTwo = function(x) {
	x |= x >> 1 & 2147483647;
	x |= x >> 2 & 1073741823;
	x |= x >> 4 & 268435455;
	x |= x >> 8 & 16777215;
	x |= x >> 16 & 65535;
	return x + 1;
};
box2D_common_math_B2Math.isPowerOfTwo = function(x) {
	var result = x > 0 && (x & x - 1) == 0;
	return result;
};
box2D_common_math_B2Math.get_MIN_VALUE = function() {
	return Number.MIN_VALUE;
};
box2D_common_math_B2Math.get_MAX_VALUE = function() {
	return Number.MAX_VALUE;
};
var box2D_common_math_B2Sweep = function() {
	this.localCenter = new box2D_common_math_B2Vec2();
	this.c0 = new box2D_common_math_B2Vec2();
	this.c = new box2D_common_math_B2Vec2();
};
$hxClasses["box2D.common.math.B2Sweep"] = box2D_common_math_B2Sweep;
box2D_common_math_B2Sweep.__name__ = "box2D.common.math.B2Sweep";
box2D_common_math_B2Sweep.prototype = {
	set: function(other) {
		this.localCenter.setV(other.localCenter);
		this.c0.setV(other.c0);
		this.c.setV(other.c);
		this.a0 = other.a0;
		this.a = other.a;
		this.t0 = other.t0;
	}
	,copy: function() {
		var copy = new box2D_common_math_B2Sweep();
		copy.localCenter.setV(this.localCenter);
		copy.c0.setV(this.c0);
		copy.c.setV(this.c);
		copy.a0 = this.a0;
		copy.a = this.a;
		copy.t0 = this.t0;
		return copy;
	}
	,getTransform: function(xf,alpha) {
		xf.position.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
		xf.position.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
		var angle = (1.0 - alpha) * this.a0 + alpha * this.a;
		xf.R.set(angle);
		var tMat = xf.R;
		xf.position.x -= tMat.col1.x * this.localCenter.x + tMat.col2.x * this.localCenter.y;
		xf.position.y -= tMat.col1.y * this.localCenter.x + tMat.col2.y * this.localCenter.y;
	}
	,advance: function(t) {
		if(this.t0 < t && 1.0 - this.t0 > Number.MIN_VALUE) {
			var alpha = (t - this.t0) / (1.0 - this.t0);
			this.c0.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
			this.c0.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
			this.a0 = (1.0 - alpha) * this.a0 + alpha * this.a;
			this.t0 = t;
		}
	}
	,__class__: box2D_common_math_B2Sweep
};
var box2D_common_math_B2Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["box2D.common.math.B2Vec3"] = box2D_common_math_B2Vec3;
box2D_common_math_B2Vec3.__name__ = "box2D.common.math.B2Vec3";
box2D_common_math_B2Vec3.prototype = {
	setZero: function() {
		this.x = this.y = this.z = 0.0;
	}
	,set: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,setV: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
	}
	,getNegative: function() {
		return new box2D_common_math_B2Vec3(-this.x,-this.y,-this.z);
	}
	,negativeSelf: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
	}
	,copy: function() {
		return new box2D_common_math_B2Vec3(this.x,this.y,this.z);
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
	}
	,subtract: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
	}
	,multiply: function(a) {
		this.x *= a;
		this.y *= a;
		this.z *= a;
	}
	,__class__: box2D_common_math_B2Vec3
};
var box2D_dynamics_B2Body = function(bd,world) {
	this.m_xf = new box2D_common_math_B2Transform();
	this.m_sweep = new box2D_common_math_B2Sweep();
	this.m_linearVelocity = new box2D_common_math_B2Vec2();
	this.m_force = new box2D_common_math_B2Vec2();
	this.m_flags = 0;
	if(bd.bullet) {
		this.m_flags |= box2D_dynamics_B2Body.e_bulletFlag;
	}
	if(bd.fixedRotation) {
		this.m_flags |= box2D_dynamics_B2Body.e_fixedRotationFlag;
	}
	if(bd.allowSleep) {
		this.m_flags |= box2D_dynamics_B2Body.e_allowSleepFlag;
	}
	if(bd.awake) {
		this.m_flags |= box2D_dynamics_B2Body.e_awakeFlag;
	}
	if(bd.active) {
		this.m_flags |= box2D_dynamics_B2Body.e_activeFlag;
	}
	this.m_world = world;
	this.m_xf.position.setV(bd.position);
	this.m_xf.R.set(bd.angle);
	this.m_sweep.localCenter.setZero();
	this.m_sweep.t0 = 1.0;
	this.m_sweep.a0 = this.m_sweep.a = bd.angle;
	var tMat = this.m_xf.R;
	var tVec = this.m_sweep.localCenter;
	this.m_sweep.c.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
	this.m_sweep.c.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
	this.m_sweep.c.x += this.m_xf.position.x;
	this.m_sweep.c.y += this.m_xf.position.y;
	this.m_sweep.c0.setV(this.m_sweep.c);
	this.m_jointList = null;
	this.m_controllerList = null;
	this.m_contactList = null;
	this.m_controllerCount = 0;
	this.m_prev = null;
	this.m_next = null;
	this.m_linearVelocity.setV(bd.linearVelocity);
	this.m_angularVelocity = bd.angularVelocity;
	this.m_linearDamping = bd.linearDamping;
	this.m_angularDamping = bd.angularDamping;
	this.m_force.set(0.0,0.0);
	this.m_torque = 0.0;
	this.m_sleepTime = 0.0;
	this.m_type = bd.type;
	if(this.m_type == 2) {
		this.m_mass = 1.0;
		this.m_invMass = 1.0;
	} else {
		this.m_mass = 0.0;
		this.m_invMass = 0.0;
	}
	this.m_I = 0.0;
	this.m_invI = 0.0;
	this.m_inertiaScale = bd.inertiaScale;
	this.m_userData = bd.userData;
	this.m_fixtureList = null;
	this.m_fixtureCount = 0;
};
$hxClasses["box2D.dynamics.B2Body"] = box2D_dynamics_B2Body;
box2D_dynamics_B2Body.__name__ = "box2D.dynamics.B2Body";
box2D_dynamics_B2Body.prototype = {
	connectEdges: function(s1,s2,angle1) {
		var angle2 = Math.atan2(s2.getDirectionVector().y,s2.getDirectionVector().x);
		var coreOffset = Math.tan((angle2 - angle1) * 0.5);
		var core = box2D_common_math_B2Math.mulFV(coreOffset,s2.getDirectionVector());
		core = box2D_common_math_B2Math.subtractVV(core,s2.getNormalVector());
		core = box2D_common_math_B2Math.mulFV(box2D_common_B2Settings.b2_toiSlop,core);
		core = box2D_common_math_B2Math.addVV(core,s2.getVertex1());
		var cornerDir = box2D_common_math_B2Math.addVV(s1.getDirectionVector(),s2.getDirectionVector());
		cornerDir.normalize();
		var convex = box2D_common_math_B2Math.dot(s1.getDirectionVector(),s2.getNormalVector()) > 0.0;
		s1.setNextEdge(s2,core,cornerDir,convex);
		s2.setPrevEdge(s1,core,cornerDir,convex);
		return angle2;
	}
	,createFixture: function(def) {
		if(this.m_world.isLocked() == true) {
			return null;
		}
		var fixture = new box2D_dynamics_B2Fixture();
		fixture.create(this,this.m_xf,def);
		if((this.m_flags & box2D_dynamics_B2Body.e_activeFlag) != 0) {
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			fixture.createProxy(broadPhase,this.m_xf);
		}
		fixture.m_next = this.m_fixtureList;
		this.m_fixtureList = fixture;
		++this.m_fixtureCount;
		fixture.m_body = this;
		if(fixture.m_density > 0.0) {
			this.resetMassData();
		}
		this.m_world.m_flags |= box2D_dynamics_B2World.e_newFixture;
		return fixture;
	}
	,createFixture2: function(shape,density) {
		if(density == null) {
			density = 0.0;
		}
		var def = new box2D_dynamics_B2FixtureDef();
		def.shape = shape;
		def.density = density;
		return this.createFixture(def);
	}
	,DestroyFixture: function(fixture) {
		if(this.m_world.isLocked() == true) {
			return;
		}
		var node = this.m_fixtureList;
		var ppF = null;
		var found = false;
		while(node != null) {
			if(node == fixture) {
				if(ppF != null) {
					ppF.m_next = fixture.m_next;
				} else {
					this.m_fixtureList = fixture.m_next;
				}
				found = true;
				break;
			}
			ppF = node;
			node = node.m_next;
		}
		var edge = this.m_contactList;
		while(edge != null) {
			var c = edge.contact;
			edge = edge.next;
			var fixtureA = c.getFixtureA();
			var fixtureB = c.getFixtureB();
			if(fixture == fixtureA || fixture == fixtureB) {
				this.m_world.m_contactManager.destroy(c);
			}
		}
		if((this.m_flags & box2D_dynamics_B2Body.e_activeFlag) != 0) {
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			fixture.destroyProxy(broadPhase);
		}
		fixture.destroy();
		fixture.m_body = null;
		fixture.m_next = null;
		--this.m_fixtureCount;
		this.resetMassData();
	}
	,setPositionAndAngle: function(position,angle) {
		if(this.m_world.isLocked() == true) {
			return;
		}
		this.m_xf.R.set(angle);
		this.m_xf.position.setV(position);
		var tMat = this.m_xf.R;
		var tVec = this.m_sweep.localCenter;
		this.m_sweep.c.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
		this.m_sweep.c.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
		this.m_sweep.c.x += this.m_xf.position.x;
		this.m_sweep.c.y += this.m_xf.position.y;
		this.m_sweep.c0.setV(this.m_sweep.c);
		this.m_sweep.a0 = this.m_sweep.a = angle;
		var broadPhase = this.m_world.m_contactManager.m_broadPhase;
		var f = this.m_fixtureList;
		while(f != null) {
			f.synchronize(broadPhase,this.m_xf,this.m_xf);
			f = f.m_next;
		}
		this.m_world.m_contactManager.findNewContacts();
	}
	,setTransform: function(xf) {
		this.setPositionAndAngle(xf.position,xf.getAngle());
	}
	,getTransform: function() {
		return this.m_xf;
	}
	,getPosition: function() {
		return this.m_xf.position;
	}
	,setPosition: function(position) {
		this.setPositionAndAngle(position,this.getAngle());
	}
	,getAngle: function() {
		return this.m_sweep.a;
	}
	,setAngle: function(angle) {
		this.setPositionAndAngle(this.getPosition(),angle);
	}
	,getWorldCenter: function() {
		return this.m_sweep.c;
	}
	,getLocalCenter: function() {
		return this.m_sweep.localCenter;
	}
	,setLinearVelocity: function(v) {
		if(this.m_type == 0) {
			return;
		}
		this.m_linearVelocity.setV(v);
	}
	,getLinearVelocity: function() {
		return this.m_linearVelocity;
	}
	,setAngularVelocity: function(omega) {
		if(this.m_type == 0) {
			return;
		}
		this.m_angularVelocity = omega;
	}
	,getAngularVelocity: function() {
		return this.m_angularVelocity;
	}
	,getDefinition: function() {
		var bd = new box2D_dynamics_B2BodyDef();
		bd.type = this.getType();
		bd.allowSleep = (this.m_flags & box2D_dynamics_B2Body.e_allowSleepFlag) == box2D_dynamics_B2Body.e_allowSleepFlag;
		bd.angle = this.getAngle();
		bd.angularDamping = this.m_angularDamping;
		bd.angularVelocity = this.m_angularVelocity;
		bd.fixedRotation = (this.m_flags & box2D_dynamics_B2Body.e_fixedRotationFlag) == box2D_dynamics_B2Body.e_fixedRotationFlag;
		bd.bullet = (this.m_flags & box2D_dynamics_B2Body.e_bulletFlag) == box2D_dynamics_B2Body.e_bulletFlag;
		bd.awake = (this.m_flags & box2D_dynamics_B2Body.e_awakeFlag) == box2D_dynamics_B2Body.e_awakeFlag;
		bd.linearDamping = this.m_linearDamping;
		bd.linearVelocity.setV(this.getLinearVelocity());
		bd.position = this.getPosition();
		bd.userData = this.getUserData();
		return bd;
	}
	,applyForce: function(force,point) {
		if(this.m_type != 2) {
			return;
		}
		if(this.isAwake() == false) {
			this.setAwake(true);
		}
		this.m_force.x += force.x;
		this.m_force.y += force.y;
		this.m_torque += (point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x;
	}
	,applyTorque: function(torque) {
		if(this.m_type != 2) {
			return;
		}
		if(this.isAwake() == false) {
			this.setAwake(true);
		}
		this.m_torque += torque;
	}
	,applyImpulse: function(impulse,point) {
		if(this.m_type != 2) {
			return;
		}
		if(this.isAwake() == false) {
			this.setAwake(true);
		}
		this.m_linearVelocity.x += this.m_invMass * impulse.x;
		this.m_linearVelocity.y += this.m_invMass * impulse.y;
		this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);
	}
	,split: function(callbackMethod) {
		var linearVelocity = this.getLinearVelocity().copy();
		var angularVelocity = this.getAngularVelocity();
		var center = this.getWorldCenter();
		var body1 = this;
		var body2 = this.m_world.createBody(this.getDefinition());
		var prev = null;
		var f = body1.m_fixtureList;
		while(f != null) if(callbackMethod(f)) {
			var next = f.m_next;
			if(prev != null) {
				prev.m_next = next;
			} else {
				body1.m_fixtureList = next;
			}
			body1.m_fixtureCount--;
			f.m_next = body2.m_fixtureList;
			body2.m_fixtureList = f;
			body2.m_fixtureCount++;
			f.m_body = body2;
			f = next;
		} else {
			prev = f;
			f = f.m_next;
		}
		body1.resetMassData();
		body2.resetMassData();
		var center1 = body1.getWorldCenter();
		var center2 = body2.getWorldCenter();
		var velocity1 = box2D_common_math_B2Math.addVV(linearVelocity,box2D_common_math_B2Math.crossFV(angularVelocity,box2D_common_math_B2Math.subtractVV(center1,center)));
		var velocity2 = box2D_common_math_B2Math.addVV(linearVelocity,box2D_common_math_B2Math.crossFV(angularVelocity,box2D_common_math_B2Math.subtractVV(center2,center)));
		body1.setLinearVelocity(velocity1);
		body2.setLinearVelocity(velocity2);
		body1.setAngularVelocity(angularVelocity);
		body2.setAngularVelocity(angularVelocity);
		body1.synchronizeFixtures();
		body2.synchronizeFixtures();
		return body2;
	}
	,merge: function(other) {
		var f = other.m_fixtureList;
		var body1 = this;
		var body2 = other;
		while(f != null) {
			var next = f.m_next;
			other.m_fixtureCount--;
			f.m_next = this.m_fixtureList;
			this.m_fixtureList = f;
			this.m_fixtureCount++;
			f.m_body = body2;
			f = next;
		}
		body1.m_fixtureCount = 0;
		var center1 = body1.getWorldCenter();
		var center2 = body2.getWorldCenter();
		var velocity1 = body1.getLinearVelocity().copy();
		var velocity2 = body2.getLinearVelocity().copy();
		var angular1 = body1.getAngularVelocity();
		var angular = body2.getAngularVelocity();
		body1.resetMassData();
		this.synchronizeFixtures();
	}
	,getMass: function() {
		return this.m_mass;
	}
	,getInertia: function() {
		return this.m_I;
	}
	,getMassData: function(data) {
		data.mass = this.m_mass;
		data.I = this.m_I;
		data.center.setV(this.m_sweep.localCenter);
	}
	,setMassData: function(massData) {
		box2D_common_B2Settings.b2Assert(this.m_world.isLocked() == false);
		if(this.m_world.isLocked() == true) {
			return;
		}
		if(this.m_type != 2) {
			return;
		}
		this.m_invMass = 0.0;
		this.m_I = 0.0;
		this.m_invI = 0.0;
		this.m_mass = massData.mass;
		if(this.m_mass <= 0.0) {
			this.m_mass = 1.0;
		}
		this.m_invMass = 1.0 / this.m_mass;
		if(massData.I > 0.0 && (this.m_flags & box2D_dynamics_B2Body.e_fixedRotationFlag) == 0) {
			this.m_I = massData.I - this.m_mass * (massData.center.x * massData.center.x + massData.center.y * massData.center.y);
			this.m_invI = 1.0 / this.m_I;
		}
		var oldCenter = this.m_sweep.c.copy();
		this.m_sweep.localCenter.setV(massData.center);
		this.m_sweep.c0.setV(box2D_common_math_B2Math.mulX(this.m_xf,this.m_sweep.localCenter));
		this.m_sweep.c.setV(this.m_sweep.c0);
		this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - oldCenter.y);
		this.m_linearVelocity.y += this.m_angularVelocity * (this.m_sweep.c.x - oldCenter.x);
	}
	,resetMassData: function() {
		this.m_mass = 0.0;
		this.m_invMass = 0.0;
		this.m_I = 0.0;
		this.m_invI = 0.0;
		this.m_sweep.localCenter.setZero();
		if(this.m_type == 0 || this.m_type == 1) {
			return;
		}
		var center = box2D_common_math_B2Vec2.make(0,0);
		var f = this.m_fixtureList;
		while(f != null) {
			if(f.m_density == 0.0) {
				f = f.m_next;
				continue;
			}
			var massData = f.getMassData();
			this.m_mass += massData.mass;
			center.x += massData.center.x * massData.mass;
			center.y += massData.center.y * massData.mass;
			this.m_I += massData.I;
			f = f.m_next;
		}
		if(this.m_mass > 0.0) {
			this.m_invMass = 1.0 / this.m_mass;
			center.x *= this.m_invMass;
			center.y *= this.m_invMass;
		} else {
			this.m_mass = 1.0;
			this.m_invMass = 1.0;
		}
		if(this.m_I > 0.0 && (this.m_flags & box2D_dynamics_B2Body.e_fixedRotationFlag) == 0) {
			this.m_I -= this.m_mass * (center.x * center.x + center.y * center.y);
			this.m_I *= this.m_inertiaScale;
			box2D_common_B2Settings.b2Assert(this.m_I > 0);
			this.m_invI = 1.0 / this.m_I;
		} else {
			this.m_I = 0.0;
			this.m_invI = 0.0;
		}
		var oldCenter = this.m_sweep.c.copy();
		this.m_sweep.localCenter.setV(center);
		this.m_sweep.c0.setV(box2D_common_math_B2Math.mulX(this.m_xf,this.m_sweep.localCenter));
		this.m_sweep.c.setV(this.m_sweep.c0);
		this.m_linearVelocity.x += this.m_angularVelocity * -(this.m_sweep.c.y - oldCenter.y);
		this.m_linearVelocity.y += this.m_angularVelocity * (this.m_sweep.c.x - oldCenter.x);
	}
	,getWorldPoint: function(localPoint) {
		var A = this.m_xf.R;
		var u = new box2D_common_math_B2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y,A.col1.y * localPoint.x + A.col2.y * localPoint.y);
		u.x += this.m_xf.position.x;
		u.y += this.m_xf.position.y;
		return u;
	}
	,getWorldVector: function(localVector) {
		return box2D_common_math_B2Math.mulMV(this.m_xf.R,localVector);
	}
	,getLocalPoint: function(worldPoint) {
		return box2D_common_math_B2Math.mulXT(this.m_xf,worldPoint);
	}
	,getLocalVector: function(worldVector) {
		return box2D_common_math_B2Math.mulTMV(this.m_xf.R,worldVector);
	}
	,getLinearVelocityFromWorldPoint: function(worldPoint) {
		return new box2D_common_math_B2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y),this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
	}
	,getLinearVelocityFromLocalPoint: function(localPoint) {
		var A = this.m_xf.R;
		var worldPoint = new box2D_common_math_B2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y,A.col1.y * localPoint.x + A.col2.y * localPoint.y);
		worldPoint.x += this.m_xf.position.x;
		worldPoint.y += this.m_xf.position.y;
		return new box2D_common_math_B2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y),this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
	}
	,getLinearDamping: function() {
		return this.m_linearDamping;
	}
	,setLinearDamping: function(linearDamping) {
		this.m_linearDamping = linearDamping;
	}
	,getAngularDamping: function() {
		return this.m_angularDamping;
	}
	,setAngularDamping: function(angularDamping) {
		this.m_angularDamping = angularDamping;
	}
	,setType: function(type) {
		if(this.m_type == type) {
			return;
		}
		this.m_type = type;
		this.resetMassData();
		if(this.m_type == 0) {
			this.m_linearVelocity.setZero();
			this.m_angularVelocity = 0.0;
		}
		this.setAwake(true);
		this.m_force.setZero();
		this.m_torque = 0.0;
		var ce = this.m_contactList;
		while(ce != null) {
			ce.contact.flagForFiltering();
			ce = ce.next;
		}
	}
	,getType: function() {
		return this.m_type;
	}
	,setBullet: function(flag) {
		if(flag) {
			this.m_flags |= box2D_dynamics_B2Body.e_bulletFlag;
		} else {
			this.m_flags &= ~box2D_dynamics_B2Body.e_bulletFlag;
		}
	}
	,isBullet: function() {
		return (this.m_flags & box2D_dynamics_B2Body.e_bulletFlag) == box2D_dynamics_B2Body.e_bulletFlag;
	}
	,setSleepingAllowed: function(flag) {
		if(flag) {
			this.m_flags |= box2D_dynamics_B2Body.e_allowSleepFlag;
		} else {
			this.m_flags &= ~box2D_dynamics_B2Body.e_allowSleepFlag;
			this.setAwake(true);
		}
	}
	,setAwake: function(flag) {
		if(flag) {
			this.m_flags |= box2D_dynamics_B2Body.e_awakeFlag;
			this.m_sleepTime = 0.0;
		} else {
			this.m_flags &= ~box2D_dynamics_B2Body.e_awakeFlag;
			this.m_sleepTime = 0.0;
			this.m_linearVelocity.setZero();
			this.m_angularVelocity = 0.0;
			this.m_force.setZero();
			this.m_torque = 0.0;
		}
	}
	,isAwake: function() {
		return (this.m_flags & box2D_dynamics_B2Body.e_awakeFlag) == box2D_dynamics_B2Body.e_awakeFlag;
	}
	,setFixedRotation: function(fixed) {
		if(fixed) {
			this.m_flags |= box2D_dynamics_B2Body.e_fixedRotationFlag;
		} else {
			this.m_flags &= ~box2D_dynamics_B2Body.e_fixedRotationFlag;
		}
		this.resetMassData();
	}
	,isFixedRotation: function() {
		return (this.m_flags & box2D_dynamics_B2Body.e_fixedRotationFlag) == box2D_dynamics_B2Body.e_fixedRotationFlag;
	}
	,setActive: function(flag) {
		if(flag == this.isActive()) {
			return;
		}
		var broadPhase;
		var f;
		if(flag) {
			this.m_flags |= box2D_dynamics_B2Body.e_activeFlag;
			broadPhase = this.m_world.m_contactManager.m_broadPhase;
			f = this.m_fixtureList;
			while(f != null) {
				f.createProxy(broadPhase,this.m_xf);
				f = f.m_next;
			}
		} else {
			this.m_flags &= ~box2D_dynamics_B2Body.e_activeFlag;
			broadPhase = this.m_world.m_contactManager.m_broadPhase;
			f = this.m_fixtureList;
			while(f != null) {
				f.destroyProxy(broadPhase);
				f = f.m_next;
			}
			var ce = this.m_contactList;
			while(ce != null) {
				var ce0 = ce;
				ce = ce.next;
				this.m_world.m_contactManager.destroy(ce0.contact);
			}
			this.m_contactList = null;
		}
	}
	,isActive: function() {
		return (this.m_flags & box2D_dynamics_B2Body.e_activeFlag) == box2D_dynamics_B2Body.e_activeFlag;
	}
	,isSleepingAllowed: function() {
		return (this.m_flags & box2D_dynamics_B2Body.e_allowSleepFlag) == box2D_dynamics_B2Body.e_allowSleepFlag;
	}
	,getFixtureList: function() {
		return this.m_fixtureList;
	}
	,getJointList: function() {
		return this.m_jointList;
	}
	,getControllerList: function() {
		return this.m_controllerList;
	}
	,getContactList: function() {
		return this.m_contactList;
	}
	,getNext: function() {
		return this.m_next;
	}
	,getUserData: function() {
		return this.m_userData;
	}
	,setUserData: function(data) {
		this.m_userData = data;
	}
	,getWorld: function() {
		return this.m_world;
	}
	,synchronizeFixtures: function() {
		var xf1 = box2D_dynamics_B2Body.s_xf1;
		xf1.R.set(this.m_sweep.a0);
		var tMat = xf1.R;
		var tVec = this.m_sweep.localCenter;
		xf1.position.x = this.m_sweep.c0.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		xf1.position.y = this.m_sweep.c0.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var broadPhase = this.m_world.m_contactManager.m_broadPhase;
		var f = this.m_fixtureList;
		while(f != null) {
			f.synchronize(broadPhase,xf1,this.m_xf);
			f = f.m_next;
		}
	}
	,synchronizeTransform: function() {
		this.m_xf.R.set(this.m_sweep.a);
		var tMat = this.m_xf.R;
		var tVec = this.m_sweep.localCenter;
		this.m_xf.position.x = this.m_sweep.c.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		this.m_xf.position.y = this.m_sweep.c.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	}
	,shouldCollide: function(other) {
		if(this.m_type != 2 && other.m_type != 2) {
			return false;
		}
		var jn = this.m_jointList;
		while(jn != null) {
			if(jn.other == other) {
				if(jn.joint.m_collideConnected == false) {
					return false;
				}
			}
			jn = jn.next;
		}
		return true;
	}
	,advance: function(t) {
		this.m_sweep.advance(t);
		this.m_sweep.c.setV(this.m_sweep.c0);
		this.m_sweep.a = this.m_sweep.a0;
		this.synchronizeTransform();
	}
	,__class__: box2D_dynamics_B2Body
};
var box2D_dynamics_B2BodyDef = function() {
	this.position = new box2D_common_math_B2Vec2();
	this.linearVelocity = new box2D_common_math_B2Vec2();
	this.userData = null;
	this.angle = 0.0;
	this.angularVelocity = 0.0;
	this.linearDamping = 0.0;
	this.angularDamping = 0.0;
	this.allowSleep = true;
	this.awake = true;
	this.fixedRotation = false;
	this.bullet = false;
	this.type = 0;
	this.active = true;
	this.inertiaScale = 1.0;
};
$hxClasses["box2D.dynamics.B2BodyDef"] = box2D_dynamics_B2BodyDef;
box2D_dynamics_B2BodyDef.__name__ = "box2D.dynamics.B2BodyDef";
box2D_dynamics_B2BodyDef.prototype = {
	__class__: box2D_dynamics_B2BodyDef
};
var box2D_dynamics_B2ContactFilter = function() {
};
$hxClasses["box2D.dynamics.B2ContactFilter"] = box2D_dynamics_B2ContactFilter;
box2D_dynamics_B2ContactFilter.__name__ = "box2D.dynamics.B2ContactFilter";
box2D_dynamics_B2ContactFilter.prototype = {
	shouldCollide: function(fixtureA,fixtureB) {
		var filter1 = fixtureA.getFilterData();
		var filter2 = fixtureB.getFilterData();
		if(filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) {
			return filter1.groupIndex > 0;
		}
		var collide = (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;
		return collide;
	}
	,rayCollide: function(userData,fixture) {
		if(userData == null) {
			return true;
		}
		return this.shouldCollide(js_Boot.__cast(userData , box2D_dynamics_B2Fixture),fixture);
	}
	,__class__: box2D_dynamics_B2ContactFilter
};
var box2D_dynamics_B2ContactImpulse = function() {
	this.normalImpulses = [];
	this.tangentImpulses = [];
};
$hxClasses["box2D.dynamics.B2ContactImpulse"] = box2D_dynamics_B2ContactImpulse;
box2D_dynamics_B2ContactImpulse.__name__ = "box2D.dynamics.B2ContactImpulse";
box2D_dynamics_B2ContactImpulse.prototype = {
	__class__: box2D_dynamics_B2ContactImpulse
};
var box2D_dynamics_B2ContactListener = function() {
};
$hxClasses["box2D.dynamics.B2ContactListener"] = box2D_dynamics_B2ContactListener;
box2D_dynamics_B2ContactListener.__name__ = "box2D.dynamics.B2ContactListener";
box2D_dynamics_B2ContactListener.prototype = {
	beginContact: function(contact) {
	}
	,endContact: function(contact) {
	}
	,preSolve: function(contact,oldManifold) {
	}
	,postSolve: function(contact,impulse) {
	}
	,__class__: box2D_dynamics_B2ContactListener
};
var box2D_dynamics_B2ContactManager = function() {
	this.m_world = null;
	this.m_contactCount = 0;
	this.m_contactFilter = box2D_dynamics_B2ContactFilter.b2_defaultFilter;
	this.m_contactListener = box2D_dynamics_B2ContactListener.b2_defaultListener;
	this.m_contactFactory = new box2D_dynamics_contacts_B2ContactFactory(this.m_allocator);
	this.m_broadPhase = new box2D_collision_B2DynamicTreeBroadPhase();
};
$hxClasses["box2D.dynamics.B2ContactManager"] = box2D_dynamics_B2ContactManager;
box2D_dynamics_B2ContactManager.__name__ = "box2D.dynamics.B2ContactManager";
box2D_dynamics_B2ContactManager.prototype = {
	addPair: function(proxyUserDataA,proxyUserDataB) {
		var fixtureA = js_Boot.__cast(proxyUserDataA , box2D_dynamics_B2Fixture);
		var fixtureB = js_Boot.__cast(proxyUserDataB , box2D_dynamics_B2Fixture);
		var bodyA = fixtureA.getBody();
		var bodyB = fixtureB.getBody();
		if(bodyA == bodyB) {
			return;
		}
		var edge = bodyB.getContactList();
		while(edge != null) {
			if(edge.other == bodyA) {
				var fA = edge.contact.getFixtureA();
				var fB = edge.contact.getFixtureB();
				if(fA == fixtureA && fB == fixtureB) {
					return;
				}
				if(fA == fixtureB && fB == fixtureA) {
					return;
				}
			}
			edge = edge.next;
		}
		if(bodyB.shouldCollide(bodyA) == false) {
			return;
		}
		if(this.m_contactFilter.shouldCollide(fixtureA,fixtureB) == false) {
			return;
		}
		var c = this.m_contactFactory.create(fixtureA,fixtureB);
		fixtureA = c.getFixtureA();
		fixtureB = c.getFixtureB();
		bodyA = fixtureA.m_body;
		bodyB = fixtureB.m_body;
		c.m_prev = null;
		c.m_next = this.m_world.m_contactList;
		if(this.m_world.m_contactList != null) {
			this.m_world.m_contactList.m_prev = c;
		}
		this.m_world.m_contactList = c;
		c.m_nodeA.contact = c;
		c.m_nodeA.other = bodyB;
		c.m_nodeA.prev = null;
		c.m_nodeA.next = bodyA.m_contactList;
		if(bodyA.m_contactList != null) {
			bodyA.m_contactList.prev = c.m_nodeA;
		}
		bodyA.m_contactList = c.m_nodeA;
		c.m_nodeB.contact = c;
		c.m_nodeB.other = bodyA;
		c.m_nodeB.prev = null;
		c.m_nodeB.next = bodyB.m_contactList;
		if(bodyB.m_contactList != null) {
			bodyB.m_contactList.prev = c.m_nodeB;
		}
		bodyB.m_contactList = c.m_nodeB;
		++this.m_contactCount;
		return;
	}
	,findNewContacts: function() {
		this.m_broadPhase.updatePairs($bind(this,this.addPair));
	}
	,destroy: function(c) {
		var fixtureA = c.getFixtureA();
		var fixtureB = c.getFixtureB();
		var bodyA = fixtureA.getBody();
		var bodyB = fixtureB.getBody();
		if(c.isTouching()) {
			this.m_contactListener.endContact(c);
		}
		if(c.m_prev != null) {
			c.m_prev.m_next = c.m_next;
		}
		if(c.m_next != null) {
			c.m_next.m_prev = c.m_prev;
		}
		if(c == this.m_world.m_contactList) {
			this.m_world.m_contactList = c.m_next;
		}
		if(c.m_nodeA.prev != null) {
			c.m_nodeA.prev.next = c.m_nodeA.next;
		}
		if(c.m_nodeA.next != null) {
			c.m_nodeA.next.prev = c.m_nodeA.prev;
		}
		if(c.m_nodeA == bodyA.m_contactList) {
			bodyA.m_contactList = c.m_nodeA.next;
		}
		if(c.m_nodeB.prev != null) {
			c.m_nodeB.prev.next = c.m_nodeB.next;
		}
		if(c.m_nodeB.next != null) {
			c.m_nodeB.next.prev = c.m_nodeB.prev;
		}
		if(c.m_nodeB == bodyB.m_contactList) {
			bodyB.m_contactList = c.m_nodeB.next;
		}
		this.m_contactFactory.destroy(c);
		--this.m_contactCount;
	}
	,collide: function() {
		var c = this.m_world.m_contactList;
		while(c != null) {
			var fixtureA = c.getFixtureA();
			var fixtureB = c.getFixtureB();
			var bodyA = fixtureA.getBody();
			var bodyB = fixtureB.getBody();
			if(bodyA.isAwake() == false && bodyB.isAwake() == false) {
				c = c.getNext();
				continue;
			}
			if((c.m_flags & box2D_dynamics_contacts_B2Contact.e_filterFlag) != 0) {
				if(bodyB.shouldCollide(bodyA) == false) {
					var cNuke = c;
					c = cNuke.getNext();
					this.destroy(cNuke);
					continue;
				}
				if(this.m_contactFilter.shouldCollide(fixtureA,fixtureB) == false) {
					var cNuke1 = c;
					c = cNuke1.getNext();
					this.destroy(cNuke1);
					continue;
				}
				c.m_flags &= ~box2D_dynamics_contacts_B2Contact.e_filterFlag;
			}
			var proxyA = fixtureA.m_proxy;
			var proxyB = fixtureB.m_proxy;
			var overlap = this.m_broadPhase.testOverlap(proxyA,proxyB);
			if(overlap == false) {
				var cNuke2 = c;
				c = cNuke2.getNext();
				this.destroy(cNuke2);
				continue;
			}
			c.update(this.m_contactListener);
			c = c.getNext();
		}
	}
	,__class__: box2D_dynamics_B2ContactManager
};
var box2D_dynamics_B2DebugDraw = function() {
	this.m_drawScale = 1.0;
	this.m_lineThickness = 1.0;
	this.m_alpha = 1.0;
	this.m_fillAlpha = 1.0;
	this.m_xformScale = 1.0;
	this.m_drawFlags = 0;
};
$hxClasses["box2D.dynamics.B2DebugDraw"] = box2D_dynamics_B2DebugDraw;
box2D_dynamics_B2DebugDraw.__name__ = "box2D.dynamics.B2DebugDraw";
box2D_dynamics_B2DebugDraw.prototype = {
	setFlags: function(flags) {
		this.m_drawFlags = flags;
	}
	,getFlags: function() {
		return this.m_drawFlags;
	}
	,appendFlags: function(flags) {
		this.m_drawFlags |= flags;
	}
	,clearFlags: function(flags) {
		this.m_drawFlags &= ~flags;
	}
	,setDrawScale: function(drawScale) {
		this.m_drawScale = drawScale;
	}
	,getDrawScale: function() {
		return this.m_drawScale;
	}
	,setLineThickness: function(lineThickness) {
		this.m_lineThickness = lineThickness;
	}
	,getLineThickness: function() {
		return this.m_lineThickness;
	}
	,setAlpha: function(alpha) {
		this.m_alpha = alpha;
	}
	,getAlpha: function() {
		return this.m_alpha;
	}
	,setFillAlpha: function(alpha) {
		this.m_fillAlpha = alpha;
	}
	,getFillAlpha: function() {
		return this.m_fillAlpha;
	}
	,setXFormScale: function(xformScale) {
		this.m_xformScale = xformScale;
	}
	,getXFormScale: function() {
		return this.m_xformScale;
	}
	,drawPolygon: function(vertices,vertexCount,color) {
	}
	,drawSolidPolygon: function(vertices,vertexCount,color) {
	}
	,drawCircle: function(center,radius,color) {
	}
	,drawSolidCircle: function(center,radius,axis,color) {
	}
	,drawSegment: function(p1,p2,color) {
	}
	,drawTransform: function(xf) {
	}
	,clear: function() {
	}
	,__class__: box2D_dynamics_B2DebugDraw
};
var box2D_dynamics_B2DestructionListener = function() { };
$hxClasses["box2D.dynamics.B2DestructionListener"] = box2D_dynamics_B2DestructionListener;
box2D_dynamics_B2DestructionListener.__name__ = "box2D.dynamics.B2DestructionListener";
box2D_dynamics_B2DestructionListener.prototype = {
	sayGoodbyeJoint: function(joint) {
	}
	,sayGoodbyeFixture: function(fixture) {
	}
	,__class__: box2D_dynamics_B2DestructionListener
};
var box2D_dynamics_B2FilterData = function() {
	this.categoryBits = 1;
	this.maskBits = 65535;
	this.groupIndex = 0;
};
$hxClasses["box2D.dynamics.B2FilterData"] = box2D_dynamics_B2FilterData;
box2D_dynamics_B2FilterData.__name__ = "box2D.dynamics.B2FilterData";
box2D_dynamics_B2FilterData.prototype = {
	copy: function() {
		var copy = new box2D_dynamics_B2FilterData();
		copy.categoryBits = this.categoryBits;
		copy.maskBits = this.maskBits;
		copy.groupIndex = this.groupIndex;
		return copy;
	}
	,__class__: box2D_dynamics_B2FilterData
};
var box2D_dynamics_B2Fixture = function() {
	this.m_filter = new box2D_dynamics_B2FilterData();
	this.m_aabb = new box2D_collision_B2AABB();
	this.m_userData = null;
	this.m_body = null;
	this.m_next = null;
	this.m_shape = null;
	this.m_density = 0.0;
	this.m_friction = 0.0;
	this.m_restitution = 0.0;
};
$hxClasses["box2D.dynamics.B2Fixture"] = box2D_dynamics_B2Fixture;
box2D_dynamics_B2Fixture.__name__ = "box2D.dynamics.B2Fixture";
box2D_dynamics_B2Fixture.prototype = {
	getType: function() {
		return this.m_shape.getType();
	}
	,getShape: function() {
		return this.m_shape;
	}
	,setSensor: function(sensor) {
		if(this.m_isSensor == sensor) {
			return;
		}
		this.m_isSensor = sensor;
		if(this.m_body == null) {
			return;
		}
		var edge = this.m_body.getContactList();
		while(edge != null) {
			var contact = edge.contact;
			var fixtureA = contact.getFixtureA();
			var fixtureB = contact.getFixtureB();
			if(fixtureA == this || fixtureB == this) {
				contact.setSensor(fixtureA.isSensor() || fixtureB.isSensor());
			}
			edge = edge.next;
		}
	}
	,isSensor: function() {
		return this.m_isSensor;
	}
	,setFilterData: function(filter) {
		this.m_filter = filter.copy();
		if(this.m_body == null) {
			return;
		}
		var edge = this.m_body.getContactList();
		while(edge != null) {
			var contact = edge.contact;
			var fixtureA = contact.getFixtureA();
			var fixtureB = contact.getFixtureB();
			if(fixtureA == this || fixtureB == this) {
				contact.flagForFiltering();
			}
			edge = edge.next;
		}
	}
	,getFilterData: function() {
		return this.m_filter.copy();
	}
	,getBody: function() {
		return this.m_body;
	}
	,getNext: function() {
		return this.m_next;
	}
	,getUserData: function() {
		return this.m_userData;
	}
	,setUserData: function(data) {
		this.m_userData = data;
	}
	,testPoint: function(p) {
		return this.m_shape.testPoint(this.m_body.getTransform(),p);
	}
	,rayCast: function(output,input) {
		return this.m_shape.rayCast(output,input,this.m_body.getTransform());
	}
	,getMassData: function(massData) {
		if(massData == null) {
			massData = new box2D_collision_shapes_B2MassData();
		}
		this.m_shape.computeMass(massData,this.m_density);
		return massData;
	}
	,setDensity: function(density) {
		this.m_density = density;
	}
	,getDensity: function() {
		return this.m_density;
	}
	,getFriction: function() {
		return this.m_friction;
	}
	,setFriction: function(friction) {
		this.m_friction = friction;
	}
	,getRestitution: function() {
		return this.m_restitution;
	}
	,setRestitution: function(restitution) {
		this.m_restitution = restitution;
	}
	,getAABB: function() {
		return this.m_aabb;
	}
	,create: function(body,xf,def) {
		this.m_userData = def.userData;
		this.m_friction = def.friction;
		this.m_restitution = def.restitution;
		this.m_body = body;
		this.m_next = null;
		this.m_filter = def.filter.copy();
		this.m_isSensor = def.isSensor;
		this.m_shape = def.shape.copy();
		this.m_density = def.density;
	}
	,destroy: function() {
		this.m_shape = null;
	}
	,createProxy: function(broadPhase,xf) {
		this.m_shape.computeAABB(this.m_aabb,xf);
		this.m_proxy = broadPhase.createProxy(this.m_aabb,this);
	}
	,destroyProxy: function(broadPhase) {
		if(this.m_proxy == null) {
			return;
		}
		broadPhase.destroyProxy(this.m_proxy);
		this.m_proxy = null;
	}
	,synchronize: function(broadPhase,transform1,transform2) {
		if(this.m_proxy == null) {
			return;
		}
		var aabb1 = new box2D_collision_B2AABB();
		var aabb2 = new box2D_collision_B2AABB();
		this.m_shape.computeAABB(aabb1,transform1);
		this.m_shape.computeAABB(aabb2,transform2);
		this.m_aabb.combine(aabb1,aabb2);
		var displacement = box2D_common_math_B2Math.subtractVV(transform2.position,transform1.position);
		broadPhase.moveProxy(this.m_proxy,this.m_aabb,displacement);
	}
	,__class__: box2D_dynamics_B2Fixture
};
var box2D_dynamics_B2FixtureDef = function() {
	this.filter = new box2D_dynamics_B2FilterData();
	this.shape = null;
	this.userData = null;
	this.friction = 0.2;
	this.restitution = 0.0;
	this.density = 0.0;
	this.filter.categoryBits = 1;
	this.filter.maskBits = 65535;
	this.filter.groupIndex = 0;
	this.isSensor = false;
};
$hxClasses["box2D.dynamics.B2FixtureDef"] = box2D_dynamics_B2FixtureDef;
box2D_dynamics_B2FixtureDef.__name__ = "box2D.dynamics.B2FixtureDef";
box2D_dynamics_B2FixtureDef.prototype = {
	__class__: box2D_dynamics_B2FixtureDef
};
var box2D_dynamics_B2HeapsDebugDraw = function() {
	box2D_dynamics_B2DebugDraw.call(this);
};
$hxClasses["box2D.dynamics.B2HeapsDebugDraw"] = box2D_dynamics_B2HeapsDebugDraw;
box2D_dynamics_B2HeapsDebugDraw.__name__ = "box2D.dynamics.B2HeapsDebugDraw";
box2D_dynamics_B2HeapsDebugDraw.__super__ = box2D_dynamics_B2DebugDraw;
box2D_dynamics_B2HeapsDebugDraw.prototype = $extend(box2D_dynamics_B2DebugDraw.prototype,{
	setSprite: function(sprite) {
		this.m_sprite = sprite;
	}
	,getSprite: function() {
		return this.m_sprite;
	}
	,drawPolygon: function(vertices,vertexCount,color) {
		this.m_sprite.lineStyle(this.m_lineThickness,color.get_color(),this.m_alpha);
		var _this = this.m_sprite;
		var x = vertices[0].x * this.m_drawScale;
		var y = vertices[0].y * this.m_drawScale;
		_this.flush();
		_this.addVertex(x,y,_this.curR,_this.curG,_this.curB,_this.curA,x * _this.ma + y * _this.mc + _this.mx,x * _this.mb + y * _this.md + _this.my);
		var _g = 1;
		var _g1 = vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var _this1 = this.m_sprite;
			var x1 = vertices[i].x * this.m_drawScale;
			var y1 = vertices[i].y * this.m_drawScale;
			_this1.addVertex(x1,y1,_this1.curR,_this1.curG,_this1.curB,_this1.curA,x1 * _this1.ma + y1 * _this1.mc + _this1.mx,x1 * _this1.mb + y1 * _this1.md + _this1.my);
		}
		var _this2 = this.m_sprite;
		var x2 = vertices[0].x * this.m_drawScale;
		var y2 = vertices[0].y * this.m_drawScale;
		_this2.addVertex(x2,y2,_this2.curR,_this2.curG,_this2.curB,_this2.curA,x2 * _this2.ma + y2 * _this2.mc + _this2.mx,x2 * _this2.mb + y2 * _this2.md + _this2.my);
	}
	,drawSolidPolygon: function(vertices,vertexCount,color) {
		var _this = this.m_sprite;
		var x = vertices[0].x * this.m_drawScale;
		var y = vertices[0].y * this.m_drawScale;
		_this.flush();
		_this.addVertex(x,y,_this.curR,_this.curG,_this.curB,_this.curA,x * _this.ma + y * _this.mc + _this.mx,x * _this.mb + y * _this.md + _this.my);
		this.m_sprite.beginFill(color.get_color(),this.m_fillAlpha);
		var _g = 1;
		var _g1 = vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var _this1 = this.m_sprite;
			var x1 = vertices[i].x * this.m_drawScale;
			var y1 = vertices[i].y * this.m_drawScale;
			_this1.addVertex(x1,y1,_this1.curR,_this1.curG,_this1.curB,_this1.curA,x1 * _this1.ma + y1 * _this1.mc + _this1.mx,x1 * _this1.mb + y1 * _this1.md + _this1.my);
		}
		var _this2 = this.m_sprite;
		var x2 = vertices[0].x * this.m_drawScale;
		var y2 = vertices[0].y * this.m_drawScale;
		_this2.addVertex(x2,y2,_this2.curR,_this2.curG,_this2.curB,_this2.curA,x2 * _this2.ma + y2 * _this2.mc + _this2.mx,x2 * _this2.mb + y2 * _this2.md + _this2.my);
		this.m_sprite.endFill();
		this.drawPolygon(vertices,vertexCount,color);
	}
	,drawCircle: function(center,radius,color) {
		this.m_sprite.lineStyle(this.m_lineThickness,color.get_color(),this.m_alpha);
		this.m_sprite.drawCircle(center.x * this.m_drawScale,center.y * this.m_drawScale,radius * this.m_drawScale,12);
	}
	,drawSolidCircle: function(center,radius,axis,color) {
		this.m_sprite.beginFill(color.get_color(),this.m_fillAlpha);
		this.m_sprite.drawCircle(center.x * this.m_drawScale,center.y * this.m_drawScale,radius * this.m_drawScale,12);
		this.m_sprite.endFill();
		this.m_sprite.lineStyle(this.m_lineThickness,color.get_color(),this.m_alpha);
		var _this = this.m_sprite;
		_this.flush();
		_this.addVertex(0,0,_this.curR,_this.curG,_this.curB,_this.curA,0 * _this.ma + 0 * _this.mc + _this.mx,0 * _this.mb + 0 * _this.md + _this.my);
		var _this1 = this.m_sprite;
		var x = center.x * this.m_drawScale;
		var y = center.y * this.m_drawScale;
		_this1.flush();
		_this1.addVertex(x,y,_this1.curR,_this1.curG,_this1.curB,_this1.curA,x * _this1.ma + y * _this1.mc + _this1.mx,x * _this1.mb + y * _this1.md + _this1.my);
		var _this2 = this.m_sprite;
		var x1 = (center.x + axis.x * radius) * this.m_drawScale;
		var y1 = (center.y + axis.y * radius) * this.m_drawScale;
		_this2.addVertex(x1,y1,_this2.curR,_this2.curG,_this2.curB,_this2.curA,x1 * _this2.ma + y1 * _this2.mc + _this2.mx,x1 * _this2.mb + y1 * _this2.md + _this2.my);
	}
	,drawSegment: function(p1,p2,color) {
		this.m_sprite.lineStyle(this.m_lineThickness,color.get_color(),this.m_alpha);
		var _this = this.m_sprite;
		var x = p1.x * this.m_drawScale;
		var y = p1.y * this.m_drawScale;
		_this.flush();
		_this.addVertex(x,y,_this.curR,_this.curG,_this.curB,_this.curA,x * _this.ma + y * _this.mc + _this.mx,x * _this.mb + y * _this.md + _this.my);
		var _this1 = this.m_sprite;
		var x1 = p2.x * this.m_drawScale;
		var y1 = p2.y * this.m_drawScale;
		_this1.addVertex(x1,y1,_this1.curR,_this1.curG,_this1.curB,_this1.curA,x1 * _this1.ma + y1 * _this1.mc + _this1.mx,x1 * _this1.mb + y1 * _this1.md + _this1.my);
	}
	,drawTransform: function(xf) {
		this.m_sprite.lineStyle(this.m_lineThickness,16711680,this.m_alpha);
		var _this = this.m_sprite;
		var x = xf.position.x * this.m_drawScale;
		var y = xf.position.y * this.m_drawScale;
		_this.flush();
		_this.addVertex(x,y,_this.curR,_this.curG,_this.curB,_this.curA,x * _this.ma + y * _this.mc + _this.mx,x * _this.mb + y * _this.md + _this.my);
		var _this1 = this.m_sprite;
		var x1 = (xf.position.x + this.m_xformScale * xf.R.col1.x) * this.m_drawScale;
		var y1 = (xf.position.y + this.m_xformScale * xf.R.col1.y) * this.m_drawScale;
		_this1.addVertex(x1,y1,_this1.curR,_this1.curG,_this1.curB,_this1.curA,x1 * _this1.ma + y1 * _this1.mc + _this1.mx,x1 * _this1.mb + y1 * _this1.md + _this1.my);
		this.m_sprite.lineStyle(this.m_lineThickness,65280,this.m_alpha);
		var _this2 = this.m_sprite;
		var x2 = xf.position.x * this.m_drawScale;
		var y2 = xf.position.y * this.m_drawScale;
		_this2.flush();
		_this2.addVertex(x2,y2,_this2.curR,_this2.curG,_this2.curB,_this2.curA,x2 * _this2.ma + y2 * _this2.mc + _this2.mx,x2 * _this2.mb + y2 * _this2.md + _this2.my);
		var _this3 = this.m_sprite;
		var x3 = (xf.position.x + this.m_xformScale * xf.R.col2.x) * this.m_drawScale;
		var y3 = (xf.position.y + this.m_xformScale * xf.R.col2.y) * this.m_drawScale;
		_this3.addVertex(x3,y3,_this3.curR,_this3.curG,_this3.curB,_this3.curA,x3 * _this3.ma + y3 * _this3.mc + _this3.mx,x3 * _this3.mb + y3 * _this3.md + _this3.my);
	}
	,clear: function() {
		this.m_sprite.clear();
	}
	,__class__: box2D_dynamics_B2HeapsDebugDraw
});
var box2D_dynamics_B2Island = function() {
	this.m_jointCapacity = 0;
	this.m_contactCapacity = 0;
	this.m_bodyCapacity = 0;
	this.m_contactCount = 0;
	this.m_jointCount = 0;
	this.m_bodyCount = 0;
	this.m_bodies = [];
	this.m_contacts = [];
	this.m_joints = [];
};
$hxClasses["box2D.dynamics.B2Island"] = box2D_dynamics_B2Island;
box2D_dynamics_B2Island.__name__ = "box2D.dynamics.B2Island";
box2D_dynamics_B2Island.prototype = {
	initialize: function(bodyCapacity,contactCapacity,jointCapacity,allocator,listener,contactSolver) {
		var i;
		this.m_bodyCapacity = bodyCapacity;
		this.m_contactCapacity = contactCapacity;
		this.m_jointCapacity = jointCapacity;
		this.m_bodyCount = 0;
		this.m_contactCount = 0;
		this.m_jointCount = 0;
		this.m_allocator = allocator;
		this.m_listener = listener;
		this.m_contactSolver = contactSolver;
		var _g = this.m_bodies.length;
		var _g1 = bodyCapacity;
		while(_g < _g1) {
			var i1 = _g++;
			this.m_bodies[i1] = null;
		}
		var _g2 = this.m_contacts.length;
		var _g3 = contactCapacity;
		while(_g2 < _g3) {
			var i2 = _g2++;
			this.m_contacts[i2] = null;
		}
		var _g4 = this.m_joints.length;
		var _g5 = jointCapacity;
		while(_g4 < _g5) {
			var i3 = _g4++;
			this.m_joints[i3] = null;
		}
	}
	,clear: function() {
		this.m_bodyCount = 0;
		this.m_contactCount = 0;
		this.m_jointCount = 0;
	}
	,solve: function(step,gravity,allowSleep) {
		var i;
		var j;
		var b;
		var joint;
		var _g = 0;
		var _g1 = this.m_bodyCount;
		while(_g < _g1) {
			var i1 = _g++;
			b = this.m_bodies[i1];
			if(b.getType() != 2) {
				continue;
			}
			b.m_linearVelocity.x += step.dt * (gravity.x + b.m_invMass * b.m_force.x);
			b.m_linearVelocity.y += step.dt * (gravity.y + b.m_invMass * b.m_force.y);
			b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;
			b.m_linearVelocity.multiply(box2D_common_math_B2Math.clamp(1.0 - step.dt * b.m_linearDamping,0.0,1.0));
			b.m_angularVelocity *= box2D_common_math_B2Math.clamp(1.0 - step.dt * b.m_angularDamping,0.0,1.0);
		}
		this.m_contactSolver.initialize(step,this.m_contacts,this.m_contactCount,this.m_allocator);
		var contactSolver = this.m_contactSolver;
		contactSolver.initVelocityConstraints(step);
		var _g2 = 0;
		var _g3 = this.m_jointCount;
		while(_g2 < _g3) {
			var i2 = _g2++;
			joint = this.m_joints[i2];
			joint.initVelocityConstraints(step);
		}
		var _g4 = 0;
		var _g5 = step.velocityIterations;
		while(_g4 < _g5) {
			var i3 = _g4++;
			var _g41 = 0;
			var _g51 = this.m_jointCount;
			while(_g41 < _g51) {
				var j1 = _g41++;
				joint = this.m_joints[j1];
				joint.solveVelocityConstraints(step);
			}
			contactSolver.solveVelocityConstraints();
		}
		var _g6 = 0;
		var _g7 = this.m_jointCount;
		while(_g6 < _g7) {
			var i4 = _g6++;
			joint = this.m_joints[i4];
			joint.finalizeVelocityConstraints();
		}
		contactSolver.finalizeVelocityConstraints();
		var _g8 = 0;
		var _g9 = this.m_bodyCount;
		while(_g8 < _g9) {
			var i5 = _g8++;
			b = this.m_bodies[i5];
			if(b.getType() == 0) {
				continue;
			}
			var translationX = step.dt * b.m_linearVelocity.x;
			var translationY = step.dt * b.m_linearVelocity.y;
			if(translationX * translationX + translationY * translationY > box2D_common_B2Settings.b2_maxTranslationSquared) {
				b.m_linearVelocity.normalize();
				b.m_linearVelocity.x *= box2D_common_B2Settings.b2_maxTranslation * step.inv_dt;
				b.m_linearVelocity.y *= box2D_common_B2Settings.b2_maxTranslation * step.inv_dt;
			}
			var rotation = step.dt * b.m_angularVelocity;
			if(rotation * rotation > box2D_common_B2Settings.b2_maxRotationSquared) {
				if(b.m_angularVelocity < 0.0) {
					b.m_angularVelocity = -box2D_common_B2Settings.b2_maxRotation * step.inv_dt;
				} else {
					b.m_angularVelocity = box2D_common_B2Settings.b2_maxRotation * step.inv_dt;
				}
			}
			b.m_sweep.c0.setV(b.m_sweep.c);
			b.m_sweep.a0 = b.m_sweep.a;
			b.m_sweep.c.x += step.dt * b.m_linearVelocity.x;
			b.m_sweep.c.y += step.dt * b.m_linearVelocity.y;
			b.m_sweep.a += step.dt * b.m_angularVelocity;
			b.synchronizeTransform();
		}
		var _g10 = 0;
		var _g11 = step.positionIterations;
		while(_g10 < _g11) {
			var i6 = _g10++;
			var contactsOkay = contactSolver.solvePositionConstraints(box2D_common_B2Settings.b2_contactBaumgarte);
			var jointsOkay = true;
			var _g101 = 0;
			var _g111 = this.m_jointCount;
			while(_g101 < _g111) {
				var j2 = _g101++;
				joint = this.m_joints[j2];
				var jointOkay = joint.solvePositionConstraints(box2D_common_B2Settings.b2_contactBaumgarte);
				jointsOkay = jointsOkay && jointOkay;
			}
			if(contactsOkay && jointsOkay) {
				break;
			}
		}
		this.report(contactSolver.m_constraints);
		if(allowSleep) {
			var minSleepTime = Number.MAX_VALUE;
			var linTolSqr = box2D_common_B2Settings.b2_linearSleepTolerance * box2D_common_B2Settings.b2_linearSleepTolerance;
			var angTolSqr = box2D_common_B2Settings.b2_angularSleepTolerance * box2D_common_B2Settings.b2_angularSleepTolerance;
			var _g12 = 0;
			var _g13 = this.m_bodyCount;
			while(_g12 < _g13) {
				var i7 = _g12++;
				b = this.m_bodies[i7];
				if(b.getType() == 0) {
					continue;
				}
				if((b.m_flags & box2D_dynamics_B2Body.e_allowSleepFlag) == 0) {
					b.m_sleepTime = 0.0;
					minSleepTime = 0.0;
				}
				if((b.m_flags & box2D_dynamics_B2Body.e_allowSleepFlag) == 0 || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || box2D_common_math_B2Math.dot(b.m_linearVelocity,b.m_linearVelocity) > linTolSqr) {
					b.m_sleepTime = 0.0;
					minSleepTime = 0.0;
				} else {
					b.m_sleepTime += step.dt;
					minSleepTime = box2D_common_math_B2Math.min(minSleepTime,b.m_sleepTime);
				}
			}
			if(minSleepTime >= box2D_common_B2Settings.b2_timeToSleep) {
				var _g14 = 0;
				var _g15 = this.m_bodyCount;
				while(_g14 < _g15) {
					var i8 = _g14++;
					b = this.m_bodies[i8];
					b.setAwake(false);
				}
			}
		}
	}
	,solveTOI: function(subStep) {
		var i;
		var j;
		this.m_contactSolver.initialize(subStep,this.m_contacts,this.m_contactCount,this.m_allocator);
		var contactSolver = this.m_contactSolver;
		var _g = 0;
		var _g1 = this.m_jointCount;
		while(_g < _g1) {
			var i1 = _g++;
			this.m_joints[i1].initVelocityConstraints(subStep);
		}
		var _g2 = 0;
		var _g3 = subStep.velocityIterations;
		while(_g2 < _g3) {
			var i2 = _g2++;
			contactSolver.solveVelocityConstraints();
			var _g21 = 0;
			var _g31 = this.m_jointCount;
			while(_g21 < _g31) {
				var j1 = _g21++;
				this.m_joints[j1].solveVelocityConstraints(subStep);
			}
		}
		var _g4 = 0;
		var _g5 = this.m_bodyCount;
		while(_g4 < _g5) {
			var i3 = _g4++;
			var b = this.m_bodies[i3];
			if(b.getType() == 0) {
				continue;
			}
			var translationX = subStep.dt * b.m_linearVelocity.x;
			var translationY = subStep.dt * b.m_linearVelocity.y;
			if(translationX * translationX + translationY * translationY > box2D_common_B2Settings.b2_maxTranslationSquared) {
				b.m_linearVelocity.normalize();
				b.m_linearVelocity.x *= box2D_common_B2Settings.b2_maxTranslation * subStep.inv_dt;
				b.m_linearVelocity.y *= box2D_common_B2Settings.b2_maxTranslation * subStep.inv_dt;
			}
			var rotation = subStep.dt * b.m_angularVelocity;
			if(rotation * rotation > box2D_common_B2Settings.b2_maxRotationSquared) {
				if(b.m_angularVelocity < 0.0) {
					b.m_angularVelocity = -box2D_common_B2Settings.b2_maxRotation * subStep.inv_dt;
				} else {
					b.m_angularVelocity = box2D_common_B2Settings.b2_maxRotation * subStep.inv_dt;
				}
			}
			b.m_sweep.c0.setV(b.m_sweep.c);
			b.m_sweep.a0 = b.m_sweep.a;
			b.m_sweep.c.x += subStep.dt * b.m_linearVelocity.x;
			b.m_sweep.c.y += subStep.dt * b.m_linearVelocity.y;
			b.m_sweep.a += subStep.dt * b.m_angularVelocity;
			b.synchronizeTransform();
		}
		var k_toiBaumgarte = 0.75;
		var _g6 = 0;
		var _g7 = subStep.positionIterations;
		while(_g6 < _g7) {
			var i4 = _g6++;
			var contactsOkay = contactSolver.solvePositionConstraints(k_toiBaumgarte);
			var jointsOkay = true;
			var _g61 = 0;
			var _g71 = this.m_jointCount;
			while(_g61 < _g71) {
				var j2 = _g61++;
				var jointOkay = this.m_joints[j2].solvePositionConstraints(box2D_common_B2Settings.b2_contactBaumgarte);
				jointsOkay = jointsOkay && jointOkay;
			}
			if(contactsOkay && jointsOkay) {
				break;
			}
		}
		this.report(contactSolver.m_constraints);
	}
	,report: function(constraints) {
		if(this.m_listener == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.m_contactCount;
		while(_g < _g1) {
			var i = _g++;
			var c = this.m_contacts[i];
			var cc = constraints[i];
			var _g2 = 0;
			var _g11 = cc.pointCount;
			while(_g2 < _g11) {
				var j = _g2++;
				box2D_dynamics_B2Island.s_impulse.normalImpulses[j] = cc.points[j].normalImpulse;
				box2D_dynamics_B2Island.s_impulse.tangentImpulses[j] = cc.points[j].tangentImpulse;
			}
			this.m_listener.postSolve(c,box2D_dynamics_B2Island.s_impulse);
		}
	}
	,addBody: function(body) {
		body.m_islandIndex = this.m_bodyCount;
		this.m_bodies[this.m_bodyCount++] = body;
	}
	,addContact: function(contact) {
		this.m_contacts[this.m_contactCount++] = contact;
	}
	,addJoint: function(joint) {
		this.m_joints[this.m_jointCount++] = joint;
	}
	,__class__: box2D_dynamics_B2Island
};
var box2D_dynamics_B2TimeStep = function() {
	this.positionIterations = 0;
	this.velocityIterations = 0;
	this.dtRatio = 0;
	this.inv_dt = 0;
	this.dt = 0;
};
$hxClasses["box2D.dynamics.B2TimeStep"] = box2D_dynamics_B2TimeStep;
box2D_dynamics_B2TimeStep.__name__ = "box2D.dynamics.B2TimeStep";
box2D_dynamics_B2TimeStep.prototype = {
	set: function(step) {
		this.dt = step.dt;
		this.inv_dt = step.inv_dt;
		this.positionIterations = step.positionIterations;
		this.velocityIterations = step.velocityIterations;
		this.warmStarting = step.warmStarting;
	}
	,__class__: box2D_dynamics_B2TimeStep
};
var box2D_dynamics_B2World = function(gravity,doSleep) {
	this.s_stack = [];
	this.m_contactManager = new box2D_dynamics_B2ContactManager();
	this.m_contactSolver = new box2D_dynamics_contacts_B2ContactSolver();
	this.m_island = new box2D_dynamics_B2Island();
	this.m_destructionListener = null;
	this.m_debugDraw = null;
	this.m_bodyList = null;
	this.m_contactList = null;
	this.m_jointList = null;
	this.m_controllerList = null;
	this.m_bodyCount = 0;
	this.m_jointCount = 0;
	this.m_controllerCount = 0;
	box2D_dynamics_B2World.m_warmStarting = true;
	box2D_dynamics_B2World.m_continuousPhysics = true;
	this.m_allowSleep = doSleep;
	this.m_gravity = gravity;
	this.m_inv_dt0 = 0.0;
	this.m_flags = 0;
	this.m_contactManager.m_world = this;
	var bd = new box2D_dynamics_B2BodyDef();
	this.m_groundBody = this.createBody(bd);
};
$hxClasses["box2D.dynamics.B2World"] = box2D_dynamics_B2World;
box2D_dynamics_B2World.__name__ = "box2D.dynamics.B2World";
box2D_dynamics_B2World.prototype = {
	setDestructionListener: function(listener) {
		this.m_destructionListener = listener;
	}
	,setContactFilter: function(filter) {
		this.m_contactManager.m_contactFilter = filter;
	}
	,setContactListener: function(listener) {
		this.m_contactManager.m_contactListener = listener;
	}
	,setDebugDraw: function(debugDraw) {
		this.m_debugDraw = debugDraw;
	}
	,setBroadPhase: function(broadPhase) {
		var oldBroadPhase = this.m_contactManager.m_broadPhase;
		this.m_contactManager.m_broadPhase = broadPhase;
		var b = this.m_bodyList;
		while(b != null) {
			var f = b.m_fixtureList;
			while(f != null) {
				f.m_proxy = broadPhase.createProxy(oldBroadPhase.getFatAABB(f.m_proxy),f);
				f = f.m_next;
			}
			b = b.m_next;
		}
	}
	,validate: function() {
		this.m_contactManager.m_broadPhase.validate();
	}
	,getProxyCount: function() {
		return this.m_contactManager.m_broadPhase.getProxyCount();
	}
	,createBody: function(def) {
		if(this.isLocked() == true) {
			return null;
		}
		var b = new box2D_dynamics_B2Body(def,this);
		b.m_prev = null;
		b.m_next = this.m_bodyList;
		if(this.m_bodyList != null) {
			this.m_bodyList.m_prev = b;
		}
		this.m_bodyList = b;
		++this.m_bodyCount;
		return b;
	}
	,destroyBody: function(b) {
		if(this.isLocked() == true) {
			return;
		}
		var jn = b.m_jointList;
		while(jn != null) {
			var jn0 = jn;
			jn = jn.next;
			if(this.m_destructionListener != null) {
				this.m_destructionListener.sayGoodbyeJoint(jn0.joint);
			}
			this.destroyJoint(jn0.joint);
		}
		var coe = b.m_controllerList;
		while(coe != null) {
			var coe0 = coe;
			coe = coe.nextController;
			coe0.controller.removeBody(b);
		}
		var ce = b.m_contactList;
		while(ce != null) {
			var ce0 = ce;
			ce = ce.next;
			this.m_contactManager.destroy(ce0.contact);
		}
		b.m_contactList = null;
		var f = b.m_fixtureList;
		while(f != null) {
			var f0 = f;
			f = f.m_next;
			if(this.m_destructionListener != null) {
				this.m_destructionListener.sayGoodbyeFixture(f0);
			}
			f0.destroyProxy(this.m_contactManager.m_broadPhase);
			f0.destroy();
		}
		b.m_fixtureList = null;
		b.m_fixtureCount = 0;
		if(b.m_prev != null) {
			b.m_prev.m_next = b.m_next;
		}
		if(b.m_next != null) {
			b.m_next.m_prev = b.m_prev;
		}
		if(b == this.m_bodyList) {
			this.m_bodyList = b.m_next;
		}
		b.setUserData(null);
		b.m_sweep = null;
		b.m_xf = null;
		b.m_linearVelocity = null;
		b.m_force = null;
		b.m_world = null;
		b.m_prev = null;
		b.m_next = null;
		b.m_controllerList = null;
		b.m_jointList = null;
		--this.m_bodyCount;
	}
	,createJoint: function(def) {
		var j = box2D_dynamics_joints_B2Joint.create(def,null);
		j.m_prev = null;
		j.m_next = this.m_jointList;
		if(this.m_jointList != null) {
			this.m_jointList.m_prev = j;
		}
		this.m_jointList = j;
		++this.m_jointCount;
		j.m_edgeA.joint = j;
		j.m_edgeA.other = j.m_bodyB;
		j.m_edgeA.prev = null;
		j.m_edgeA.next = j.m_bodyA.m_jointList;
		if(j.m_bodyA.m_jointList != null) {
			j.m_bodyA.m_jointList.prev = j.m_edgeA;
		}
		j.m_bodyA.m_jointList = j.m_edgeA;
		j.m_edgeB.joint = j;
		j.m_edgeB.other = j.m_bodyA;
		j.m_edgeB.prev = null;
		j.m_edgeB.next = j.m_bodyB.m_jointList;
		if(j.m_bodyB.m_jointList != null) {
			j.m_bodyB.m_jointList.prev = j.m_edgeB;
		}
		j.m_bodyB.m_jointList = j.m_edgeB;
		var bodyA = def.bodyA;
		var bodyB = def.bodyB;
		if(def.collideConnected == false) {
			var edge = bodyB.getContactList();
			while(edge != null) {
				if(edge.other == bodyA) {
					edge.contact.flagForFiltering();
				}
				edge = edge.next;
			}
		}
		return j;
	}
	,destroyJoint: function(j) {
		var collideConnected = j.m_collideConnected;
		if(j.m_prev != null) {
			j.m_prev.m_next = j.m_next;
		}
		if(j.m_next != null) {
			j.m_next.m_prev = j.m_prev;
		}
		if(j == this.m_jointList) {
			this.m_jointList = j.m_next;
		}
		var bodyA = j.m_bodyA;
		var bodyB = j.m_bodyB;
		bodyA.setAwake(true);
		bodyB.setAwake(true);
		if(j.m_edgeA.prev != null) {
			j.m_edgeA.prev.next = j.m_edgeA.next;
		}
		if(j.m_edgeA.next != null) {
			j.m_edgeA.next.prev = j.m_edgeA.prev;
		}
		if(j.m_edgeA == bodyA.m_jointList) {
			bodyA.m_jointList = j.m_edgeA.next;
		}
		j.m_edgeA.prev = null;
		j.m_edgeA.next = null;
		if(j.m_edgeB.prev != null) {
			j.m_edgeB.prev.next = j.m_edgeB.next;
		}
		if(j.m_edgeB.next != null) {
			j.m_edgeB.next.prev = j.m_edgeB.prev;
		}
		if(j.m_edgeB == bodyB.m_jointList) {
			bodyB.m_jointList = j.m_edgeB.next;
		}
		j.m_edgeB.prev = null;
		j.m_edgeB.next = null;
		box2D_dynamics_joints_B2Joint.destroy(j,null);
		--this.m_jointCount;
		if(collideConnected == false) {
			var edge = bodyB.getContactList();
			while(edge != null) {
				if(edge.other == bodyA) {
					edge.contact.flagForFiltering();
				}
				edge = edge.next;
			}
		}
	}
	,addController: function(c) {
		c.m_next = this.m_controllerList;
		c.m_prev = null;
		this.m_controllerList = c;
		c.m_world = this;
		this.m_controllerCount++;
		return c;
	}
	,removeController: function(c) {
		if(c.m_prev != null) {
			c.m_prev.m_next = c.m_next;
		}
		if(c.m_next != null) {
			c.m_next.m_prev = c.m_prev;
		}
		if(this.m_controllerList == c) {
			this.m_controllerList = c.m_next;
		}
		this.m_controllerCount--;
	}
	,createController: function(controller) {
		if(controller.m_world != this) {
			throw new js__$Boot_HaxeError("Controller can only be a member of one world");
		}
		controller.m_next = this.m_controllerList;
		controller.m_prev = null;
		if(this.m_controllerList != null) {
			this.m_controllerList.m_prev = controller;
		}
		this.m_controllerList = controller;
		++this.m_controllerCount;
		controller.m_world = this;
		return controller;
	}
	,destroyController: function(controller) {
		controller.clear();
		if(controller.m_next != null) {
			controller.m_next.m_prev = controller.m_prev;
		}
		if(controller.m_prev != null) {
			controller.m_prev.m_next = controller.m_next;
		}
		if(controller == this.m_controllerList) {
			this.m_controllerList = controller.m_next;
		}
		--this.m_controllerCount;
	}
	,setWarmStarting: function(flag) {
		box2D_dynamics_B2World.m_warmStarting = flag;
	}
	,setContinuousPhysics: function(flag) {
		box2D_dynamics_B2World.m_continuousPhysics = flag;
	}
	,getBodyCount: function() {
		return this.m_bodyCount;
	}
	,getJointCount: function() {
		return this.m_jointCount;
	}
	,getContactCount: function() {
		return this.m_contactManager.m_contactCount;
	}
	,setGravity: function(gravity) {
		this.m_gravity = gravity;
	}
	,getGravity: function() {
		return this.m_gravity;
	}
	,getGroundBody: function() {
		return this.m_groundBody;
	}
	,step: function(dt,velocityIterations,positionIterations) {
		if((this.m_flags & box2D_dynamics_B2World.e_newFixture) != 0) {
			this.m_contactManager.findNewContacts();
			this.m_flags &= ~box2D_dynamics_B2World.e_newFixture;
		}
		this.m_flags |= box2D_dynamics_B2World.e_locked;
		var step = box2D_dynamics_B2World.s_timestep2;
		step.dt = dt;
		step.velocityIterations = velocityIterations;
		step.positionIterations = positionIterations;
		if(dt > 0.0) {
			step.inv_dt = 1.0 / dt;
		} else {
			step.inv_dt = 0.0;
		}
		step.dtRatio = this.m_inv_dt0 * dt;
		step.warmStarting = box2D_dynamics_B2World.m_warmStarting;
		this.m_contactManager.collide();
		if(step.dt > 0.0) {
			this.solve(step);
		}
		if(box2D_dynamics_B2World.m_continuousPhysics && step.dt > 0.0) {
			this.solveTOI(step);
		}
		if(step.dt > 0.0) {
			this.m_inv_dt0 = step.inv_dt;
		}
		this.m_flags &= ~box2D_dynamics_B2World.e_locked;
	}
	,clearForces: function() {
		var body = this.m_bodyList;
		while(body != null) {
			body.m_force.setZero();
			body.m_torque = 0.0;
			body = body.m_next;
		}
	}
	,drawDebugData: function() {
		if(this.m_debugDraw == null) {
			return;
		}
		this.m_debugDraw.clear();
		var flags = this.m_debugDraw.getFlags();
		var i;
		var b;
		var f;
		var s;
		var j;
		var bp;
		var invQ = new box2D_common_math_B2Vec2();
		var x1 = new box2D_common_math_B2Vec2();
		var x2 = new box2D_common_math_B2Vec2();
		var xf;
		var b1 = new box2D_collision_B2AABB();
		var b2 = new box2D_collision_B2AABB();
		var vs = [new box2D_common_math_B2Vec2(),new box2D_common_math_B2Vec2(),new box2D_common_math_B2Vec2(),new box2D_common_math_B2Vec2()];
		var color = new box2D_common_B2Color(0,0,0);
		if((flags & box2D_dynamics_B2DebugDraw.e_shapeBit) != 0) {
			b = this.m_bodyList;
			while(b != null) {
				xf = b.m_xf;
				f = b.getFixtureList();
				while(f != null) {
					s = f.getShape();
					if(b.isActive() == false) {
						color.set(0.5,0.5,0.3);
						this.drawShape(s,xf,color);
					} else if(b.getType() == 0) {
						color.set(0.5,0.9,0.5);
						this.drawShape(s,xf,color);
					} else if(b.getType() == 1) {
						color.set(0.5,0.5,0.9);
						this.drawShape(s,xf,color);
					} else if(b.isAwake() == false) {
						color.set(0.6,0.6,0.6);
						this.drawShape(s,xf,color);
					} else {
						color.set(0.9,0.7,0.7);
						this.drawShape(s,xf,color);
					}
					f = f.m_next;
				}
				b = b.m_next;
			}
		}
		if((flags & box2D_dynamics_B2DebugDraw.e_jointBit) != 0) {
			j = this.m_jointList;
			while(j != null) {
				this.drawJoint(j);
				j = j.m_next;
			}
		}
		if((flags & box2D_dynamics_B2DebugDraw.e_controllerBit) != 0) {
			var c = this.m_controllerList;
			while(c != null) {
				c.draw(this.m_debugDraw);
				c = c.m_next;
			}
		}
		if((flags & box2D_dynamics_B2DebugDraw.e_pairBit) != 0) {
			color.set(0.3,0.9,0.9);
			var contact = this.m_contactManager.m_contactList;
			while(contact != null) {
				var fixtureA = contact.getFixtureA();
				var fixtureB = contact.getFixtureB();
				var cA = fixtureA.getAABB().getCenter();
				var cB = fixtureB.getAABB().getCenter();
				this.m_debugDraw.drawSegment(cA,cB,color);
				contact = contact.getNext();
			}
		}
		if((flags & box2D_dynamics_B2DebugDraw.e_aabbBit) != 0) {
			bp = this.m_contactManager.m_broadPhase;
			vs = [new box2D_common_math_B2Vec2(),new box2D_common_math_B2Vec2(),new box2D_common_math_B2Vec2(),new box2D_common_math_B2Vec2()];
			b = this.m_bodyList;
			while(b != null) {
				if(b.isActive() == false) {
					b = b.getNext();
					continue;
				}
				f = b.getFixtureList();
				while(f != null) {
					var aabb = bp.getFatAABB(f.m_proxy);
					vs[0].set(aabb.lowerBound.x,aabb.lowerBound.y);
					vs[1].set(aabb.upperBound.x,aabb.lowerBound.y);
					vs[2].set(aabb.upperBound.x,aabb.upperBound.y);
					vs[3].set(aabb.lowerBound.x,aabb.upperBound.y);
					this.m_debugDraw.drawPolygon(vs,4,color);
					f = f.getNext();
				}
				b = b.getNext();
			}
		}
		if((flags & box2D_dynamics_B2DebugDraw.e_centerOfMassBit) != 0) {
			b = this.m_bodyList;
			while(b != null) {
				xf = box2D_dynamics_B2World.s_xf;
				xf.R = b.m_xf.R;
				xf.position = b.getWorldCenter();
				this.m_debugDraw.drawTransform(xf);
				b = b.m_next;
			}
		}
	}
	,queryAABB: function(callbackMethod,aabb) {
		var broadPhase = this.m_contactManager.m_broadPhase;
		var worldQueryWrapper = function(proxy) {
			var worldQueryWrapper1 = broadPhase.getUserData(proxy);
			return callbackMethod(worldQueryWrapper1);
		};
		broadPhase.query(worldQueryWrapper,aabb);
	}
	,queryShape: function(callbackMethod,shape,transform) {
		if(transform == null) {
			transform = new box2D_common_math_B2Transform();
			transform.setIdentity();
		}
		var broadPhase = this.m_contactManager.m_broadPhase;
		var worldQueryWrapper = function(proxy) {
			var fixture = js_Boot.__cast(broadPhase.getUserData(proxy) , box2D_dynamics_B2Fixture);
			var worldQueryWrapper1 = fixture.getShape();
			var worldQueryWrapper2 = fixture.getBody().getTransform();
			if(box2D_collision_shapes_B2Shape.testOverlap(shape,transform,worldQueryWrapper1,worldQueryWrapper2)) {
				return callbackMethod(fixture);
			}
			return true;
		};
		var aabb = new box2D_collision_B2AABB();
		shape.computeAABB(aabb,transform);
		broadPhase.query(worldQueryWrapper,aabb);
	}
	,queryPoint: function(callbackMethod,p) {
		var broadPhase = this.m_contactManager.m_broadPhase;
		var worldQueryWrapper = function(proxy) {
			var fixture = js_Boot.__cast(broadPhase.getUserData(proxy) , box2D_dynamics_B2Fixture);
			if(fixture.testPoint(p)) {
				return callbackMethod(fixture);
			}
			return true;
		};
		var aabb = new box2D_collision_B2AABB();
		aabb.lowerBound.set(p.x - box2D_common_B2Settings.b2_linearSlop,p.y - box2D_common_B2Settings.b2_linearSlop);
		aabb.upperBound.set(p.x + box2D_common_B2Settings.b2_linearSlop,p.y + box2D_common_B2Settings.b2_linearSlop);
		broadPhase.query(worldQueryWrapper,aabb);
	}
	,rayCast: function(callbackMethod,point1,point2) {
		var broadPhase = this.m_contactManager.m_broadPhase;
		var output = new box2D_collision_B2RayCastOutput();
		var rayCastWrapper = function(input,proxy) {
			var userData = broadPhase.getUserData(proxy);
			var fixture = js_Boot.__cast(userData , box2D_dynamics_B2Fixture);
			var hit = fixture.rayCast(output,input);
			if(hit) {
				var fraction = output.fraction;
				var point = new box2D_common_math_B2Vec2((1.0 - fraction) * point1.x + fraction * point2.x,(1.0 - fraction) * point1.y + fraction * point2.y);
				return callbackMethod(fixture,point,output.normal,fraction);
			}
			return input.maxFraction;
		};
		var input1 = new box2D_collision_B2RayCastInput(point1,point2);
		broadPhase.rayCast(rayCastWrapper,input1);
	}
	,rayCastOne: function(point1,point2) {
		var result;
		var rayCastOneWrapper = function(fixture,point,normal,fraction) {
			result = fixture;
			return fraction;
		};
		this.rayCast(rayCastOneWrapper,point1,point2);
		return result;
	}
	,rayCastAll: function(point1,point2) {
		var result = [];
		var rayCastAllWrapper = function(fixture,point,normal,fraction) {
			result[result.length] = fixture;
			return 1;
		};
		this.rayCast(rayCastAllWrapper,point1,point2);
		return result;
	}
	,getBodyList: function() {
		return this.m_bodyList;
	}
	,getJointList: function() {
		return this.m_jointList;
	}
	,getContactList: function() {
		return this.m_contactList;
	}
	,isLocked: function() {
		return (this.m_flags & box2D_dynamics_B2World.e_locked) > 0;
	}
	,solve: function(step) {
		var controller = this.m_controllerList;
		while(controller != null) {
			controller.step(step);
			controller = controller.m_next;
		}
		var island = this.m_island;
		island.initialize(this.m_bodyCount,this.m_contactManager.m_contactCount,this.m_jointCount,null,this.m_contactManager.m_contactListener,this.m_contactSolver);
		var b = this.m_bodyList;
		while(b != null) {
			b.m_flags &= ~box2D_dynamics_B2Body.e_islandFlag;
			b = b.m_next;
		}
		var c = this.m_contactList;
		while(c != null) {
			c.m_flags &= ~box2D_dynamics_contacts_B2Contact.e_islandFlag;
			c = c.m_next;
		}
		var j = this.m_jointList;
		while(j != null) {
			j.m_islandFlag = false;
			j = j.m_next;
		}
		var stackSize = this.m_bodyCount;
		var stack = this.s_stack;
		var seed = this.m_bodyList;
		while(seed != null) {
			if((seed.m_flags & box2D_dynamics_B2Body.e_islandFlag) != 0) {
				seed = seed.m_next;
				continue;
			}
			if(seed.isAwake() == false || seed.isActive() == false) {
				seed = seed.m_next;
				continue;
			}
			if(seed.getType() == 0) {
				seed = seed.m_next;
				continue;
			}
			island.clear();
			var stackCount = 0;
			stack[stackCount++] = seed;
			seed.m_flags |= box2D_dynamics_B2Body.e_islandFlag;
			while(stackCount > 0) {
				b = stack[--stackCount];
				island.addBody(b);
				if(b.isAwake() == false) {
					b.setAwake(true);
				}
				if(b.getType() == 0) {
					continue;
				}
				var other;
				var ce = b.m_contactList;
				while(ce != null) {
					if((ce.contact.m_flags & box2D_dynamics_contacts_B2Contact.e_islandFlag) != 0) {
						ce = ce.next;
						continue;
					}
					if(ce.contact.isSensor() == true || ce.contact.isEnabled() == false || ce.contact.isTouching() == false) {
						ce = ce.next;
						continue;
					}
					island.addContact(ce.contact);
					ce.contact.m_flags |= box2D_dynamics_contacts_B2Contact.e_islandFlag;
					other = ce.other;
					if((other.m_flags & box2D_dynamics_B2Body.e_islandFlag) != 0) {
						ce = ce.next;
						continue;
					}
					stack[stackCount++] = other;
					other.m_flags |= box2D_dynamics_B2Body.e_islandFlag;
					ce = ce.next;
				}
				var jn = b.m_jointList;
				while(jn != null) {
					if(jn.joint.m_islandFlag == true) {
						jn = jn.next;
						continue;
					}
					other = jn.other;
					if(other.isActive() == false) {
						jn = jn.next;
						continue;
					}
					island.addJoint(jn.joint);
					jn.joint.m_islandFlag = true;
					if((other.m_flags & box2D_dynamics_B2Body.e_islandFlag) != 0) {
						jn = jn.next;
						continue;
					}
					stack[stackCount++] = other;
					other.m_flags |= box2D_dynamics_B2Body.e_islandFlag;
					jn = jn.next;
				}
			}
			island.solve(step,this.m_gravity,this.m_allowSleep);
			var _g = 0;
			var _g1 = island.m_bodyCount;
			while(_g < _g1) {
				var i = _g++;
				b = island.m_bodies[i];
				if(b.getType() == 0) {
					b.m_flags &= ~box2D_dynamics_B2Body.e_islandFlag;
				}
			}
			seed = seed.m_next;
		}
		var _g2 = 0;
		var _g11 = stack.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			if(stack[i1] == null) {
				break;
			}
			stack[i1] = null;
		}
		b = this.m_bodyList;
		while(b != null) {
			if(b.isAwake() == false || b.isActive() == false) {
				b = b.m_next;
				continue;
			}
			if(b.getType() == 0) {
				b = b.m_next;
				continue;
			}
			b.synchronizeFixtures();
			b = b.m_next;
		}
		this.m_contactManager.findNewContacts();
	}
	,solveTOI: function(step) {
		var fA;
		var fB;
		var bA;
		var bB;
		var cEdge;
		var island = this.m_island;
		island.initialize(this.m_bodyCount,box2D_common_B2Settings.b2_maxTOIContactsPerIsland,box2D_common_B2Settings.b2_maxTOIJointsPerIsland,null,this.m_contactManager.m_contactListener,this.m_contactSolver);
		var queue = box2D_dynamics_B2World.s_queue;
		var b = this.m_bodyList;
		while(b != null) {
			b.m_flags &= ~box2D_dynamics_B2Body.e_islandFlag;
			b.m_sweep.t0 = 0.0;
			b = b.m_next;
		}
		var c = this.m_contactList;
		while(c != null) {
			c.m_flags &= ~(box2D_dynamics_contacts_B2Contact.e_toiFlag | box2D_dynamics_contacts_B2Contact.e_islandFlag);
			c = c.m_next;
		}
		var j = this.m_jointList;
		while(j != null) {
			j.m_islandFlag = false;
			j = j.m_next;
		}
		while(true) {
			var minContact = null;
			var minTOI = 1.0;
			c = this.m_contactList;
			while(c != null) {
				if(c.isSensor() == true || c.isEnabled() == false || c.isContinuous() == false) {
					c = c.m_next;
					continue;
				}
				var toi = 1.0;
				if((c.m_flags & box2D_dynamics_contacts_B2Contact.e_toiFlag) != 0) {
					toi = c.m_toi;
				} else {
					fA = c.m_fixtureA;
					fB = c.m_fixtureB;
					bA = fA.m_body;
					bB = fB.m_body;
					if((bA.getType() != 2 || bA.isAwake() == false) && (bB.getType() != 2 || bB.isAwake() == false)) {
						c = c.m_next;
						continue;
					}
					var t0 = bA.m_sweep.t0;
					if(bA.m_sweep.t0 < bB.m_sweep.t0) {
						t0 = bB.m_sweep.t0;
						bA.m_sweep.advance(t0);
					} else if(bB.m_sweep.t0 < bA.m_sweep.t0) {
						t0 = bA.m_sweep.t0;
						bB.m_sweep.advance(t0);
					}
					toi = c.computeTOI(bA.m_sweep,bB.m_sweep);
					box2D_common_B2Settings.b2Assert(0.0 <= toi && toi <= 1.0);
					if(toi > 0.0 && toi < 1.0) {
						toi = (1.0 - toi) * t0 + toi;
						if(toi > 1) {
							toi = 1;
						}
					}
					c.m_toi = toi;
					c.m_flags |= box2D_dynamics_contacts_B2Contact.e_toiFlag;
				}
				if(Number.MIN_VALUE < toi && toi < minTOI) {
					minContact = c;
					minTOI = toi;
				}
				c = c.m_next;
			}
			if(minContact == null || 1.0 - 100.0 * Number.MIN_VALUE < minTOI) {
				break;
			}
			fA = minContact.m_fixtureA;
			fB = minContact.m_fixtureB;
			bA = fA.m_body;
			bB = fB.m_body;
			box2D_dynamics_B2World.s_backupA.set(bA.m_sweep);
			box2D_dynamics_B2World.s_backupB.set(bB.m_sweep);
			bA.advance(minTOI);
			bB.advance(minTOI);
			minContact.update(this.m_contactManager.m_contactListener);
			minContact.m_flags &= ~box2D_dynamics_contacts_B2Contact.e_toiFlag;
			if(minContact.isSensor() == true || minContact.isEnabled() == false) {
				bA.m_sweep.set(box2D_dynamics_B2World.s_backupA);
				bB.m_sweep.set(box2D_dynamics_B2World.s_backupB);
				bA.synchronizeTransform();
				bB.synchronizeTransform();
				continue;
			}
			if(minContact.isTouching() == false) {
				continue;
			}
			var seed = bA;
			if(seed.getType() != 2) {
				seed = bB;
			}
			island.clear();
			var queueStart = 0;
			var queueSize = 0;
			queue[queueStart + queueSize++] = seed;
			seed.m_flags |= box2D_dynamics_B2Body.e_islandFlag;
			while(queueSize > 0) {
				b = queue[queueStart++];
				--queueSize;
				island.addBody(b);
				if(b.isAwake() == false) {
					b.setAwake(true);
				}
				if(b.getType() != 2) {
					continue;
				}
				cEdge = b.m_contactList;
				var other;
				while(cEdge != null) {
					if(island.m_contactCount == island.m_contactCapacity) {
						cEdge = cEdge.next;
						break;
					}
					if((cEdge.contact.m_flags & box2D_dynamics_contacts_B2Contact.e_islandFlag) != 0) {
						cEdge = cEdge.next;
						continue;
					}
					if(cEdge.contact.isSensor() == true || cEdge.contact.isEnabled() == false || cEdge.contact.isTouching() == false) {
						cEdge = cEdge.next;
						continue;
					}
					island.addContact(cEdge.contact);
					cEdge.contact.m_flags |= box2D_dynamics_contacts_B2Contact.e_islandFlag;
					other = cEdge.other;
					if((other.m_flags & box2D_dynamics_B2Body.e_islandFlag) != 0) {
						cEdge = cEdge.next;
						continue;
					}
					if(other.getType() != 0) {
						other.advance(minTOI);
						other.setAwake(true);
					}
					queue[queueStart + queueSize] = other;
					++queueSize;
					other.m_flags |= box2D_dynamics_B2Body.e_islandFlag;
					cEdge = cEdge.next;
				}
				var jEdge = b.m_jointList;
				while(jEdge != null) {
					if(island.m_jointCount == island.m_jointCapacity) {
						jEdge = jEdge.next;
						continue;
					}
					if(jEdge.joint.m_islandFlag == true) {
						jEdge = jEdge.next;
						continue;
					}
					other = jEdge.other;
					if(other.isActive() == false) {
						jEdge = jEdge.next;
						continue;
					}
					island.addJoint(jEdge.joint);
					jEdge.joint.m_islandFlag = true;
					if((other.m_flags & box2D_dynamics_B2Body.e_islandFlag) != 0) {
						jEdge = jEdge.next;
						continue;
					}
					if(other.getType() != 0) {
						other.advance(minTOI);
						other.setAwake(true);
					}
					queue[queueStart + queueSize] = other;
					++queueSize;
					other.m_flags |= box2D_dynamics_B2Body.e_islandFlag;
					jEdge = jEdge.next;
				}
			}
			var subStep = box2D_dynamics_B2World.s_timestep;
			subStep.warmStarting = false;
			subStep.dt = (1.0 - minTOI) * step.dt;
			subStep.inv_dt = 1.0 / subStep.dt;
			subStep.dtRatio = 0.0;
			subStep.velocityIterations = step.velocityIterations;
			subStep.positionIterations = step.positionIterations;
			island.solveTOI(subStep);
			var i;
			var _g = 0;
			var _g1 = island.m_bodyCount;
			while(_g < _g1) {
				var i1 = _g++;
				b = island.m_bodies[i1];
				b.m_flags &= ~box2D_dynamics_B2Body.e_islandFlag;
				if(b.isAwake() == false) {
					continue;
				}
				if(b.getType() != 2) {
					continue;
				}
				b.synchronizeFixtures();
				cEdge = b.m_contactList;
				while(cEdge != null) {
					cEdge.contact.m_flags &= ~box2D_dynamics_contacts_B2Contact.e_toiFlag;
					cEdge = cEdge.next;
				}
			}
			var _g2 = 0;
			var _g3 = island.m_contactCount;
			while(_g2 < _g3) {
				var i2 = _g2++;
				c = island.m_contacts[i2];
				c.m_flags &= ~(box2D_dynamics_contacts_B2Contact.e_toiFlag | box2D_dynamics_contacts_B2Contact.e_islandFlag);
			}
			var _g4 = 0;
			var _g5 = island.m_jointCount;
			while(_g4 < _g5) {
				var i3 = _g4++;
				j = island.m_joints[i3];
				j.m_islandFlag = false;
			}
			this.m_contactManager.findNewContacts();
		}
	}
	,drawJoint: function(joint) {
		var b1 = joint.getBodyA();
		var b2 = joint.getBodyB();
		var xf1 = b1.m_xf;
		var xf2 = b2.m_xf;
		var x1 = xf1.position;
		var x2 = xf2.position;
		var p1 = joint.getAnchorA();
		var p2 = joint.getAnchorB();
		var color = box2D_dynamics_B2World.s_jointColor;
		switch(joint.m_type) {
		case 3:
			this.m_debugDraw.drawSegment(p1,p2,color);
			break;
		case 4:
			var pulley = js_Boot.__cast(joint , box2D_dynamics_joints_B2PulleyJoint);
			var s1 = pulley.getGroundAnchorA();
			var s2 = pulley.getGroundAnchorB();
			this.m_debugDraw.drawSegment(s1,p1,color);
			this.m_debugDraw.drawSegment(s2,p2,color);
			this.m_debugDraw.drawSegment(s1,s2,color);
			break;
		case 5:
			this.m_debugDraw.drawSegment(p1,p2,color);
			break;
		default:
			if(b1 != this.m_groundBody) {
				this.m_debugDraw.drawSegment(x1,p1,color);
			}
			this.m_debugDraw.drawSegment(p1,p2,color);
			if(b2 != this.m_groundBody) {
				this.m_debugDraw.drawSegment(x2,p2,color);
			}
		}
	}
	,drawShape: function(shape,xf,color) {
		switch(shape.m_type) {
		case 1:
			var circle = js_Boot.__cast(shape , box2D_collision_shapes_B2CircleShape);
			var center = box2D_common_math_B2Math.mulX(xf,circle.m_p);
			var radius = circle.m_radius;
			var axis = xf.R.col1;
			this.m_debugDraw.drawSolidCircle(center,radius,axis,color);
			break;
		case 2:
			var i;
			var poly = js_Boot.__cast(shape , box2D_collision_shapes_B2PolygonShape);
			var vertexCount = poly.getVertexCount();
			var localVertices = poly.getVertices();
			var vertices = [];
			var _g = 0;
			var _g1 = vertexCount;
			while(_g < _g1) {
				var i1 = _g++;
				vertices[i1] = box2D_common_math_B2Math.mulX(xf,localVertices[i1]);
			}
			this.m_debugDraw.drawSolidPolygon(vertices,vertexCount,color);
			break;
		case 3:
			var edge = js_Boot.__cast(shape , box2D_collision_shapes_B2EdgeShape);
			this.m_debugDraw.drawSegment(box2D_common_math_B2Math.mulX(xf,edge.getVertex1()),box2D_common_math_B2Math.mulX(xf,edge.getVertex2()),color);
			break;
		default:
		}
	}
	,__class__: box2D_dynamics_B2World
};
var box2D_dynamics_contacts_B2Contact = function() {
	this.m_toi = 0;
	this.m_flags = 0;
	this.m_nodeA = new box2D_dynamics_contacts_B2ContactEdge();
	this.m_nodeB = new box2D_dynamics_contacts_B2ContactEdge();
	this.m_manifold = new box2D_collision_B2Manifold();
	this.m_oldManifold = new box2D_collision_B2Manifold();
};
$hxClasses["box2D.dynamics.contacts.B2Contact"] = box2D_dynamics_contacts_B2Contact;
box2D_dynamics_contacts_B2Contact.__name__ = "box2D.dynamics.contacts.B2Contact";
box2D_dynamics_contacts_B2Contact.prototype = {
	getManifold: function() {
		return this.m_manifold;
	}
	,getWorldManifold: function(worldManifold) {
		var bodyA = this.m_fixtureA.getBody();
		var bodyB = this.m_fixtureB.getBody();
		var shapeA = this.m_fixtureA.getShape();
		var shapeB = this.m_fixtureB.getShape();
		worldManifold.initialize(this.m_manifold,bodyA.getTransform(),shapeA.m_radius,bodyB.getTransform(),shapeB.m_radius);
	}
	,isTouching: function() {
		return (this.m_flags & box2D_dynamics_contacts_B2Contact.e_touchingFlag) == box2D_dynamics_contacts_B2Contact.e_touchingFlag;
	}
	,isContinuous: function() {
		return (this.m_flags & box2D_dynamics_contacts_B2Contact.e_continuousFlag) == box2D_dynamics_contacts_B2Contact.e_continuousFlag;
	}
	,setSensor: function(sensor) {
		if(sensor) {
			this.m_flags |= box2D_dynamics_contacts_B2Contact.e_sensorFlag;
		} else {
			this.m_flags &= ~box2D_dynamics_contacts_B2Contact.e_sensorFlag;
		}
	}
	,isSensor: function() {
		return (this.m_flags & box2D_dynamics_contacts_B2Contact.e_sensorFlag) == box2D_dynamics_contacts_B2Contact.e_sensorFlag;
	}
	,setEnabled: function(flag) {
		if(flag) {
			this.m_flags |= box2D_dynamics_contacts_B2Contact.e_enabledFlag;
		} else {
			this.m_flags &= ~box2D_dynamics_contacts_B2Contact.e_enabledFlag;
		}
	}
	,isEnabled: function() {
		return (this.m_flags & box2D_dynamics_contacts_B2Contact.e_enabledFlag) == box2D_dynamics_contacts_B2Contact.e_enabledFlag;
	}
	,getNext: function() {
		return this.m_next;
	}
	,getFixtureA: function() {
		return this.m_fixtureA;
	}
	,getFixtureB: function() {
		return this.m_fixtureB;
	}
	,flagForFiltering: function() {
		this.m_flags |= box2D_dynamics_contacts_B2Contact.e_filterFlag;
	}
	,reset: function(fixtureA,fixtureB) {
		this.m_flags = box2D_dynamics_contacts_B2Contact.e_enabledFlag;
		if(fixtureA == null || fixtureB == null) {
			this.m_fixtureA = null;
			this.m_fixtureB = null;
			return;
		}
		if(fixtureA.isSensor() || fixtureB.isSensor()) {
			this.m_flags |= box2D_dynamics_contacts_B2Contact.e_sensorFlag;
		}
		var bodyA = fixtureA.getBody();
		var bodyB = fixtureB.getBody();
		if(bodyA.getType() != 2 || bodyA.isBullet() || bodyB.getType() != 2 || bodyB.isBullet()) {
			this.m_flags |= box2D_dynamics_contacts_B2Contact.e_continuousFlag;
		}
		this.m_fixtureA = fixtureA;
		this.m_fixtureB = fixtureB;
		this.m_manifold.m_pointCount = 0;
		this.m_prev = null;
		this.m_next = null;
		this.m_nodeA.contact = null;
		this.m_nodeA.prev = null;
		this.m_nodeA.next = null;
		this.m_nodeA.other = null;
		this.m_nodeB.contact = null;
		this.m_nodeB.prev = null;
		this.m_nodeB.next = null;
		this.m_nodeB.other = null;
	}
	,update: function(listener) {
		var tManifold = this.m_oldManifold;
		this.m_oldManifold = this.m_manifold;
		this.m_manifold = tManifold;
		this.m_flags |= box2D_dynamics_contacts_B2Contact.e_enabledFlag;
		var touching = false;
		var wasTouching = (this.m_flags & box2D_dynamics_contacts_B2Contact.e_touchingFlag) == box2D_dynamics_contacts_B2Contact.e_touchingFlag;
		var bodyA = this.m_fixtureA.m_body;
		var bodyB = this.m_fixtureB.m_body;
		var aabbOverlap = this.m_fixtureA.m_aabb.testOverlap(this.m_fixtureB.m_aabb);
		if((this.m_flags & box2D_dynamics_contacts_B2Contact.e_sensorFlag) != 0) {
			if(aabbOverlap) {
				var shapeA = this.m_fixtureA.getShape();
				var shapeB = this.m_fixtureB.getShape();
				var xfA = bodyA.getTransform();
				var xfB = bodyB.getTransform();
				touching = box2D_collision_shapes_B2Shape.testOverlap(shapeA,xfA,shapeB,xfB);
			}
			this.m_manifold.m_pointCount = 0;
		} else {
			if(bodyA.getType() != box2D_dynamics_B2Body.b2_dynamicBody || bodyA.isBullet() || bodyB.getType() != box2D_dynamics_B2Body.b2_dynamicBody || bodyB.isBullet()) {
				this.m_flags |= box2D_dynamics_contacts_B2Contact.e_continuousFlag;
			} else {
				this.m_flags &= ~box2D_dynamics_contacts_B2Contact.e_continuousFlag;
			}
			if(aabbOverlap) {
				this.evaluate();
				touching = this.m_manifold.m_pointCount > 0;
				var _g = 0;
				var _g1 = this.m_manifold.m_pointCount;
				while(_g < _g1) {
					var i = _g++;
					var mp2 = this.m_manifold.m_points[i];
					mp2.m_normalImpulse = 0.0;
					mp2.m_tangentImpulse = 0.0;
					var id2 = mp2.m_id;
					var _g2 = 0;
					var _g11 = this.m_oldManifold.m_pointCount;
					while(_g2 < _g11) {
						var j = _g2++;
						var mp1 = this.m_oldManifold.m_points[j];
						if(mp1.m_id.get_key() == id2.get_key()) {
							mp2.m_normalImpulse = mp1.m_normalImpulse;
							mp2.m_tangentImpulse = mp1.m_tangentImpulse;
							break;
						}
					}
				}
			} else {
				this.m_manifold.m_pointCount = 0;
			}
			if(touching != wasTouching) {
				bodyA.setAwake(true);
				bodyB.setAwake(true);
			}
		}
		if(touching) {
			this.m_flags |= box2D_dynamics_contacts_B2Contact.e_touchingFlag;
		} else {
			this.m_flags &= ~box2D_dynamics_contacts_B2Contact.e_touchingFlag;
		}
		if(wasTouching == false && touching == true) {
			listener.beginContact(this);
		}
		if(wasTouching == true && touching == false) {
			listener.endContact(this);
		}
		if((this.m_flags & box2D_dynamics_contacts_B2Contact.e_sensorFlag) == 0) {
			listener.preSolve(this,this.m_oldManifold);
		}
	}
	,evaluate: function() {
	}
	,computeTOI: function(sweepA,sweepB) {
		box2D_dynamics_contacts_B2Contact.s_input.proxyA.set(this.m_fixtureA.getShape());
		box2D_dynamics_contacts_B2Contact.s_input.proxyB.set(this.m_fixtureB.getShape());
		box2D_dynamics_contacts_B2Contact.s_input.sweepA = sweepA;
		box2D_dynamics_contacts_B2Contact.s_input.sweepB = sweepB;
		box2D_dynamics_contacts_B2Contact.s_input.tolerance = box2D_common_B2Settings.b2_linearSlop;
		return box2D_collision_B2TimeOfImpact.timeOfImpact(box2D_dynamics_contacts_B2Contact.s_input);
	}
	,__class__: box2D_dynamics_contacts_B2Contact
};
var box2D_dynamics_contacts_B2CircleContact = function() {
	box2D_dynamics_contacts_B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2CircleContact"] = box2D_dynamics_contacts_B2CircleContact;
box2D_dynamics_contacts_B2CircleContact.__name__ = "box2D.dynamics.contacts.B2CircleContact";
box2D_dynamics_contacts_B2CircleContact.create = function(allocator) {
	return new box2D_dynamics_contacts_B2CircleContact();
};
box2D_dynamics_contacts_B2CircleContact.destroy = function(contact,allocator) {
};
box2D_dynamics_contacts_B2CircleContact.__super__ = box2D_dynamics_contacts_B2Contact;
box2D_dynamics_contacts_B2CircleContact.prototype = $extend(box2D_dynamics_contacts_B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D_dynamics_contacts_B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.getBody();
		var bB = this.m_fixtureB.getBody();
		box2D_collision_B2Collision.collideCircles(this.m_manifold,js_Boot.__cast(this.m_fixtureA.getShape() , box2D_collision_shapes_B2CircleShape),bA.m_xf,js_Boot.__cast(this.m_fixtureB.getShape() , box2D_collision_shapes_B2CircleShape),bB.m_xf);
	}
	,__class__: box2D_dynamics_contacts_B2CircleContact
});
var box2D_dynamics_contacts_B2ContactConstraint = function() {
	this.pointCount = 0;
	this.restitution = 0;
	this.friction = 0;
	this.radius = 0;
	this.localPlaneNormal = new box2D_common_math_B2Vec2();
	this.localPoint = new box2D_common_math_B2Vec2();
	this.normal = new box2D_common_math_B2Vec2();
	this.normalMass = new box2D_common_math_B2Mat22();
	this.K = new box2D_common_math_B2Mat22();
	this.points = [];
	var _g = 0;
	var _g1 = box2D_common_B2Settings.b2_maxManifoldPoints;
	while(_g < _g1) {
		var i = _g++;
		this.points[i] = new box2D_dynamics_contacts_B2ContactConstraintPoint();
	}
};
$hxClasses["box2D.dynamics.contacts.B2ContactConstraint"] = box2D_dynamics_contacts_B2ContactConstraint;
box2D_dynamics_contacts_B2ContactConstraint.__name__ = "box2D.dynamics.contacts.B2ContactConstraint";
box2D_dynamics_contacts_B2ContactConstraint.prototype = {
	__class__: box2D_dynamics_contacts_B2ContactConstraint
};
var box2D_dynamics_contacts_B2ContactConstraintPoint = function() {
	this.localPoint = new box2D_common_math_B2Vec2();
	this.rA = new box2D_common_math_B2Vec2();
	this.rB = new box2D_common_math_B2Vec2();
};
$hxClasses["box2D.dynamics.contacts.B2ContactConstraintPoint"] = box2D_dynamics_contacts_B2ContactConstraintPoint;
box2D_dynamics_contacts_B2ContactConstraintPoint.__name__ = "box2D.dynamics.contacts.B2ContactConstraintPoint";
box2D_dynamics_contacts_B2ContactConstraintPoint.prototype = {
	__class__: box2D_dynamics_contacts_B2ContactConstraintPoint
};
var box2D_dynamics_contacts_B2ContactEdge = function() {
};
$hxClasses["box2D.dynamics.contacts.B2ContactEdge"] = box2D_dynamics_contacts_B2ContactEdge;
box2D_dynamics_contacts_B2ContactEdge.__name__ = "box2D.dynamics.contacts.B2ContactEdge";
box2D_dynamics_contacts_B2ContactEdge.prototype = {
	__class__: box2D_dynamics_contacts_B2ContactEdge
};
var box2D_dynamics_contacts_B2ContactFactory = function(allocator) {
	this.m_allocator = allocator;
	this.initializeRegisters();
};
$hxClasses["box2D.dynamics.contacts.B2ContactFactory"] = box2D_dynamics_contacts_B2ContactFactory;
box2D_dynamics_contacts_B2ContactFactory.__name__ = "box2D.dynamics.contacts.B2ContactFactory";
box2D_dynamics_contacts_B2ContactFactory.prototype = {
	addType: function(createFcn,destroyFcn,type1,type2) {
		this.m_registers[type1][type2].createFcn = createFcn;
		this.m_registers[type1][type2].destroyFcn = destroyFcn;
		this.m_registers[type1][type2].primary = true;
		if(type1 != type2) {
			this.m_registers[type2][type1].createFcn = createFcn;
			this.m_registers[type2][type1].destroyFcn = destroyFcn;
			this.m_registers[type2][type1].primary = false;
		}
	}
	,initializeRegisters: function() {
		this.m_registers = [];
		this.m_registers[0] = [];
		this.m_registers[0][0] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[0][1] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[0][2] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[0][3] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[1] = [];
		this.m_registers[1][0] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[1][1] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[1][2] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[1][3] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[2] = [];
		this.m_registers[2][0] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[2][1] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[2][2] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[2][3] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[3] = [];
		this.m_registers[3][0] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[3][1] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[3][2] = new box2D_dynamics_contacts_B2ContactRegister();
		this.m_registers[3][3] = new box2D_dynamics_contacts_B2ContactRegister();
		this.addType(box2D_dynamics_contacts_B2CircleContact.create,box2D_dynamics_contacts_B2CircleContact.destroy,1,1);
		this.addType(box2D_dynamics_contacts_B2PolyAndCircleContact.create,box2D_dynamics_contacts_B2PolyAndCircleContact.destroy,2,1);
		this.addType(box2D_dynamics_contacts_B2PolygonContact.create,box2D_dynamics_contacts_B2PolygonContact.destroy,2,2);
		this.addType(box2D_dynamics_contacts_B2EdgeAndCircleContact.create,box2D_dynamics_contacts_B2EdgeAndCircleContact.destroy,3,1);
		this.addType(box2D_dynamics_contacts_B2PolyAndEdgeContact.create,box2D_dynamics_contacts_B2PolyAndEdgeContact.destroy,2,3);
	}
	,create: function(fixtureA,fixtureB) {
		var type1 = fixtureA.getType();
		var type2 = fixtureB.getType();
		var reg = this.m_registers[type1][type2];
		if(!reg.primary) {
			reg = this.m_registers[type2][type1];
			var tempfixture = fixtureB;
			fixtureB = fixtureA;
			fixtureA = tempfixture;
		}
		var c;
		if(reg.pool != null) {
			c = reg.pool;
			reg.pool = c.m_next;
			reg.poolCount--;
			c.reset(fixtureA,fixtureB);
			return c;
		}
		var createFcn = reg.createFcn;
		if(createFcn != null) {
			c = createFcn(this.m_allocator);
			c.reset(fixtureA,fixtureB);
			return c;
		} else {
			return null;
		}
	}
	,destroy: function(contact) {
		if(contact.m_manifold.m_pointCount > 0) {
			contact.m_fixtureA.m_body.setAwake(true);
			contact.m_fixtureB.m_body.setAwake(true);
		}
		var type1 = contact.m_fixtureA.getType();
		var type2 = contact.m_fixtureB.getType();
		var reg = this.m_registers[type1][type2];
		reg.poolCount++;
		contact.m_next = reg.pool;
		reg.pool = contact;
		contact.reset();
		var destroyFcn = reg.destroyFcn;
		destroyFcn(contact,this.m_allocator);
	}
	,__class__: box2D_dynamics_contacts_B2ContactFactory
};
var box2D_dynamics_contacts_B2ContactRegister = function() {
	this.poolCount = 0;
};
$hxClasses["box2D.dynamics.contacts.B2ContactRegister"] = box2D_dynamics_contacts_B2ContactRegister;
box2D_dynamics_contacts_B2ContactRegister.__name__ = "box2D.dynamics.contacts.B2ContactRegister";
box2D_dynamics_contacts_B2ContactRegister.prototype = {
	__class__: box2D_dynamics_contacts_B2ContactRegister
};
var box2D_dynamics_contacts_B2PositionSolverManifold = function() {
	this.m_normal = new box2D_common_math_B2Vec2();
	this.m_separations = [];
	this.m_points = [];
	var _g = 0;
	var _g1 = box2D_common_B2Settings.b2_maxManifoldPoints;
	while(_g < _g1) {
		var i = _g++;
		this.m_points[i] = new box2D_common_math_B2Vec2();
	}
};
$hxClasses["box2D.dynamics.contacts.B2PositionSolverManifold"] = box2D_dynamics_contacts_B2PositionSolverManifold;
box2D_dynamics_contacts_B2PositionSolverManifold.__name__ = "box2D.dynamics.contacts.B2PositionSolverManifold";
box2D_dynamics_contacts_B2PositionSolverManifold.prototype = {
	initialize: function(cc) {
		box2D_common_B2Settings.b2Assert(cc.pointCount > 0);
		var i;
		var clipPointX;
		var clipPointY;
		var tMat;
		var tVec;
		var planePointX;
		var planePointY;
		switch(cc.type._hx_index) {
		case 0:
			tMat = cc.bodyA.m_xf.R;
			tVec = cc.localPoint;
			var pointAX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			var pointAY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tMat = cc.bodyB.m_xf.R;
			tVec = cc.points[0].localPoint;
			var pointBX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			var pointBY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			var dX = pointBX - pointAX;
			var dY = pointBY - pointAY;
			var d2 = dX * dX + dY * dY;
			if(d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
				var d = Math.sqrt(d2);
				this.m_normal.x = dX / d;
				this.m_normal.y = dY / d;
			} else {
				this.m_normal.x = 1.0;
				this.m_normal.y = 0.0;
			}
			this.m_points[0].x = 0.5 * (pointAX + pointBX);
			this.m_points[0].y = 0.5 * (pointAY + pointBY);
			this.m_separations[0] = dX * this.m_normal.x + dY * this.m_normal.y - cc.radius;
			break;
		case 1:
			tMat = cc.bodyA.m_xf.R;
			tVec = cc.localPlaneNormal;
			this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = cc.bodyA.m_xf.R;
			tVec = cc.localPoint;
			planePointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			planePointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tMat = cc.bodyB.m_xf.R;
			var _g = 0;
			var _g1 = cc.pointCount;
			while(_g < _g1) {
				var i1 = _g++;
				tVec = cc.points[i1].localPoint;
				clipPointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				clipPointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				this.m_separations[i1] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
				this.m_points[i1].x = clipPointX;
				this.m_points[i1].y = clipPointY;
			}
			break;
		case 2:
			tMat = cc.bodyB.m_xf.R;
			tVec = cc.localPlaneNormal;
			this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = cc.bodyB.m_xf.R;
			tVec = cc.localPoint;
			planePointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			planePointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tMat = cc.bodyA.m_xf.R;
			var _g2 = 0;
			var _g11 = cc.pointCount;
			while(_g2 < _g11) {
				var i2 = _g2++;
				tVec = cc.points[i2].localPoint;
				clipPointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				clipPointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				this.m_separations[i2] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
				this.m_points[i2].set(clipPointX,clipPointY);
			}
			this.m_normal.x *= -1;
			this.m_normal.y *= -1;
			break;
		}
	}
	,__class__: box2D_dynamics_contacts_B2PositionSolverManifold
};
var box2D_dynamics_contacts_B2ContactSolver = function() {
	this.m_constraintCount = 0;
	this.m_step = new box2D_dynamics_B2TimeStep();
	this.m_constraints = [];
};
$hxClasses["box2D.dynamics.contacts.B2ContactSolver"] = box2D_dynamics_contacts_B2ContactSolver;
box2D_dynamics_contacts_B2ContactSolver.__name__ = "box2D.dynamics.contacts.B2ContactSolver";
box2D_dynamics_contacts_B2ContactSolver.prototype = {
	initialize: function(step,contacts,contactCount,allocator) {
		var contact;
		this.m_step.set(step);
		this.m_allocator = allocator;
		var i;
		var tVec;
		var tMat;
		this.m_constraintCount = contactCount;
		while(this.m_constraints.length < this.m_constraintCount) this.m_constraints[this.m_constraints.length] = new box2D_dynamics_contacts_B2ContactConstraint();
		var _g = 0;
		var _g1 = contactCount;
		while(_g < _g1) {
			var i1 = _g++;
			contact = contacts[i1];
			var fixtureA = contact.m_fixtureA;
			var fixtureB = contact.m_fixtureB;
			var shapeA = fixtureA.m_shape;
			var shapeB = fixtureB.m_shape;
			var radiusA = shapeA.m_radius;
			var radiusB = shapeB.m_radius;
			var bodyA = fixtureA.m_body;
			var bodyB = fixtureB.m_body;
			var manifold = contact.getManifold();
			var friction = box2D_common_B2Settings.b2MixFriction(fixtureA.getFriction(),fixtureB.getFriction());
			var restitution = box2D_common_B2Settings.b2MixRestitution(fixtureA.getRestitution(),fixtureB.getRestitution());
			var vAX = bodyA.m_linearVelocity.x;
			var vAY = bodyA.m_linearVelocity.y;
			var vBX = bodyB.m_linearVelocity.x;
			var vBY = bodyB.m_linearVelocity.y;
			var wA = bodyA.m_angularVelocity;
			var wB = bodyB.m_angularVelocity;
			box2D_common_B2Settings.b2Assert(manifold.m_pointCount > 0);
			box2D_dynamics_contacts_B2ContactSolver.s_worldManifold.initialize(manifold,bodyA.m_xf,radiusA,bodyB.m_xf,radiusB);
			var normalX = box2D_dynamics_contacts_B2ContactSolver.s_worldManifold.m_normal.x;
			var normalY = box2D_dynamics_contacts_B2ContactSolver.s_worldManifold.m_normal.y;
			var cc = this.m_constraints[i1];
			cc.bodyA = bodyA;
			cc.bodyB = bodyB;
			cc.manifold = manifold;
			cc.normal.x = normalX;
			cc.normal.y = normalY;
			cc.pointCount = manifold.m_pointCount;
			cc.friction = friction;
			cc.restitution = restitution;
			cc.localPlaneNormal.x = manifold.m_localPlaneNormal.x;
			cc.localPlaneNormal.y = manifold.m_localPlaneNormal.y;
			cc.localPoint.x = manifold.m_localPoint.x;
			cc.localPoint.y = manifold.m_localPoint.y;
			cc.radius = radiusA + radiusB;
			cc.type = manifold.m_type;
			var _g2 = 0;
			var _g11 = cc.pointCount;
			while(_g2 < _g11) {
				var k = _g2++;
				var cp = manifold.m_points[k];
				var ccp = cc.points[k];
				ccp.normalImpulse = cp.m_normalImpulse;
				ccp.tangentImpulse = cp.m_tangentImpulse;
				ccp.localPoint.setV(cp.m_localPoint);
				var rAX = ccp.rA.x = box2D_dynamics_contacts_B2ContactSolver.s_worldManifold.m_points[k].x - bodyA.m_sweep.c.x;
				var rAY = ccp.rA.y = box2D_dynamics_contacts_B2ContactSolver.s_worldManifold.m_points[k].y - bodyA.m_sweep.c.y;
				var rBX = ccp.rB.x = box2D_dynamics_contacts_B2ContactSolver.s_worldManifold.m_points[k].x - bodyB.m_sweep.c.x;
				var rBY = ccp.rB.y = box2D_dynamics_contacts_B2ContactSolver.s_worldManifold.m_points[k].y - bodyB.m_sweep.c.y;
				var rnA = rAX * normalY - rAY * normalX;
				var rnB = rBX * normalY - rBY * normalX;
				rnA *= rnA;
				rnB *= rnB;
				var kNormal = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rnA + bodyB.m_invI * rnB;
				ccp.normalMass = 1.0 / kNormal;
				var kEqualized = bodyA.m_mass * bodyA.m_invMass + bodyB.m_mass * bodyB.m_invMass;
				kEqualized += bodyA.m_mass * bodyA.m_invI * rnA + bodyB.m_mass * bodyB.m_invI * rnB;
				ccp.equalizedMass = 1.0 / kEqualized;
				var tangentX = normalY;
				var tangentY = -normalX;
				var rtA = rAX * tangentY - rAY * tangentX;
				var rtB = rBX * tangentY - rBY * tangentX;
				rtA *= rtA;
				rtB *= rtB;
				var kTangent = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rtA + bodyB.m_invI * rtB;
				ccp.tangentMass = 1.0 / kTangent;
				ccp.velocityBias = 0.0;
				var tX = vBX + -wB * rBY - vAX - -wA * rAY;
				var tY = vBY + wB * rBX - vAY - wA * rAX;
				var vRel = cc.normal.x * tX + cc.normal.y * tY;
				if(vRel < -box2D_common_B2Settings.b2_velocityThreshold) {
					ccp.velocityBias += -cc.restitution * vRel;
				}
			}
			if(cc.pointCount == 2) {
				var ccp1 = cc.points[0];
				var ccp2 = cc.points[1];
				var invMassA = bodyA.m_invMass;
				var invIA = bodyA.m_invI;
				var invMassB = bodyB.m_invMass;
				var invIB = bodyB.m_invI;
				var rn1A = ccp1.rA.x * normalY - ccp1.rA.y * normalX;
				var rn1B = ccp1.rB.x * normalY - ccp1.rB.y * normalX;
				var rn2A = ccp2.rA.x * normalY - ccp2.rA.y * normalX;
				var rn2B = ccp2.rB.x * normalY - ccp2.rB.y * normalX;
				var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;
				var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
				var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;
				var k_maxConditionNumber = 100.0;
				if(k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {
					cc.K.col1.set(k11,k12);
					cc.K.col2.set(k12,k22);
					cc.K.getInverse(cc.normalMass);
				} else {
					cc.pointCount = 1;
				}
			}
		}
	}
	,initVelocityConstraints: function(step) {
		var tVec;
		var tVec2;
		var tMat;
		var _g = 0;
		var _g1 = this.m_constraintCount;
		while(_g < _g1) {
			var i = _g++;
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_invMass;
			var invIA = bodyA.m_invI;
			var invMassB = bodyB.m_invMass;
			var invIB = bodyB.m_invI;
			var normalX = c.normal.x;
			var normalY = c.normal.y;
			var tangentX = normalY;
			var tangentY = -normalX;
			var tX;
			var j;
			var tCount;
			if(step.warmStarting) {
				tCount = c.pointCount;
				var _g2 = 0;
				var _g11 = tCount;
				while(_g2 < _g11) {
					var j1 = _g2++;
					var ccp = c.points[j1];
					ccp.normalImpulse *= step.dtRatio;
					ccp.tangentImpulse *= step.dtRatio;
					var PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX;
					var PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY;
					bodyA.m_angularVelocity -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
					bodyA.m_linearVelocity.x -= invMassA * PX;
					bodyA.m_linearVelocity.y -= invMassA * PY;
					bodyB.m_angularVelocity += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
					bodyB.m_linearVelocity.x += invMassB * PX;
					bodyB.m_linearVelocity.y += invMassB * PY;
				}
			} else {
				tCount = c.pointCount;
				var _g3 = 0;
				var _g12 = tCount;
				while(_g3 < _g12) {
					var j2 = _g3++;
					var ccp2 = c.points[j2];
					ccp2.normalImpulse = 0.0;
					ccp2.tangentImpulse = 0.0;
				}
			}
		}
	}
	,solveVelocityConstraints: function() {
		var j;
		var ccp;
		var rAX;
		var rAY;
		var rBX;
		var rBY;
		var dvX;
		var dvY;
		var vn;
		var vt;
		var lambda;
		var maxFriction;
		var newImpulse;
		var PX;
		var PY;
		var dX;
		var dY;
		var P1X;
		var P1Y;
		var P2X;
		var P2Y;
		var tMat;
		var tVec;
		var _g = 0;
		var _g1 = this.m_constraintCount;
		while(_g < _g1) {
			var i = _g++;
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var wA = bodyA.m_angularVelocity;
			var wB = bodyB.m_angularVelocity;
			var vA = bodyA.m_linearVelocity;
			var vB = bodyB.m_linearVelocity;
			var invMassA = bodyA.m_invMass;
			var invIA = bodyA.m_invI;
			var invMassB = bodyB.m_invMass;
			var invIB = bodyB.m_invI;
			var normalX = c.normal.x;
			var normalY = c.normal.y;
			var tangentX = normalY;
			var tangentY = -normalX;
			var friction = c.friction;
			var tX;
			var _g2 = 0;
			var _g11 = c.pointCount;
			while(_g2 < _g11) {
				var j1 = _g2++;
				ccp = c.points[j1];
				dvX = vB.x - wB * ccp.rB.y - vA.x + wA * ccp.rA.y;
				dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;
				vt = dvX * tangentX + dvY * tangentY;
				lambda = ccp.tangentMass * -vt;
				maxFriction = friction * ccp.normalImpulse;
				newImpulse = box2D_common_math_B2Math.clamp(ccp.tangentImpulse + lambda,-maxFriction,maxFriction);
				lambda = newImpulse - ccp.tangentImpulse;
				PX = lambda * tangentX;
				PY = lambda * tangentY;
				vA.x -= invMassA * PX;
				vA.y -= invMassA * PY;
				wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
				vB.x += invMassB * PX;
				vB.y += invMassB * PY;
				wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
				ccp.tangentImpulse = newImpulse;
			}
			var tCount = c.pointCount;
			if(c.pointCount == 1) {
				ccp = c.points[0];
				dvX = vB.x + -wB * ccp.rB.y - vA.x - -wA * ccp.rA.y;
				dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;
				vn = dvX * normalX + dvY * normalY;
				lambda = -ccp.normalMass * (vn - ccp.velocityBias);
				newImpulse = ccp.normalImpulse + lambda;
				newImpulse = newImpulse > 0 ? newImpulse : 0.0;
				lambda = newImpulse - ccp.normalImpulse;
				PX = lambda * normalX;
				PY = lambda * normalY;
				vA.x -= invMassA * PX;
				vA.y -= invMassA * PY;
				wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
				vB.x += invMassB * PX;
				vB.y += invMassB * PY;
				wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
				ccp.normalImpulse = newImpulse;
			} else {
				var cp1 = c.points[0];
				var cp2 = c.points[1];
				var aX = cp1.normalImpulse;
				var aY = cp2.normalImpulse;
				var dv1X = vB.x - wB * cp1.rB.y - vA.x + wA * cp1.rA.y;
				var dv1Y = vB.y + wB * cp1.rB.x - vA.y - wA * cp1.rA.x;
				var dv2X = vB.x - wB * cp2.rB.y - vA.x + wA * cp2.rA.y;
				var dv2Y = vB.y + wB * cp2.rB.x - vA.y - wA * cp2.rA.x;
				var vn1 = dv1X * normalX + dv1Y * normalY;
				var vn2 = dv2X * normalX + dv2Y * normalY;
				var bX = vn1 - cp1.velocityBias;
				var bY = vn2 - cp2.velocityBias;
				tMat = c.K;
				bX -= tMat.col1.x * aX + tMat.col2.x * aY;
				bY -= tMat.col1.y * aX + tMat.col2.y * aY;
				var k_errorTol = 0.001;
				var _g21 = 0;
				while(_g21 < 1) {
					var i1 = _g21++;
					tMat = c.normalMass;
					var xX = -(tMat.col1.x * bX + tMat.col2.x * bY);
					var xY = -(tMat.col1.y * bX + tMat.col2.y * bY);
					if(xX >= 0.0 && xY >= 0.0) {
						dX = xX - aX;
						dY = xY - aY;
						P1X = dX * normalX;
						P1Y = dX * normalY;
						P2X = dY * normalX;
						P2Y = dY * normalY;
						vA.x -= invMassA * (P1X + P2X);
						vA.y -= invMassA * (P1Y + P2Y);
						wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
						vB.x += invMassB * (P1X + P2X);
						vB.y += invMassB * (P1Y + P2Y);
						wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
						cp1.normalImpulse = xX;
						cp2.normalImpulse = xY;
						break;
					}
					xX = -cp1.normalMass * bX;
					xY = 0.0;
					vn1 = 0.0;
					vn2 = c.K.col1.y * xX + bY;
					if(xX >= 0.0 && vn2 >= 0.0) {
						dX = xX - aX;
						dY = xY - aY;
						P1X = dX * normalX;
						P1Y = dX * normalY;
						P2X = dY * normalX;
						P2Y = dY * normalY;
						vA.x -= invMassA * (P1X + P2X);
						vA.y -= invMassA * (P1Y + P2Y);
						wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
						vB.x += invMassB * (P1X + P2X);
						vB.y += invMassB * (P1Y + P2Y);
						wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
						cp1.normalImpulse = xX;
						cp2.normalImpulse = xY;
						break;
					}
					xX = 0.0;
					xY = -cp2.normalMass * bY;
					vn1 = c.K.col2.x * xY + bX;
					vn2 = 0.0;
					if(xY >= 0.0 && vn1 >= 0.0) {
						dX = xX - aX;
						dY = xY - aY;
						P1X = dX * normalX;
						P1Y = dX * normalY;
						P2X = dY * normalX;
						P2Y = dY * normalY;
						vA.x -= invMassA * (P1X + P2X);
						vA.y -= invMassA * (P1Y + P2Y);
						wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
						vB.x += invMassB * (P1X + P2X);
						vB.y += invMassB * (P1Y + P2Y);
						wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
						cp1.normalImpulse = xX;
						cp2.normalImpulse = xY;
						break;
					}
					xX = 0.0;
					xY = 0.0;
					vn1 = bX;
					vn2 = bY;
					if(vn1 >= 0.0 && vn2 >= 0.0) {
						dX = xX - aX;
						dY = xY - aY;
						P1X = dX * normalX;
						P1Y = dX * normalY;
						P2X = dY * normalX;
						P2Y = dY * normalY;
						vA.x -= invMassA * (P1X + P2X);
						vA.y -= invMassA * (P1Y + P2Y);
						wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
						vB.x += invMassB * (P1X + P2X);
						vB.y += invMassB * (P1Y + P2Y);
						wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
						cp1.normalImpulse = xX;
						cp2.normalImpulse = xY;
						break;
					}
					break;
				}
			}
			bodyA.m_angularVelocity = wA;
			bodyB.m_angularVelocity = wB;
		}
	}
	,finalizeVelocityConstraints: function() {
		var _g = 0;
		var _g1 = this.m_constraintCount;
		while(_g < _g1) {
			var i = _g++;
			var c = this.m_constraints[i];
			var m = c.manifold;
			var _g2 = 0;
			var _g11 = c.pointCount;
			while(_g2 < _g11) {
				var j = _g2++;
				var point1 = m.m_points[j];
				var point2 = c.points[j];
				point1.m_normalImpulse = point2.normalImpulse;
				point1.m_tangentImpulse = point2.tangentImpulse;
			}
		}
	}
	,solvePositionConstraints: function(baumgarte) {
		var minSeparation = 0.0;
		var _g = 0;
		var _g1 = this.m_constraintCount;
		while(_g < _g1) {
			var i = _g++;
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_mass * bodyA.m_invMass;
			var invIA = bodyA.m_mass * bodyA.m_invI;
			var invMassB = bodyB.m_mass * bodyB.m_invMass;
			var invIB = bodyB.m_mass * bodyB.m_invI;
			box2D_dynamics_contacts_B2ContactSolver.s_psm.initialize(c);
			var normal = box2D_dynamics_contacts_B2ContactSolver.s_psm.m_normal;
			var _g2 = 0;
			var _g11 = c.pointCount;
			while(_g2 < _g11) {
				var j = _g2++;
				var ccp = c.points[j];
				var point = box2D_dynamics_contacts_B2ContactSolver.s_psm.m_points[j];
				var separation = box2D_dynamics_contacts_B2ContactSolver.s_psm.m_separations[j];
				var rAX = point.x - bodyA.m_sweep.c.x;
				var rAY = point.y - bodyA.m_sweep.c.y;
				var rBX = point.x - bodyB.m_sweep.c.x;
				var rBY = point.y - bodyB.m_sweep.c.y;
				minSeparation = minSeparation < separation ? minSeparation : separation;
				var C = box2D_common_math_B2Math.clamp(baumgarte * (separation + box2D_common_B2Settings.b2_linearSlop),-box2D_common_B2Settings.b2_maxLinearCorrection,0.0);
				var impulse = -ccp.equalizedMass * C;
				var PX = impulse * normal.x;
				var PY = impulse * normal.y;
				bodyA.m_sweep.c.x -= invMassA * PX;
				bodyA.m_sweep.c.y -= invMassA * PY;
				bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);
				bodyA.synchronizeTransform();
				bodyB.m_sweep.c.x += invMassB * PX;
				bodyB.m_sweep.c.y += invMassB * PY;
				bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);
				bodyB.synchronizeTransform();
			}
		}
		return minSeparation > -1.5 * box2D_common_B2Settings.b2_linearSlop;
	}
	,__class__: box2D_dynamics_contacts_B2ContactSolver
};
var box2D_dynamics_contacts_B2EdgeAndCircleContact = function() {
	box2D_dynamics_contacts_B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2EdgeAndCircleContact"] = box2D_dynamics_contacts_B2EdgeAndCircleContact;
box2D_dynamics_contacts_B2EdgeAndCircleContact.__name__ = "box2D.dynamics.contacts.B2EdgeAndCircleContact";
box2D_dynamics_contacts_B2EdgeAndCircleContact.create = function(allocator) {
	return new box2D_dynamics_contacts_B2EdgeAndCircleContact();
};
box2D_dynamics_contacts_B2EdgeAndCircleContact.destroy = function(contact,allocator) {
};
box2D_dynamics_contacts_B2EdgeAndCircleContact.__super__ = box2D_dynamics_contacts_B2Contact;
box2D_dynamics_contacts_B2EdgeAndCircleContact.prototype = $extend(box2D_dynamics_contacts_B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D_dynamics_contacts_B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
		box2D_common_B2Settings.b2Assert(fixtureA == null || fixtureA.getType() == 3);
		box2D_common_B2Settings.b2Assert(fixtureB == null || fixtureA.getType() == 1);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.getBody();
		var bB = this.m_fixtureB.getBody();
		this.b2CollideEdgeAndCircle(this.m_manifold,js_Boot.__cast(this.m_fixtureA.getShape() , box2D_collision_shapes_B2EdgeShape),bA.m_xf,js_Boot.__cast(this.m_fixtureB.getShape() , box2D_collision_shapes_B2CircleShape),bB.m_xf);
	}
	,b2CollideEdgeAndCircle: function(manifold,edge,xf1,circle,xf2) {
	}
	,__class__: box2D_dynamics_contacts_B2EdgeAndCircleContact
});
var box2D_dynamics_contacts_B2PolyAndCircleContact = function() {
	box2D_dynamics_contacts_B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2PolyAndCircleContact"] = box2D_dynamics_contacts_B2PolyAndCircleContact;
box2D_dynamics_contacts_B2PolyAndCircleContact.__name__ = "box2D.dynamics.contacts.B2PolyAndCircleContact";
box2D_dynamics_contacts_B2PolyAndCircleContact.create = function(allocator) {
	return new box2D_dynamics_contacts_B2PolyAndCircleContact();
};
box2D_dynamics_contacts_B2PolyAndCircleContact.destroy = function(contact,allocator) {
};
box2D_dynamics_contacts_B2PolyAndCircleContact.__super__ = box2D_dynamics_contacts_B2Contact;
box2D_dynamics_contacts_B2PolyAndCircleContact.prototype = $extend(box2D_dynamics_contacts_B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D_dynamics_contacts_B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
		box2D_common_B2Settings.b2Assert(fixtureA == null || fixtureA.getType() == 2);
		box2D_common_B2Settings.b2Assert(fixtureB == null || fixtureB.getType() == 1);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.m_body;
		var bB = this.m_fixtureB.m_body;
		box2D_collision_B2Collision.collidePolygonAndCircle(this.m_manifold,js_Boot.__cast(this.m_fixtureA.getShape() , box2D_collision_shapes_B2PolygonShape),bA.m_xf,js_Boot.__cast(this.m_fixtureB.getShape() , box2D_collision_shapes_B2CircleShape),bB.m_xf);
	}
	,__class__: box2D_dynamics_contacts_B2PolyAndCircleContact
});
var box2D_dynamics_contacts_B2PolyAndEdgeContact = function() {
	box2D_dynamics_contacts_B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2PolyAndEdgeContact"] = box2D_dynamics_contacts_B2PolyAndEdgeContact;
box2D_dynamics_contacts_B2PolyAndEdgeContact.__name__ = "box2D.dynamics.contacts.B2PolyAndEdgeContact";
box2D_dynamics_contacts_B2PolyAndEdgeContact.create = function(allocator) {
	return new box2D_dynamics_contacts_B2PolyAndEdgeContact();
};
box2D_dynamics_contacts_B2PolyAndEdgeContact.destroy = function(contact,allocator) {
};
box2D_dynamics_contacts_B2PolyAndEdgeContact.__super__ = box2D_dynamics_contacts_B2Contact;
box2D_dynamics_contacts_B2PolyAndEdgeContact.prototype = $extend(box2D_dynamics_contacts_B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D_dynamics_contacts_B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
		box2D_common_B2Settings.b2Assert(fixtureA == null || fixtureA.getType() == 2);
		box2D_common_B2Settings.b2Assert(fixtureB == null || fixtureB.getType() == 3);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.getBody();
		var bB = this.m_fixtureB.getBody();
		this.b2CollidePolyAndEdge(this.m_manifold,js_Boot.__cast(this.m_fixtureA.getShape() , box2D_collision_shapes_B2PolygonShape),bA.m_xf,js_Boot.__cast(this.m_fixtureB.getShape() , box2D_collision_shapes_B2EdgeShape),bB.m_xf);
	}
	,b2CollidePolyAndEdge: function(manifold,polygon,xf1,edge,xf2) {
	}
	,__class__: box2D_dynamics_contacts_B2PolyAndEdgeContact
});
var box2D_dynamics_contacts_B2PolygonContact = function() {
	box2D_dynamics_contacts_B2Contact.call(this);
};
$hxClasses["box2D.dynamics.contacts.B2PolygonContact"] = box2D_dynamics_contacts_B2PolygonContact;
box2D_dynamics_contacts_B2PolygonContact.__name__ = "box2D.dynamics.contacts.B2PolygonContact";
box2D_dynamics_contacts_B2PolygonContact.create = function(allocator) {
	return new box2D_dynamics_contacts_B2PolygonContact();
};
box2D_dynamics_contacts_B2PolygonContact.destroy = function(contact,allocator) {
};
box2D_dynamics_contacts_B2PolygonContact.__super__ = box2D_dynamics_contacts_B2Contact;
box2D_dynamics_contacts_B2PolygonContact.prototype = $extend(box2D_dynamics_contacts_B2Contact.prototype,{
	reset: function(fixtureA,fixtureB) {
		box2D_dynamics_contacts_B2Contact.prototype.reset.call(this,fixtureA,fixtureB);
	}
	,evaluate: function() {
		var bA = this.m_fixtureA.getBody();
		var bB = this.m_fixtureB.getBody();
		box2D_collision_B2Collision.collidePolygons(this.m_manifold,js_Boot.__cast(this.m_fixtureA.getShape() , box2D_collision_shapes_B2PolygonShape),bA.m_xf,js_Boot.__cast(this.m_fixtureB.getShape() , box2D_collision_shapes_B2PolygonShape),bB.m_xf);
	}
	,__class__: box2D_dynamics_contacts_B2PolygonContact
});
var box2D_dynamics_controllers_B2Controller = function() {
	this.m_bodyCount = 0;
};
$hxClasses["box2D.dynamics.controllers.B2Controller"] = box2D_dynamics_controllers_B2Controller;
box2D_dynamics_controllers_B2Controller.__name__ = "box2D.dynamics.controllers.B2Controller";
box2D_dynamics_controllers_B2Controller.prototype = {
	step: function(step) {
	}
	,draw: function(debugDraw) {
	}
	,addBody: function(body) {
		var edge = new box2D_dynamics_controllers_B2ControllerEdge();
		edge.controller = this;
		edge.body = body;
		edge.nextBody = this.m_bodyList;
		edge.prevBody = null;
		this.m_bodyList = edge;
		if(edge.nextBody != null) {
			edge.nextBody.prevBody = edge;
		}
		this.m_bodyCount++;
		edge.nextController = body.m_controllerList;
		edge.prevController = null;
		body.m_controllerList = edge;
		if(edge.nextController != null) {
			edge.nextController.prevController = edge;
		}
		body.m_controllerCount++;
	}
	,removeBody: function(body) {
		var edge = body.m_controllerList;
		while(edge != null && edge.controller != this) edge = edge.nextController;
		if(edge.prevBody != null) {
			edge.prevBody.nextBody = edge.nextBody;
		}
		if(edge.nextBody != null) {
			edge.nextBody.prevBody = edge.prevBody;
		}
		if(edge.nextController != null) {
			edge.nextController.prevController = edge.prevController;
		}
		if(edge.prevController != null) {
			edge.prevController.nextController = edge.nextController;
		}
		if(this.m_bodyList == edge) {
			this.m_bodyList = edge.nextBody;
		}
		if(body.m_controllerList == edge) {
			body.m_controllerList = edge.nextController;
		}
		body.m_controllerCount--;
		this.m_bodyCount--;
	}
	,clear: function() {
		while(this.m_bodyList != null) this.removeBody(this.m_bodyList.body);
	}
	,getNext: function() {
		return this.m_next;
	}
	,getWorld: function() {
		return this.m_world;
	}
	,getBodyList: function() {
		return this.m_bodyList;
	}
	,__class__: box2D_dynamics_controllers_B2Controller
};
var box2D_dynamics_controllers_B2ControllerEdge = function() {
};
$hxClasses["box2D.dynamics.controllers.B2ControllerEdge"] = box2D_dynamics_controllers_B2ControllerEdge;
box2D_dynamics_controllers_B2ControllerEdge.__name__ = "box2D.dynamics.controllers.B2ControllerEdge";
box2D_dynamics_controllers_B2ControllerEdge.prototype = {
	__class__: box2D_dynamics_controllers_B2ControllerEdge
};
var box2D_dynamics_joints_B2Joint = function(def) {
	this.m_edgeA = new box2D_dynamics_joints_B2JointEdge();
	this.m_edgeB = new box2D_dynamics_joints_B2JointEdge();
	this.m_localCenterA = new box2D_common_math_B2Vec2();
	this.m_localCenterB = new box2D_common_math_B2Vec2();
	box2D_common_B2Settings.b2Assert(def.bodyA != def.bodyB);
	this.m_type = def.type;
	this.m_prev = null;
	this.m_next = null;
	this.m_bodyA = def.bodyA;
	this.m_bodyB = def.bodyB;
	this.m_collideConnected = def.collideConnected;
	this.m_islandFlag = false;
	this.m_userData = def.userData;
};
$hxClasses["box2D.dynamics.joints.B2Joint"] = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2Joint.__name__ = "box2D.dynamics.joints.B2Joint";
box2D_dynamics_joints_B2Joint.create = function(def,allocator) {
	var joint = null;
	switch(def.type) {
	case 1:
		joint = new box2D_dynamics_joints_B2RevoluteJoint(js_Boot.__cast(def , box2D_dynamics_joints_B2RevoluteJointDef));
		break;
	case 2:
		joint = new box2D_dynamics_joints_B2PrismaticJoint(js_Boot.__cast(def , box2D_dynamics_joints_B2PrismaticJointDef));
		break;
	case 3:
		joint = new box2D_dynamics_joints_B2DistanceJoint(js_Boot.__cast(def , box2D_dynamics_joints_B2DistanceJointDef));
		break;
	case 4:
		joint = new box2D_dynamics_joints_B2PulleyJoint(js_Boot.__cast(def , box2D_dynamics_joints_B2PulleyJointDef));
		break;
	case 5:
		joint = new box2D_dynamics_joints_B2MouseJoint(js_Boot.__cast(def , box2D_dynamics_joints_B2MouseJointDef));
		break;
	case 6:
		joint = new box2D_dynamics_joints_B2GearJoint(js_Boot.__cast(def , box2D_dynamics_joints_B2GearJointDef));
		break;
	case 7:
		joint = new box2D_dynamics_joints_B2LineJoint(js_Boot.__cast(def , box2D_dynamics_joints_B2LineJointDef));
		break;
	case 8:
		joint = new box2D_dynamics_joints_B2WeldJoint(js_Boot.__cast(def , box2D_dynamics_joints_B2WeldJointDef));
		break;
	case 9:
		joint = new box2D_dynamics_joints_B2FrictionJoint(js_Boot.__cast(def , box2D_dynamics_joints_B2FrictionJointDef));
		break;
	default:
	}
	return joint;
};
box2D_dynamics_joints_B2Joint.destroy = function(joint,allocator) {
};
box2D_dynamics_joints_B2Joint.prototype = {
	getType: function() {
		return this.m_type;
	}
	,getAnchorA: function() {
		return null;
	}
	,getAnchorB: function() {
		return null;
	}
	,getReactionForce: function(inv_dt) {
		return null;
	}
	,getReactionTorque: function(inv_dt) {
		return 0.0;
	}
	,getBodyA: function() {
		return this.m_bodyA;
	}
	,getBodyB: function() {
		return this.m_bodyB;
	}
	,getNext: function() {
		return this.m_next;
	}
	,getUserData: function() {
		return this.m_userData;
	}
	,setUserData: function(data) {
		this.m_userData = data;
	}
	,isActive: function() {
		if(this.m_bodyA.isActive()) {
			return this.m_bodyB.isActive();
		} else {
			return false;
		}
	}
	,initVelocityConstraints: function(step) {
	}
	,solveVelocityConstraints: function(step) {
	}
	,finalizeVelocityConstraints: function() {
	}
	,solvePositionConstraints: function(baumgarte) {
		return false;
	}
	,__class__: box2D_dynamics_joints_B2Joint
};
var box2D_dynamics_joints_B2DistanceJoint = function(def) {
	box2D_dynamics_joints_B2Joint.call(this,def);
	this.m_localAnchor1 = new box2D_common_math_B2Vec2();
	this.m_localAnchor2 = new box2D_common_math_B2Vec2();
	this.m_u = new box2D_common_math_B2Vec2();
	var tMat;
	var tX;
	var tY;
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_length = def.length;
	this.m_frequencyHz = def.frequencyHz;
	this.m_dampingRatio = def.dampingRatio;
	this.m_impulse = 0.0;
	this.m_gamma = 0.0;
	this.m_bias = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2DistanceJoint"] = box2D_dynamics_joints_B2DistanceJoint;
box2D_dynamics_joints_B2DistanceJoint.__name__ = "box2D.dynamics.joints.B2DistanceJoint";
box2D_dynamics_joints_B2DistanceJoint.__super__ = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2DistanceJoint.prototype = $extend(box2D_dynamics_joints_B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D_common_math_B2Vec2(inv_dt * this.m_impulse * this.m_u.x,inv_dt * this.m_impulse * this.m_u.y);
	}
	,getReactionTorque: function(inv_dt) {
		return 0.0;
	}
	,getLength: function() {
		return this.m_length;
	}
	,setLength: function(length) {
		this.m_length = length;
	}
	,getFrequency: function() {
		return this.m_frequencyHz;
	}
	,setFrequency: function(hz) {
		this.m_frequencyHz = hz;
	}
	,getDampingRatio: function() {
		return this.m_dampingRatio;
	}
	,setDampingRatio: function(ratio) {
		this.m_dampingRatio = ratio;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		this.m_u.x = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		this.m_u.y = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var length = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);
		if(length > box2D_common_B2Settings.b2_linearSlop) {
			this.m_u.multiply(1.0 / length);
		} else {
			this.m_u.setZero();
		}
		var cr1u = r1X * this.m_u.y - r1Y * this.m_u.x;
		var cr2u = r2X * this.m_u.y - r2Y * this.m_u.x;
		var invMass = bA.m_invMass + bA.m_invI * cr1u * cr1u + bB.m_invMass + bB.m_invI * cr2u * cr2u;
		this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;
		if(this.m_frequencyHz > 0.0) {
			var C = length - this.m_length;
			var omega = 2.0 * Math.PI * this.m_frequencyHz;
			var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;
			var k = this.m_mass * omega * omega;
			this.m_gamma = step.dt * (d + step.dt * k);
			this.m_gamma = this.m_gamma != 0.0 ? 1 / this.m_gamma : 0.0;
			this.m_bias = C * step.dt * k * this.m_gamma;
			this.m_mass = invMass + this.m_gamma;
			this.m_mass = this.m_mass != 0.0 ? 1.0 / this.m_mass : 0.0;
		}
		if(step.warmStarting) {
			this.m_impulse *= step.dtRatio;
			var PX = this.m_impulse * this.m_u.x;
			var PY = this.m_impulse * this.m_u.y;
			bA.m_linearVelocity.x -= bA.m_invMass * PX;
			bA.m_linearVelocity.y -= bA.m_invMass * PY;
			bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
			bB.m_linearVelocity.x += bB.m_invMass * PX;
			bB.m_linearVelocity.y += bB.m_invMass * PY;
			bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
		} else {
			this.m_impulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var v1X = bA.m_linearVelocity.x + -bA.m_angularVelocity * r1Y;
		var v1Y = bA.m_linearVelocity.y + bA.m_angularVelocity * r1X;
		var v2X = bB.m_linearVelocity.x + -bB.m_angularVelocity * r2Y;
		var v2Y = bB.m_linearVelocity.y + bB.m_angularVelocity * r2X;
		var Cdot = this.m_u.x * (v2X - v1X) + this.m_u.y * (v2Y - v1Y);
		var impulse = -this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);
		this.m_impulse += impulse;
		var PX = impulse * this.m_u.x;
		var PY = impulse * this.m_u.y;
		bA.m_linearVelocity.x -= bA.m_invMass * PX;
		bA.m_linearVelocity.y -= bA.m_invMass * PY;
		bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
		bB.m_linearVelocity.x += bB.m_invMass * PX;
		bB.m_linearVelocity.y += bB.m_invMass * PY;
		bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
	}
	,solvePositionConstraints: function(baumgarte) {
		if(this.m_frequencyHz > 0.0) {
			return true;
		}
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var length = Math.sqrt(dX * dX + dY * dY);
		dX /= length;
		dY /= length;
		var C = length - this.m_length;
		C = box2D_common_math_B2Math.clamp(C,-box2D_common_B2Settings.b2_maxLinearCorrection,box2D_common_B2Settings.b2_maxLinearCorrection);
		var impulse = -this.m_mass * C;
		this.m_u.set(dX,dY);
		var PX = impulse * this.m_u.x;
		var PY = impulse * this.m_u.y;
		bA.m_sweep.c.x -= bA.m_invMass * PX;
		bA.m_sweep.c.y -= bA.m_invMass * PY;
		bA.m_sweep.a -= bA.m_invI * (r1X * PY - r1Y * PX);
		bB.m_sweep.c.x += bB.m_invMass * PX;
		bB.m_sweep.c.y += bB.m_invMass * PY;
		bB.m_sweep.a += bB.m_invI * (r2X * PY - r2Y * PX);
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		return box2D_common_math_B2Math.abs(C) < box2D_common_B2Settings.b2_linearSlop;
	}
	,__class__: box2D_dynamics_joints_B2DistanceJoint
});
var box2D_dynamics_joints_B2JointDef = function() {
	this.type = 0;
	this.userData = null;
	this.bodyA = null;
	this.bodyB = null;
	this.collideConnected = false;
};
$hxClasses["box2D.dynamics.joints.B2JointDef"] = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2JointDef.__name__ = "box2D.dynamics.joints.B2JointDef";
box2D_dynamics_joints_B2JointDef.prototype = {
	__class__: box2D_dynamics_joints_B2JointDef
};
var box2D_dynamics_joints_B2DistanceJointDef = function() {
	box2D_dynamics_joints_B2JointDef.call(this);
	this.localAnchorA = new box2D_common_math_B2Vec2();
	this.localAnchorB = new box2D_common_math_B2Vec2();
	this.type = 3;
	this.length = 1.0;
	this.frequencyHz = 0.0;
	this.dampingRatio = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2DistanceJointDef"] = box2D_dynamics_joints_B2DistanceJointDef;
box2D_dynamics_joints_B2DistanceJointDef.__name__ = "box2D.dynamics.joints.B2DistanceJointDef";
box2D_dynamics_joints_B2DistanceJointDef.__super__ = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2DistanceJointDef.prototype = $extend(box2D_dynamics_joints_B2JointDef.prototype,{
	initialize: function(bA,bB,anchorA,anchorB) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.setV(this.bodyA.getLocalPoint(anchorA));
		this.localAnchorB.setV(this.bodyB.getLocalPoint(anchorB));
		var dX = anchorB.x - anchorA.x;
		var dY = anchorB.y - anchorA.y;
		this.length = Math.sqrt(dX * dX + dY * dY);
		this.frequencyHz = 0.0;
		this.dampingRatio = 0.0;
	}
	,__class__: box2D_dynamics_joints_B2DistanceJointDef
});
var box2D_dynamics_joints_B2FrictionJoint = function(def) {
	box2D_dynamics_joints_B2Joint.call(this,def);
	this.m_localAnchorA = new box2D_common_math_B2Vec2();
	this.m_localAnchorB = new box2D_common_math_B2Vec2();
	this.m_linearMass = new box2D_common_math_B2Mat22();
	this.m_linearImpulse = new box2D_common_math_B2Vec2();
	this.m_localAnchorA.setV(def.localAnchorA);
	this.m_localAnchorB.setV(def.localAnchorB);
	this.m_linearMass.setZero();
	this.m_angularMass = 0.0;
	this.m_linearImpulse.setZero();
	this.m_angularImpulse = 0.0;
	this.m_maxForce = def.maxForce;
	this.m_maxTorque = def.maxTorque;
};
$hxClasses["box2D.dynamics.joints.B2FrictionJoint"] = box2D_dynamics_joints_B2FrictionJoint;
box2D_dynamics_joints_B2FrictionJoint.__name__ = "box2D.dynamics.joints.B2FrictionJoint";
box2D_dynamics_joints_B2FrictionJoint.__super__ = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2FrictionJoint.prototype = $extend(box2D_dynamics_joints_B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchorA);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchorB);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D_common_math_B2Vec2(inv_dt * this.m_linearImpulse.x,inv_dt * this.m_linearImpulse.y);
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_angularImpulse;
	}
	,setMaxForce: function(force) {
		this.m_maxForce = force;
	}
	,getMaxForce: function() {
		return this.m_maxForce;
	}
	,setMaxTorque: function(torque) {
		this.m_maxTorque = torque;
	}
	,getMaxTorque: function() {
		return this.m_maxTorque;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var K = new box2D_common_math_B2Mat22();
		K.col1.x = mA + mB;
		K.col2.x = 0.0;
		K.col1.y = 0.0;
		K.col2.y = mA + mB;
		K.col1.x += iA * rAY * rAY;
		K.col2.x += -iA * rAX * rAY;
		K.col1.y += -iA * rAX * rAY;
		K.col2.y += iA * rAX * rAX;
		K.col1.x += iB * rBY * rBY;
		K.col2.x += -iB * rBX * rBY;
		K.col1.y += -iB * rBX * rBY;
		K.col2.y += iB * rBX * rBX;
		K.getInverse(this.m_linearMass);
		this.m_angularMass = iA + iB;
		if(this.m_angularMass > 0.0) {
			this.m_angularMass = 1.0 / this.m_angularMass;
		}
		if(step.warmStarting) {
			this.m_linearImpulse.x *= step.dtRatio;
			this.m_linearImpulse.y *= step.dtRatio;
			this.m_angularImpulse *= step.dtRatio;
			var P = this.m_linearImpulse;
			bA.m_linearVelocity.x -= mA * P.x;
			bA.m_linearVelocity.y -= mA * P.y;
			bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.m_angularImpulse);
			bB.m_linearVelocity.x += mB * P.x;
			bB.m_linearVelocity.y += mB * P.y;
			bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.m_angularImpulse);
		} else {
			this.m_linearImpulse.setZero();
			this.m_angularImpulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var vA = bA.m_linearVelocity;
		var wA = bA.m_angularVelocity;
		var vB = bB.m_linearVelocity;
		var wB = bB.m_angularVelocity;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var maxImpulse;
		var Cdot = wB - wA;
		var impulse = -this.m_angularMass * Cdot;
		var oldImpulse = this.m_angularImpulse;
		maxImpulse = step.dt * this.m_maxTorque;
		this.m_angularImpulse = box2D_common_math_B2Math.clamp(this.m_angularImpulse + impulse,-maxImpulse,maxImpulse);
		impulse = this.m_angularImpulse - oldImpulse;
		wA -= iA * impulse;
		wB += iB * impulse;
		var CdotX = vB.x - wB * rBY - vA.x + wA * rAY;
		var CdotY = vB.y + wB * rBX - vA.y - wA * rAX;
		var impulseV = box2D_common_math_B2Math.mulMV(this.m_linearMass,new box2D_common_math_B2Vec2(-CdotX,-CdotY));
		var oldImpulseV = this.m_linearImpulse.copy();
		this.m_linearImpulse.add(impulseV);
		maxImpulse = step.dt * this.m_maxForce;
		if(this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {
			this.m_linearImpulse.normalize();
			this.m_linearImpulse.multiply(maxImpulse);
		}
		impulseV = box2D_common_math_B2Math.subtractVV(this.m_linearImpulse,oldImpulseV);
		vA.x -= mA * impulseV.x;
		vA.y -= mA * impulseV.y;
		wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);
		vB.x += mB * impulseV.x;
		vB.y += mB * impulseV.y;
		wB += iB * (rBX * impulseV.y - rBY * impulseV.x);
		bA.m_angularVelocity = wA;
		bB.m_angularVelocity = wB;
	}
	,solvePositionConstraints: function(baumgarte) {
		return true;
	}
	,__class__: box2D_dynamics_joints_B2FrictionJoint
});
var box2D_dynamics_joints_B2FrictionJointDef = function() {
	box2D_dynamics_joints_B2JointDef.call(this);
	this.localAnchorA = new box2D_common_math_B2Vec2();
	this.localAnchorB = new box2D_common_math_B2Vec2();
	this.type = 9;
	this.maxForce = 0.0;
	this.maxTorque = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2FrictionJointDef"] = box2D_dynamics_joints_B2FrictionJointDef;
box2D_dynamics_joints_B2FrictionJointDef.__name__ = "box2D.dynamics.joints.B2FrictionJointDef";
box2D_dynamics_joints_B2FrictionJointDef.__super__ = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2FrictionJointDef.prototype = $extend(box2D_dynamics_joints_B2JointDef.prototype,{
	initialize: function(bA,bB,anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.setV(this.bodyA.getLocalPoint(anchor));
		this.localAnchorB.setV(this.bodyB.getLocalPoint(anchor));
	}
	,__class__: box2D_dynamics_joints_B2FrictionJointDef
});
var box2D_dynamics_joints_B2GearJoint = function(def) {
	box2D_dynamics_joints_B2Joint.call(this,def);
	this.m_groundAnchor1 = new box2D_common_math_B2Vec2();
	this.m_groundAnchor2 = new box2D_common_math_B2Vec2();
	this.m_localAnchor1 = new box2D_common_math_B2Vec2();
	this.m_localAnchor2 = new box2D_common_math_B2Vec2();
	this.m_J = new box2D_dynamics_joints_B2Jacobian();
	var type1 = def.joint1.m_type;
	var type2 = def.joint2.m_type;
	this.m_revolute1 = null;
	this.m_prismatic1 = null;
	this.m_revolute2 = null;
	this.m_prismatic2 = null;
	var coordinate1;
	var coordinate2;
	this.m_ground1 = def.joint1.getBodyA();
	this.m_bodyA = def.joint1.getBodyB();
	if(type1 == 1) {
		this.m_revolute1 = js_Boot.__cast(def.joint1 , box2D_dynamics_joints_B2RevoluteJoint);
		this.m_groundAnchor1.setV(this.m_revolute1.m_localAnchor1);
		this.m_localAnchor1.setV(this.m_revolute1.m_localAnchor2);
		coordinate1 = this.m_revolute1.getJointAngle();
	} else {
		this.m_prismatic1 = js_Boot.__cast(def.joint1 , box2D_dynamics_joints_B2PrismaticJoint);
		this.m_groundAnchor1.setV(this.m_prismatic1.m_localAnchor1);
		this.m_localAnchor1.setV(this.m_prismatic1.m_localAnchor2);
		coordinate1 = this.m_prismatic1.getJointTranslation();
	}
	this.m_ground2 = def.joint2.getBodyA();
	this.m_bodyB = def.joint2.getBodyB();
	if(type2 == 1) {
		this.m_revolute2 = js_Boot.__cast(def.joint2 , box2D_dynamics_joints_B2RevoluteJoint);
		this.m_groundAnchor2.setV(this.m_revolute2.m_localAnchor1);
		this.m_localAnchor2.setV(this.m_revolute2.m_localAnchor2);
		coordinate2 = this.m_revolute2.getJointAngle();
	} else {
		this.m_prismatic2 = js_Boot.__cast(def.joint2 , box2D_dynamics_joints_B2PrismaticJoint);
		this.m_groundAnchor2.setV(this.m_prismatic2.m_localAnchor1);
		this.m_localAnchor2.setV(this.m_prismatic2.m_localAnchor2);
		coordinate2 = this.m_prismatic2.getJointTranslation();
	}
	this.m_ratio = def.ratio;
	this.m_constant = coordinate1 + this.m_ratio * coordinate2;
	this.m_impulse = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2GearJoint"] = box2D_dynamics_joints_B2GearJoint;
box2D_dynamics_joints_B2GearJoint.__name__ = "box2D.dynamics.joints.B2GearJoint";
box2D_dynamics_joints_B2GearJoint.__super__ = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2GearJoint.prototype = $extend(box2D_dynamics_joints_B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D_common_math_B2Vec2(inv_dt * this.m_impulse * this.m_J.linearB.x,inv_dt * this.m_impulse * this.m_J.linearB.y);
	}
	,getReactionTorque: function(inv_dt) {
		var tMat = this.m_bodyB.m_xf.R;
		var rX = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x;
		var rY = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rX + tMat.col2.x * rY;
		rY = tMat.col1.y * rX + tMat.col2.y * rY;
		rX = tX;
		var PX = this.m_impulse * this.m_J.linearB.x;
		var PY = this.m_impulse * this.m_J.linearB.y;
		return inv_dt * (this.m_impulse * this.m_J.angularB - rX * PY + rY * PX);
	}
	,getRatio: function() {
		return this.m_ratio;
	}
	,setRatio: function(ratio) {
		this.m_ratio = ratio;
	}
	,initVelocityConstraints: function(step) {
		var g1 = this.m_ground1;
		var g2 = this.m_ground2;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var ugX;
		var ugY;
		var rX;
		var rY;
		var tMat;
		var tVec;
		var crug;
		var tX;
		var K = 0.0;
		this.m_J.setZero();
		if(this.m_revolute1 != null) {
			this.m_J.angularA = -1.0;
			K += bA.m_invI;
		} else {
			tMat = g1.m_xf.R;
			tVec = this.m_prismatic1.m_localXAxis1;
			ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = bA.m_xf.R;
			rX = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			rY = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * rX + tMat.col2.x * rY;
			rY = tMat.col1.y * rX + tMat.col2.y * rY;
			rX = tX;
			crug = rX * ugY - rY * ugX;
			this.m_J.linearA.set(-ugX,-ugY);
			this.m_J.angularA = -crug;
			K += bA.m_invMass + bA.m_invI * crug * crug;
		}
		if(this.m_revolute2 != null) {
			this.m_J.angularB = -this.m_ratio;
			K += this.m_ratio * this.m_ratio * bB.m_invI;
		} else {
			tMat = g2.m_xf.R;
			tVec = this.m_prismatic2.m_localXAxis1;
			ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = bB.m_xf.R;
			rX = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			rY = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * rX + tMat.col2.x * rY;
			rY = tMat.col1.y * rX + tMat.col2.y * rY;
			rX = tX;
			crug = rX * ugY - rY * ugX;
			this.m_J.linearB.set(-this.m_ratio * ugX,-this.m_ratio * ugY);
			this.m_J.angularB = -this.m_ratio * crug;
			K += this.m_ratio * this.m_ratio * (bB.m_invMass + bB.m_invI * crug * crug);
		}
		this.m_mass = K > 0.0 ? 1.0 / K : 0.0;
		if(step.warmStarting) {
			bA.m_linearVelocity.x += bA.m_invMass * this.m_impulse * this.m_J.linearA.x;
			bA.m_linearVelocity.y += bA.m_invMass * this.m_impulse * this.m_J.linearA.y;
			bA.m_angularVelocity += bA.m_invI * this.m_impulse * this.m_J.angularA;
			bB.m_linearVelocity.x += bB.m_invMass * this.m_impulse * this.m_J.linearB.x;
			bB.m_linearVelocity.y += bB.m_invMass * this.m_impulse * this.m_J.linearB.y;
			bB.m_angularVelocity += bB.m_invI * this.m_impulse * this.m_J.angularB;
		} else {
			this.m_impulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var Cdot = this.m_J.compute(bA.m_linearVelocity,bA.m_angularVelocity,bB.m_linearVelocity,bB.m_angularVelocity);
		var impulse = -this.m_mass * Cdot;
		this.m_impulse += impulse;
		bA.m_linearVelocity.x += bA.m_invMass * impulse * this.m_J.linearA.x;
		bA.m_linearVelocity.y += bA.m_invMass * impulse * this.m_J.linearA.y;
		bA.m_angularVelocity += bA.m_invI * impulse * this.m_J.angularA;
		bB.m_linearVelocity.x += bB.m_invMass * impulse * this.m_J.linearB.x;
		bB.m_linearVelocity.y += bB.m_invMass * impulse * this.m_J.linearB.y;
		bB.m_angularVelocity += bB.m_invI * impulse * this.m_J.angularB;
	}
	,solvePositionConstraints: function(baumgarte) {
		var linearError = 0.0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var coordinate1;
		var coordinate2;
		if(this.m_revolute1 != null) {
			coordinate1 = this.m_revolute1.getJointAngle();
		} else {
			coordinate1 = this.m_prismatic1.getJointTranslation();
		}
		if(this.m_revolute2 != null) {
			coordinate2 = this.m_revolute2.getJointAngle();
		} else {
			coordinate2 = this.m_prismatic2.getJointTranslation();
		}
		var C = this.m_constant - (coordinate1 + this.m_ratio * coordinate2);
		var impulse = -this.m_mass * C;
		bA.m_sweep.c.x += bA.m_invMass * impulse * this.m_J.linearA.x;
		bA.m_sweep.c.y += bA.m_invMass * impulse * this.m_J.linearA.y;
		bA.m_sweep.a += bA.m_invI * impulse * this.m_J.angularA;
		bB.m_sweep.c.x += bB.m_invMass * impulse * this.m_J.linearB.x;
		bB.m_sweep.c.y += bB.m_invMass * impulse * this.m_J.linearB.y;
		bB.m_sweep.a += bB.m_invI * impulse * this.m_J.angularB;
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		return linearError < box2D_common_B2Settings.b2_linearSlop;
	}
	,__class__: box2D_dynamics_joints_B2GearJoint
});
var box2D_dynamics_joints_B2GearJointDef = function() {
	box2D_dynamics_joints_B2JointDef.call(this);
	this.type = 6;
	this.joint1 = null;
	this.joint2 = null;
	this.ratio = 1.0;
};
$hxClasses["box2D.dynamics.joints.B2GearJointDef"] = box2D_dynamics_joints_B2GearJointDef;
box2D_dynamics_joints_B2GearJointDef.__name__ = "box2D.dynamics.joints.B2GearJointDef";
box2D_dynamics_joints_B2GearJointDef.__super__ = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2GearJointDef.prototype = $extend(box2D_dynamics_joints_B2JointDef.prototype,{
	__class__: box2D_dynamics_joints_B2GearJointDef
});
var box2D_dynamics_joints_B2Jacobian = function() {
	this.linearA = new box2D_common_math_B2Vec2();
	this.linearB = new box2D_common_math_B2Vec2();
};
$hxClasses["box2D.dynamics.joints.B2Jacobian"] = box2D_dynamics_joints_B2Jacobian;
box2D_dynamics_joints_B2Jacobian.__name__ = "box2D.dynamics.joints.B2Jacobian";
box2D_dynamics_joints_B2Jacobian.prototype = {
	setZero: function() {
		this.linearA.setZero();
		this.angularA = 0.0;
		this.linearB.setZero();
		this.angularB = 0.0;
	}
	,set: function(x1,a1,x2,a2) {
		this.linearA.setV(x1);
		this.angularA = a1;
		this.linearB.setV(x2);
		this.angularB = a2;
	}
	,compute: function(x1,a1,x2,a2) {
		return this.linearA.x * x1.x + this.linearA.y * x1.y + this.angularA * a1 + (this.linearB.x * x2.x + this.linearB.y * x2.y) + this.angularB * a2;
	}
	,__class__: box2D_dynamics_joints_B2Jacobian
};
var box2D_dynamics_joints_B2JointEdge = function() {
};
$hxClasses["box2D.dynamics.joints.B2JointEdge"] = box2D_dynamics_joints_B2JointEdge;
box2D_dynamics_joints_B2JointEdge.__name__ = "box2D.dynamics.joints.B2JointEdge";
box2D_dynamics_joints_B2JointEdge.prototype = {
	__class__: box2D_dynamics_joints_B2JointEdge
};
var box2D_dynamics_joints_B2LineJoint = function(def) {
	box2D_dynamics_joints_B2Joint.call(this,def);
	this.m_localAnchor1 = new box2D_common_math_B2Vec2();
	this.m_localAnchor2 = new box2D_common_math_B2Vec2();
	this.m_localXAxis1 = new box2D_common_math_B2Vec2();
	this.m_localYAxis1 = new box2D_common_math_B2Vec2();
	this.m_axis = new box2D_common_math_B2Vec2();
	this.m_perp = new box2D_common_math_B2Vec2();
	this.m_K = new box2D_common_math_B2Mat22();
	this.m_impulse = new box2D_common_math_B2Vec2();
	var tMat;
	var tX;
	var tY;
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_localXAxis1.setV(def.localAxisA);
	this.m_localYAxis1.x = -this.m_localXAxis1.y;
	this.m_localYAxis1.y = this.m_localXAxis1.x;
	this.m_impulse.setZero();
	this.m_motorMass = 0.0;
	this.m_motorImpulse = 0.0;
	this.m_lowerTranslation = def.lowerTranslation;
	this.m_upperTranslation = def.upperTranslation;
	this.m_maxMotorForce = def.maxMotorForce;
	this.m_motorSpeed = def.motorSpeed;
	this.m_enableLimit = def.enableLimit;
	this.m_enableMotor = def.enableMotor;
	this.m_limitState = 0;
	this.m_axis.setZero();
	this.m_perp.setZero();
};
$hxClasses["box2D.dynamics.joints.B2LineJoint"] = box2D_dynamics_joints_B2LineJoint;
box2D_dynamics_joints_B2LineJoint.__name__ = "box2D.dynamics.joints.B2LineJoint";
box2D_dynamics_joints_B2LineJoint.__super__ = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2LineJoint.prototype = $extend(box2D_dynamics_joints_B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D_common_math_B2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x),inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_impulse.y;
	}
	,getJointTranslation: function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var p1 = bA.getWorldPoint(this.m_localAnchor1);
		var p2 = bB.getWorldPoint(this.m_localAnchor2);
		var dX = p2.x - p1.x;
		var dY = p2.y - p1.y;
		var axis = bA.getWorldVector(this.m_localXAxis1);
		var translation = axis.x * dX + axis.y * dY;
		return translation;
	}
	,getJointSpeed: function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var axis = bA.getWorldVector(this.m_localXAxis1);
		var v1 = bA.m_linearVelocity;
		var v2 = bB.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var w2 = bB.m_angularVelocity;
		var speed = dX * (-w1 * axis.y) + dY * (w1 * axis.x) + (axis.x * (v2.x + -w2 * r2Y - v1.x - -w1 * r1Y) + axis.y * (v2.y + w2 * r2X - v1.y - w1 * r1X));
		return speed;
	}
	,isLimitEnabled: function() {
		return this.m_enableLimit;
	}
	,enableLimit: function(flag) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_enableLimit = flag;
	}
	,getLowerLimit: function() {
		return this.m_lowerTranslation;
	}
	,getUpperLimit: function() {
		return this.m_upperTranslation;
	}
	,setLimits: function(lower,upper) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_lowerTranslation = lower;
		this.m_upperTranslation = upper;
	}
	,isMotorEnabled: function() {
		return this.m_enableMotor;
	}
	,enableMotor: function(flag) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_enableMotor = flag;
	}
	,setMotorSpeed: function(speed) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_motorSpeed = speed;
	}
	,getMotorSpeed: function() {
		return this.m_motorSpeed;
	}
	,setMaxMotorForce: function(force) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_maxMotorForce = force;
	}
	,getMaxMotorForce: function() {
		return this.m_maxMotorForce;
	}
	,getMotorForce: function() {
		return this.m_motorImpulse;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		this.m_localCenterA.setV(bA.getLocalCenter());
		this.m_localCenterB.setV(bB.getLocalCenter());
		var xf1 = bA.getTransform();
		var xf2 = bB.getTransform();
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		this.m_invMassA = bA.m_invMass;
		this.m_invMassB = bB.m_invMass;
		this.m_invIA = bA.m_invI;
		this.m_invIB = bB.m_invI;
		this.m_axis.setV(box2D_common_math_B2Math.mulMV(xf1.R,this.m_localXAxis1));
		this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
		this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
		this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
		this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1.0 / this.m_motorMass : 0.0;
		this.m_perp.setV(box2D_common_math_B2Math.mulMV(xf1.R,this.m_localYAxis1));
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var m1 = this.m_invMassA;
		var m2 = this.m_invMassB;
		var i1 = this.m_invIA;
		var i2 = this.m_invIB;
		this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
		this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
		this.m_K.col2.x = this.m_K.col1.y;
		this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
		if(this.m_enableLimit) {
			var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
			if(box2D_common_math_B2Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * box2D_common_B2Settings.b2_linearSlop) {
				this.m_limitState = 3;
			} else if(jointTransition <= this.m_lowerTranslation) {
				if(this.m_limitState != 1) {
					this.m_limitState = 1;
					this.m_impulse.y = 0.0;
				}
			} else if(jointTransition >= this.m_upperTranslation) {
				if(this.m_limitState != 2) {
					this.m_limitState = 2;
					this.m_impulse.y = 0.0;
				}
			} else {
				this.m_limitState = 0;
				this.m_impulse.y = 0.0;
			}
		} else {
			this.m_limitState = 0;
		}
		if(this.m_enableMotor == false) {
			this.m_motorImpulse = 0.0;
		}
		if(step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x;
			var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y;
			var L1 = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1;
			var L2 = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2;
			bA.m_linearVelocity.x -= this.m_invMassA * PX;
			bA.m_linearVelocity.y -= this.m_invMassA * PY;
			bA.m_angularVelocity -= this.m_invIA * L1;
			bB.m_linearVelocity.x += this.m_invMassB * PX;
			bB.m_linearVelocity.y += this.m_invMassB * PY;
			bB.m_angularVelocity += this.m_invIB * L2;
		} else {
			this.m_impulse.setZero();
			this.m_motorImpulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var PX;
		var PY;
		var L1;
		var L2;
		if(this.m_enableMotor && this.m_limitState != 3) {
			var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorForce;
			this.m_motorImpulse = box2D_common_math_B2Math.clamp(this.m_motorImpulse + impulse,-maxImpulse,maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			PX = impulse * this.m_axis.x;
			PY = impulse * this.m_axis.y;
			L1 = impulse * this.m_a1;
			L2 = impulse * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		var Cdot1 = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
		if(this.m_enableLimit && this.m_limitState != 0) {
			var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var f1 = this.m_impulse.copy();
			var df = this.m_K.solve(new box2D_common_math_B2Vec2(),-Cdot1,-Cdot2);
			this.m_impulse.add(df);
			if(this.m_limitState == 1) {
				this.m_impulse.y = box2D_common_math_B2Math.max(this.m_impulse.y,0.0);
			} else if(this.m_limitState == 2) {
				this.m_impulse.y = box2D_common_math_B2Math.min(this.m_impulse.y,0.0);
			}
			var b = -Cdot1 - (this.m_impulse.y - f1.y) * this.m_K.col2.x;
			var f2r;
			if(this.m_K.col1.x != 0.0) {
				f2r = b / this.m_K.col1.x + f1.x;
			} else {
				f2r = f1.x;
			}
			this.m_impulse.x = f2r;
			df.x = this.m_impulse.x - f1.x;
			df.y = this.m_impulse.y - f1.y;
			PX = df.x * this.m_perp.x + df.y * this.m_axis.x;
			PY = df.x * this.m_perp.y + df.y * this.m_axis.y;
			L1 = df.x * this.m_s1 + df.y * this.m_a1;
			L2 = df.x * this.m_s2 + df.y * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		} else {
			var df2;
			if(this.m_K.col1.x != 0.0) {
				df2 = -Cdot1 / this.m_K.col1.x;
			} else {
				df2 = 0.0;
			}
			this.m_impulse.x += df2;
			PX = df2 * this.m_perp.x;
			PY = df2 * this.m_perp.y;
			L1 = df2 * this.m_s1;
			L2 = df2 * this.m_s2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		bA.m_linearVelocity.setV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.setV(v2);
		bB.m_angularVelocity = w2;
	}
	,solvePositionConstraints: function(baumgarte) {
		var limitC;
		var oldLimitImpulse;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var c1 = bA.m_sweep.c;
		var a1 = bA.m_sweep.a;
		var c2 = bB.m_sweep.c;
		var a2 = bB.m_sweep.a;
		var m1;
		var m2;
		var i1;
		var i2;
		var linearError = 0.0;
		var angularError = 0.0;
		var active = false;
		var C2 = 0.0;
		var R1 = box2D_common_math_B2Mat22.fromAngle(a1);
		var R2 = box2D_common_math_B2Mat22.fromAngle(a2);
		var tMat = R1;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = R2;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = c2.x + r2X - c1.x - r1X;
		var dY = c2.y + r2Y - c1.y - r1Y;
		if(this.m_enableLimit) {
			this.m_axis = box2D_common_math_B2Math.mulMV(R1,this.m_localXAxis1);
			this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
			this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
			var translation = this.m_axis.x * dX + this.m_axis.y * dY;
			if(box2D_common_math_B2Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * box2D_common_B2Settings.b2_linearSlop) {
				C2 = box2D_common_math_B2Math.clamp(translation,-box2D_common_B2Settings.b2_maxLinearCorrection,box2D_common_B2Settings.b2_maxLinearCorrection);
				linearError = box2D_common_math_B2Math.abs(translation);
				active = true;
			} else if(translation <= this.m_lowerTranslation) {
				C2 = box2D_common_math_B2Math.clamp(translation - this.m_lowerTranslation + box2D_common_B2Settings.b2_linearSlop,-box2D_common_B2Settings.b2_maxLinearCorrection,0.0);
				linearError = this.m_lowerTranslation - translation;
				active = true;
			} else if(translation >= this.m_upperTranslation) {
				C2 = box2D_common_math_B2Math.clamp(translation - this.m_upperTranslation + box2D_common_B2Settings.b2_linearSlop,0.0,box2D_common_B2Settings.b2_maxLinearCorrection);
				linearError = translation - this.m_upperTranslation;
				active = true;
			}
		}
		this.m_perp = box2D_common_math_B2Math.mulMV(R1,this.m_localYAxis1);
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var impulse = new box2D_common_math_B2Vec2();
		var C1 = this.m_perp.x * dX + this.m_perp.y * dY;
		linearError = box2D_common_math_B2Math.max(linearError,box2D_common_math_B2Math.abs(C1));
		angularError = 0.0;
		if(active) {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
			this.m_K.col2.x = this.m_K.col1.y;
			this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
			this.m_K.solve(impulse,-C1,-C2);
		} else {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			var impulse1;
			if(k11 != 0.0) {
				impulse1 = -C1 / k11;
			} else {
				impulse1 = 0.0;
			}
			impulse.x = impulse1;
			impulse.y = 0.0;
		}
		var PX = impulse.x * this.m_perp.x + impulse.y * this.m_axis.x;
		var PY = impulse.x * this.m_perp.y + impulse.y * this.m_axis.y;
		var L1 = impulse.x * this.m_s1 + impulse.y * this.m_a1;
		var L2 = impulse.x * this.m_s2 + impulse.y * this.m_a2;
		c1.x -= this.m_invMassA * PX;
		c1.y -= this.m_invMassA * PY;
		a1 -= this.m_invIA * L1;
		c2.x += this.m_invMassB * PX;
		c2.y += this.m_invMassB * PY;
		a2 += this.m_invIB * L2;
		bA.m_sweep.a = a1;
		bB.m_sweep.a = a2;
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		if(linearError <= box2D_common_B2Settings.b2_linearSlop) {
			return angularError <= box2D_common_B2Settings.b2_angularSlop;
		} else {
			return false;
		}
	}
	,__class__: box2D_dynamics_joints_B2LineJoint
});
var box2D_dynamics_joints_B2LineJointDef = function() {
	box2D_dynamics_joints_B2JointDef.call(this);
};
$hxClasses["box2D.dynamics.joints.B2LineJointDef"] = box2D_dynamics_joints_B2LineJointDef;
box2D_dynamics_joints_B2LineJointDef.__name__ = "box2D.dynamics.joints.B2LineJointDef";
box2D_dynamics_joints_B2LineJointDef.__super__ = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2LineJointDef.prototype = $extend(box2D_dynamics_joints_B2JointDef.prototype,{
	b2LineJointDef: function() {
		this.localAnchorA = new box2D_common_math_B2Vec2();
		this.localAnchorB = new box2D_common_math_B2Vec2();
		this.localAxisA = new box2D_common_math_B2Vec2();
		this.type = 7;
		this.localAxisA.set(1.0,0.0);
		this.enableLimit = false;
		this.lowerTranslation = 0.0;
		this.upperTranslation = 0.0;
		this.enableMotor = false;
		this.maxMotorForce = 0.0;
		this.motorSpeed = 0.0;
	}
	,initialize: function(bA,bB,anchor,axis) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.getLocalPoint(anchor);
		this.localAnchorB = this.bodyB.getLocalPoint(anchor);
		this.localAxisA = this.bodyA.getLocalVector(axis);
	}
	,__class__: box2D_dynamics_joints_B2LineJointDef
});
var box2D_dynamics_joints_B2MouseJoint = function(def) {
	box2D_dynamics_joints_B2Joint.call(this,def);
	this.K = new box2D_common_math_B2Mat22();
	this.K1 = new box2D_common_math_B2Mat22();
	this.K2 = new box2D_common_math_B2Mat22();
	this.m_localAnchor = new box2D_common_math_B2Vec2();
	this.m_target = new box2D_common_math_B2Vec2();
	this.m_impulse = new box2D_common_math_B2Vec2();
	this.m_mass = new box2D_common_math_B2Mat22();
	this.m_C = new box2D_common_math_B2Vec2();
	this.m_target.setV(def.target);
	var tX = this.m_target.x - this.m_bodyB.m_xf.position.x;
	var tY = this.m_target.y - this.m_bodyB.m_xf.position.y;
	var tMat = this.m_bodyB.m_xf.R;
	this.m_localAnchor.x = tX * tMat.col1.x + tY * tMat.col1.y;
	this.m_localAnchor.y = tX * tMat.col2.x + tY * tMat.col2.y;
	this.m_maxForce = def.maxForce;
	this.m_impulse.setZero();
	this.m_frequencyHz = def.frequencyHz;
	this.m_dampingRatio = def.dampingRatio;
	this.m_beta = 0.0;
	this.m_gamma = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2MouseJoint"] = box2D_dynamics_joints_B2MouseJoint;
box2D_dynamics_joints_B2MouseJoint.__name__ = "box2D.dynamics.joints.B2MouseJoint";
box2D_dynamics_joints_B2MouseJoint.__super__ = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2MouseJoint.prototype = $extend(box2D_dynamics_joints_B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_target;
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D_common_math_B2Vec2(inv_dt * this.m_impulse.x,inv_dt * this.m_impulse.y);
	}
	,getReactionTorque: function(inv_dt) {
		return 0.0;
	}
	,getTarget: function() {
		return this.m_target;
	}
	,setTarget: function(target) {
		if(this.m_bodyB.isAwake() == false) {
			this.m_bodyB.setAwake(true);
		}
		this.m_target = target;
	}
	,getMaxForce: function() {
		return this.m_maxForce;
	}
	,setMaxForce: function(maxForce) {
		this.m_maxForce = maxForce;
	}
	,getFrequency: function() {
		return this.m_frequencyHz;
	}
	,setFrequency: function(hz) {
		this.m_frequencyHz = hz;
	}
	,getDampingRatio: function() {
		return this.m_dampingRatio;
	}
	,setDampingRatio: function(ratio) {
		this.m_dampingRatio = ratio;
	}
	,initVelocityConstraints: function(step) {
		var b = this.m_bodyB;
		var mass = b.getMass();
		var omega = 2.0 * Math.PI * this.m_frequencyHz;
		var d = 2.0 * mass * this.m_dampingRatio * omega;
		var k = mass * omega * omega;
		this.m_gamma = step.dt * (d + step.dt * k);
		this.m_gamma = this.m_gamma != 0 ? 1 / this.m_gamma : 0.0;
		this.m_beta = step.dt * k * this.m_gamma;
		var tMat = b.m_xf.R;
		var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
		var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rX + tMat.col2.x * rY;
		rY = tMat.col1.y * rX + tMat.col2.y * rY;
		rX = tX;
		var invMass = b.m_invMass;
		var invI = b.m_invI;
		this.K1.col1.x = invMass;
		this.K1.col2.x = 0.0;
		this.K1.col1.y = 0.0;
		this.K1.col2.y = invMass;
		this.K2.col1.x = invI * rY * rY;
		this.K2.col2.x = -invI * rX * rY;
		this.K2.col1.y = -invI * rX * rY;
		this.K2.col2.y = invI * rX * rX;
		this.K.setM(this.K1);
		this.K.addM(this.K2);
		this.K.col1.x += this.m_gamma;
		this.K.col2.y += this.m_gamma;
		this.K.getInverse(this.m_mass);
		this.m_C.x = b.m_sweep.c.x + rX - this.m_target.x;
		this.m_C.y = b.m_sweep.c.y + rY - this.m_target.y;
		b.m_angularVelocity *= 0.98;
		this.m_impulse.x *= step.dtRatio;
		this.m_impulse.y *= step.dtRatio;
		b.m_linearVelocity.x += invMass * this.m_impulse.x;
		b.m_linearVelocity.y += invMass * this.m_impulse.y;
		b.m_angularVelocity += invI * (rX * this.m_impulse.y - rY * this.m_impulse.x);
	}
	,solveVelocityConstraints: function(step) {
		var b = this.m_bodyB;
		var tMat = b.m_xf.R;
		var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
		var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rX + tMat.col2.x * rY;
		rY = tMat.col1.y * rX + tMat.col2.y * rY;
		rX = tX;
		var CdotX = b.m_linearVelocity.x + -b.m_angularVelocity * rY;
		var CdotY = b.m_linearVelocity.y + b.m_angularVelocity * rX;
		tMat = this.m_mass;
		tX = CdotX + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x;
		var tY = CdotY + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;
		var impulseX = -(tMat.col1.x * tX + tMat.col2.x * tY);
		var impulseY = -(tMat.col1.y * tX + tMat.col2.y * tY);
		var oldImpulseX = this.m_impulse.x;
		var oldImpulseY = this.m_impulse.y;
		this.m_impulse.x += impulseX;
		this.m_impulse.y += impulseY;
		var maxImpulse = step.dt * this.m_maxForce;
		if(this.m_impulse.lengthSquared() > maxImpulse * maxImpulse) {
			this.m_impulse.multiply(maxImpulse / this.m_impulse.length());
		}
		impulseX = this.m_impulse.x - oldImpulseX;
		impulseY = this.m_impulse.y - oldImpulseY;
		b.m_linearVelocity.x += b.m_invMass * impulseX;
		b.m_linearVelocity.y += b.m_invMass * impulseY;
		b.m_angularVelocity += b.m_invI * (rX * impulseY - rY * impulseX);
	}
	,solvePositionConstraints: function(baumgarte) {
		return true;
	}
	,__class__: box2D_dynamics_joints_B2MouseJoint
});
var box2D_dynamics_joints_B2MouseJointDef = function() {
	box2D_dynamics_joints_B2JointDef.call(this);
	this.target = new box2D_common_math_B2Vec2();
	this.type = 5;
	this.maxForce = 0.0;
	this.frequencyHz = 5.0;
	this.dampingRatio = 0.7;
};
$hxClasses["box2D.dynamics.joints.B2MouseJointDef"] = box2D_dynamics_joints_B2MouseJointDef;
box2D_dynamics_joints_B2MouseJointDef.__name__ = "box2D.dynamics.joints.B2MouseJointDef";
box2D_dynamics_joints_B2MouseJointDef.__super__ = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2MouseJointDef.prototype = $extend(box2D_dynamics_joints_B2JointDef.prototype,{
	__class__: box2D_dynamics_joints_B2MouseJointDef
});
var box2D_dynamics_joints_B2PrismaticJoint = function(def) {
	box2D_dynamics_joints_B2Joint.call(this,def);
	this.m_localAnchor1 = new box2D_common_math_B2Vec2();
	this.m_localAnchor2 = new box2D_common_math_B2Vec2();
	this.m_localXAxis1 = new box2D_common_math_B2Vec2();
	this.m_localYAxis1 = new box2D_common_math_B2Vec2();
	this.m_axis = new box2D_common_math_B2Vec2();
	this.m_perp = new box2D_common_math_B2Vec2();
	this.m_K = new box2D_common_math_B2Mat33();
	this.m_impulse = new box2D_common_math_B2Vec3();
	var tMat;
	var tX;
	var tY;
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_localXAxis1.setV(def.localAxisA);
	this.m_localYAxis1.x = -this.m_localXAxis1.y;
	this.m_localYAxis1.y = this.m_localXAxis1.x;
	this.m_refAngle = def.referenceAngle;
	this.m_impulse.setZero();
	this.m_motorMass = 0.0;
	this.m_motorImpulse = 0.0;
	this.m_lowerTranslation = def.lowerTranslation;
	this.m_upperTranslation = def.upperTranslation;
	this.m_maxMotorForce = def.maxMotorForce;
	this.m_motorSpeed = def.motorSpeed;
	this.m_enableLimit = def.enableLimit;
	this.m_enableMotor = def.enableMotor;
	this.m_limitState = 0;
	this.m_axis.setZero();
	this.m_perp.setZero();
};
$hxClasses["box2D.dynamics.joints.B2PrismaticJoint"] = box2D_dynamics_joints_B2PrismaticJoint;
box2D_dynamics_joints_B2PrismaticJoint.__name__ = "box2D.dynamics.joints.B2PrismaticJoint";
box2D_dynamics_joints_B2PrismaticJoint.__super__ = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2PrismaticJoint.prototype = $extend(box2D_dynamics_joints_B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D_common_math_B2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x),inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_impulse.y;
	}
	,getJointTranslation: function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var p1 = bA.getWorldPoint(this.m_localAnchor1);
		var p2 = bB.getWorldPoint(this.m_localAnchor2);
		var dX = p2.x - p1.x;
		var dY = p2.y - p1.y;
		var axis = bA.getWorldVector(this.m_localXAxis1);
		var translation = axis.x * dX + axis.y * dY;
		return translation;
	}
	,getJointSpeed: function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var axis = bA.getWorldVector(this.m_localXAxis1);
		var v1 = bA.m_linearVelocity;
		var v2 = bB.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var w2 = bB.m_angularVelocity;
		var speed = dX * (-w1 * axis.y) + dY * (w1 * axis.x) + (axis.x * (v2.x + -w2 * r2Y - v1.x - -w1 * r1Y) + axis.y * (v2.y + w2 * r2X - v1.y - w1 * r1X));
		return speed;
	}
	,isLimitEnabled: function() {
		return this.m_enableLimit;
	}
	,enableLimit: function(flag) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_enableLimit = flag;
	}
	,getLowerLimit: function() {
		return this.m_lowerTranslation;
	}
	,getUpperLimit: function() {
		return this.m_upperTranslation;
	}
	,setLimits: function(lower,upper) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_lowerTranslation = lower;
		this.m_upperTranslation = upper;
	}
	,isMotorEnabled: function() {
		return this.m_enableMotor;
	}
	,enableMotor: function(flag) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_enableMotor = flag;
	}
	,setMotorSpeed: function(speed) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_motorSpeed = speed;
	}
	,getMotorSpeed: function() {
		return this.m_motorSpeed;
	}
	,setMaxMotorForce: function(force) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_maxMotorForce = force;
	}
	,getMotorForce: function() {
		return this.m_motorImpulse;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		this.m_localCenterA.setV(bA.getLocalCenter());
		this.m_localCenterB.setV(bB.getLocalCenter());
		var xf1 = bA.getTransform();
		var xf2 = bB.getTransform();
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		this.m_invMassA = bA.m_invMass;
		this.m_invMassB = bB.m_invMass;
		this.m_invIA = bA.m_invI;
		this.m_invIB = bB.m_invI;
		this.m_axis.setV(box2D_common_math_B2Math.mulMV(xf1.R,this.m_localXAxis1));
		this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
		this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
		this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
		if(this.m_motorMass > Number.MIN_VALUE) {
			this.m_motorMass = 1.0 / this.m_motorMass;
		}
		this.m_perp.setV(box2D_common_math_B2Math.mulMV(xf1.R,this.m_localYAxis1));
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var m1 = this.m_invMassA;
		var m2 = this.m_invMassB;
		var i1 = this.m_invIA;
		var i2 = this.m_invIB;
		this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
		this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
		this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
		this.m_K.col2.x = this.m_K.col1.y;
		this.m_K.col2.y = i1 + i2;
		this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
		this.m_K.col3.x = this.m_K.col1.z;
		this.m_K.col3.y = this.m_K.col2.z;
		this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
		if(this.m_enableLimit) {
			var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
			if(box2D_common_math_B2Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * box2D_common_B2Settings.b2_linearSlop) {
				this.m_limitState = 3;
			} else if(jointTransition <= this.m_lowerTranslation) {
				if(this.m_limitState != 1) {
					this.m_limitState = 1;
					this.m_impulse.z = 0.0;
				}
			} else if(jointTransition >= this.m_upperTranslation) {
				if(this.m_limitState != 2) {
					this.m_limitState = 2;
					this.m_impulse.z = 0.0;
				}
			} else {
				this.m_limitState = 0;
				this.m_impulse.z = 0.0;
			}
		} else {
			this.m_limitState = 0;
		}
		if(this.m_enableMotor == false) {
			this.m_motorImpulse = 0.0;
		}
		if(step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x;
			var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y;
			var L1 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;
			var L2 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
			bA.m_linearVelocity.x -= this.m_invMassA * PX;
			bA.m_linearVelocity.y -= this.m_invMassA * PY;
			bA.m_angularVelocity -= this.m_invIA * L1;
			bB.m_linearVelocity.x += this.m_invMassB * PX;
			bB.m_linearVelocity.y += this.m_invMassB * PY;
			bB.m_angularVelocity += this.m_invIB * L2;
		} else {
			this.m_impulse.setZero();
			this.m_motorImpulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var PX;
		var PY;
		var L1;
		var L2;
		if(this.m_enableMotor && this.m_limitState != 3) {
			var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorForce;
			this.m_motorImpulse = box2D_common_math_B2Math.clamp(this.m_motorImpulse + impulse,-maxImpulse,maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			PX = impulse * this.m_axis.x;
			PY = impulse * this.m_axis.y;
			L1 = impulse * this.m_a1;
			L2 = impulse * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		var Cdot1X = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
		var Cdot1Y = w2 - w1;
		if(this.m_enableLimit && this.m_limitState != 0) {
			var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var f1 = this.m_impulse.copy();
			var df = this.m_K.solve33(new box2D_common_math_B2Vec3(),-Cdot1X,-Cdot1Y,-Cdot2);
			this.m_impulse.add(df);
			if(this.m_limitState == 1) {
				this.m_impulse.z = box2D_common_math_B2Math.max(this.m_impulse.z,0.0);
			} else if(this.m_limitState == 2) {
				this.m_impulse.z = box2D_common_math_B2Math.min(this.m_impulse.z,0.0);
			}
			var bX = -Cdot1X - (this.m_impulse.z - f1.z) * this.m_K.col3.x;
			var bY = -Cdot1Y - (this.m_impulse.z - f1.z) * this.m_K.col3.y;
			var f2r = this.m_K.solve22(new box2D_common_math_B2Vec2(),bX,bY);
			f2r.x += f1.x;
			f2r.y += f1.y;
			this.m_impulse.x = f2r.x;
			this.m_impulse.y = f2r.y;
			df.x = this.m_impulse.x - f1.x;
			df.y = this.m_impulse.y - f1.y;
			df.z = this.m_impulse.z - f1.z;
			PX = df.x * this.m_perp.x + df.z * this.m_axis.x;
			PY = df.x * this.m_perp.y + df.z * this.m_axis.y;
			L1 = df.x * this.m_s1 + df.y + df.z * this.m_a1;
			L2 = df.x * this.m_s2 + df.y + df.z * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		} else {
			var df2 = this.m_K.solve22(new box2D_common_math_B2Vec2(),-Cdot1X,-Cdot1Y);
			this.m_impulse.x += df2.x;
			this.m_impulse.y += df2.y;
			PX = df2.x * this.m_perp.x;
			PY = df2.x * this.m_perp.y;
			L1 = df2.x * this.m_s1 + df2.y;
			L2 = df2.x * this.m_s2 + df2.y;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		bA.m_linearVelocity.setV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.setV(v2);
		bB.m_angularVelocity = w2;
	}
	,solvePositionConstraints: function(baumgarte) {
		var limitC;
		var oldLimitImpulse;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var c1 = bA.m_sweep.c;
		var a1 = bA.m_sweep.a;
		var c2 = bB.m_sweep.c;
		var a2 = bB.m_sweep.a;
		var m1;
		var m2;
		var i1;
		var i2;
		var linearError = 0.0;
		var angularError = 0.0;
		var active = false;
		var C2 = 0.0;
		var R1 = box2D_common_math_B2Mat22.fromAngle(a1);
		var R2 = box2D_common_math_B2Mat22.fromAngle(a2);
		var tMat = R1;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = R2;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var dX = c2.x + r2X - c1.x - r1X;
		var dY = c2.y + r2Y - c1.y - r1Y;
		if(this.m_enableLimit) {
			this.m_axis = box2D_common_math_B2Math.mulMV(R1,this.m_localXAxis1);
			this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
			this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
			var translation = this.m_axis.x * dX + this.m_axis.y * dY;
			if(box2D_common_math_B2Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * box2D_common_B2Settings.b2_linearSlop) {
				C2 = box2D_common_math_B2Math.clamp(translation,-box2D_common_B2Settings.b2_maxLinearCorrection,box2D_common_B2Settings.b2_maxLinearCorrection);
				linearError = box2D_common_math_B2Math.abs(translation);
				active = true;
			} else if(translation <= this.m_lowerTranslation) {
				C2 = box2D_common_math_B2Math.clamp(translation - this.m_lowerTranslation + box2D_common_B2Settings.b2_linearSlop,-box2D_common_B2Settings.b2_maxLinearCorrection,0.0);
				linearError = this.m_lowerTranslation - translation;
				active = true;
			} else if(translation >= this.m_upperTranslation) {
				C2 = box2D_common_math_B2Math.clamp(translation - this.m_upperTranslation + box2D_common_B2Settings.b2_linearSlop,0.0,box2D_common_B2Settings.b2_maxLinearCorrection);
				linearError = translation - this.m_upperTranslation;
				active = true;
			}
		}
		this.m_perp = box2D_common_math_B2Math.mulMV(R1,this.m_localYAxis1);
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var impulse = new box2D_common_math_B2Vec3();
		var C1X = this.m_perp.x * dX + this.m_perp.y * dY;
		var C1Y = a2 - a1 - this.m_refAngle;
		linearError = box2D_common_math_B2Math.max(linearError,box2D_common_math_B2Math.abs(C1X));
		angularError = box2D_common_math_B2Math.abs(C1Y);
		if(active) {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
			this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
			this.m_K.col2.x = this.m_K.col1.y;
			this.m_K.col2.y = i1 + i2;
			this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
			this.m_K.col3.x = this.m_K.col1.z;
			this.m_K.col3.y = this.m_K.col2.z;
			this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
			this.m_K.solve33(impulse,-C1X,-C1Y,-C2);
		} else {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			var k12 = i1 * this.m_s1 + i2 * this.m_s2;
			var k22 = i1 + i2;
			this.m_K.col1.set(k11,k12,0.0);
			this.m_K.col2.set(k12,k22,0.0);
			var impulse1 = this.m_K.solve22(new box2D_common_math_B2Vec2(),-C1X,-C1Y);
			impulse.x = impulse1.x;
			impulse.y = impulse1.y;
			impulse.z = 0.0;
		}
		var PX = impulse.x * this.m_perp.x + impulse.z * this.m_axis.x;
		var PY = impulse.x * this.m_perp.y + impulse.z * this.m_axis.y;
		var L1 = impulse.x * this.m_s1 + impulse.y + impulse.z * this.m_a1;
		var L2 = impulse.x * this.m_s2 + impulse.y + impulse.z * this.m_a2;
		c1.x -= this.m_invMassA * PX;
		c1.y -= this.m_invMassA * PY;
		a1 -= this.m_invIA * L1;
		c2.x += this.m_invMassB * PX;
		c2.y += this.m_invMassB * PY;
		a2 += this.m_invIB * L2;
		bA.m_sweep.a = a1;
		bB.m_sweep.a = a2;
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		if(linearError <= box2D_common_B2Settings.b2_linearSlop) {
			return angularError <= box2D_common_B2Settings.b2_angularSlop;
		} else {
			return false;
		}
	}
	,__class__: box2D_dynamics_joints_B2PrismaticJoint
});
var box2D_dynamics_joints_B2PrismaticJointDef = function() {
	box2D_dynamics_joints_B2JointDef.call(this);
	this.localAnchorA = new box2D_common_math_B2Vec2();
	this.localAnchorB = new box2D_common_math_B2Vec2();
	this.localAxisA = new box2D_common_math_B2Vec2();
	this.type = 2;
	this.localAxisA.set(1.0,0.0);
	this.referenceAngle = 0.0;
	this.enableLimit = false;
	this.lowerTranslation = 0.0;
	this.upperTranslation = 0.0;
	this.enableMotor = false;
	this.maxMotorForce = 0.0;
	this.motorSpeed = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2PrismaticJointDef"] = box2D_dynamics_joints_B2PrismaticJointDef;
box2D_dynamics_joints_B2PrismaticJointDef.__name__ = "box2D.dynamics.joints.B2PrismaticJointDef";
box2D_dynamics_joints_B2PrismaticJointDef.__super__ = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2PrismaticJointDef.prototype = $extend(box2D_dynamics_joints_B2JointDef.prototype,{
	initialize: function(bA,bB,anchor,axis) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.getLocalPoint(anchor);
		this.localAnchorB = this.bodyB.getLocalPoint(anchor);
		this.localAxisA = this.bodyA.getLocalVector(axis);
		this.referenceAngle = this.bodyB.getAngle() - this.bodyA.getAngle();
	}
	,__class__: box2D_dynamics_joints_B2PrismaticJointDef
});
var box2D_dynamics_joints_B2PulleyJoint = function(def) {
	box2D_dynamics_joints_B2Joint.call(this,def);
	this.m_groundAnchor1 = new box2D_common_math_B2Vec2();
	this.m_groundAnchor2 = new box2D_common_math_B2Vec2();
	this.m_localAnchor1 = new box2D_common_math_B2Vec2();
	this.m_localAnchor2 = new box2D_common_math_B2Vec2();
	this.m_u1 = new box2D_common_math_B2Vec2();
	this.m_u2 = new box2D_common_math_B2Vec2();
	var tMat;
	var tX;
	var tY;
	this.m_ground = this.m_bodyA.m_world.m_groundBody;
	this.m_groundAnchor1.x = def.groundAnchorA.x - this.m_ground.m_xf.position.x;
	this.m_groundAnchor1.y = def.groundAnchorA.y - this.m_ground.m_xf.position.y;
	this.m_groundAnchor2.x = def.groundAnchorB.x - this.m_ground.m_xf.position.x;
	this.m_groundAnchor2.y = def.groundAnchorB.y - this.m_ground.m_xf.position.y;
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_ratio = def.ratio;
	this.m_constant = def.lengthA + this.m_ratio * def.lengthB;
	this.m_maxLength1 = box2D_common_math_B2Math.min(def.maxLengthA,this.m_constant - this.m_ratio * box2D_dynamics_joints_B2PulleyJoint.b2_minPulleyLength);
	this.m_maxLength2 = box2D_common_math_B2Math.min(def.maxLengthB,(this.m_constant - box2D_dynamics_joints_B2PulleyJoint.b2_minPulleyLength) / this.m_ratio);
	this.m_impulse = 0.0;
	this.m_limitImpulse1 = 0.0;
	this.m_limitImpulse2 = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2PulleyJoint"] = box2D_dynamics_joints_B2PulleyJoint;
box2D_dynamics_joints_B2PulleyJoint.__name__ = "box2D.dynamics.joints.B2PulleyJoint";
box2D_dynamics_joints_B2PulleyJoint.__super__ = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2PulleyJoint.prototype = $extend(box2D_dynamics_joints_B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D_common_math_B2Vec2(inv_dt * this.m_impulse * this.m_u2.x,inv_dt * this.m_impulse * this.m_u2.y);
	}
	,getReactionTorque: function(inv_dt) {
		return 0.0;
	}
	,getGroundAnchorA: function() {
		var a = this.m_ground.m_xf.position.copy();
		a.add(this.m_groundAnchor1);
		return a;
	}
	,getGroundAnchorB: function() {
		var a = this.m_ground.m_xf.position.copy();
		a.add(this.m_groundAnchor2);
		return a;
	}
	,getLength1: function() {
		var p = this.m_bodyA.getWorldPoint(this.m_localAnchor1);
		var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var dX = p.x - sX;
		var dY = p.y - sY;
		return Math.sqrt(dX * dX + dY * dY);
	}
	,getLength2: function() {
		var p = this.m_bodyB.getWorldPoint(this.m_localAnchor2);
		var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		var dX = p.x - sX;
		var dY = p.y - sY;
		return Math.sqrt(dX * dX + dY * dY);
	}
	,getRatio: function() {
		return this.m_ratio;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		this.m_u1.set(p1X - s1X,p1Y - s1Y);
		this.m_u2.set(p2X - s2X,p2Y - s2Y);
		var length1 = this.m_u1.length();
		var length2 = this.m_u2.length();
		if(length1 > box2D_common_B2Settings.b2_linearSlop) {
			this.m_u1.multiply(1.0 / length1);
		} else {
			this.m_u1.setZero();
		}
		if(length2 > box2D_common_B2Settings.b2_linearSlop) {
			this.m_u2.multiply(1.0 / length2);
		} else {
			this.m_u2.setZero();
		}
		var C = this.m_constant - length1 - this.m_ratio * length2;
		if(C > 0.0) {
			this.m_state = 0;
			this.m_impulse = 0.0;
		} else {
			this.m_state = 2;
		}
		if(length1 < this.m_maxLength1) {
			this.m_limitState1 = 0;
			this.m_limitImpulse1 = 0.0;
		} else {
			this.m_limitState1 = 2;
		}
		if(length2 < this.m_maxLength2) {
			this.m_limitState2 = 0;
			this.m_limitImpulse2 = 0.0;
		} else {
			this.m_limitState2 = 2;
		}
		var cr1u1 = r1X * this.m_u1.y - r1Y * this.m_u1.x;
		var cr2u2 = r2X * this.m_u2.y - r2Y * this.m_u2.x;
		this.m_limitMass1 = bA.m_invMass + bA.m_invI * cr1u1 * cr1u1;
		this.m_limitMass2 = bB.m_invMass + bB.m_invI * cr2u2 * cr2u2;
		this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;
		this.m_limitMass1 = 1.0 / this.m_limitMass1;
		this.m_limitMass2 = 1.0 / this.m_limitMass2;
		this.m_pulleyMass = 1.0 / this.m_pulleyMass;
		if(step.warmStarting) {
			this.m_impulse *= step.dtRatio;
			this.m_limitImpulse1 *= step.dtRatio;
			this.m_limitImpulse2 *= step.dtRatio;
			var P1X = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.x;
			var P1Y = (-this.m_impulse - this.m_limitImpulse1) * this.m_u1.y;
			var P2X = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.x;
			var P2Y = (-this.m_ratio * this.m_impulse - this.m_limitImpulse2) * this.m_u2.y;
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		} else {
			this.m_impulse = 0.0;
			this.m_limitImpulse1 = 0.0;
			this.m_limitImpulse2 = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var v1X;
		var v1Y;
		var v2X;
		var v2Y;
		var P1X;
		var P1Y;
		var P2X;
		var P2Y;
		var Cdot;
		var impulse;
		var oldImpulse;
		if(this.m_state == 2) {
			v1X = bA.m_linearVelocity.x + -bA.m_angularVelocity * r1Y;
			v1Y = bA.m_linearVelocity.y + bA.m_angularVelocity * r1X;
			v2X = bB.m_linearVelocity.x + -bB.m_angularVelocity * r2Y;
			v2Y = bB.m_linearVelocity.y + bB.m_angularVelocity * r2X;
			Cdot = -(this.m_u1.x * v1X + this.m_u1.y * v1Y) - this.m_ratio * (this.m_u2.x * v2X + this.m_u2.y * v2Y);
			impulse = this.m_pulleyMass * -Cdot;
			oldImpulse = this.m_impulse;
			this.m_impulse = box2D_common_math_B2Math.max(0.0,this.m_impulse + impulse);
			impulse = this.m_impulse - oldImpulse;
			P1X = -impulse * this.m_u1.x;
			P1Y = -impulse * this.m_u1.y;
			P2X = -this.m_ratio * impulse * this.m_u2.x;
			P2Y = -this.m_ratio * impulse * this.m_u2.y;
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		}
		if(this.m_limitState1 == 2) {
			v1X = bA.m_linearVelocity.x + -bA.m_angularVelocity * r1Y;
			v1Y = bA.m_linearVelocity.y + bA.m_angularVelocity * r1X;
			Cdot = -(this.m_u1.x * v1X + this.m_u1.y * v1Y);
			impulse = -this.m_limitMass1 * Cdot;
			oldImpulse = this.m_limitImpulse1;
			this.m_limitImpulse1 = box2D_common_math_B2Math.max(0.0,this.m_limitImpulse1 + impulse);
			impulse = this.m_limitImpulse1 - oldImpulse;
			P1X = -impulse * this.m_u1.x;
			P1Y = -impulse * this.m_u1.y;
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
		}
		if(this.m_limitState2 == 2) {
			v2X = bB.m_linearVelocity.x + -bB.m_angularVelocity * r2Y;
			v2Y = bB.m_linearVelocity.y + bB.m_angularVelocity * r2X;
			Cdot = -(this.m_u2.x * v2X + this.m_u2.y * v2Y);
			impulse = -this.m_limitMass2 * Cdot;
			oldImpulse = this.m_limitImpulse2;
			this.m_limitImpulse2 = box2D_common_math_B2Math.max(0.0,this.m_limitImpulse2 + impulse);
			impulse = this.m_limitImpulse2 - oldImpulse;
			P2X = -impulse * this.m_u2.x;
			P2Y = -impulse * this.m_u2.y;
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		}
	}
	,solvePositionConstraints: function(baumgarte) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		var r1X;
		var r1Y;
		var r2X;
		var r2Y;
		var p1X;
		var p1Y;
		var p2X;
		var p2Y;
		var length1;
		var length2;
		var C;
		var impulse;
		var oldImpulse;
		var oldLimitPositionImpulse;
		var tX;
		var linearError = 0.0;
		if(this.m_state == 2) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
			r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
			r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
			r2X = tX;
			p1X = bA.m_sweep.c.x + r1X;
			p1Y = bA.m_sweep.c.y + r1Y;
			p2X = bB.m_sweep.c.x + r2X;
			p2Y = bB.m_sweep.c.y + r2Y;
			this.m_u1.set(p1X - s1X,p1Y - s1Y);
			this.m_u2.set(p2X - s2X,p2Y - s2Y);
			length1 = this.m_u1.length();
			length2 = this.m_u2.length();
			if(length1 > box2D_common_B2Settings.b2_linearSlop) {
				this.m_u1.multiply(1.0 / length1);
			} else {
				this.m_u1.setZero();
			}
			if(length2 > box2D_common_B2Settings.b2_linearSlop) {
				this.m_u2.multiply(1.0 / length2);
			} else {
				this.m_u2.setZero();
			}
			C = this.m_constant - length1 - this.m_ratio * length2;
			linearError = box2D_common_math_B2Math.max(linearError,-C);
			C = box2D_common_math_B2Math.clamp(C + box2D_common_B2Settings.b2_linearSlop,-box2D_common_B2Settings.b2_maxLinearCorrection,0.0);
			impulse = -this.m_pulleyMass * C;
			p1X = -impulse * this.m_u1.x;
			p1Y = -impulse * this.m_u1.y;
			p2X = -this.m_ratio * impulse * this.m_u2.x;
			p2Y = -this.m_ratio * impulse * this.m_u2.y;
			bA.m_sweep.c.x += bA.m_invMass * p1X;
			bA.m_sweep.c.y += bA.m_invMass * p1Y;
			bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
			bB.m_sweep.c.x += bB.m_invMass * p2X;
			bB.m_sweep.c.y += bB.m_invMass * p2Y;
			bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
			bA.synchronizeTransform();
			bB.synchronizeTransform();
		}
		if(this.m_limitState1 == 2) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
			r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
			r1X = tX;
			p1X = bA.m_sweep.c.x + r1X;
			p1Y = bA.m_sweep.c.y + r1Y;
			this.m_u1.set(p1X - s1X,p1Y - s1Y);
			length1 = this.m_u1.length();
			if(length1 > box2D_common_B2Settings.b2_linearSlop) {
				this.m_u1.x *= 1.0 / length1;
				this.m_u1.y *= 1.0 / length1;
			} else {
				this.m_u1.setZero();
			}
			C = this.m_maxLength1 - length1;
			linearError = box2D_common_math_B2Math.max(linearError,-C);
			C = box2D_common_math_B2Math.clamp(C + box2D_common_B2Settings.b2_linearSlop,-box2D_common_B2Settings.b2_maxLinearCorrection,0.0);
			impulse = -this.m_limitMass1 * C;
			p1X = -impulse * this.m_u1.x;
			p1Y = -impulse * this.m_u1.y;
			bA.m_sweep.c.x += bA.m_invMass * p1X;
			bA.m_sweep.c.y += bA.m_invMass * p1Y;
			bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
			bA.synchronizeTransform();
		}
		if(this.m_limitState2 == 2) {
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
			r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
			r2X = tX;
			p2X = bB.m_sweep.c.x + r2X;
			p2Y = bB.m_sweep.c.y + r2Y;
			this.m_u2.set(p2X - s2X,p2Y - s2Y);
			length2 = this.m_u2.length();
			if(length2 > box2D_common_B2Settings.b2_linearSlop) {
				this.m_u2.x *= 1.0 / length2;
				this.m_u2.y *= 1.0 / length2;
			} else {
				this.m_u2.setZero();
			}
			C = this.m_maxLength2 - length2;
			linearError = box2D_common_math_B2Math.max(linearError,-C);
			C = box2D_common_math_B2Math.clamp(C + box2D_common_B2Settings.b2_linearSlop,-box2D_common_B2Settings.b2_maxLinearCorrection,0.0);
			impulse = -this.m_limitMass2 * C;
			p2X = -impulse * this.m_u2.x;
			p2Y = -impulse * this.m_u2.y;
			bB.m_sweep.c.x += bB.m_invMass * p2X;
			bB.m_sweep.c.y += bB.m_invMass * p2Y;
			bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
			bB.synchronizeTransform();
		}
		return linearError < box2D_common_B2Settings.b2_linearSlop;
	}
	,__class__: box2D_dynamics_joints_B2PulleyJoint
});
var box2D_dynamics_joints_B2PulleyJointDef = function() {
	box2D_dynamics_joints_B2JointDef.call(this);
	this.groundAnchorA = new box2D_common_math_B2Vec2();
	this.groundAnchorB = new box2D_common_math_B2Vec2();
	this.localAnchorA = new box2D_common_math_B2Vec2();
	this.localAnchorB = new box2D_common_math_B2Vec2();
	this.type = 4;
	this.groundAnchorA.set(-1.0,1.0);
	this.groundAnchorB.set(1.0,1.0);
	this.localAnchorA.set(-1.0,0.0);
	this.localAnchorB.set(1.0,0.0);
	this.lengthA = 0.0;
	this.maxLengthA = 0.0;
	this.lengthB = 0.0;
	this.maxLengthB = 0.0;
	this.ratio = 1.0;
	this.collideConnected = true;
};
$hxClasses["box2D.dynamics.joints.B2PulleyJointDef"] = box2D_dynamics_joints_B2PulleyJointDef;
box2D_dynamics_joints_B2PulleyJointDef.__name__ = "box2D.dynamics.joints.B2PulleyJointDef";
box2D_dynamics_joints_B2PulleyJointDef.__super__ = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2PulleyJointDef.prototype = $extend(box2D_dynamics_joints_B2JointDef.prototype,{
	initialize: function(bA,bB,gaA,gaB,anchorA,anchorB,r) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.groundAnchorA.setV(gaA);
		this.groundAnchorB.setV(gaB);
		this.localAnchorA = this.bodyA.getLocalPoint(anchorA);
		this.localAnchorB = this.bodyB.getLocalPoint(anchorB);
		var d1X = anchorA.x - gaA.x;
		var d1Y = anchorA.y - gaA.y;
		this.lengthA = Math.sqrt(d1X * d1X + d1Y * d1Y);
		var d2X = anchorB.x - gaB.x;
		var d2Y = anchorB.y - gaB.y;
		this.lengthB = Math.sqrt(d2X * d2X + d2Y * d2Y);
		this.ratio = r;
		var C = this.lengthA + this.ratio * this.lengthB;
		this.maxLengthA = C - this.ratio * box2D_dynamics_joints_B2PulleyJoint.b2_minPulleyLength;
		this.maxLengthB = (C - box2D_dynamics_joints_B2PulleyJoint.b2_minPulleyLength) / this.ratio;
	}
	,__class__: box2D_dynamics_joints_B2PulleyJointDef
});
var box2D_dynamics_joints_B2RevoluteJoint = function(def) {
	box2D_dynamics_joints_B2Joint.call(this,def);
	this.K = new box2D_common_math_B2Mat22();
	this.K1 = new box2D_common_math_B2Mat22();
	this.K2 = new box2D_common_math_B2Mat22();
	this.K3 = new box2D_common_math_B2Mat22();
	this.impulse3 = new box2D_common_math_B2Vec3();
	this.impulse2 = new box2D_common_math_B2Vec2();
	this.reduced = new box2D_common_math_B2Vec2();
	this.m_localAnchor1 = new box2D_common_math_B2Vec2();
	this.m_localAnchor2 = new box2D_common_math_B2Vec2();
	this.m_impulse = new box2D_common_math_B2Vec3();
	this.m_mass = new box2D_common_math_B2Mat33();
	this.m_localAnchor1.setV(def.localAnchorA);
	this.m_localAnchor2.setV(def.localAnchorB);
	this.m_referenceAngle = def.referenceAngle;
	this.m_impulse.setZero();
	this.m_motorImpulse = 0.0;
	this.m_lowerAngle = def.lowerAngle;
	this.m_upperAngle = def.upperAngle;
	this.m_maxMotorTorque = def.maxMotorTorque;
	this.m_motorSpeed = def.motorSpeed;
	this.m_enableLimit = def.enableLimit;
	this.m_enableMotor = def.enableMotor;
	this.m_limitState = 0;
};
$hxClasses["box2D.dynamics.joints.B2RevoluteJoint"] = box2D_dynamics_joints_B2RevoluteJoint;
box2D_dynamics_joints_B2RevoluteJoint.__name__ = "box2D.dynamics.joints.B2RevoluteJoint";
box2D_dynamics_joints_B2RevoluteJoint.__super__ = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2RevoluteJoint.prototype = $extend(box2D_dynamics_joints_B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchor1);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchor2);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D_common_math_B2Vec2(inv_dt * this.m_impulse.x,inv_dt * this.m_impulse.y);
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_impulse.z;
	}
	,getJointAngle: function() {
		return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
	}
	,getJointSpeed: function() {
		return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
	}
	,isLimitEnabled: function() {
		return this.m_enableLimit;
	}
	,enableLimit: function(flag) {
		this.m_enableLimit = flag;
	}
	,getLowerLimit: function() {
		return this.m_lowerAngle;
	}
	,getUpperLimit: function() {
		return this.m_upperAngle;
	}
	,setLimits: function(lower,upper) {
		this.m_lowerAngle = lower;
		this.m_upperAngle = upper;
	}
	,isMotorEnabled: function() {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		return this.m_enableMotor;
	}
	,enableMotor: function(flag) {
		this.m_enableMotor = flag;
	}
	,setMotorSpeed: function(speed) {
		this.m_bodyA.setAwake(true);
		this.m_bodyB.setAwake(true);
		this.m_motorSpeed = speed;
	}
	,getMotorSpeed: function() {
		return this.m_motorSpeed;
	}
	,setMaxMotorTorque: function(torque) {
		this.m_maxMotorTorque = torque;
	}
	,getMotorTorque: function() {
		return this.m_maxMotorTorque;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tmp = this.m_enableMotor || this.m_enableLimit;
		var tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var m1 = bA.m_invMass;
		var m2 = bB.m_invMass;
		var i1 = bA.m_invI;
		var i2 = bB.m_invI;
		this.m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;
		this.m_mass.col2.x = -r1Y * r1X * i1 - r2Y * r2X * i2;
		this.m_mass.col3.x = -r1Y * i1 - r2Y * i2;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;
		this.m_mass.col3.y = r1X * i1 + r2X * i2;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = i1 + i2;
		this.m_motorMass = 1.0 / (i1 + i2);
		if(this.m_enableMotor == false) {
			this.m_motorImpulse = 0.0;
		}
		if(this.m_enableLimit) {
			var jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
			if(box2D_common_math_B2Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * box2D_common_B2Settings.b2_angularSlop) {
				this.m_limitState = 3;
			} else if(jointAngle <= this.m_lowerAngle) {
				if(this.m_limitState != 1) {
					this.m_impulse.z = 0.0;
				}
				this.m_limitState = 1;
			} else if(jointAngle >= this.m_upperAngle) {
				if(this.m_limitState != 2) {
					this.m_impulse.z = 0.0;
				}
				this.m_limitState = 2;
			} else {
				this.m_limitState = 0;
				this.m_impulse.z = 0.0;
			}
		} else {
			this.m_limitState = 0;
		}
		if(step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x;
			var PY = this.m_impulse.y;
			bA.m_linearVelocity.x -= m1 * PX;
			bA.m_linearVelocity.y -= m1 * PY;
			bA.m_angularVelocity -= i1 * (r1X * PY - r1Y * PX + this.m_motorImpulse + this.m_impulse.z);
			bB.m_linearVelocity.x += m2 * PX;
			bB.m_linearVelocity.y += m2 * PY;
			bB.m_angularVelocity += i2 * (r2X * PY - r2Y * PX + this.m_motorImpulse + this.m_impulse.z);
		} else {
			this.m_impulse.setZero();
			this.m_motorImpulse = 0.0;
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX;
		var newImpulse;
		var r1X;
		var r1Y;
		var r2X;
		var r2Y;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var m1 = bA.m_invMass;
		var m2 = bB.m_invMass;
		var i1 = bA.m_invI;
		var i2 = bB.m_invI;
		if(this.m_enableMotor && this.m_limitState != 3) {
			var Cdot = w2 - w1 - this.m_motorSpeed;
			var impulse = this.m_motorMass * -Cdot;
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorTorque;
			this.m_motorImpulse = box2D_common_math_B2Math.clamp(this.m_motorImpulse + impulse,-maxImpulse,maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			w1 -= i1 * impulse;
			w2 += i2 * impulse;
		}
		if(this.m_enableLimit && this.m_limitState != 0) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
			r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
			r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
			r2X = tX;
			var Cdot1X = v2.x + -w2 * r2Y - v1.x - -w1 * r1Y;
			var Cdot1Y = v2.y + w2 * r2X - v1.y - w1 * r1X;
			var Cdot2 = w2 - w1;
			this.m_mass.solve33(this.impulse3,-Cdot1X,-Cdot1Y,-Cdot2);
			if(this.m_limitState == 3) {
				this.m_impulse.add(this.impulse3);
			} else if(this.m_limitState == 1) {
				newImpulse = this.m_impulse.z + this.impulse3.z;
				if(newImpulse < 0.0) {
					this.m_mass.solve22(this.reduced,-Cdot1X,-Cdot1Y);
					this.impulse3.x = this.reduced.x;
					this.impulse3.y = this.reduced.y;
					this.impulse3.z = -this.m_impulse.z;
					this.m_impulse.x += this.reduced.x;
					this.m_impulse.y += this.reduced.y;
					this.m_impulse.z = 0.0;
				}
			} else if(this.m_limitState == 2) {
				newImpulse = this.m_impulse.z + this.impulse3.z;
				if(newImpulse > 0.0) {
					this.m_mass.solve22(this.reduced,-Cdot1X,-Cdot1Y);
					this.impulse3.x = this.reduced.x;
					this.impulse3.y = this.reduced.y;
					this.impulse3.z = -this.m_impulse.z;
					this.m_impulse.x += this.reduced.x;
					this.m_impulse.y += this.reduced.y;
					this.m_impulse.z = 0.0;
				}
			}
			v1.x -= m1 * this.impulse3.x;
			v1.y -= m1 * this.impulse3.y;
			w1 -= i1 * (r1X * this.impulse3.y - r1Y * this.impulse3.x + this.impulse3.z);
			v2.x += m2 * this.impulse3.x;
			v2.y += m2 * this.impulse3.y;
			w2 += i2 * (r2X * this.impulse3.y - r2Y * this.impulse3.x + this.impulse3.z);
		} else {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
			r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
			r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
			r2X = tX;
			var CdotX = v2.x + -w2 * r2Y - v1.x - -w1 * r1Y;
			var CdotY = v2.y + w2 * r2X - v1.y - w1 * r1X;
			this.m_mass.solve22(this.impulse2,-CdotX,-CdotY);
			this.m_impulse.x += this.impulse2.x;
			this.m_impulse.y += this.impulse2.y;
			v1.x -= m1 * this.impulse2.x;
			v1.y -= m1 * this.impulse2.y;
			w1 -= i1 * (r1X * this.impulse2.y - r1Y * this.impulse2.x);
			v2.x += m2 * this.impulse2.x;
			v2.y += m2 * this.impulse2.y;
			w2 += i2 * (r2X * this.impulse2.y - r2Y * this.impulse2.x);
		}
		bA.m_linearVelocity.setV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.setV(v2);
		bB.m_angularVelocity = w2;
	}
	,solvePositionConstraints: function(baumgarte) {
		var oldLimitImpulse;
		var C;
		var tMat;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var angularError = 0.0;
		var positionError = 0.0;
		var tX;
		var impulseX;
		var impulseY;
		if(this.m_enableLimit && this.m_limitState != 0) {
			var angle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
			var limitImpulse = 0.0;
			if(this.m_limitState == 3) {
				C = box2D_common_math_B2Math.clamp(angle - this.m_lowerAngle,-box2D_common_B2Settings.b2_maxAngularCorrection,box2D_common_B2Settings.b2_maxAngularCorrection);
				limitImpulse = -this.m_motorMass * C;
				angularError = box2D_common_math_B2Math.abs(C);
			} else if(this.m_limitState == 1) {
				C = angle - this.m_lowerAngle;
				angularError = -C;
				C = box2D_common_math_B2Math.clamp(C + box2D_common_B2Settings.b2_angularSlop,-box2D_common_B2Settings.b2_maxAngularCorrection,0.0);
				limitImpulse = -this.m_motorMass * C;
			} else if(this.m_limitState == 2) {
				C = angle - this.m_upperAngle;
				angularError = C;
				C = box2D_common_math_B2Math.clamp(C - box2D_common_B2Settings.b2_angularSlop,0.0,box2D_common_B2Settings.b2_maxAngularCorrection);
				limitImpulse = -this.m_motorMass * C;
			}
			bA.m_sweep.a -= bA.m_invI * limitImpulse;
			bB.m_sweep.a += bB.m_invI * limitImpulse;
			bA.synchronizeTransform();
			bB.synchronizeTransform();
		}
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = tMat.col1.x * r1X + tMat.col2.x * r1Y;
		r1Y = tMat.col1.y * r1X + tMat.col2.y * r1Y;
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * r2X + tMat.col2.x * r2Y;
		r2Y = tMat.col1.y * r2X + tMat.col2.y * r2Y;
		r2X = tX;
		var CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var CLengthSquared = CX * CX + CY * CY;
		var CLength = Math.sqrt(CLengthSquared);
		positionError = CLength;
		var invMass1 = bA.m_invMass;
		var invMass2 = bB.m_invMass;
		var invI1 = bA.m_invI;
		var invI2 = bB.m_invI;
		var k_allowedStretch = 10.0 * box2D_common_B2Settings.b2_linearSlop;
		if(CLengthSquared > k_allowedStretch * k_allowedStretch) {
			var uX = CX / CLength;
			var uY = CY / CLength;
			var k = invMass1 + invMass2;
			var m = 1.0 / k;
			impulseX = m * -CX;
			impulseY = m * -CY;
			var k_beta = 0.5;
			bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;
			bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;
			bB.m_sweep.c.x += k_beta * invMass2 * impulseX;
			bB.m_sweep.c.y += k_beta * invMass2 * impulseY;
			CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
			CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		}
		this.K1.col1.x = invMass1 + invMass2;
		this.K1.col2.x = 0.0;
		this.K1.col1.y = 0.0;
		this.K1.col2.y = invMass1 + invMass2;
		this.K2.col1.x = invI1 * r1Y * r1Y;
		this.K2.col2.x = -invI1 * r1X * r1Y;
		this.K2.col1.y = -invI1 * r1X * r1Y;
		this.K2.col2.y = invI1 * r1X * r1X;
		this.K3.col1.x = invI2 * r2Y * r2Y;
		this.K3.col2.x = -invI2 * r2X * r2Y;
		this.K3.col1.y = -invI2 * r2X * r2Y;
		this.K3.col2.y = invI2 * r2X * r2X;
		this.K.setM(this.K1);
		this.K.addM(this.K2);
		this.K.addM(this.K3);
		this.K.solve(box2D_dynamics_joints_B2RevoluteJoint.tImpulse,-CX,-CY);
		impulseX = box2D_dynamics_joints_B2RevoluteJoint.tImpulse.x;
		impulseY = box2D_dynamics_joints_B2RevoluteJoint.tImpulse.y;
		bA.m_sweep.c.x -= bA.m_invMass * impulseX;
		bA.m_sweep.c.y -= bA.m_invMass * impulseY;
		bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);
		bB.m_sweep.c.x += bB.m_invMass * impulseX;
		bB.m_sweep.c.y += bB.m_invMass * impulseY;
		bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		if(positionError <= box2D_common_B2Settings.b2_linearSlop) {
			return angularError <= box2D_common_B2Settings.b2_angularSlop;
		} else {
			return false;
		}
	}
	,__class__: box2D_dynamics_joints_B2RevoluteJoint
});
var box2D_dynamics_joints_B2RevoluteJointDef = function() {
	box2D_dynamics_joints_B2JointDef.call(this);
	this.localAnchorA = new box2D_common_math_B2Vec2();
	this.localAnchorB = new box2D_common_math_B2Vec2();
	this.type = 1;
	this.localAnchorA.set(0.0,0.0);
	this.localAnchorB.set(0.0,0.0);
	this.referenceAngle = 0.0;
	this.lowerAngle = 0.0;
	this.upperAngle = 0.0;
	this.maxMotorTorque = 0.0;
	this.motorSpeed = 0.0;
	this.enableLimit = false;
	this.enableMotor = false;
};
$hxClasses["box2D.dynamics.joints.B2RevoluteJointDef"] = box2D_dynamics_joints_B2RevoluteJointDef;
box2D_dynamics_joints_B2RevoluteJointDef.__name__ = "box2D.dynamics.joints.B2RevoluteJointDef";
box2D_dynamics_joints_B2RevoluteJointDef.__super__ = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2RevoluteJointDef.prototype = $extend(box2D_dynamics_joints_B2JointDef.prototype,{
	initialize: function(bA,bB,anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.getLocalPoint(anchor);
		this.localAnchorB = this.bodyB.getLocalPoint(anchor);
		this.referenceAngle = this.bodyB.getAngle() - this.bodyA.getAngle();
	}
	,__class__: box2D_dynamics_joints_B2RevoluteJointDef
});
var box2D_dynamics_joints_B2WeldJoint = function(def) {
	box2D_dynamics_joints_B2Joint.call(this,def);
	this.m_localAnchorA = new box2D_common_math_B2Vec2();
	this.m_localAnchorB = new box2D_common_math_B2Vec2();
	this.m_impulse = new box2D_common_math_B2Vec3();
	this.m_mass = new box2D_common_math_B2Mat33();
	this.m_localAnchorA.setV(def.localAnchorA);
	this.m_localAnchorB.setV(def.localAnchorB);
	this.m_referenceAngle = def.referenceAngle;
	this.m_impulse.setZero();
	this.m_mass = new box2D_common_math_B2Mat33();
};
$hxClasses["box2D.dynamics.joints.B2WeldJoint"] = box2D_dynamics_joints_B2WeldJoint;
box2D_dynamics_joints_B2WeldJoint.__name__ = "box2D.dynamics.joints.B2WeldJoint";
box2D_dynamics_joints_B2WeldJoint.__super__ = box2D_dynamics_joints_B2Joint;
box2D_dynamics_joints_B2WeldJoint.prototype = $extend(box2D_dynamics_joints_B2Joint.prototype,{
	getAnchorA: function() {
		return this.m_bodyA.getWorldPoint(this.m_localAnchorA);
	}
	,getAnchorB: function() {
		return this.m_bodyB.getWorldPoint(this.m_localAnchorB);
	}
	,getReactionForce: function(inv_dt) {
		return new box2D_common_math_B2Vec2(inv_dt * this.m_impulse.x,inv_dt * this.m_impulse.y);
	}
	,getReactionTorque: function(inv_dt) {
		return inv_dt * this.m_impulse.z;
	}
	,initVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
		this.m_mass.col2.x = -rAY * rAX * iA - rBY * rBX * iB;
		this.m_mass.col3.x = -rAY * iA - rBY * iB;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
		this.m_mass.col3.y = rAX * iA + rBX * iB;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = iA + iB;
		if(step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_impulse.z *= step.dtRatio;
			bA.m_linearVelocity.x -= mA * this.m_impulse.x;
			bA.m_linearVelocity.y -= mA * this.m_impulse.y;
			bA.m_angularVelocity -= iA * (rAX * this.m_impulse.y - rAY * this.m_impulse.x + this.m_impulse.z);
			bB.m_linearVelocity.x += mB * this.m_impulse.x;
			bB.m_linearVelocity.y += mB * this.m_impulse.y;
			bB.m_angularVelocity += iB * (rBX * this.m_impulse.y - rBY * this.m_impulse.x + this.m_impulse.z);
		} else {
			this.m_impulse.setZero();
		}
	}
	,solveVelocityConstraints: function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var vA = bA.m_linearVelocity;
		var wA = bA.m_angularVelocity;
		var vB = bB.m_linearVelocity;
		var wB = bB.m_angularVelocity;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var Cdot1X = vB.x - wB * rBY - vA.x + wA * rAY;
		var Cdot1Y = vB.y + wB * rBX - vA.y - wA * rAX;
		var Cdot2 = wB - wA;
		var impulse = new box2D_common_math_B2Vec3();
		this.m_mass.solve33(impulse,-Cdot1X,-Cdot1Y,-Cdot2);
		this.m_impulse.add(impulse);
		vA.x -= mA * impulse.x;
		vA.y -= mA * impulse.y;
		wA -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
		vB.x += mB * impulse.x;
		vB.y += mB * impulse.y;
		wB += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
		bA.m_angularVelocity = wA;
		bB.m_angularVelocity = wB;
	}
	,solvePositionConstraints: function(baumgarte) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rAX + tMat.col2.x * rAY;
		rAY = tMat.col1.y * rAX + tMat.col2.y * rAY;
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = tMat.col1.x * rBX + tMat.col2.x * rBY;
		rBY = tMat.col1.y * rBX + tMat.col2.y * rBY;
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var C1X = bB.m_sweep.c.x + rBX - bA.m_sweep.c.x - rAX;
		var C1Y = bB.m_sweep.c.y + rBY - bA.m_sweep.c.y - rAY;
		var C2 = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
		var k_allowedStretch = 10.0 * box2D_common_B2Settings.b2_linearSlop;
		var positionError = Math.sqrt(C1X * C1X + C1Y * C1Y);
		var angularError = box2D_common_math_B2Math.abs(C2);
		if(positionError > k_allowedStretch) {
			iA *= 1.0;
			iB *= 1.0;
		}
		this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
		this.m_mass.col2.x = -rAY * rAX * iA - rBY * rBX * iB;
		this.m_mass.col3.x = -rAY * iA - rBY * iB;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
		this.m_mass.col3.y = rAX * iA + rBX * iB;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = iA + iB;
		var impulse = new box2D_common_math_B2Vec3();
		this.m_mass.solve33(impulse,-C1X,-C1Y,-C2);
		bA.m_sweep.c.x -= mA * impulse.x;
		bA.m_sweep.c.y -= mA * impulse.y;
		bA.m_sweep.a -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
		bB.m_sweep.c.x += mB * impulse.x;
		bB.m_sweep.c.y += mB * impulse.y;
		bB.m_sweep.a += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
		bA.synchronizeTransform();
		bB.synchronizeTransform();
		if(positionError <= box2D_common_B2Settings.b2_linearSlop) {
			return angularError <= box2D_common_B2Settings.b2_angularSlop;
		} else {
			return false;
		}
	}
	,__class__: box2D_dynamics_joints_B2WeldJoint
});
var box2D_dynamics_joints_B2WeldJointDef = function() {
	box2D_dynamics_joints_B2JointDef.call(this);
	this.localAnchorA = new box2D_common_math_B2Vec2();
	this.localAnchorB = new box2D_common_math_B2Vec2();
	this.type = 8;
	this.referenceAngle = 0.0;
};
$hxClasses["box2D.dynamics.joints.B2WeldJointDef"] = box2D_dynamics_joints_B2WeldJointDef;
box2D_dynamics_joints_B2WeldJointDef.__name__ = "box2D.dynamics.joints.B2WeldJointDef";
box2D_dynamics_joints_B2WeldJointDef.__super__ = box2D_dynamics_joints_B2JointDef;
box2D_dynamics_joints_B2WeldJointDef.prototype = $extend(box2D_dynamics_joints_B2JointDef.prototype,{
	initialize: function(bA,bB,anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.setV(this.bodyA.getLocalPoint(anchor));
		this.localAnchorB.setV(this.bodyB.getLocalPoint(anchor));
		this.referenceAngle = this.bodyB.getAngle() - this.bodyA.getAngle();
	}
	,__class__: box2D_dynamics_joints_B2WeldJointDef
});
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__ : true, __constructs__ : ["BFrame","BExtension","BEOF"]
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["frame"],$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["extension"],$_)
	,BEOF: {_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__ : true, __constructs__ : ["EGraphicControl","EComment","EText","EApplicationExtension","EUnknown"]
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["gce"],$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["text"],$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["pte"],$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["ext"],$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__ : true, __constructs__ : ["AENetscapeLooping","AEUnknown"]
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["loops"],$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["name","version","data"],$_)
};
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__ : true, __constructs__ : ["GIF87a","GIF89a","Unknown"]
	,GIF87a: {_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr}; },$_.__params__ = ["version"],$_)
};
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__ : true, __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"]
	,UNSPECIFIED: {_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr}; },$_.__params__ = ["index"],$_)
};
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 73;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 70;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b3 = this.readBlock();
			blocks.add(b3);
			if(b3 == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i1 = 0;
		var code = 0;
		var last;
		while(i1 < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw new js__$Boot_HaxeError("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g2 = 0;
			while(_g2 < newRecord.length) {
				var item = newRecord[_g2];
				++_g2;
				pixels.b[i1++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i1 < pixelsCount) pixels.b[i1++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw new js__$Boot_HaxeError("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw new js__$Boot_HaxeError("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer1 = new haxe_io_BytesOutput();
			var bytes1 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len1 = this.i.readByte();
			while(len1 != 0) {
				this.i.readBytes(bytes1,0,len1);
				buffer1.writeBytes(bytes1,0,len1);
				len1 = this.i.readByte();
			}
			buffer1.flush();
			bytes1 = buffer1.getBytes();
			buffer1.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes1.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer2 = new haxe_io_BytesOutput();
			var bytes2 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len2 = this.i.readByte();
			while(len2 != 0) {
				this.i.readBytes(bytes2,0,len2);
				buffer2.writeBytes(bytes2,0,len2);
				len2 = this.i.readByte();
			}
			buffer2.flush();
			bytes2 = buffer2.getBytes();
			buffer2.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes2));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw new js__$Boot_HaxeError("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readBlocks: function() {
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		return bytes;
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.framesCount = function(data) {
	var frames = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block._hx_index == 0) {
			var _g = block.frame;
			++frames;
		}
	}
	return frames;
};
format_gif_Tools.frame = function(data,frameIndex) {
	var counter = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block._hx_index == 0) {
			var frame = block.frame;
			if(counter == frameIndex) {
				return frame;
			}
			++counter;
		}
	}
	return null;
};
format_gif_Tools.graphicControl = function(data,frameIndex) {
	var counter = 0;
	var gce = null;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			if(counter == frameIndex) {
				return gce;
			}
			gce = null;
			++counter;
			break;
		case 1:
			var _g1 = block.extension;
			if(_g1._hx_index == 0) {
				var g = _g1.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			if(frameCaret == frameIndex) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(frame.width * frame.height * 4));
				var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw new js__$Boot_HaxeError("Frame does not have a color table!");
				}
				var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				var writeCaret = 0;
				var _g = 0;
				var _g1 = frame.pixels.length;
				while(_g < _g1) {
					var i = _g++;
					var index = frame.pixels.b[i] * 3;
					bytes.b[writeCaret] = ct.b[index + 2];
					bytes.b[writeCaret + 1] = ct.b[index + 1];
					bytes.b[writeCaret + 2] = ct.b[index];
					if(transparentIndex == index) {
						bytes.b[writeCaret + 3] = 0;
					} else {
						bytes.b[writeCaret + 3] = 255;
					}
					writeCaret += 4;
				}
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			if(frameCaret == frameIndex) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(frame.width * frame.height * 4));
				var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw new js__$Boot_HaxeError("Frame does not have a color table!");
				}
				var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				var writeCaret = 0;
				var _g = 0;
				var _g1 = frame.pixels.length;
				while(_g < _g1) {
					var i = _g++;
					var index = frame.pixels.b[i] * 3;
					bytes.b[writeCaret] = ct.b[index];
					bytes.b[writeCaret + 1] = ct.b[index + 1];
					bytes.b[writeCaret + 2] = ct.b[index + 2];
					if(transparentIndex == index) {
						bytes.b[writeCaret + 3] = 0;
					} else {
						bytes.b[writeCaret + 3] = 255;
					}
					writeCaret += 4;
				}
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw new js__$Boot_HaxeError("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g11 = pixels.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.extractFullRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw new js__$Boot_HaxeError("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g11 = pixels.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index + 2];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.loopCount = function(data) {
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block._hx_index == 1) {
			var _g = block.extension;
			if(_g._hx_index == 3) {
				var _g1 = _g.ext;
				if(_g1._hx_index == 0) {
					var loops = _g1.loops;
					return loops;
				}
			}
		}
	}
	return 1;
};
format_gif_Tools.log2 = function(val) {
	return Math.log(val) / format_gif_Tools.LN2;
};
var format_mp3_SamplingRate = $hxEnums["format.mp3.SamplingRate"] = { __ename__ : true, __constructs__ : ["SR_8000","SR_11025","SR_12000","SR_22050","SR_24000","SR_32000","SR_44100","SR_48000","SR_Bad"]
	,SR_8000: {_hx_index:0,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_11025: {_hx_index:1,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_12000: {_hx_index:2,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_22050: {_hx_index:3,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_24000: {_hx_index:4,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_32000: {_hx_index:5,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_44100: {_hx_index:6,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_48000: {_hx_index:7,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_Bad: {_hx_index:8,__enum__:"format.mp3.SamplingRate",toString:$estr}
};
format_mp3_SamplingRate.__empty_constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
var format_mp3_Bitrate = $hxEnums["format.mp3.Bitrate"] = { __ename__ : true, __constructs__ : ["BR_8","BR_16","BR_24","BR_32","BR_40","BR_48","BR_56","BR_64","BR_80","BR_96","BR_112","BR_128","BR_144","BR_160","BR_176","BR_192","BR_224","BR_256","BR_288","BR_320","BR_352","BR_384","BR_416","BR_448","BR_Free","BR_Bad"]
	,BR_8: {_hx_index:0,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_16: {_hx_index:1,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_24: {_hx_index:2,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_32: {_hx_index:3,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_40: {_hx_index:4,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_48: {_hx_index:5,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_56: {_hx_index:6,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_64: {_hx_index:7,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_80: {_hx_index:8,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_96: {_hx_index:9,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_112: {_hx_index:10,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_128: {_hx_index:11,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_144: {_hx_index:12,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_160: {_hx_index:13,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_176: {_hx_index:14,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_192: {_hx_index:15,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_224: {_hx_index:16,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_256: {_hx_index:17,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_288: {_hx_index:18,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_320: {_hx_index:19,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_352: {_hx_index:20,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_384: {_hx_index:21,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_416: {_hx_index:22,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_448: {_hx_index:23,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Free: {_hx_index:24,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Bad: {_hx_index:25,__enum__:"format.mp3.Bitrate",toString:$estr}
};
format_mp3_Bitrate.__empty_constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
var format_mp3_MPEG = function() { };
$hxClasses["format.mp3.MPEG"] = format_mp3_MPEG;
format_mp3_MPEG.__name__ = "format.mp3.MPEG";
format_mp3_MPEG.enum2Num = function(m) {
	switch(m._hx_index) {
	case 0:
		return 3;
	case 1:
		return 2;
	case 2:
		return 0;
	case 3:
		return format_mp3_MPEG.Reserved;
	}
};
format_mp3_MPEG.num2Enum = function(m) {
	switch(m) {
	case 0:
		return format_mp3_MPEGVersion.MPEG_V25;
	case 2:
		return format_mp3_MPEGVersion.MPEG_V2;
	case 3:
		return format_mp3_MPEGVersion.MPEG_V1;
	default:
		return format_mp3_MPEGVersion.MPEG_Reserved;
	}
};
format_mp3_MPEG.srNum2Enum = function(sr) {
	switch(sr) {
	case 8000:
		return format_mp3_SamplingRate.SR_8000;
	case 11025:
		return format_mp3_SamplingRate.SR_11025;
	case 12000:
		return format_mp3_SamplingRate.SR_12000;
	case 22050:
		return format_mp3_SamplingRate.SR_22050;
	case 24000:
		return format_mp3_SamplingRate.SR_24000;
	case 32000:
		return format_mp3_SamplingRate.SR_32000;
	case 44100:
		return format_mp3_SamplingRate.SR_44100;
	case 48000:
		return format_mp3_SamplingRate.SR_48000;
	default:
		return format_mp3_SamplingRate.SR_Bad;
	}
};
format_mp3_MPEG.srEnum2Num = function(sr) {
	switch(sr._hx_index) {
	case 0:
		return 8000;
	case 1:
		return 11025;
	case 2:
		return 12000;
	case 3:
		return 22050;
	case 4:
		return 24000;
	case 5:
		return 32000;
	case 6:
		return 44100;
	case 7:
		return 48000;
	case 8:
		return -1;
	}
};
format_mp3_MPEG.getBitrateIdx = function(br,mpeg,layer) {
	var arr = (mpeg == format_mp3_MPEGVersion.MPEG_V1 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[format_mp3_CLayer.enum2Num(layer)];
	if(arr[0] == br) {
		return 0;
	}
	if(arr[1] == br) {
		return 1;
	}
	if(arr[2] == br) {
		return 2;
	}
	if(arr[3] == br) {
		return 3;
	}
	if(arr[4] == br) {
		return 4;
	}
	if(arr[5] == br) {
		return 5;
	}
	if(arr[6] == br) {
		return 6;
	}
	if(arr[7] == br) {
		return 7;
	}
	if(arr[8] == br) {
		return 8;
	}
	if(arr[9] == br) {
		return 9;
	}
	if(arr[10] == br) {
		return 10;
	}
	if(arr[11] == br) {
		return 11;
	}
	if(arr[12] == br) {
		return 12;
	}
	if(arr[13] == br) {
		return 13;
	}
	if(arr[14] == br) {
		return 14;
	}
	if(arr[15] == br) {
		return 15;
	}
	throw new js__$Boot_HaxeError("Bitrate index not found");
};
format_mp3_MPEG.getSamplingRateIdx = function(sr,mpeg) {
	var arr = format_mp3_MPEG.SamplingRates[format_mp3_MPEG.enum2Num(mpeg)];
	if(arr[0] == sr) {
		return 0;
	}
	if(arr[1] == sr) {
		return 1;
	}
	if(arr[2] == sr) {
		return 2;
	}
	if(arr[3] == sr) {
		return 3;
	}
	throw new js__$Boot_HaxeError("Sampling rate index not found");
};
format_mp3_MPEG.bitrateEnum2Num = function(br) {
	switch(br._hx_index) {
	case 0:
		return 8;
	case 1:
		return 16;
	case 2:
		return 24;
	case 3:
		return 32;
	case 4:
		return 40;
	case 5:
		return 48;
	case 6:
		return 56;
	case 7:
		return 64;
	case 8:
		return 80;
	case 9:
		return 96;
	case 10:
		return 112;
	case 11:
		return 128;
	case 12:
		return 144;
	case 13:
		return 160;
	case 14:
		return 176;
	case 15:
		return 192;
	case 16:
		return 224;
	case 17:
		return 256;
	case 18:
		return 288;
	case 19:
		return 320;
	case 20:
		return 352;
	case 21:
		return 384;
	case 22:
		return 416;
	case 23:
		return 448;
	case 24:
		return 0;
	case 25:
		return -1;
	}
};
format_mp3_MPEG.bitrateNum2Enum = function(br) {
	switch(br) {
	case 0:
		return format_mp3_Bitrate.BR_Free;
	case 8:
		return format_mp3_Bitrate.BR_8;
	case 16:
		return format_mp3_Bitrate.BR_16;
	case 24:
		return format_mp3_Bitrate.BR_24;
	case 32:
		return format_mp3_Bitrate.BR_32;
	case 40:
		return format_mp3_Bitrate.BR_40;
	case 48:
		return format_mp3_Bitrate.BR_48;
	case 56:
		return format_mp3_Bitrate.BR_56;
	case 64:
		return format_mp3_Bitrate.BR_64;
	case 80:
		return format_mp3_Bitrate.BR_80;
	case 96:
		return format_mp3_Bitrate.BR_96;
	case 112:
		return format_mp3_Bitrate.BR_112;
	case 128:
		return format_mp3_Bitrate.BR_128;
	case 144:
		return format_mp3_Bitrate.BR_144;
	case 160:
		return format_mp3_Bitrate.BR_160;
	case 176:
		return format_mp3_Bitrate.BR_176;
	case 192:
		return format_mp3_Bitrate.BR_192;
	case 224:
		return format_mp3_Bitrate.BR_224;
	case 256:
		return format_mp3_Bitrate.BR_256;
	case 288:
		return format_mp3_Bitrate.BR_288;
	case 320:
		return format_mp3_Bitrate.BR_320;
	case 352:
		return format_mp3_Bitrate.BR_352;
	case 384:
		return format_mp3_Bitrate.BR_384;
	case 416:
		return format_mp3_Bitrate.BR_416;
	case 448:
		return format_mp3_Bitrate.BR_448;
	default:
		return format_mp3_Bitrate.BR_Bad;
	}
};
var format_mp3_CLayer = function() { };
$hxClasses["format.mp3.CLayer"] = format_mp3_CLayer;
format_mp3_CLayer.__name__ = "format.mp3.CLayer";
format_mp3_CLayer.enum2Num = function(l) {
	switch(l._hx_index) {
	case 0:
		return format_mp3_CLayer.LReserved;
	case 1:
		return format_mp3_CLayer.LLayer3;
	case 2:
		return format_mp3_CLayer.LLayer2;
	case 3:
		return format_mp3_CLayer.LLayer1;
	}
};
format_mp3_CLayer.num2Enum = function(l) {
	switch(l) {
	case 1:
		return format_mp3_Layer.Layer3;
	case 2:
		return format_mp3_Layer.Layer2;
	case 3:
		return format_mp3_Layer.Layer1;
	default:
		return format_mp3_Layer.LayerReserved;
	}
};
var format_mp3_CChannelMode = function() { };
$hxClasses["format.mp3.CChannelMode"] = format_mp3_CChannelMode;
format_mp3_CChannelMode.__name__ = "format.mp3.CChannelMode";
format_mp3_CChannelMode.enum2Num = function(c) {
	switch(c._hx_index) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 3;
	}
};
format_mp3_CChannelMode.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_ChannelMode.Stereo;
	case 1:
		return format_mp3_ChannelMode.JointStereo;
	case 2:
		return format_mp3_ChannelMode.DualChannel;
	case 3:
		return format_mp3_ChannelMode.Mono;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_CEmphasis = function() { };
$hxClasses["format.mp3.CEmphasis"] = format_mp3_CEmphasis;
format_mp3_CEmphasis.__name__ = "format.mp3.CEmphasis";
format_mp3_CEmphasis.enum2Num = function(c) {
	switch(c._hx_index) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 3;
	case 3:
		return 2;
	}
};
format_mp3_CEmphasis.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_Emphasis.NoEmphasis;
	case 1:
		return format_mp3_Emphasis.Ms50_15;
	case 2:
		return format_mp3_Emphasis.InvalidEmphasis;
	case 3:
		return format_mp3_Emphasis.CCIT_J17;
	default:
		throw new js__$Boot_HaxeError("assert");
	}
};
var format_mp3_MPEGVersion = $hxEnums["format.mp3.MPEGVersion"] = { __ename__ : true, __constructs__ : ["MPEG_V1","MPEG_V2","MPEG_V25","MPEG_Reserved"]
	,MPEG_V1: {_hx_index:0,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V2: {_hx_index:1,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V25: {_hx_index:2,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_Reserved: {_hx_index:3,__enum__:"format.mp3.MPEGVersion",toString:$estr}
};
format_mp3_MPEGVersion.__empty_constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
var format_mp3_Layer = $hxEnums["format.mp3.Layer"] = { __ename__ : true, __constructs__ : ["LayerReserved","Layer3","Layer2","Layer1"]
	,LayerReserved: {_hx_index:0,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer3: {_hx_index:1,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer2: {_hx_index:2,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer1: {_hx_index:3,__enum__:"format.mp3.Layer",toString:$estr}
};
format_mp3_Layer.__empty_constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
var format_mp3_ChannelMode = $hxEnums["format.mp3.ChannelMode"] = { __ename__ : true, __constructs__ : ["Stereo","JointStereo","DualChannel","Mono"]
	,Stereo: {_hx_index:0,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,JointStereo: {_hx_index:1,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,DualChannel: {_hx_index:2,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,Mono: {_hx_index:3,__enum__:"format.mp3.ChannelMode",toString:$estr}
};
format_mp3_ChannelMode.__empty_constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
var format_mp3_Emphasis = $hxEnums["format.mp3.Emphasis"] = { __ename__ : true, __constructs__ : ["NoEmphasis","Ms50_15","CCIT_J17","InvalidEmphasis"]
	,NoEmphasis: {_hx_index:0,__enum__:"format.mp3.Emphasis",toString:$estr}
	,Ms50_15: {_hx_index:1,__enum__:"format.mp3.Emphasis",toString:$estr}
	,CCIT_J17: {_hx_index:2,__enum__:"format.mp3.Emphasis",toString:$estr}
	,InvalidEmphasis: {_hx_index:3,__enum__:"format.mp3.Emphasis",toString:$estr}
};
format_mp3_Emphasis.__empty_constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
var format_mp3_FrameType = $hxEnums["format.mp3.FrameType"] = { __ename__ : true, __constructs__ : ["FT_MP3","FT_NONE"]
	,FT_MP3: {_hx_index:0,__enum__:"format.mp3.FrameType",toString:$estr}
	,FT_NONE: {_hx_index:1,__enum__:"format.mp3.FrameType",toString:$estr}
};
format_mp3_FrameType.__empty_constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
var format_mp3_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.bits = new format_tools_BitsInput(i);
	this.samples = 0;
	this.sampleSize = 0;
	this.any_read = false;
};
$hxClasses["format.mp3.Reader"] = format_mp3_Reader;
format_mp3_Reader.__name__ = "format.mp3.Reader";
format_mp3_Reader.prototype = {
	skipID3v2: function() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		var size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	,seekFrame: function() {
		var found = false;
		try {
			var b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format_mp3_FrameType.FT_MP3;
					}
				}
			}
		} catch( ex ) {
			var ex1 = ((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex;
			if(((ex1) instanceof haxe_io_Eof)) {
				var ex2 = ex1;
				return format_mp3_FrameType.FT_NONE;
			} else {
				throw ex;
			}
		}
	}
	,readFrames: function() {
		var frames = [];
		var ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format_mp3_FrameType.FT_NONE)) {
				break;
			}
			switch(ft._hx_index) {
			case 0:
				var f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	,readFrameHeader: function() {
		var version = this.bits.readBits(2);
		var layer = this.bits.readBits(2);
		var hasCrc = !this.bits.readBit();
		if(version == format_mp3_MPEG.Reserved || layer == format_mp3_CLayer.LReserved) {
			return null;
		}
		var bitrateIdx = this.bits.readBits(4);
		var bitrate = format_mp3_Tools.getBitrate(version,layer,bitrateIdx);
		var samplingRateIdx = this.bits.readBits(2);
		var samplingRate = format_mp3_Tools.getSamplingRate(version,samplingRateIdx);
		var isPadded = this.bits.readBit();
		var privateBit = this.bits.readBit();
		if(bitrate == format_mp3_Bitrate.BR_Bad || bitrate == format_mp3_Bitrate.BR_Free || samplingRate == format_mp3_SamplingRate.SR_Bad) {
			return null;
		}
		var channelMode = this.bits.readBits(2);
		var isIntensityStereo = this.bits.readBit();
		var isMSStereo = this.bits.readBit();
		var isCopyrighted = this.bits.readBit();
		var isOriginal = this.bits.readBit();
		var emphasis = this.bits.readBits(2);
		var crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format_mp3_MPEG.num2Enum(version), layer : format_mp3_CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format_mp3_CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format_mp3_CEmphasis.num2Enum(emphasis)};
	}
	,readFrame: function() {
		var header = this.readFrameHeader();
		if(header == null || format_mp3_Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			var data = this.i.read(format_mp3_Tools.getSampleDataSizeHdr(header));
			this.samples += format_mp3_Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				return null;
			} else {
				throw e;
			}
		}
	}
	,read: function() {
		var fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
	,__class__: format_mp3_Reader
};
var format_mp3_Tools = function() { };
$hxClasses["format.mp3.Tools"] = format_mp3_Tools;
format_mp3_Tools.__name__ = "format.mp3.Tools";
format_mp3_Tools.getBitrate = function(mpegVersion,layerIdx,bitrateIdx) {
	if(mpegVersion == format_mp3_MPEG.Reserved || layerIdx == format_mp3_CLayer.LReserved) {
		return format_mp3_Bitrate.BR_Bad;
	}
	return (mpegVersion == 3 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
};
format_mp3_Tools.getSamplingRate = function(mpegVersion,samplingRateIdx) {
	return format_mp3_MPEG.SamplingRates[mpegVersion][samplingRateIdx];
};
format_mp3_Tools.isInvalidFrameHeader = function(hdr) {
	if(!(hdr.version == format_mp3_MPEGVersion.MPEG_Reserved || hdr.layer == format_mp3_Layer.LayerReserved || hdr.bitrate == format_mp3_Bitrate.BR_Bad || hdr.bitrate == format_mp3_Bitrate.BR_Free)) {
		return hdr.samplingRate == format_mp3_SamplingRate.SR_Bad;
	} else {
		return true;
	}
};
format_mp3_Tools.getSampleDataSize = function(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
	return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
};
format_mp3_Tools.getSampleDataSizeHdr = function(hdr) {
	return format_mp3_Tools.getSampleDataSize(format_mp3_MPEG.enum2Num(hdr.version),format_mp3_MPEG.bitrateEnum2Num(hdr.bitrate),format_mp3_MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
};
format_mp3_Tools.getSampleCount = function(mpegVersion) {
	if(mpegVersion == 3) {
		return 1152;
	} else {
		return 576;
	}
};
format_mp3_Tools.getSampleCountHdr = function(hdr) {
	return format_mp3_Tools.getSampleCount(format_mp3_MPEG.enum2Num(hdr.version));
};
format_mp3_Tools.getFrameInfo = function(fr) {
	return Std.string(fr.header.version) + ", " + Std.string(fr.header.layer) + ", " + Std.string(fr.header.channelMode) + ", " + Std.string(fr.header.samplingRate) + " Hz, " + Std.string(fr.header.bitrate) + " kbps " + "Emphasis: " + Std.string(fr.header.emphasis) + ", " + (fr.header.hasCrc ? "(CRC) " : "") + (fr.header.isPadded ? "(Padded) " : "") + (fr.header.isIntensityStereo ? "(Intensity Stereo) " : "") + (fr.header.isMSStereo ? "(MS Stereo) " : "") + (fr.header.isCopyrighted ? "(Copyrighted) " : "") + (fr.header.isOriginal ? "(Original) " : "");
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"]
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"]
	,CEnd: {_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 80;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 78;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b3 = 71;
		if(this.i.readByte() != b3) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b4 = 13;
		if(this.i.readByte() != b4) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b5 = 10;
		if(this.i.readByte() != b5) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b6 = 26;
		if(this.i.readByte() != b6) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b7 = 10;
		if(this.i.readByte() != b7) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp1 = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp1;
			var tmp2 = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp2;
			var tmp3 = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp3;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp4 = (c_crc ^ b.bytes[i]) & 255;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp4;
			}
			if((c_crc ^ -1) != crc) {
				throw new js__$Boot_HaxeError("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw new js__$Boot_HaxeError("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.filter = function(data,x,y,stride,prev,p,numChannels) {
	if(numChannels == null) {
		numChannels = 4;
	}
	var b = y == 0 ? 0 : data.b[p - stride];
	var c = x == 0 || y == 0 ? 0 : data.b[p - stride - numChannels];
	var k = prev + b - c;
	var pa = k - prev;
	if(pa < 0) {
		pa = -pa;
	}
	var pb = k - b;
	if(pb < 0) {
		pb = -pb;
	}
	var pc = k - c;
	if(pc < 0) {
		pc = -pc;
	}
	if(pa <= pb && pa <= pc) {
		return prev;
	} else if(pb <= pc) {
		return b;
	} else {
		return c;
	}
};
format_png_Tools.reverseBytes = function(b) {
	var p = 0;
	var _g = 0;
	var _g1 = b.length >> 2;
	while(_g < _g1) {
		var i = _g++;
		var b1 = b.b[p];
		var g = b.b[p + 1];
		var r = b.b[p + 2];
		var a = b.b[p + 3];
		b.b[p++] = a;
		b.b[p++] = r;
		b.b[p++] = g;
		b.b[p++] = b1;
	}
};
format_png_Tools.extractGrey = function(d) {
	var h = format_png_Tools.getHeader(d);
	var grey = new haxe_io_Bytes(new ArrayBuffer(h.width * h.height));
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var _g1 = h.color;
	if(_g1._hx_index == 0) {
		var alpha = _g1.alpha;
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var rinc = alpha ? 2 : 1;
		var _g11 = 0;
		var _g2 = h.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				var _g12 = 0;
				var _g21 = width;
				while(_g12 < _g21) {
					var x = _g12++;
					var v = data.b[r];
					r += rinc;
					grey.b[w++] = v;
				}
				break;
			case 1:
				var cv = 0;
				var _g13 = 0;
				var _g22 = width;
				while(_g13 < _g22) {
					var x1 = _g13++;
					cv += data.b[r];
					r += rinc;
					grey.b[w++] = cv;
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width;
				var _g14 = 0;
				var _g23 = width;
				while(_g14 < _g23) {
					var x2 = _g14++;
					var v1 = data.b[r] + grey.b[w - stride1];
					r += rinc;
					grey.b[w++] = v1;
				}
				break;
			case 3:
				var cv1 = 0;
				var stride2 = y == 0 ? 0 : width;
				var _g15 = 0;
				var _g24 = width;
				while(_g15 < _g24) {
					var x3 = _g15++;
					cv1 = data.b[r] + (cv1 + grey.b[w - stride2] >> 1) & 255;
					r += rinc;
					grey.b[w++] = cv1;
				}
				break;
			case 4:
				var stride3 = width;
				var cv2 = 0;
				var _g16 = 0;
				var _g25 = width;
				while(_g16 < _g25) {
					var x4 = _g16++;
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b1 = y == 0 ? 0 : grey.b[w - stride3];
					var c1 = x4 == 0 || y == 0 ? 0 : grey.b[w - stride3 - numChannels];
					var k = cv2 + b1 - c1;
					var pa = k - cv2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b1;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c1;
					if(pc < 0) {
						pc = -pc;
					}
					cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b1 : c1) + data.b[r] & 255;
					r += rinc;
					grey.b[w++] = cv2;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
		}
	} else {
		throw new js__$Boot_HaxeError("Unsupported color mode");
	}
	return grey;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g1 = h.color;
	switch(_g1._hx_index) {
	case 0:
		var alpha = _g1.alpha;
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val1 = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val1;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g11 = 0;
		var _g2 = h.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g12 = 0;
					var _g21 = width;
					while(_g12 < _g21) {
						var x = _g12++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g13 = 0;
					var _g22 = width;
					while(_g13 < _g22) {
						var x1 = _g13++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g14 = 0;
					var _g23 = width;
					while(_g14 < _g23) {
						var x2 = _g14++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g15 = 0;
					var _g24 = width;
					while(_g15 < _g24) {
						var x3 = _g15++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g16 = 0;
					var _g25 = width;
					while(_g16 < _g25) {
						var x4 = _g16++;
						var v2 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride1];
					}
				} else {
					var _g17 = 0;
					var _g26 = width;
					while(_g17 < _g26) {
						var x5 = _g17++;
						var v3 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride2 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g18 = 0;
					var _g27 = width;
					while(_g18 < _g27) {
						var x6 = _g18++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g19 = 0;
					var _g28 = width;
					while(_g19 < _g28) {
						var x7 = _g19++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride3 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g110 = 0;
					var _g29 = width;
					while(_g110 < _g29) {
						var x8 = _g110++;
						var b1 = y == 0 ? 0 : bgra.b[w - stride3];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k = cv2 + b1 - c1;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b1;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c1;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b1 : c1) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b2 = y == 0 ? 0 : bgra.b[w - stride3];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k1 = ca2 + b2 - c2;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b2;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c2;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b2 : c2) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g111 = 0;
					var _g210 = width;
					while(_g111 < _g210) {
						var x9 = _g111++;
						var b3 = y == 0 ? 0 : bgra.b[w - stride3];
						var c3 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k2 = cv2 + b3 - c3;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b3;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c3;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b3 : c3) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha1 = _g1.alpha;
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width1 = h.width;
		var stride4 = (alpha1 ? 4 : 3) * width1 + 1;
		if(data.length < h.height * stride4) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha1) {
			var _g1_head1 = d.h;
			while(_g1_head1 != null) {
				var val2 = _g1_head1.item;
				_g1_head1 = _g1_head1.next;
				var t1 = val2;
				if(t1._hx_index == 4) {
					if(t1.id == "tRNS") {
						var data2 = t1.data;
						if(data2.length >= 6) {
							alphaRed = data2.b[1];
							alphaGreen = data2.b[3];
							alphaBlue = data2.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca3 = 0;
		var _g112 = 0;
		var _g211 = h.height;
		while(_g112 < _g211) {
			var y1 = _g112++;
			var f1 = data.b[r++];
			switch(f1) {
			case 0:
				if(alpha1) {
					var _g113 = 0;
					var _g212 = width1;
					while(_g113 < _g212) {
						var x10 = _g113++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g114 = 0;
					var _g213 = width1;
					while(_g114 < _g213) {
						var x11 = _g114++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g115 = 0;
					var _g214 = width1;
					while(_g115 < _g214) {
						var x12 = _g115++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca3 += data.b[r + 3];
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g116 = 0;
					var _g215 = width1;
					while(_g116 < _g215) {
						var x13 = _g116++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride5 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g117 = 0;
					var _g216 = width1;
					while(_g117 < _g216) {
						var x14 = _g117++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride5];
						++w;
						r += 4;
					}
				} else {
					var _g118 = 0;
					var _g217 = width1;
					while(_g118 < _g217) {
						var x15 = _g118++;
						cb = data.b[r + 2] + bgra.b[w - stride5];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride5];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride5];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				var stride6 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g119 = 0;
					var _g218 = width1;
					while(_g119 < _g218) {
						var x16 = _g119++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr;
						ca3 = data.b[r + 3] + (ca3 + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g120 = 0;
					var _g219 = width1;
					while(_g120 < _g219) {
						var x17 = _g120++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride7 = width1 * 4 * flipY1;
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g121 = 0;
					var _g220 = width1;
					while(_g121 < _g220) {
						var x18 = _g121++;
						var b4 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c4 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k3 = cb + b4 - c4;
						var pa3 = k3 - cb;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b4;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c4;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						cb = (pa3 <= pb3 && pa3 <= pc3 ? cb : pb3 <= pc3 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c5 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k4 = cg + b5 - c5;
						var pa4 = k4 - cg;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b5;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c5;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cg = (pa4 <= pb4 && pa4 <= pc4 ? cg : pb4 <= pc4 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c6 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k5 = cr + b6 - c6;
						var pa5 = k5 - cr;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b6;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c6;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cr = (pa5 <= pb5 && pa5 <= pc5 ? cr : pb5 <= pc5 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b7 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c7 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k6 = ca3 + b7 - c7;
						var pa6 = k6 - ca3;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b7;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c7;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						ca3 = (pa6 <= pb6 && pa6 <= pc6 ? ca3 : pb6 <= pc6 ? b7 : c7) + data.b[r + 3] & 255;
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g122 = 0;
					var _g221 = width1;
					while(_g122 < _g221) {
						var x19 = _g122++;
						var b8 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c8 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k7 = cb + b8 - c8;
						var pa7 = k7 - cb;
						if(pa7 < 0) {
							pa7 = -pa7;
						}
						var pb7 = k7 - b8;
						if(pb7 < 0) {
							pb7 = -pb7;
						}
						var pc7 = k7 - c8;
						if(pc7 < 0) {
							pc7 = -pc7;
						}
						cb = (pa7 <= pb7 && pa7 <= pc7 ? cb : pb7 <= pc7 ? b8 : c8) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b9 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c9 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k8 = cg + b9 - c9;
						var pa8 = k8 - cg;
						if(pa8 < 0) {
							pa8 = -pa8;
						}
						var pb8 = k8 - b9;
						if(pb8 < 0) {
							pb8 = -pb8;
						}
						var pc8 = k8 - c9;
						if(pc8 < 0) {
							pc8 = -pc8;
						}
						cg = (pa8 <= pb8 && pa8 <= pc8 ? cg : pb8 <= pc8 ? b9 : c9) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b10 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c10 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k9 = cr + b10 - c10;
						var pa9 = k9 - cr;
						if(pa9 < 0) {
							pa9 = -pa9;
						}
						var pb9 = k9 - b10;
						if(pb9 < 0) {
							pb9 = -pb9;
						}
						var pc9 = k9 - c10;
						if(pc9 < 0) {
							pc9 = -pc9;
						}
						cr = (pa9 <= pb9 && pa9 <= pc9 ? cr : pb9 <= pc9 ? b10 : c10) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f1);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw new js__$Boot_HaxeError("PNG Palette is missing");
		}
		var alpha2 = null;
		var _g1_head2 = d.h;
		while(_g1_head2 != null) {
			var val3 = _g1_head2.item;
			_g1_head2 = _g1_head2.next;
			var t2 = val3;
			if(t2._hx_index == 4) {
				if(t2.id == "tRNS") {
					var data3 = t2.data;
					alpha2 = data3;
					break;
				}
			}
		}
		if(alpha2 != null && alpha2.length < 1 << h.colbits) {
			var alpha21 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha21.blit(0,alpha2,0,alpha2.length);
			alpha21.fill(alpha2.length,alpha21.length - alpha2.length,255);
			alpha2 = alpha21;
		}
		var width2 = h.width;
		var stride8 = Math.ceil(width2 * h.colbits / 8) + 1;
		if(data.length < h.height * stride8) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var tmp = h.width * h.colbits;
		var rline = tmp >> 3;
		var _g222 = 0;
		var _g3 = h.height;
		while(_g222 < _g3) {
			var y2 = _g222++;
			var f2 = data.b[r++];
			if(f2 == 0) {
				r += rline;
				continue;
			}
			switch(f2) {
			case 1:
				var c11 = 0;
				var _g223 = 0;
				var _g31 = width2;
				while(_g223 < _g31) {
					var x20 = _g223++;
					var v4 = data.b[r];
					c11 += v4;
					data.b[r++] = c11 & 255;
				}
				break;
			case 2:
				var stride9 = y2 == 0 ? 0 : rline + 1;
				var _g224 = 0;
				var _g32 = width2;
				while(_g224 < _g32) {
					var x21 = _g224++;
					var v5 = data.b[r];
					data.b[r] = v5 + data.b[r - stride9];
					++r;
				}
				break;
			case 3:
				var c12 = 0;
				var stride10 = y2 == 0 ? 0 : rline + 1;
				var _g225 = 0;
				var _g33 = width2;
				while(_g225 < _g33) {
					var x22 = _g225++;
					var v6 = data.b[r];
					c12 = v6 + (c12 + data.b[r - stride10] >> 1) & 255;
					data.b[r++] = c12;
				}
				break;
			case 4:
				var stride11 = rline + 1;
				var c13 = 0;
				var _g226 = 0;
				var _g34 = width2;
				while(_g226 < _g34) {
					var x23 = _g226++;
					var v7 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b11 = y2 == 0 ? 0 : data.b[r - stride11];
					var c14 = x23 == 0 || y2 == 0 ? 0 : data.b[r - stride11 - numChannels];
					var k10 = c13 + b11 - c14;
					var pa10 = k10 - c13;
					if(pa10 < 0) {
						pa10 = -pa10;
					}
					var pb10 = k10 - b11;
					if(pb10 < 0) {
						pb10 = -pb10;
					}
					var pc10 = k10 - c14;
					if(pc10 < 0) {
						pc10 = -pc10;
					}
					c13 = (pa10 <= pb10 && pa10 <= pc10 ? c13 : pb10 <= pc10 ? b11 : c14) + v7 & 255;
					data.b[r++] = c13;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f2);
			}
		}
		var r1 = 0;
		if(h.colbits == 8) {
			var _g4 = 0;
			var _g5 = h.height;
			while(_g4 < _g5) {
				var y3 = _g4++;
				++r1;
				var _g41 = 0;
				var _g51 = h.width;
				while(_g41 < _g51) {
					var x24 = _g41++;
					var c15 = data.b[r1++];
					bgra.b[w++] = pal.b[c15 * 3 + 2];
					bgra.b[w++] = pal.b[c15 * 3 + 1];
					bgra.b[w++] = pal.b[c15 * 3];
					bgra.b[w++] = alpha2 != null ? alpha2.b[c15] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g42 = 0;
			var _g52 = h.height;
			while(_g42 < _g52) {
				var y4 = _g42++;
				++r1;
				var bits = 0;
				var nbits = 0;
				var _g43 = 0;
				var _g53 = h.width;
				while(_g43 < _g53) {
					var x25 = _g43++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r1++];
						nbits += 8;
					}
					var c16 = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c16 * 3 + 2];
					bgra.b[w++] = pal.b[c16 * 3 + 1];
					bgra.b[w++] = pal.b[c16 * 3];
					bgra.b[w++] = alpha2 != null ? alpha2.b[c16] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
format_png_Tools.buildGrey = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgb.b[w++] = 0;
		var _g2 = 0;
		var _g11 = width;
		while(_g2 < _g11) {
			var x = _g2++;
			rgb.b[w++] = data.b[r++];
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColGrey(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildIndexed = function(width,height,data,palette,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgb.b[w++] = 0;
		var _g2 = 0;
		var _g11 = width;
		while(_g2 < _g11) {
			var x = _g2++;
			rgb.b[w++] = data.b[r++];
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColIndexed, interlaced : false}));
	l.add(format_png_Chunk.CPalette(palette));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildRGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height * 3 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgb.b[w++] = 0;
		var _g2 = 0;
		var _g11 = width;
		while(_g2 < _g11) {
			var x = _g2++;
			rgb.b[w++] = data.b[r + 2];
			rgb.b[w++] = data.b[r + 1];
			rgb.b[w++] = data.b[r];
			r += 3;
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32ARGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgba.b[w++] = 0;
		var _g2 = 0;
		var _g11 = width;
		while(_g2 < _g11) {
			var x = _g2++;
			rgba.b[w++] = data.b[r + 1];
			rgba.b[w++] = data.b[r + 2];
			rgba.b[w++] = data.b[r + 3];
			rgba.b[w++] = data.b[r];
			r += 4;
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32BGRA = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgba.b[w++] = 0;
		var _g2 = 0;
		var _g11 = width;
		while(_g2 < _g11) {
			var x = _g2++;
			rgba.b[w++] = data.b[r + 2];
			rgba.b[w++] = data.b[r + 1];
			rgba.b[w++] = data.b[r];
			rgba.b[w++] = data.b[r + 3];
			r += 4;
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
var format_png_Writer = function(o) {
	this.o = o;
	o.set_bigEndian(true);
};
$hxClasses["format.png.Writer"] = format_png_Writer;
format_png_Writer.__name__ = "format.png.Writer";
format_png_Writer.prototype = {
	write: function(png) {
		var b = 137;
		this.o.writeByte(b);
		var b1 = 80;
		this.o.writeByte(b1);
		var b2 = 78;
		this.o.writeByte(b2);
		var b3 = 71;
		this.o.writeByte(b3);
		var b4 = 13;
		this.o.writeByte(b4);
		var b5 = 10;
		this.o.writeByte(b5);
		var b6 = 26;
		this.o.writeByte(b6);
		var b7 = 10;
		this.o.writeByte(b7);
		var _g_head = png.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			switch(c._hx_index) {
			case 0:
				this.writeChunk("IEND",new haxe_io_Bytes(new ArrayBuffer(0)));
				break;
			case 1:
				var h = c.h;
				var b8 = new haxe_io_BytesOutput();
				b8.set_bigEndian(true);
				b8.writeInt32(h.width);
				b8.writeInt32(h.height);
				b8.writeByte(h.colbits);
				var _g = h.color;
				var tmp;
				switch(_g._hx_index) {
				case 0:
					var alpha = _g.alpha;
					tmp = alpha ? 4 : 0;
					break;
				case 1:
					var alpha1 = _g.alpha;
					tmp = alpha1 ? 6 : 2;
					break;
				case 2:
					tmp = 3;
					break;
				}
				b8.writeByte(tmp);
				b8.writeByte(0);
				b8.writeByte(0);
				b8.writeByte(h.interlaced ? 1 : 0);
				this.writeChunk("IHDR",b8.getBytes());
				break;
			case 2:
				var d = c.b;
				this.writeChunk("IDAT",d);
				break;
			case 3:
				var b9 = c.b;
				this.writeChunk("PLTE",b9);
				break;
			case 4:
				var data = c.data;
				var id = c.id;
				this.writeChunk(id,data);
				break;
			}
		}
	}
	,writeChunk: function(id,data) {
		this.o.writeInt32(data.length);
		this.o.writeString(id);
		this.o.write(data);
		var crc_crc = -1;
		var tmp = (crc_crc ^ HxOverrides.cca(id,0)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var tmp1 = (crc_crc ^ HxOverrides.cca(id,1)) & 255;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp1;
		var tmp2 = (crc_crc ^ HxOverrides.cca(id,2)) & 255;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp2;
		var tmp3 = (crc_crc ^ HxOverrides.cca(id,3)) & 255;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp3;
		var b = data.b.bufferValue;
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			var tmp4 = (crc_crc ^ b.bytes[i]) & 255;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
			crc_crc = crc_crc >>> 8 ^ tmp4;
		}
		this.o.writeInt32(crc_crc ^ -1);
	}
	,__class__: format_png_Writer
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__ : true, __constructs__ : ["BottomLeft","BottomRight","TopLeft","TopRight"]
	,BottomLeft: {_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__ : true, __constructs__ : ["NoImage","UncompressedColorMapped","UncompressedTrueColor","UncompressedBlackAndWhite","RunLengthColorMapped","RunLengthTrueColor","RunLengthBlackAndWhite","Unknown"]
	,NoImage: {_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr}; },$_.__params__ = ["type"],$_)
};
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.tga.Reader"] = format_tga_Reader;
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw new js__$Boot_HaxeError("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_BitsInput = function(i) {
	this.i = i;
	this.nbits = 0;
	this.bits = 0;
};
$hxClasses["format.tools.BitsInput"] = format_tools_BitsInput;
format_tools_BitsInput.__name__ = "format.tools.BitsInput";
format_tools_BitsInput.prototype = {
	readBits: function(n) {
		if(this.nbits >= n) {
			var c = this.nbits - n;
			var k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		var k1 = this.i.readByte();
		if(this.nbits >= 24) {
			if(n > 31) {
				throw new js__$Boot_HaxeError("Bits error");
			}
			var c1 = 8 + this.nbits - n;
			var d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c1 | k1 << c1;
			this.bits = k1;
			this.nbits = c1;
			return d;
		}
		this.bits = this.bits << 8 | k1;
		this.nbits += 8;
		return this.readBits(n);
	}
	,readBit: function() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	,reset: function() {
		this.nbits = 0;
	}
	,__class__: format_tools_BitsInput
};
var format_tools_Deflate = function() { };
$hxClasses["format.tools.Deflate"] = format_tools_Deflate;
format_tools_Deflate.__name__ = "format.tools.Deflate";
format_tools_Deflate.run = function(b,level) {
	if(level == null) {
		level = 9;
	}
	return haxe_zip_Compress.run(b,level);
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var format_wav_WAVEFormat = $hxEnums["format.wav.WAVEFormat"] = { __ename__ : true, __constructs__ : ["WF_PCM"]
	,WF_PCM: {_hx_index:0,__enum__:"format.wav.WAVEFormat",toString:$estr}
};
format_wav_WAVEFormat.__empty_constructs__ = [format_wav_WAVEFormat.WF_PCM];
var format_wav_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.wav.Reader"] = format_wav_Reader;
format_wav_Reader.__name__ = "format.wav.Reader";
format_wav_Reader.prototype = {
	readInt: function() {
		return this.i.readInt32();
	}
	,read: function() {
		if(this.i.readString(4) != "RIFF") {
			throw new js__$Boot_HaxeError("RIFF header expected");
		}
		var len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw new js__$Boot_HaxeError("WAVE signature not found");
		}
		var fmt = this.i.readString(4);
		_hx_loop1: while(fmt != "fmt ") switch(fmt) {
		case "JUNK":
			var junkLen = this.i.readInt32();
			this.i.read(junkLen);
			fmt = this.i.readString(4);
			break;
		case "bext":
			var bextLen = this.i.readInt32();
			this.i.read(bextLen);
			fmt = this.i.readString(4);
			break;
		default:
			break _hx_loop1;
		}
		if(fmt != "fmt ") {
			throw new js__$Boot_HaxeError("unsupported wave chunk " + fmt);
		}
		var fmtlen = this.i.readInt32();
		var format1;
		switch(this.i.readUInt16()) {
		case 1:case 3:
			format1 = format_wav_WAVEFormat.WF_PCM;
			break;
		default:
			throw new js__$Boot_HaxeError("only PCM (uncompressed) WAV files are supported");
		}
		var channels = this.i.readUInt16();
		var samplingRate = this.i.readInt32();
		var byteRate = this.i.readInt32();
		var blockAlign = this.i.readUInt16();
		var bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		var nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw new js__$Boot_HaxeError("expected data subchunk");
		}
		var datalen = this.i.readInt32();
		var data;
		try {
			data = this.i.read(datalen);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				throw new js__$Boot_HaxeError("Invalid chunk data length");
			} else {
				throw e;
			}
		}
		var cuePoints = [];
		try {
			while(true) {
				var nextChunk1 = this.i.readString(4);
				if(nextChunk1 == "cue ") {
					this.i.readInt32();
					var nbCuePoints = this.i.readInt32();
					var _g1 = 0;
					var _g2 = nbCuePoints;
					while(_g1 < _g2) {
						var _ = _g1++;
						var cueId = this.i.readInt32();
						this.i.readInt32();
						this.i.readString(4);
						this.i.readInt32();
						this.i.readInt32();
						var cueSampleOffset = this.i.readInt32();
						cuePoints.push({ id : cueId, sampleOffset : cueSampleOffset});
					}
				} else {
					this.i.read(this.i.readInt32());
				}
			}
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof haxe_io_Eof)) {
				var e5 = e4;
			} else {
				throw e3;
			}
		}
		return { header : { format : format1, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data, cuePoints : cuePoints};
	}
	,__class__: format_wav_Reader
};
var h2d_Object = function(parent) {
	this.alpha = 1.;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.blendMode = h2d_BlendMode.Alpha;
	this.posChanged = parent != null;
	this.set_visible(true);
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Object"] = h2d_Object;
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,getSize: function(out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		this.syncPos();
		this.getBoundsRec(this.parent,out,true);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(this.parent,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		var dx = -this.x;
		var dy = -this.y;
		out.xMin += dx;
		out.xMax += dx;
		out.yMin += dy;
		out.yMax += dy;
		return out;
	}
	,getAbsPos: function() {
		this.syncPos();
		var m = new h2d_col_Matrix();
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
		return m;
	}
	,find: function(f) {
		var v = f(this);
		if(v != null) {
			return v;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var v1 = o.find(f);
			if(v1 != null) {
				return v1;
			}
		}
		return null;
	}
	,findAll: function(f,arr) {
		if(arr == null) {
			arr = [];
		}
		var v = f(this);
		if(v != null) {
			arr.push(v);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	,set_filter: function(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c1 = this.children[0];
			if(c1.visible) {
				c1.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c2 = _g11[_g2];
			++_g2;
			if(!c2.visible) {
				continue;
			}
			c2.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x;
			var y;
			var x1 = dx * this.matA + dy * this.matC + this.absX;
			var y1 = dx * this.matB + dy * this.matD + this.absY;
			if(x1 < out.xMin) {
				out.xMin = x1;
			}
			if(x1 > out.xMax) {
				out.xMax = x1;
			}
			if(y1 < out.yMin) {
				out.yMin = y1;
			}
			if(y1 > out.yMax) {
				out.yMax = y1;
			}
			var x2 = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y2 = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x2 < out.xMin) {
				out.xMin = x2;
			}
			if(x2 > out.xMax) {
				out.xMax = x2;
			}
			if(y2 < out.yMin) {
				out.yMin = y2;
			}
			if(y2 > out.yMax) {
				out.yMax = y2;
			}
			var x3 = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y3 = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x3 < out.xMin) {
				out.xMin = x3;
			}
			if(x3 > out.xMax) {
				out.xMax = x3;
			}
			if(y3 < out.yMin) {
				out.yMin = y3;
			}
			if(y3 > out.yMax) {
				out.yMax = y3;
			}
			var x4 = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y4 = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x4 < out.xMin) {
				out.xMin = x4;
			}
			if(x4 > out.xMax) {
				out.xMax = x4;
			}
			if(y4 < out.yMin) {
				out.yMin = y4;
			}
			if(y4 > out.yMax) {
				out.yMax = y4;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x5 = dx * this.matA + dy * this.matC + rX;
		var y5 = dx * this.matB + dy * this.matD + rY;
		var x6 = x5 * rA + y5 * rC;
		var y6 = x5 * rB + y5 * rD;
		if(x6 < out.xMin) {
			out.xMin = x6;
		}
		if(x6 > out.xMax) {
			out.xMax = x6;
		}
		if(y6 < out.yMin) {
			out.yMin = y6;
		}
		if(y6 > out.yMax) {
			out.yMax = y6;
		}
		x5 = (dx + width) * this.matA + dy * this.matC + rX;
		y5 = (dx + width) * this.matB + dy * this.matD + rY;
		var x7 = x5 * rA + y5 * rC;
		var y7 = x5 * rB + y5 * rD;
		if(x7 < out.xMin) {
			out.xMin = x7;
		}
		if(x7 > out.xMax) {
			out.xMax = x7;
		}
		if(y7 < out.yMin) {
			out.yMin = y7;
		}
		if(y7 > out.yMax) {
			out.yMax = y7;
		}
		x5 = dx * this.matA + (dy + height) * this.matC + rX;
		y5 = dx * this.matB + (dy + height) * this.matD + rY;
		var x8 = x5 * rA + y5 * rC;
		var y8 = x5 * rB + y5 * rD;
		if(x8 < out.xMin) {
			out.xMin = x8;
		}
		if(x8 > out.xMax) {
			out.xMax = x8;
		}
		if(y8 < out.yMin) {
			out.yMin = y8;
		}
		if(y8 > out.yMax) {
			out.yMax = y8;
		}
		x5 = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y5 = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x9 = x5 * rA + y5 * rC;
		var y9 = x5 * rB + y5 * rD;
		if(x9 < out.xMin) {
			out.xMin = x9;
		}
		if(x9 > out.xMax) {
			out.xMax = x9;
		}
		if(y9 < out.yMin) {
			out.yMin = y9;
		}
		if(y9 > out.yMax) {
			out.yMax = y9;
		}
	}
	,getObjectsCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			k += c.getObjectsCount() + 1;
		}
		return k;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return ((p) instanceof h2d_Scene) ? p : null;
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onContentChanged: function() {
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,getMatrix: function(m) {
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,drawTo: function(t) {
		var s = this.getScene();
		var needDispose = s == null;
		if(s == null) {
			s = new h2d_Scene();
		}
		s.drawImplTo(this,[t]);
		if(needDispose) {
			s.dispose();
			this.onRemove();
		}
	}
	,drawToTextures: function(texs,outputs) {
		var s = this.getScene();
		var needDispose = s == null;
		if(s == null) {
			s = new h2d_Scene();
		}
		s.drawImplTo(this,texs,outputs);
		if(needDispose) {
			s.dispose();
			this.onRemove();
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr1 = Math.cos(this.rotation);
				var sr1 = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr1;
				var tmpB = this.scaleX * sr1;
				var tmpC = this.scaleY * -sr1;
				var tmpD = this.scaleY * cr1;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
		return;
	}
	,clipBounds: function(ctx,bounds) {
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			matA = this.matA * f1.x + this.matB * f1.y;
			matB = this.matA * f2.x + this.matB * f2.y;
			matC = this.matC * f1.x + this.matD * f1.y;
			matD = this.matC * f2.x + this.matD * f2.y;
			absX = this.absX * f1.x + this.absY * f1.y + f1.z;
			absY = this.absX * f2.x + this.absY * f2.y + f2.z;
		} else {
			matA = this.matA;
			matB = this.matB;
			matC = this.matC;
			matD = this.matD;
			absX = this.absX;
			absY = this.absY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x2 = bounds.xMax;
		var y2 = bounds.yMin;
		var x3 = x2 * matA + y2 * matC + absX;
		var y3 = x2 * matB + y2 * matD + absY;
		if(x3 < view.xMin) {
			view.xMin = x3;
		}
		if(x3 > view.xMax) {
			view.xMax = x3;
		}
		if(y3 < view.yMin) {
			view.yMin = y3;
		}
		if(y3 > view.yMax) {
			view.yMax = y3;
		}
		var x4 = bounds.xMin;
		var y4 = bounds.yMax;
		var x5 = x4 * matA + y4 * matC + absX;
		var y5 = x4 * matB + y4 * matD + absY;
		if(x5 < view.xMin) {
			view.xMin = x5;
		}
		if(x5 > view.xMax) {
			view.xMax = x5;
		}
		if(y5 < view.yMin) {
			view.yMin = y5;
		}
		if(y5 > view.yMax) {
			view.yMax = y5;
		}
		var x6 = bounds.xMax;
		var y6 = bounds.yMax;
		var x7 = x6 * matA + y6 * matC + absX;
		var y7 = x6 * matB + y6 * matD + absY;
		if(x7 < view.xMin) {
			view.xMin = x7;
		}
		if(x7 > view.xMax) {
			view.xMax = x7;
		}
		if(y7 < view.yMin) {
			view.yMin = y7;
		}
		if(y7 > view.yMax) {
			view.yMax = y7;
		}
		if(view.xMin < ctx.curX) {
			view.xMin = ctx.curX;
		}
		if(view.yMin < ctx.curY) {
			view.yMin = ctx.curY;
		}
		if(view.xMax > ctx.curX + ctx.curWidth) {
			view.xMax = ctx.curX + ctx.curWidth;
		}
		if(view.yMax > ctx.curY + ctx.curHeight) {
			view.yMax = ctx.curY + ctx.curHeight;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x8 = sxMin;
		var y8 = syMin;
		x8 -= absX;
		y8 -= absY;
		var x9 = (x8 * matD - y8 * matC) * invDet;
		var y9 = (-x8 * matB + y8 * matA) * invDet;
		if(x9 < view.xMin) {
			view.xMin = x9;
		}
		if(x9 > view.xMax) {
			view.xMax = x9;
		}
		if(y9 < view.yMin) {
			view.yMin = y9;
		}
		if(y9 > view.yMax) {
			view.yMax = y9;
		}
		var x10 = sxMax;
		var y10 = syMin;
		x10 -= absX;
		y10 -= absY;
		var x11 = (x10 * matD - y10 * matC) * invDet;
		var y11 = (-x10 * matB + y10 * matA) * invDet;
		if(x11 < view.xMin) {
			view.xMin = x11;
		}
		if(x11 > view.xMax) {
			view.xMax = x11;
		}
		if(y11 < view.yMin) {
			view.yMin = y11;
		}
		if(y11 > view.yMax) {
			view.yMax = y11;
		}
		var x12 = sxMin;
		var y12 = syMax;
		x12 -= absX;
		y12 -= absY;
		var x13 = (x12 * matD - y12 * matC) * invDet;
		var y13 = (-x12 * matB + y12 * matA) * invDet;
		if(x13 < view.xMin) {
			view.xMin = x13;
		}
		if(x13 > view.xMax) {
			view.xMax = x13;
		}
		if(y13 < view.yMin) {
			view.yMin = y13;
		}
		if(y13 > view.yMax) {
			view.yMax = y13;
		}
		var x14 = sxMax;
		var y14 = syMax;
		x14 -= absX;
		y14 -= absY;
		var x15 = (x14 * matD - y14 * matC) * invDet;
		var y15 = (-x14 * matB + y14 * matA) * invDet;
		if(x15 < view.xMin) {
			view.xMin = x15;
		}
		if(x15 > view.xMax) {
			view.xMax = x15;
		}
		if(y15 < view.yMin) {
			view.yMin = y15;
		}
		if(y15 > view.yMax) {
			view.yMax = y15;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a1 = bounds.yMin;
		var b1 = view.yMin;
		bounds.yMin = a1 < b1 ? b1 : a1;
		var a2 = bounds.xMax;
		var b2 = view.xMax;
		bounds.xMax = a2 > b2 ? b2 : a2;
		var a3 = bounds.yMax;
		var b3 = view.yMax;
		bounds.yMax = a3 > b3 ? b3 : a3;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		var maxExtent = -1.;
		this.filter.sync(ctx,this);
		if(this.filter.autoBounds) {
			maxExtent = this.filter.boundsExtend;
		} else {
			this.filter.getBounds(this,bounds);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		if(maxExtent >= 0) {
			this.getBounds(this,bounds);
			bounds.xMin -= maxExtent;
			bounds.yMin -= maxExtent;
			bounds.xMax += maxExtent;
			bounds.yMax += maxExtent;
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		this.clipBounds(ctx,total);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldA_x = x;
		var oldA_y = y;
		var oldA_z = z;
		var oldA_w = w;
		var _this1 = shader.filterMatrixB__;
		var x1 = _this1.x;
		var y1 = _this1.y;
		var z1 = _this1.z;
		var w1 = _this1.w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldB_x = x1;
		var oldB_y = y1;
		var oldB_z = z1;
		var oldB_w = w1;
		var oldF = ctx.inFilter;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet;
		var invB = -this.matB * invDet;
		var invC = -this.matC * invDet;
		var invD = this.matA * invDet;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this2 = shader.filterMatrixA__;
		var x2 = invA;
		var y2 = invC;
		var z2 = invX;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z2;
		_this2.w = 1.;
		var _this3 = shader.filterMatrixB__;
		var x3 = invB;
		var y3 = invD;
		var z3 = invY;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this3.x = x3;
		_this3.y = y3;
		_this3.z = z3;
		_this3.w = 1.;
		ctx.globalAlpha = 1;
		this.draw(ctx);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.drawRec(ctx);
		}
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin;
		finalTile.dy = yMin;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != prev && finalTile != null) {
			finalTile.dx += xMin;
			finalTile.dy += yMin;
		}
		var _this4 = shader.filterMatrixA__;
		_this4.x = oldA_x;
		_this4.y = oldA_y;
		_this4.z = oldA_z;
		_this4.w = oldA_w;
		var _this5 = shader.filterMatrixB__;
		_this5.x = oldB_x;
		_this5.y = oldB_y;
		_this5.z = oldB_z;
		_this5.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			if(ctx.front2back) {
				var nchilds = this.children.length;
				var _g2 = 0;
				var _g11 = nchilds;
				while(_g2 < _g11) {
					var i = _g2++;
					this.children[nchilds - 1 - i].drawRec(ctx);
				}
				this.draw(ctx);
			} else {
				this.draw(ctx);
				var _g3 = 0;
				var _g12 = this.children;
				while(_g3 < _g12.length) {
					var c1 = _g12[_g3];
					++_g3;
					c1.drawRec(ctx);
				}
			}
			ctx.globalAlpha = old;
		}
	}
	,set_x: function(v) {
		this.posChanged = true;
		return this.x = v;
	}
	,set_y: function(v) {
		this.posChanged = true;
		return this.y = v;
	}
	,set_scaleX: function(v) {
		this.posChanged = true;
		return this.scaleX = v;
	}
	,set_scaleY: function(v) {
		this.posChanged = true;
		return this.scaleY = v;
	}
	,set_rotation: function(v) {
		this.posChanged = true;
		return this.rotation = v;
	}
	,move: function(dx,dy) {
		var _g = this;
		var v = _g.x + dx * Math.cos(this.rotation);
		_g.posChanged = true;
		_g.x = v;
		var _g1 = this;
		var v1 = _g1.y + dy * Math.sin(this.rotation);
		_g1.posChanged = true;
		_g1.y = v1;
	}
	,setPosition: function(x,y) {
		this.posChanged = true;
		this.x = x;
		this.posChanged = true;
		this.y = y;
	}
	,rotate: function(v) {
		var _g = this;
		_g.posChanged = true;
		_g.rotation += v;
	}
	,scale: function(v) {
		var _g = this;
		_g.posChanged = true;
		_g.scaleX *= v;
		var _g1 = this;
		_g1.posChanged = true;
		_g1.scaleY *= v;
	}
	,setScale: function(v) {
		this.posChanged = true;
		this.scaleX = v;
		this.posChanged = true;
		this.scaleY = v;
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,getChildIndex: function(o) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	,getObjectByName: function(name) {
		if(this.name == name) {
			return this;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var o = c.getObjectByName(name);
			if(o != null) {
				return o;
			}
		}
		return null;
	}
	,get_numChildren: function() {
		return this.children.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$h2d_$Object(this.children);
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var c1 = c.__name__;
		if(this.name == null) {
			return c1;
		} else {
			return this.name + "(" + c1 + ")";
		}
	}
	,contentChanged: function(s) {
	}
	,constraintSize: function(maxWidth,maxHeight) {
	}
	,__class__: h2d_Object
	,__properties__: {set_filter:"set_filter",set_visible:"set_visible",set_rotation:"set_rotation",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_y:"set_y",set_x:"set_x",get_numChildren:"get_numChildren"}
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	this.color = new h3d_Vector(1,1,1,1);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	set_tileWrap: function(b) {
		return this.tileWrap = b;
	}
	,get_colorAdd: function() {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			return null;
		} else {
			return s.color__;
		}
	}
	,set_colorAdd: function(c) {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			if(c != null) {
				s = this.addShader(new h3d_shader_ColorAdd());
				s.color__ = c;
			}
		} else if(c == null) {
			this.removeShader(s);
		} else {
			s.color__ = c;
		}
		return c;
	}
	,drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,set_colorKey: function(v) {
		var s = this.getShader(h3d_shader_ColorKey);
		if(s == null) {
			if(v != null) {
				s = this.addShader(new h3d_shader_ColorKey(-16777216 | v));
			}
		} else if(v == null) {
			this.removeShader(s);
		} else {
			var _this = s.colorKey__;
			var c = -16777216 | v;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
		}
		return this.colorKey = v;
	}
	,adjustColor: function(col) {
		if(col == null) {
			this.set_colorMatrix(null);
		} else {
			var m = this.get_colorMatrix();
			if(m == null) {
				m = new h3d_Matrix();
				this.set_colorMatrix(m);
			}
			m.identity();
			m.adjustColor(col);
		}
	}
	,get_colorMatrix: function() {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			return null;
		} else {
			return s.matrix__;
		}
	}
	,set_colorMatrix: function(m) {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			if(m != null) {
				s = this.addShader(new h3d_shader_ColorMatrix());
				s.matrix__ = m;
			}
		} else if(m == null) {
			this.removeShader(s);
		} else {
			s.matrix__ = m;
		}
		return m;
	}
	,getDebugShaderCode: function(toHxsl) {
		if(toHxsl == null) {
			toHxsl = true;
		}
		var ctx = this.getScene().ctx;
		var shader = ctx.manager.compileShaders(new hxsl_ShaderList(ctx.baseShader,this.shaders));
		if(toHxsl) {
			var toString = function(s) {
				return hxsl_Printer.shaderToString(s,true);
			};
			return "// vertex:\n" + toString(shader.vertex.data) + "\n\nfragment:\n" + toString(shader.fragment.data);
		} else {
			return h3d_Engine.CURRENT.driver.getNativeShaderCode(shader);
		}
	}
	,getShader: function(stype) {
		if(this.shaders != null) {
			var _g_l = this.shaders;
			var _g_last = null;
			while(_g_l != _g_last) {
				var s = _g_l.s;
				_g_l = _g_l.next;
				var s1 = s;
				var s2 = js_Boot.__downcastCheck(s1,stype) ? s1 : null;
				if(s2 != null) {
					return s2;
				}
			}
		}
		return null;
	}
	,getShaders: function() {
		return new hxsl__$ShaderList_ShaderIterator(this.shaders,null);
	}
	,addShader: function(s) {
		if(s == null) {
			throw new js__$Boot_HaxeError("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
		return;
	}
	,__class__: h2d_Drawable
	,__properties__: $extend(h2d_Object.prototype.__properties__,{set_colorAdd:"set_colorAdd",get_colorAdd:"get_colorAdd",set_colorMatrix:"set_colorMatrix",get_colorMatrix:"get_colorMatrix",set_colorKey:"set_colorKey",set_tileWrap:"set_tileWrap"})
});
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.set_tile(tile);
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = "h2d.Bitmap";
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	set_tileWrap: function(b) {
		if(b && this.tile != null && (this.tile.innerTex.flags & 1 << h3d_mat_TextureFlags.IsNPOT._hx_index) != 0) {
			throw new js__$Boot_HaxeError("Cannot set tileWrap on a non power-of-two texture");
		}
		return this.tileWrap = b;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(this.width == null && this.height == null) {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
			} else {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.width != null ? this.width : this.tile.width * this.height / this.tile.height,this.height != null ? this.height : this.tile.height * this.width / this.tile.width);
			}
		}
	}
	,set_width: function(w) {
		if(this.width == w) {
			return w;
		}
		this.width = w;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return w;
	}
	,set_height: function(h) {
		if(this.height == h) {
			return h;
		}
		this.height = h;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return h;
	}
	,set_tile: function(t) {
		if(this.tile == t) {
			return t;
		}
		this.tile = t;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t;
	}
	,draw: function(ctx) {
		if(this.width == null && this.height == null) {
			this.emitTile(ctx,this.tile);
			return;
		}
		if(this.tile == null) {
			this.set_tile(h2d_Tile.fromColor(16711935));
		}
		var ow = this.tile.width;
		var oh = this.tile.height;
		this.tile.width = this.width != null ? this.width : ow * this.height / oh;
		this.tile.height = this.height != null ? this.height : oh * this.width / ow;
		this.emitTile(ctx,this.tile);
		this.tile.width = ow;
		this.tile.height = oh;
	}
	,__class__: h2d_Bitmap
	,__properties__: $extend(h2d_Drawable.prototype.__properties__,{set_height:"set_height",set_width:"set_width",set_tile:"set_tile"})
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__ : true, __constructs__ : ["None","Alpha","Add","AlphaAdd","SoftAdd","Multiply","AlphaMultiply","Erase","Screen","Sub","Max","Min"]
	,None: {_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = "h2d.Kerning";
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = "h2d.FontChar";
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,clone: function() {
		var c = new h2d_FontChar(this.t.clone(),this.width);
		var k = this.kerning;
		if(k != null) {
			var kc = new h2d_Kerning(k.prevChar,k.offset);
			c.kerning = kc;
			k = k.next;
			while(k != null) {
				var kn = new h2d_Kerning(k.prevChar,k.offset);
				kc = kc.next = kn;
				k = k.next;
			}
		}
		return c;
	}
	,__class__: h2d_FontChar
};
var h2d_FontType = $hxEnums["h2d.FontType"] = { __ename__ : true, __constructs__ : ["BitmapFont","SignedDistanceField"]
	,BitmapFont: {_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr}; },$_.__params__ = ["channel","alphaCutoff","smoothing"],$_)
};
h2d_FontType.__empty_constructs__ = [h2d_FontType.BitmapFont];
var h2d_Font = function(name,size,type) {
	this.offsetY = 0;
	this.offsetX = 0;
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = this.nullChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
	if(name != null) {
		this.tilePath = haxe_io_Path.withExtension(name,"png");
	}
	if(type == null) {
		this.type = h2d_FontType.BitmapFont;
	} else {
		this.type = type;
	}
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = "h2d.Font";
h2d_Font.prototype = {
	getChar: function(code) {
		var c = this.glyphs.h[code];
		if(c == null) {
			c = this.charset.resolveChar(code,this.glyphs);
			if(c == null) {
				c = code == 13 || code == 10 ? this.nullChar : this.defaultChar;
			}
		}
		return c;
	}
	,setOffset: function(x,y) {
		var dx = x - this.offsetX;
		var dy = y - this.offsetY;
		if(dx == 0 && dy == 0) {
			return;
		}
		var g = this.glyphs.iterator();
		while(g.hasNext()) {
			var g1 = g.next();
			g1.t.dx += dx;
			g1.t.dy += dy;
		}
		this.offsetX += dx;
		this.offsetY += dy;
	}
	,clone: function() {
		var f = new h2d_Font(this.name,this.size);
		f.baseLine = this.baseLine;
		f.lineHeight = this.lineHeight;
		f.tile = this.tile.clone();
		f.charset = this.charset;
		f.defaultChar = this.defaultChar.clone();
		f.type = this.type;
		var g = this.glyphs.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var c = this.glyphs.h[g1];
			var c2 = c.clone();
			if(c == this.defaultChar) {
				f.defaultChar = c2;
			}
			f.glyphs.h[g1] = c2;
		}
		return f;
	}
	,resizeTo: function(size) {
		var ratio = size / this.initSize;
		var c = this.glyphs.iterator();
		while(c.hasNext()) {
			var c1 = c.next();
			c1.width *= ratio;
			c1.t.scaleToSize(c1.t.width * ratio,c1.t.height * ratio);
			c1.t.dx *= ratio;
			c1.t.dy *= ratio;
			var k = c1.kerning;
			while(k != null) {
				k.offset *= ratio;
				k = k.next;
			}
		}
		this.lineHeight *= ratio;
		this.baseLine *= ratio;
		this.size = size;
	}
	,hasChar: function(code) {
		return this.glyphs.h[code] != null;
	}
	,dispose: function() {
		this.tile.dispose();
	}
	,__class__: h2d_Font
};
var h2d_GPoint = function() {
};
$hxClasses["h2d.GPoint"] = h2d_GPoint;
h2d_GPoint.__name__ = "h2d.GPoint";
h2d_GPoint.prototype = {
	load: function(x,y,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
	,__class__: h2d_GPoint
};
var hxd_impl__$Serializable_NoSerializeSupport = function() { };
$hxClasses["hxd.impl._Serializable.NoSerializeSupport"] = hxd_impl__$Serializable_NoSerializeSupport;
hxd_impl__$Serializable_NoSerializeSupport.__name__ = "hxd.impl._Serializable.NoSerializeSupport";
hxd_impl__$Serializable_NoSerializeSupport.__isInterface__ = true;
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_prim_Primitive.prototype = {
	triCount: function() {
		if(this.indexes != null) {
			return this.indexes.count / 3 | 0;
		} else if(this.buffer == null) {
			return 0;
		} else {
			return this.buffer.totalVertices() / 3 | 0;
		}
	}
	,vertexCount: function() {
		return 0;
	}
	,getCollider: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,getBounds: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,selectMaterial: function(material) {
	}
	,buildNormalsDisplay: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function() {
	h3d_prim_Primitive.call(this);
	this.buffers = [];
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = "h2d._Graphics.GraphicsContent";
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	addIndex: function(i) {
		this.index.push(i);
		this.indexDirty = true;
	}
	,add: function(x,y,u,v,r,g,b,a) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = y;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = u;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = r;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = g;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = b;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = a;
		this.bufferDirty = true;
	}
	,next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null});
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
		this.indexes = h3d_Indexes.alloc(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.isDisposed()) {
				b.vbuf = h3d_Buffer.ofFloats(b.buf,8,[h3d_BufferFlag.RawFormat]);
			}
			if(b.ibuf == null || b.ibuf.isDisposed()) {
				b.ibuf = h3d_Indexes.alloc(b.idx);
			}
		}
		this.bufferDirty = false;
		this.indexDirty = false;
	}
	,render: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			if(this.bufferDirty) {
				this.buffer.dispose();
				this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				this.indexes.dispose();
				this.indexes = h3d_Indexes.alloc(this.index);
				this.indexDirty = false;
			}
		}
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			engine.renderIndexed(b.vbuf,b.ibuf);
		}
		h3d_prim_Primitive.prototype.render.call(this,engine);
	}
	,flush: function() {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			if(this.bufferDirty) {
				this.buffer.dispose();
				this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				this.indexes.dispose();
				this.indexes = h3d_Indexes.alloc(this.index);
				this.indexDirty = false;
			}
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				b.vbuf.dispose();
			}
			if(b.ibuf != null) {
				b.ibuf.dispose();
			}
			b.vbuf = null;
			b.ibuf = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		this.buffers = [];
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent) {
	this.bevel = 0.25;
	this.my = 0.;
	this.mx = 0.;
	this.md = 1.;
	this.mc = 0.;
	this.mb = 0.;
	this.ma = 1.;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent();
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = "h2d.Graphics";
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g = 0;
		var _g1 = points.length;
		while(_g < _g1) {
			var i = _g++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			var gp = new h2d_GPoint();
			gp.load(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0);
			pts.push(gp);
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			var gp1 = new h2d_GPoint();
			gp1.load(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
			prev = gp1;
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				_this.bufferDirty = true;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				_this1.bufferDirty = true;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					var _this2 = this.content;
					_this2.index.push(this.pindex);
					_this2.indexDirty = true;
					var _this3 = this.content;
					_this3.index.push(this.pindex + 1);
					_this3.indexDirty = true;
					var _this4 = this.content;
					_this4.index.push(pnext);
					_this4.indexDirty = true;
					var _this5 = this.content;
					_this5.index.push(this.pindex + 1);
					_this5.indexDirty = true;
					var _this6 = this.content;
					_this6.index.push(pnext);
					_this6.indexDirty = true;
					var _this7 = this.content;
					_this7.index.push(pnext + 1);
					_this7.indexDirty = true;
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this8 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this8.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this8.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this8.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this8.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this8.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this8.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this8.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this8.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					_this8.bufferDirty = true;
					var _this9 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this9.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this9.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this9.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this9.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this9.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this9.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this9.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this9.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					_this9.bufferDirty = true;
					var _this10 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this10.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this10.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this10.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this10.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this10.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this10.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this10.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this10.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					_this10.bufferDirty = true;
					var _this11 = this.content;
					_this11.index.push(this.pindex);
					_this11.indexDirty = true;
					var _this12 = this.content;
					_this12.index.push(pnext1);
					_this12.indexDirty = true;
					var _this13 = this.content;
					_this13.index.push(this.pindex + 2);
					_this13.indexDirty = true;
					var _this14 = this.content;
					_this14.index.push(this.pindex + 2);
					_this14.indexDirty = true;
					var _this15 = this.content;
					_this15.index.push(pnext1);
					_this15.indexDirty = true;
					var _this16 = this.content;
					_this16.index.push(pnext1 + 1);
					_this16.indexDirty = true;
				} else {
					var _this17 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this17.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this17.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this17.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this17.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this17.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this17.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this17.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this17.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					_this17.bufferDirty = true;
					var _this18 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this18.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this18.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this18.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this18.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this18.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this18.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this18.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this18.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					_this18.bufferDirty = true;
					var _this19 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this19.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this19.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this19.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this19.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this19.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this19.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this19.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this19.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					_this19.bufferDirty = true;
					var _this20 = this.content;
					_this20.index.push(this.pindex + 1);
					_this20.indexDirty = true;
					var _this21 = this.content;
					_this21.index.push(pnext1);
					_this21.indexDirty = true;
					var _this22 = this.content;
					_this22.index.push(this.pindex + 2);
					_this22.indexDirty = true;
					var _this23 = this.content;
					_this23.index.push(this.pindex + 1);
					_this23.indexDirty = true;
					var _this24 = this.content;
					_this24.index.push(pnext1);
					_this24.indexDirty = true;
					var _this25 = this.content;
					_this25.index.push(pnext1 + 1);
					_this25.indexDirty = true;
				}
				var _this26 = this.content;
				_this26.index.push(this.pindex);
				_this26.indexDirty = true;
				var _this27 = this.content;
				_this27.index.push(this.pindex + 1);
				_this27.indexDirty = true;
				var _this28 = this.content;
				_this28.index.push(this.pindex + 2);
				_this28.indexDirty = true;
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f1 = p0.y - p1.y;
			tmp = (f1 < 0 ? -f1 : f1) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g = 1;
			var _g1 = pts.length - 1;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.content;
				_this.index.push(i0);
				_this.indexDirty = true;
				var _this1 = this.content;
				_this1.index.push(i0 + i);
				_this1.indexDirty = true;
				var _this2 = this.content;
				_this2.index.push(i0 + i + 1);
				_this2.indexDirty = true;
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g2 = 0;
			var _g11 = ear.triangulate_h2d_GPoint(pts);
			while(_g2 < _g11.length) {
				var i1 = _g11[_g2];
				++_g2;
				var _this3 = this.content;
				_this3.index.push(i1 + i0);
				_this3.indexDirty = true;
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		this.flush();
		var alpha1 = alpha;
		if(alpha1 == null) {
			alpha1 = 1.;
		}
		this.curA = alpha1;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
		this.doFill = true;
	}
	,beginTileFill: function(dx,dy,scaleX,scaleY,tile) {
		this.beginFill(16777215);
		if(dx == null) {
			dx = 0;
		}
		if(dy == null) {
			dy = 0;
		}
		if(tile != null) {
			if(this.tile != null && tile.innerTex != this.tile.innerTex) {
				var tex = this.tile.innerTex;
				if(tex.width != 1 || tex.height != 1) {
					throw new js__$Boot_HaxeError("All tiles must be of the same texture");
				}
				this.tile = tile;
			}
			if(this.tile == null) {
				this.tile = tile;
			}
		} else {
			tile = this.tile;
		}
		if(tile == null) {
			throw new js__$Boot_HaxeError("Tile not specified");
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		dx -= tile.x;
		dy -= tile.y;
		var tex1 = tile.innerTex;
		var pixWidth = 1 / tex1.width;
		var pixHeight = 1 / tex1.height;
		this.ma = pixWidth / scaleX;
		this.mb = 0;
		this.mc = 0;
		this.md = pixHeight / scaleY;
		this.mx = -dx * this.ma;
		this.my = -dy * this.md;
	}
	,drawTile: function(x,y,tile) {
		this.beginTileFill(x,y,null,null,tile);
		this.drawRect(x,y,tile.width,tile.height);
		this.endFill();
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0;
		}
		this.flush();
		this.lineSize = size;
		this.lineA = alpha;
		this.lineR = (color >> 16 & 255) / 255.;
		this.lineG = (color >> 8 & 255) / 255.;
		this.lineB = (color & 255) / 255.;
	}
	,moveTo: function(x,y) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
	}
	,endFill: function() {
		this.flush();
		this.doFill = false;
	}
	,setColor: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
	}
	,drawRect: function(x,y,w,h) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var x1 = x + w;
		this.addVertex(x1,y,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y * this.mc + this.mx,x1 * this.mb + y * this.md + this.my);
		var x2 = x + w;
		var y1 = y + h;
		this.addVertex(x2,y1,this.curR,this.curG,this.curB,this.curA,x2 * this.ma + y1 * this.mc + this.mx,x2 * this.mb + y1 * this.md + this.my);
		var y2 = y + h;
		this.addVertex(x,y2,this.curR,this.curG,this.curB,this.curA,x * this.ma + y2 * this.mc + this.mx,x * this.mb + y2 * this.md + this.my);
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var e = 0.01;
		this.tmpPoints[0].x += e;
		this.tmpPoints[0].y += e;
		this.tmpPoints[1].y += e;
		this.tmpPoints[3].x += e;
		this.tmpPoints[4].x += e;
		this.tmpPoints[4].y += e;
		this.flush();
	}
	,drawRoundedRect: function(x,y,w,h,radius,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		var _gthis = this;
		if(radius <= 0) {
			this.drawRect(x,y,w,h);
			return;
		}
		x += radius;
		y += radius;
		w -= radius * 2;
		h -= radius * 2;
		this.flush();
		if(nsegments == 0) {
			var f = radius * 1.5707963267948966 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 1.5707963267948966 / (nsegments - 1);
		var y1 = y - radius;
		this.addVertex(x,y1,this.curR,this.curG,this.curB,this.curA,x * this.ma + y1 * this.mc + this.mx,x * this.mb + y1 * this.md + this.my);
		var x1 = x + w;
		var y2 = y - radius;
		this.addVertex(x1,y2,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y2 * this.mc + this.mx,x1 * this.mb + y2 * this.md + this.my);
		var x2 = x + w;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle + 4.71238898038469;
			var x3 = x2 + Math.cos(a) * radius;
			var y3 = y + Math.sin(a) * radius;
			_gthis.addVertex(x3,y3,_gthis.curR,_gthis.curG,_gthis.curB,_gthis.curA,x3 * _gthis.ma + y3 * _gthis.mc + _gthis.mx,x3 * _gthis.mb + y3 * _gthis.md + _gthis.my);
		}
		var x4 = x + w + radius;
		var y4 = y + h;
		this.addVertex(x4,y4,this.curR,this.curG,this.curB,this.curA,x4 * this.ma + y4 * this.mc + this.mx,x4 * this.mb + y4 * this.md + this.my);
		var x5 = x + w;
		var y5 = y + h;
		var _g2 = 0;
		var _g11 = nsegments;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var a1 = i1 * angle;
			var x6 = x5 + Math.cos(a1) * radius;
			var y6 = y5 + Math.sin(a1) * radius;
			_gthis.addVertex(x6,y6,_gthis.curR,_gthis.curG,_gthis.curB,_gthis.curA,x6 * _gthis.ma + y6 * _gthis.mc + _gthis.mx,x6 * _gthis.mb + y6 * _gthis.md + _gthis.my);
		}
		var y7 = y + h + radius;
		this.addVertex(x,y7,this.curR,this.curG,this.curB,this.curA,x * this.ma + y7 * this.mc + this.mx,x * this.mb + y7 * this.md + this.my);
		var y8 = y + h;
		var _g3 = 0;
		var _g12 = nsegments;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var a2 = i2 * angle + 1.5707963267948966;
			var x7 = x + Math.cos(a2) * radius;
			var y9 = y8 + Math.sin(a2) * radius;
			_gthis.addVertex(x7,y9,_gthis.curR,_gthis.curG,_gthis.curB,_gthis.curA,x7 * _gthis.ma + y9 * _gthis.mc + _gthis.mx,x7 * _gthis.mb + y9 * _gthis.md + _gthis.my);
		}
		var x8 = x - radius;
		this.addVertex(x8,y,this.curR,this.curG,this.curB,this.curA,x8 * this.ma + y * this.mc + this.mx,x8 * this.mb + y * this.md + this.my);
		var _g4 = 0;
		var _g13 = nsegments;
		while(_g4 < _g13) {
			var i3 = _g4++;
			var a3 = i3 * angle + 3.1415926535897931;
			var x9 = x + Math.cos(a3) * radius;
			var y10 = y + Math.sin(a3) * radius;
			_gthis.addVertex(x9,y10,_gthis.curR,_gthis.curG,_gthis.curB,_gthis.curA,x9 * _gthis.ma + y10 * _gthis.mc + _gthis.mx,x9 * _gthis.mb + y10 * _gthis.md + _gthis.my);
		}
		this.flush();
	}
	,drawCircle: function(cx,cy,radius,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		this.flush();
		if(nsegments == 0) {
			var f = radius * 3.14 * 2 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 6.2831853071795862 / nsegments;
		var _g = 0;
		var _g1 = nsegments + 1;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			var x = cx + Math.cos(a) * radius;
			var y = cy + Math.sin(a) * radius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,drawEllipse: function(cx,cy,radiusX,radiusY,rotationAngle,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		if(rotationAngle == null) {
			rotationAngle = 0;
		}
		this.flush();
		if(nsegments == 0) {
			var f = radiusY * 3.14 * 2 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 6.2831853071795862 / nsegments;
		var x1;
		var y1;
		var _g = 0;
		var _g1 = nsegments + 1;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			x1 = Math.cos(a) * Math.cos(rotationAngle) * radiusX - Math.sin(a) * Math.sin(rotationAngle) * radiusY;
			y1 = Math.cos(rotationAngle) * Math.sin(a) * radiusY + Math.cos(a) * Math.sin(rotationAngle) * radiusX;
			var x = cx + x1;
			var y = cy + y1;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,drawPie: function(cx,cy,radius,angleStart,angleLength,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		if((angleLength < 0 ? -angleLength : angleLength) >= 6.2831853071795862) {
			this.drawCircle(cx,cy,radius,nsegments);
			return;
		}
		this.flush();
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		if(nsegments == 0) {
			var f = radius * angleLength / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = angleLength / (nsegments - 1);
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle + angleStart;
			var x = cx + Math.cos(a) * radius;
			var y = cy + Math.sin(a) * radius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		this.flush();
	}
	,drawRectanglePie: function(cx,cy,width,height,angleStart,angleLength,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		if((angleLength < 0 ? -angleLength : angleLength) >= 6.2831853071795862) {
			this.drawRect(cx - width / 2,cy - height / 2,width,height);
			return;
		}
		this.flush();
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		if(nsegments == 0) {
			var f = (width < height ? height : width) * angleLength / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = angleLength / (nsegments - 1);
		var square2 = Math.sqrt(2);
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle + angleStart;
			var _width = Math.cos(a) * (width / 2 + 1) * square2;
			var _height = Math.sin(a) * (height / 2 + 1) * square2;
			_width = (_width < 0 ? -_width : _width) >= width / 2 ? Math.cos(a) < 0 ? width / 2 * -1 : width / 2 : _width;
			_height = (_height < 0 ? -_height : _height) >= height / 2 ? Math.sin(a) < 0 ? height / 2 * -1 : height / 2 : _height;
			var x = cx + _width;
			var y = cy + _height;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		this.flush();
	}
	,curveTo: function(bx,by,cx,cy) {
		var ax = this.tmpPoints.length == 0 ? 0 : this.tmpPoints[this.tmpPoints.length - 1].x;
		var ay = this.tmpPoints.length == 0 ? 0 : this.tmpPoints[this.tmpPoints.length - 1].y;
		var t = 0.66666666666666663;
		this.cubicCurveTo(ax + t * (bx - ax),ay + t * (by - ay),cx + t * (bx - cx),cy + t * (by - cy),cx,cy);
	}
	,cubicCurveTo: function(bx,by,cx,cy,dx,dy,nsegments) {
		if(nsegments == null) {
			nsegments = 40;
		}
		var ax = this.tmpPoints.length == 0 ? 0 : this.tmpPoints[this.tmpPoints.length - 1].x;
		var ay = this.tmpPoints.length == 0 ? 0 : this.tmpPoints[this.tmpPoints.length - 1].y;
		var tobx = bx - ax;
		var toby = by - ay;
		var tocx = cx - bx;
		var tocy = cy - by;
		var todx = dx - cx;
		var tody = dy - cy;
		var step = 1 / nsegments;
		var _g = 1;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var d = i * step;
			var px = ax + d * tobx;
			var py = ay + d * toby;
			var qx = bx + d * tocx;
			var qy = by + d * tocy;
			var rx = cx + d * todx;
			var ry = cy + d * tody;
			var toqx = qx - px;
			var toqy = qy - py;
			var torx = rx - qx;
			var tory = ry - qy;
			var sx = px + d * toqx;
			var sy = py + d * toqy;
			var tx = qx + d * torx;
			var ty = qy + d * tory;
			var totx = tx - sx;
			var toty = ty - sy;
			var x = sx + d * totx;
			var y = sy + d * toty;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.addVertex(dx,dy,this.curR,this.curG,this.curB,this.curA,dx * this.ma + dy * this.mc + this.mx,dx * this.mb + dy * this.md + this.my);
	}
	,lineTo: function(x,y) {
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
	}
	,addVertex: function(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(this.doFill) {
			var _this = this.content;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			var this2 = _this.tmp;
			if(this2.pos == this2.array.length) {
				var newSize1 = this2.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(this2.array);
				this2.array = newArray1;
			}
			this2.array[this2.pos++] = y;
			var this3 = _this.tmp;
			if(this3.pos == this3.array.length) {
				var newSize2 = this3.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(this3.array);
				this3.array = newArray2;
			}
			this3.array[this3.pos++] = u;
			var this4 = _this.tmp;
			if(this4.pos == this4.array.length) {
				var newSize3 = this4.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(this4.array);
				this4.array = newArray3;
			}
			this4.array[this4.pos++] = v;
			var this5 = _this.tmp;
			if(this5.pos == this5.array.length) {
				var newSize4 = this5.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(this5.array);
				this5.array = newArray4;
			}
			this5.array[this5.pos++] = r;
			var this6 = _this.tmp;
			if(this6.pos == this6.array.length) {
				var newSize5 = this6.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(this6.array);
				this6.array = newArray5;
			}
			this6.array[this6.pos++] = g;
			var this7 = _this.tmp;
			if(this7.pos == this7.array.length) {
				var newSize6 = this7.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(this7.array);
				this7.array = newArray6;
			}
			this7.array[this7.pos++] = b;
			var this8 = _this.tmp;
			if(this8.pos == this8.array.length) {
				var newSize7 = this8.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(this8.array);
				this8.array = newArray7;
			}
			this8.array[this8.pos++] = a;
			_this.bufferDirty = true;
		}
		var gp = new h2d_GPoint();
		gp.load(x,y,this.lineR,this.lineG,this.lineB,this.lineA);
		this.tmpPoints.push(gp);
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawObject(this,this.tile.innerTex)) {
			return;
		}
		this.content.render(ctx.engine);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		} else {
			if(_this.bufferDirty) {
				_this.buffer.dispose();
				_this.buffer = h3d_Buffer.ofFloats(_this.tmp,8,[h3d_BufferFlag.RawFormat]);
				_this.bufferDirty = false;
			}
			if(_this.indexDirty) {
				_this.indexes.dispose();
				_this.indexes = h3d_Indexes.alloc(_this.index);
				_this.indexDirty = false;
			}
		}
	}
	,__class__: h2d_Graphics
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
	,__properties__: {set_cursor:"set_cursor"}
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h2d_Drawable.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Drawable;
h2d_Interactive.prototype = $extend(h2d_Drawable.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		this.updateMask();
		h2d_Drawable.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Drawable.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene.addEventTarget(this);
		}
		if(parentChanged) {
			this.updateMask();
		}
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,preventClick: function() {
		this.mouseDownButton = -1;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.parentMask != null && this.checkBounds(e)) {
			var p = this.parentMask;
			var pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			var saveX = pt.x;
			var saveY = pt.y;
			while(p != null) {
				pt.x = saveX;
				pt.y = saveY;
				var pt1 = p.globalToLocal(pt);
				if(pt1.x < 0 || pt1.y < 0 || pt1.x > p.width || pt1.y > p.height) {
					e.cancel = true;
					return;
				}
				p = p.parentMask;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Drawable.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,eventToLocal: function(e) {
		var i = this;
		var dx = e.relX - i.absX;
		var dy = e.relY - i.absY;
		e.relX = (dx * i.matD - dy * i.matC) * i.invDet;
		e.relY = (-dx * i.matB + dy * i.matA) * i.invDet;
	}
	,startDrag: function(callb,onCancel) {
		var _gthis = this;
		this.scene.startDrag(function(event) {
			var x = event.relX;
			var y = event.relY;
			_gthis.eventToLocal(event);
			callb(event);
			event.relX = x;
			event.relY = y;
		},onCancel);
	}
	,stopDrag: function() {
		this.scene.stopDrag();
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.overList.indexOf(this) != -1;
		} else {
			return false;
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
	,__properties__: $extend(h2d_Drawable.prototype.__properties__,{set_cursor:"set_cursor"})
});
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	addChild: function(s) {
		this.addChildAt(s,0);
	}
	,add: function(s,layer) {
		this.addChildAt(s,layer);
		return;
	}
	,addChildAt: function(s,layer) {
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,under: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var pos = 0;
				var _g2 = 0;
				var _g11 = this.layersIndexes;
				while(_g2 < _g11.length) {
					var l = _g11[_g2];
					++_g2;
					if(l > i) {
						break;
					} else {
						pos = l;
					}
				}
				var p = i;
				while(p > pos) {
					this.children[p] = this.children[p - 1];
					--p;
				}
				this.children[pos] = s;
				if(s.allocated) {
					s.onHierarchyMoved(false);
				}
				return;
			}
		}
	}
	,over: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var _g2 = 0;
				var _g11 = this.layersIndexes;
				while(_g2 < _g11.length) {
					var l = _g11[_g2];
					++_g2;
					if(l > i) {
						var _g3 = i;
						var _g12 = l - 1;
						while(_g3 < _g12) {
							var p = _g3++;
							this.children[p] = this.children[p + 1];
						}
						this.children[l - 1] = s;
						if(s.allocated) {
							s.onHierarchyMoved(false);
						}
						return;
					}
				}
				return;
			}
		}
	}
	,getLayer: function(layer) {
		var a;
		if(layer >= this.layerCount) {
			a = [];
		} else {
			var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
			var max = this.layersIndexes[layer];
			a = this.children.slice(start,max);
		}
		return new hxd_impl_ArrayIterator_$h2d_$Object(a);
	}
	,getChildLayer: function(s) {
		if(s.parent != this) {
			return -1;
		}
		var index = this.children.indexOf(s);
		var _g = 0;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			if(this.layersIndexes[i] > index) {
				return i;
			}
		}
		return -1;
	}
	,drawLayer: function(ctx,layer) {
		if(layer >= this.layerCount) {
			return;
		}
		var old = ctx.globalAlpha;
		ctx.globalAlpha *= this.alpha;
		var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		var max = this.layersIndexes[layer];
		if(ctx.front2back) {
			var _g = start;
			var _g1 = max;
			while(_g < _g1) {
				var i = _g++;
				this.children[max - 1 - i].drawRec(ctx);
			}
		} else {
			var _g2 = start;
			var _g11 = max;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.children[i1].drawRec(ctx);
			}
		}
		ctx.globalAlpha = old;
	}
	,ysort: function(layer) {
		if(layer >= this.layerCount) {
			return;
		}
		var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		var max = this.layersIndexes[layer];
		if(start == max) {
			return;
		}
		var pos = start;
		var ymax = this.children[pos++].y;
		while(pos < max) {
			var c = this.children[pos];
			if(c.y < ymax) {
				var p = pos - 1;
				while(p >= start) {
					var c2 = this.children[p];
					if(c.y >= c2.y) {
						break;
					}
					this.children[p + 1] = c2;
					--p;
				}
				this.children[p + 1] = c;
				if(c.allocated) {
					c.onHierarchyMoved(false);
				}
			} else {
				ymax = c.y;
			}
			++pos;
		}
	}
	,__class__: h2d_Layers
});
var h2d_Mask = function(width,height,parent) {
	this.scrollY = 0;
	this.scrollX = 0;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
};
$hxClasses["h2d.Mask"] = h2d_Mask;
h2d_Mask.__name__ = "h2d.Mask";
h2d_Mask.__super__ = h2d_Object;
h2d_Mask.prototype = $extend(h2d_Object.prototype,{
	scrollTo: function(x,y) {
		this.set_scrollX(x);
		this.set_scrollY(y);
	}
	,scrollBy: function(x,y) {
		var _g = this;
		_g.set_scrollX(_g.scrollX + x);
		var _g1 = this;
		_g1.set_scrollY(_g1.scrollY + y);
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(parentChanged) {
			this.updateMask();
		}
	}
	,onAdd: function() {
		h2d_Object.prototype.onAdd.call(this);
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,set_scrollX: function(v) {
		if(this.scrollBounds != null) {
			var min = this.scrollBounds.xMin;
			var max = this.scrollBounds.xMax - this.width;
			if(max == null) {
				max = 1.;
			}
			if(min == null) {
				min = 0.;
			}
			v = v < min ? min : v > max ? max : v;
		}
		this.posChanged = true;
		return this.scrollX = v;
	}
	,set_scrollY: function(v) {
		if(this.scrollBounds != null) {
			var min = this.scrollBounds.yMin;
			var max = this.scrollBounds.yMax - this.height;
			if(max == null) {
				max = 1.;
			}
			if(min == null) {
				min = 0.;
			}
			v = v < min ? min : v > max ? max : v;
		}
		this.posChanged = true;
		return this.scrollY = v;
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.absX -= this.scrollX;
		this.absY -= this.scrollY;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,0,0,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		var x1 = this.absX + this.scrollX;
		var y1 = this.absY + this.scrollY;
		var x2 = this.width * this.matA + this.height * this.matC + x1;
		var y2 = this.width * this.matB + this.height * this.matD + y1;
		var tmp;
		if(x1 > x2) {
			tmp = x1;
			x1 = x2;
			x2 = tmp;
		}
		if(y1 > y2) {
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		if(ctx.hasRenderZone) {
			var oldX = ctx.renderX;
			var oldY = ctx.renderY;
			var oldW = ctx.renderW;
			var oldH = ctx.renderH;
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Object.prototype.drawRec.call(this,ctx);
			ctx.setRenderZone(oldX,oldY,oldW,oldH);
		} else {
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Object.prototype.drawRec.call(this,ctx);
			ctx.hasRenderZone = false;
			ctx.engine.setRenderZone();
		}
	}
	,__class__: h2d_Mask
	,__properties__: $extend(h2d_Object.prototype.__properties__,{set_scrollY:"set_scrollY",set_scrollX:"set_scrollX"})
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache(this);
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.prototype = {
	dispose: function() {
		this.textures.dispose();
	}
	,__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.filterStack = [];
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	dispose: function() {
		h3d_impl_RenderContext.prototype.dispose.call(this);
		if(this.fixedBuffer != null) {
			this.fixedBuffer.dispose();
		}
	}
	,hasBuffering: function() {
		return false;
	}
	,begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.curX = 0;
		this.curY = 0;
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.curWidth = this.scene.width;
		this.curHeight = this.scene.height;
		this.manager.globals.set("time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this1 = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = 0.;
		_this1.w = 1.;
		var _this2 = this.baseShader.viewport__;
		var x1 = -this.scene.width * 0.5 - this.scene.offsetX;
		var y1 = -this.scene.height * 0.5 - this.scene.offsetY;
		var z = 2 / this.scene.width * this.scene.ratioX;
		var w = -2 * this.baseFlipY / this.scene.height * this.scene.ratioY;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this2.x = x1;
		_this2.y = y1;
		_this2.z = z;
		_this2.w = w;
		var _this3 = this.baseShader.filterMatrixA__;
		var x2 = 1;
		var y2 = 0;
		var z1 = 0;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this3.x = x2;
		_this3.y = y2;
		_this3.z = z1;
		_this3.w = 1.;
		var _this4 = this.baseShader.filterMatrixB__;
		var x3 = 0;
		var y3 = 1;
		var z2 = 0;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this4.x = x3;
		_this4.y = y3;
		_this4.z = z2;
		_this4.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,allocTarget: function(name,filter) {
		if(filter == null) {
			filter = false;
		}
		var t = this.textures.allocTarget(name,this.scene.width,this.scene.height,false);
		t.set_filter(filter ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		return t;
	}
	,clear: function(color) {
		this.engine.clear(color);
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStackIndex != 0) {
			throw new js__$Boot_HaxeError("Missing popTarget()");
		}
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.filterStack.push(spr);
		this.inFilter = spr;
		return true;
	}
	,popFilter: function() {
		var spr = this.filterStack.pop();
		if(this.filterStack.length > 0) {
			this.inFilter = this.filterStack[this.filterStack.length - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this1 = this.baseShader.viewport__;
		var x1 = -width * 0.5 - startX;
		var y1 = -height * 0.5 - startY;
		var z = 2 / width;
		var w = -2 * this.targetFlipY / height;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z;
		_this1.w = w;
		this.targetsStackIndex++;
		if(this.targetsStackIndex > this.targetsStack.length) {
			this.targetsStack.push({ t : t, x : startX, y : startY, w : width, h : height, hasRZ : this.hasRenderZone, rzX : this.renderX, rzY : this.renderY, rzW : this.renderW, rzH : this.renderH});
		} else {
			var o = this.targetsStack[this.targetsStackIndex - 1];
			o.t = t;
			o.x = startX;
			o.y = startY;
			o.w = width;
			o.h = height;
			o.hasRZ = this.hasRenderZone;
			o.rzX = this.renderX;
			o.rzY = this.renderY;
			o.rzW = this.renderW;
			o.rzH = this.renderH;
		}
		this.curX = startX;
		this.curY = startY;
		this.curWidth = width;
		this.curHeight = height;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,pushTargets: function(texs) {
		this.pushTarget(texs[0]);
		if(texs.length > 1) {
			this.engine.popTarget();
			this.engine.pushTargets(texs);
		}
	}
	,popTarget: function(restore) {
		if(restore == null) {
			restore = true;
		}
		if(this.targetsStackIndex <= 0) {
			throw new js__$Boot_HaxeError("Too many popTarget()");
		}
		var pinf = this.targetsStack[--this.targetsStackIndex];
		this.engine.popTarget();
		if(restore) {
			var tinf = this.targetsStack[this.targetsStackIndex - 1];
			var t;
			var startX;
			var startY;
			var width;
			var height;
			var ratioX;
			var ratioY;
			var offsetX;
			var offsetY;
			if(tinf == null) {
				t = null;
				startX = 0;
				startY = 0;
				width = this.scene.width;
				height = this.scene.height;
				ratioX = this.scene.ratioX;
				ratioY = this.scene.ratioY;
				offsetX = this.scene.offsetX;
				offsetY = this.scene.offsetY;
			} else {
				t = tinf.t;
				startX = tinf.x;
				startY = tinf.y;
				width = tinf.w;
				height = tinf.h;
				ratioX = 1;
				ratioY = 1;
				offsetX = 0;
				offsetY = 0;
			}
			this.initShaders(this.baseShaderList);
			var _this = this.baseShader.halfPixelInverse__;
			var x = 0.5 / (t == null ? this.engine.width : t.width);
			var y = 0.5 / (t == null ? this.engine.height : t.height);
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			var _this1 = this.baseShader.viewport__;
			var x1 = -width * 0.5 - startX - offsetX;
			var y1 = -height * 0.5 - startY - offsetY;
			var z = 2 / width * ratioX;
			var w = -2 * (t == null ? this.baseFlipY : this.targetFlipY) / height * ratioY;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z;
			_this1.w = w;
			this.curX = startX;
			this.curY = startY;
			this.curWidth = width;
			this.curHeight = height;
		}
		if(pinf.hasRZ) {
			this.setRenderZone(pinf.rzX,pinf.rzY,pinf.rzW,pinf.rzH);
		}
	}
	,setRenderZone: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.engine.width * this.scene.ratioX / this.scene.width;
		var scaleY = this.engine.height * this.scene.ratioY / this.scene.height;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone((x - this.curX + this.scene.viewportX) * scaleX + 1e-10 | 0,(y - this.curY + this.scene.viewportY) * scaleY + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,clearRenderZone: function() {
		this.hasRenderZone = false;
		this.engine.setRenderZone();
	}
	,drawLayer: function(layer) {
		this.scene.drawLayer(this,layer);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,flush: function() {
	}
	,_flush: function() {
		if(this.bufPos == 0) {
			return;
		}
		this.beforeDraw();
		var nverts = this.bufPos / this.stride | 0;
		var tmp = new h3d_Buffer(nverts,this.stride,[h3d_BufferFlag.Quads,h3d_BufferFlag.Dynamic,h3d_BufferFlag.RawFormat]);
		tmp.uploadVector(this.buffer,0,nverts);
		var _this = this.engine;
		_this.renderBuffer(tmp,_this.mem.quadIndexes,2,0,-1);
		tmp.dispose();
		this.bufPos = 0;
		this.texture = null;
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	,setupColor: function(obj) {
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this1 = this.baseShader.color__;
			var x1 = this.globalAlpha;
			var y1 = this.globalAlpha;
			var z1 = this.globalAlpha;
			var w1 = this.globalAlpha;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = w1;
		} else {
			var _this2 = this.baseShader.color__;
			var x2 = obj.color.x;
			var y2 = obj.color.y;
			var z2 = obj.color.z;
			var w2 = obj.color.w * this.globalAlpha;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = z2;
			_this2.w = w2;
		}
	}
	,beginDrawObject: function(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this1 = this.baseShader.color__;
			var x1 = this.globalAlpha;
			var y1 = this.globalAlpha;
			var z1 = this.globalAlpha;
			var w1 = this.globalAlpha;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = w1;
		} else {
			var _this2 = this.baseShader.color__;
			var x2 = obj.color.x;
			var y2 = obj.color.y;
			var z2 = obj.color.z;
			var w2 = obj.color.w * this.globalAlpha;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = z2;
			_this2.w = w2;
		}
		var _this3 = this.baseShader.absoluteMatrixA__;
		var x3 = obj.matA;
		var y3 = obj.matC;
		var z3 = obj.absX;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this3.x = x3;
		_this3.y = y3;
		_this3.z = z3;
		_this3.w = 1.;
		var _this4 = this.baseShader.absoluteMatrixB__;
		var x4 = obj.matB;
		var y4 = obj.matD;
		var z4 = obj.absY;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		_this4.x = x4;
		_this4.y = y4;
		_this4.z = z4;
		_this4.w = 1.;
		this.beforeDraw();
		return true;
	}
	,beginDrawBatch: function(obj,texture) {
		return this.beginDraw(obj,texture,false);
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			matA = obj.matA * f1.x + obj.matB * f1.y;
			matB = obj.matA * f2.x + obj.matB * f2.y;
			matC = obj.matC * f1.x + obj.matD * f1.y;
			matD = obj.matC * f2.x + obj.matD * f2.y;
			absX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			absY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
		} else {
			matA = obj.matA;
			matB = obj.matB;
			matC = obj.matC;
			matD = obj.matD;
			absX = obj.absX;
			absY = obj.absY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var f = obj.matA;
			var a = f < 0 ? -f : f;
			var f3 = obj.matD;
			var b = f3 < 0 ? -f3 : f3;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA - this.curX;
			var cy = absY + ty * matD - this.curY;
			if(cx < -tr || cy < -tr || cx - tr > this.curWidth || cy - tr > this.curHeight) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px1 = (x + tile.dx) * matA + tile.dy * matC;
			var py1 = (x + tile.dx) * matB + tile.dy * matD;
			if(px1 < xMin) {
				xMin = px1;
			}
			if(px1 > xMax) {
				xMax = px1;
			}
			if(py1 < yMin) {
				yMin = py1;
			}
			if(py1 > yMax) {
				yMax = py1;
			}
			var y = tile.height;
			var px2 = tile.dx * matA + (y + tile.dy) * matC;
			var py2 = tile.dx * matB + (y + tile.dy) * matD;
			if(px2 < xMin) {
				xMin = px2;
			}
			if(px2 > xMax) {
				xMax = px2;
			}
			if(py2 < yMin) {
				yMin = py2;
			}
			if(py2 > yMax) {
				yMax = py2;
			}
			var x1 = tile.width;
			var y1 = tile.height;
			var px3 = (x1 + tile.dx) * matA + (y1 + tile.dy) * matC;
			var py3 = (x1 + tile.dx) * matB + (y1 + tile.dy) * matD;
			if(px3 < xMin) {
				xMin = px3;
			}
			if(px3 > xMax) {
				xMax = px3;
			}
			if(py3 < yMin) {
				yMin = py3;
			}
			if(py3 > yMax) {
				yMax = py3;
			}
			var cx1 = absX - this.curX;
			var cy1 = absY - this.curY;
			if(cx1 + xMax < 0 || cy1 + yMax < 0 || cx1 + xMin > this.curWidth || cy1 + yMin > this.curHeight) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x2 = obj.color.x;
			var y2 = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this.x = x2;
			_this.y = y2;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this1 = this.baseShader.color__;
			var x3 = this.globalAlpha;
			var y3 = this.globalAlpha;
			var z1 = this.globalAlpha;
			var w1 = this.globalAlpha;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			_this1.x = x3;
			_this1.y = y3;
			_this1.z = z1;
			_this1.w = w1;
		} else {
			var _this2 = this.baseShader.color__;
			var x4 = obj.color.x;
			var y4 = obj.color.y;
			var z2 = obj.color.z;
			var w2 = obj.color.w * this.globalAlpha;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			_this2.x = x4;
			_this2.y = y4;
			_this2.z = z2;
			_this2.w = w2;
		}
		var _this3 = this.baseShader.absoluteMatrixA__;
		var x5 = tile.width * obj.matA;
		var y5 = tile.height * obj.matC;
		var z3 = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		_this3.x = x5;
		_this3.y = y5;
		_this3.z = z3;
		_this3.w = 1.;
		var _this4 = this.baseShader.absoluteMatrixB__;
		var x6 = tile.width * obj.matB;
		var y6 = tile.height * obj.matD;
		var z4 = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		_this4.x = x6;
		_this4.y = y6;
		_this4.z = z4;
		_this4.w = 1.;
		var _this5 = this.baseShader.uvPos__;
		var x7 = tile.u;
		var y7 = tile.v;
		var z5 = tile.u2 - tile.u;
		var w3 = tile.v2 - tile.v;
		if(w3 == null) {
			w3 = 1.;
		}
		if(z5 == null) {
			z5 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		_this5.x = x7;
		_this5.y = y7;
		_this5.z = z5;
		_this5.w = w3;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.isDisposed()) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			var k = this1;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v1 = 0;
			if(k.pos == k.array.length) {
				var newSize1 = k.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(k.array);
				k.array = newArray1;
			}
			k.array[k.pos++] = v1;
			var v2 = 0;
			if(k.pos == k.array.length) {
				var newSize2 = k.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(k.array);
				k.array = newArray2;
			}
			k.array[k.pos++] = v2;
			var v3 = 0;
			if(k.pos == k.array.length) {
				var newSize3 = k.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(k.array);
				k.array = newArray3;
			}
			k.array[k.pos++] = v3;
			var v4 = 1;
			if(k.pos == k.array.length) {
				var newSize4 = k.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(k.array);
				k.array = newArray4;
			}
			k.array[k.pos++] = v4;
			var v5 = 1;
			if(k.pos == k.array.length) {
				var newSize5 = k.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(k.array);
				k.array = newArray5;
			}
			k.array[k.pos++] = v5;
			var v6 = 1;
			if(k.pos == k.array.length) {
				var newSize6 = k.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(k.array);
				k.array = newArray6;
			}
			k.array[k.pos++] = v6;
			var v7 = 1;
			if(k.pos == k.array.length) {
				var newSize7 = k.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(k.array);
				k.array = newArray7;
			}
			k.array[k.pos++] = v7;
			var v8 = 0;
			if(k.pos == k.array.length) {
				var newSize8 = k.array.length << 1;
				if(newSize8 < 128) {
					newSize8 = 128;
				}
				var newArray8 = new Float32Array(newSize8);
				newArray8.set(k.array);
				k.array = newArray8;
			}
			k.array[k.pos++] = v8;
			var v9 = 1;
			if(k.pos == k.array.length) {
				var newSize9 = k.array.length << 1;
				if(newSize9 < 128) {
					newSize9 = 128;
				}
				var newArray9 = new Float32Array(newSize9);
				newArray9.set(k.array);
				k.array = newArray9;
			}
			k.array[k.pos++] = v9;
			var v10 = 0;
			if(k.pos == k.array.length) {
				var newSize10 = k.array.length << 1;
				if(newSize10 < 128) {
					newSize10 = 128;
				}
				var newArray10 = new Float32Array(newSize10);
				newArray10.set(k.array);
				k.array = newArray10;
			}
			k.array[k.pos++] = v10;
			var v11 = 1;
			if(k.pos == k.array.length) {
				var newSize11 = k.array.length << 1;
				if(newSize11 < 128) {
					newSize11 = 128;
				}
				var newArray11 = new Float32Array(newSize11);
				newArray11.set(k.array);
				k.array = newArray11;
			}
			k.array[k.pos++] = v11;
			var v12 = 1;
			if(k.pos == k.array.length) {
				var newSize12 = k.array.length << 1;
				if(newSize12 < 128) {
					newSize12 = 128;
				}
				var newArray12 = new Float32Array(newSize12);
				newArray12.set(k.array);
				k.array = newArray12;
			}
			k.array[k.pos++] = v12;
			var v13 = 1;
			if(k.pos == k.array.length) {
				var newSize13 = k.array.length << 1;
				if(newSize13 < 128) {
					newSize13 = 128;
				}
				var newArray13 = new Float32Array(newSize13);
				newArray13.set(k.array);
				k.array = newArray13;
			}
			k.array[k.pos++] = v13;
			var v14 = 1;
			if(k.pos == k.array.length) {
				var newSize14 = k.array.length << 1;
				if(newSize14 < 128) {
					newSize14 = 128;
				}
				var newArray14 = new Float32Array(newSize14);
				newArray14.set(k.array);
				k.array = newArray14;
			}
			k.array[k.pos++] = v14;
			var v15 = 1;
			if(k.pos == k.array.length) {
				var newSize15 = k.array.length << 1;
				if(newSize15 < 128) {
					newSize15 = 128;
				}
				var newArray15 = new Float32Array(newSize15);
				newArray15.set(k.array);
				k.array = newArray15;
			}
			k.array[k.pos++] = v15;
			var v16 = 1;
			if(k.pos == k.array.length) {
				var newSize16 = k.array.length << 1;
				if(newSize16 < 128) {
					newSize16 = 128;
				}
				var newArray16 = new Float32Array(newSize16);
				newArray16.set(k.array);
				k.array = newArray16;
			}
			k.array[k.pos++] = v16;
			var v17 = 0;
			if(k.pos == k.array.length) {
				var newSize17 = k.array.length << 1;
				if(newSize17 < 128) {
					newSize17 = 128;
				}
				var newArray17 = new Float32Array(newSize17);
				newArray17.set(k.array);
				k.array = newArray17;
			}
			k.array[k.pos++] = v17;
			var v18 = 1;
			if(k.pos == k.array.length) {
				var newSize18 = k.array.length << 1;
				if(newSize18 < 128) {
					newSize18 = 128;
				}
				var newArray18 = new Float32Array(newSize18);
				newArray18.set(k.array);
				k.array = newArray18;
			}
			k.array[k.pos++] = v18;
			var v19 = 0;
			if(k.pos == k.array.length) {
				var newSize19 = k.array.length << 1;
				if(newSize19 < 128) {
					newSize19 = 128;
				}
				var newArray19 = new Float32Array(newSize19);
				newArray19.set(k.array);
				k.array = newArray19;
			}
			k.array[k.pos++] = v19;
			var v20 = 1;
			if(k.pos == k.array.length) {
				var newSize20 = k.array.length << 1;
				if(newSize20 < 128) {
					newSize20 = 128;
				}
				var newArray20 = new Float32Array(newSize20);
				newArray20.set(k.array);
				k.array = newArray20;
			}
			k.array[k.pos++] = v20;
			var v21 = 1;
			if(k.pos == k.array.length) {
				var newSize21 = k.array.length << 1;
				if(newSize21 < 128) {
					newSize21 = 128;
				}
				var newArray21 = new Float32Array(newSize21);
				newArray21.set(k.array);
				k.array = newArray21;
			}
			k.array[k.pos++] = v21;
			var v22 = 1;
			if(k.pos == k.array.length) {
				var newSize22 = k.array.length << 1;
				if(newSize22 < 128) {
					newSize22 = 128;
				}
				var newArray22 = new Float32Array(newSize22);
				newArray22.set(k.array);
				k.array = newArray22;
			}
			k.array[k.pos++] = v22;
			var v23 = 1;
			if(k.pos == k.array.length) {
				var newSize23 = k.array.length << 1;
				if(newSize23 < 128) {
					newSize23 = 128;
				}
				var newArray23 = new Float32Array(newSize23);
				newArray23.set(k.array);
				k.array = newArray23;
			}
			k.array[k.pos++] = v23;
			var v24 = 1;
			if(k.pos == k.array.length) {
				var newSize24 = k.array.length << 1;
				if(newSize24 < 128) {
					newSize24 = 128;
				}
				var newArray24 = new Float32Array(newSize24);
				newArray24.set(k.array);
				k.array = newArray24;
			}
			k.array[k.pos++] = v24;
			var v25 = 1;
			if(k.pos == k.array.length) {
				var newSize25 = k.array.length << 1;
				if(newSize25 < 128) {
					newSize25 = 128;
				}
				var newArray25 = new Float32Array(newSize25);
				newArray25.set(k.array);
				k.array = newArray25;
			}
			k.array[k.pos++] = v25;
			var v26 = 1;
			if(k.pos == k.array.length) {
				var newSize26 = k.array.length << 1;
				if(newSize26 < 128) {
					newSize26 = 128;
				}
				var newArray26 = new Float32Array(newSize26);
				newArray26.set(k.array);
				k.array = newArray26;
			}
			k.array[k.pos++] = v26;
			var v27 = 1;
			if(k.pos == k.array.length) {
				var newSize27 = k.array.length << 1;
				if(newSize27 < 128) {
					newSize27 = 128;
				}
				var newArray27 = new Float32Array(newSize27);
				newArray27.set(k.array);
				k.array = newArray27;
			}
			k.array[k.pos++] = v27;
			var v28 = 1;
			if(k.pos == k.array.length) {
				var newSize28 = k.array.length << 1;
				if(newSize28 < 128) {
					newSize28 = 128;
				}
				var newArray28 = new Float32Array(newSize28);
				newArray28.set(k.array);
				k.array = newArray28;
			}
			k.array[k.pos++] = v28;
			var v29 = 1;
			if(k.pos == k.array.length) {
				var newSize29 = k.array.length << 1;
				if(newSize29 < 128) {
					newSize29 = 128;
				}
				var newArray29 = new Float32Array(newSize29);
				newArray29.set(k.array);
				k.array = newArray29;
			}
			k.array[k.pos++] = v29;
			var v30 = 1;
			if(k.pos == k.array.length) {
				var newSize30 = k.array.length << 1;
				if(newSize30 < 128) {
					newSize30 = 128;
				}
				var newArray30 = new Float32Array(newSize30);
				newArray30.set(k.array);
				k.array = newArray30;
			}
			k.array[k.pos++] = v30;
			var v31 = 1;
			if(k.pos == k.array.length) {
				var newSize31 = k.array.length << 1;
				if(newSize31 < 128) {
					newSize31 = 128;
				}
				var newArray31 = new Float32Array(newSize31);
				newArray31.set(k.array);
				k.array = newArray31;
			}
			k.array[k.pos++] = v31;
			this.fixedBuffer.uploadVector(k,0,4);
		}
		var _this6 = this.engine;
		_this6.renderBuffer(this.fixedBuffer,_this6.mem.quadIndexes,2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this1 = this.baseShader;
			_this1.constModified = true;
			_this1.isRelative__ = isRelative;
			var _this2 = this.baseShader;
			_this2.constModified = true;
			_this2.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw new js__$Boot_HaxeError("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","Top","Bottom"]
	,Left: {_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__ : true, __constructs__ : ["Resize","Stretch","LetterBox","Fixed","Zoom","AutoZoom"]
	,Resize: {_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this.width = e.width;
	this.height = e.height;
	this.offsetX = 0;
	this.offsetY = 0;
	this.ratioX = 1;
	this.ratioY = 1;
	this.viewportX = 0;
	this.viewportY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_Point();
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	get_defaultSmooth: function() {
		return this.ctx.defaultSmooth;
	}
	,set_defaultSmooth: function(v) {
		return this.ctx.defaultSmooth = v;
	}
	,setEvents: function(events) {
		this.events = events;
	}
	,get_zoom: function() {
		var _g = this.scaleMode;
		if(_g._hx_index == 4) {
			var level = _g.level;
			return level | 0;
		} else {
			return 0;
		}
	}
	,set_zoom: function(v) {
		this.set_scaleMode(h2d_ScaleMode.Zoom(v));
		return v;
	}
	,set_scaleMode: function(v) {
		this.scaleMode = v;
		this.checkResize();
		return v;
	}
	,get_renderer: function() {
		return this.ctx;
	}
	,set_renderer: function(v) {
		this.ctx = v;
		return v;
	}
	,setFixedSize: function(w,h) {
		this.set_scaleMode(h2d_ScaleMode.Stretch(w,h));
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 1:
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 2:
			var verticalAlign = _g.verticalAlign;
			var horizontalAlign = _g.horizontalAlign;
			var integerScale = _g.integerScale;
			var _height1 = _g.height;
			var _width1 = _g.width;
			if(_width1 != _gthis.width || _height1 != _gthis.height) {
				_gthis.width = _width1;
				_gthis.height = _height1;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width1;
			var b = engine.height / _height1;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			_gthis.ratioX = _gthis.width * zoom / engine.width;
			_gthis.ratioY = _gthis.height * zoom / engine.height;
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom) / (2 * zoom);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / (2 * zoom));
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / zoom;
				break;
			default:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / 2 % 1.) * .5;
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / (2 * zoom);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom) / (2 * zoom);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / (2 * zoom));
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / zoom;
				break;
			default:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / 2 % 1.) * .5;
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / (2 * zoom);
			}
			break;
		case 3:
			var verticalAlign1 = _g.verticalAlign;
			var horizontalAlign1 = _g.horizontalAlign;
			var zoom1 = _g.zoom;
			var _height2 = _g.height;
			var _width2 = _g.width;
			if(_width2 != _gthis.width || _height2 != _gthis.height) {
				_gthis.width = _width2;
				_gthis.height = _height2;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom1 / engine.width;
			_gthis.ratioY = _gthis.height * zoom1 / engine.height;
			var horizontal1 = horizontalAlign1;
			var vertical1 = verticalAlign1;
			if(horizontal1 == null) {
				horizontal1 = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal1._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom1) / (2 * zoom1);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom1) / (2 * zoom1));
				_gthis.viewportX = (engine.width - _gthis.width * zoom1) / zoom1;
				break;
			default:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom1) / 2 % 1.) * .5;
				_gthis.viewportX = (engine.width - _gthis.width * zoom1) / (2 * zoom1);
			}
			if(vertical1 == null) {
				vertical1 = h2d_ScaleModeAlign.Center;
			}
			switch(vertical1._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom1) / (2 * zoom1);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom1) / (2 * zoom1));
				_gthis.viewportY = (engine.height - _gthis.height * zoom1) / zoom1;
				break;
			default:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom1) / 2 % 1.) * .5;
				_gthis.viewportY = (engine.height - _gthis.height * zoom1) / (2 * zoom1);
			}
			break;
		case 4:
			var level = _g.level;
			var w1 = Math.ceil(engine.width / level);
			var h1 = Math.ceil(engine.height / level);
			if(w1 != _gthis.width || h1 != _gthis.height) {
				_gthis.width = w1;
				_gthis.height = h1;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * level / engine.width;
			_gthis.ratioY = _gthis.height * level / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 5:
			var integerScaling = _g.integerScaling;
			var minHeight = _g.minHeight;
			var minWidth = _g.minWidth;
			var a1 = engine.width / minWidth;
			var b1 = engine.height / minHeight;
			var zoom2 = a1 > b1 ? b1 : a1;
			if(integerScaling) {
				zoom2 = zoom2 | 0;
				if(zoom2 == 0) {
					zoom2 = 1;
				}
			}
			var w2 = Math.ceil(engine.width / zoom2);
			var h2 = Math.ceil(engine.height / zoom2);
			if(w2 != _gthis.width || h2 != _gthis.height) {
				_gthis.width = w2;
				_gthis.height = h2;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom2 / engine.width;
			_gthis.ratioY = _gthis.height * zoom2 / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		}
	}
	,screenXToViewport: function(mx) {
		return mx * this.width / (this.window.get_width() * this.ratioX) - this.viewportX;
	}
	,screenYToViewport: function(my) {
		return my * this.height / (this.window.get_height() * this.ratioY) - this.viewportY;
	}
	,get_mouseX: function() {
		this.syncPos();
		var dx = this.window.get_mouseX() * this.width / (this.window.get_width() * this.ratioX) - this.viewportX - this.absX;
		if(this.matC == 0) {
			return dx / this.matA;
		}
		var dy = this.window.get_mouseY() * this.height / (this.window.get_height() * this.ratioY) - this.viewportY - this.absY;
		return (dx * this.matD - dy * this.matC) / (this.matA * this.matD - this.matB * this.matC);
	}
	,get_mouseY: function() {
		this.syncPos();
		var dy = this.window.get_mouseY() * this.height / (this.window.get_height() * this.ratioY) - this.viewportY - this.absY;
		if(this.matB == 0) {
			return dy / this.matD;
		}
		var dx = this.window.get_mouseX() * this.width / (this.window.get_width() * this.ratioX) - this.viewportX - this.absX;
		return (dy * this.matA - dx * this.matB) / (this.matA * this.matD - this.matB * this.matC);
	}
	,dispatchListeners: function(event) {
		this.screenToViewport(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,getInteractive: function(x,y) {
		var pt = this.shapePoint;
		var _g = 0;
		var _g1 = this.interactive;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.posChanged) {
				i.syncPos();
			}
			var dx = x - i.absX;
			var dy = y - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				pt.x = rx + i.shapeX;
				pt.y = ry + i.shapeY;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			return i;
		}
		return null;
	}
	,screenToViewport: function(e) {
		e.relX = e.relX * this.width / (this.window.get_width() * this.ratioX) - this.viewportX;
		e.relY = e.relY * this.height / (this.window.get_height() * this.ratioY) - this.viewportY;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToViewport(event);
		var dx = event.relX - i.absX;
		var dy = event.relY - i.absY;
		var rx = (dx * i.matD - dy * i.matC) * i.invDet;
		var ry = (dy * i.matA - dx * i.matB) * i.invDet;
		event.relX = rx;
		event.relY = ry;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToViewport(event);
		var ex = event.relX;
		var ey = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			if(i.invDet == 0) {
				continue;
			}
			var dx = ex - i.absX;
			var dy = ey - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				pt.x = rx + i.shapeX;
				pt.y = ry + i.shapeY;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = rx;
			event.relY = ry;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,removeEventListener: function(f) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(Reflect.compareMethods(e,f)) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	,startDrag: function(onEvent,onCancel,refEvent) {
		var _gthis = this;
		this.events.startDrag(function(e) {
			_gthis.screenToViewport(e);
			onEvent(e);
		},onCancel,refEvent);
	}
	,stopDrag: function() {
		this.events.stopDrag();
	}
	,getFocus: function() {
		if(this.events == null) {
			return null;
		}
		var f = this.events.getFocus();
		if(f == null) {
			return null;
		}
		var i = ((f) instanceof h2d_Interactive) ? f : null;
		if(i == null) {
			return null;
		}
		return this.interactive[this.interactive.indexOf(i)];
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i11 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv2 = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv2;
			}
			var lv21 = lv2;
			var p1 = i11;
			var p2 = i2;
			while(lv1 > lv21) {
				i11 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv21 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv21;
			}
			while(p1 != p2) {
				i11 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g11 = p1.children.length;
			while(_g2 < _g11) {
				var k = _g2++;
				if(p1.children[k] == i11) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g3 = 0;
			var _g12 = p2.children.length;
			while(_g3 < _g12) {
				var k1 = _g3++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,dispose: function() {
		if(this.allocated) {
			this.onRemove();
		}
		this.ctx.dispose();
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,drawImplTo: function(s,texs,outputs) {
		var _g = 0;
		while(_g < texs.length) {
			var t = texs[_g];
			++_g;
			if((t.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) == 0) {
				throw new js__$Boot_HaxeError("Can only draw to texture created with Target flag");
			}
		}
		this.ctx.engine = h3d_Engine.CURRENT;
		var oldBG = this.ctx.engine.backgroundColor;
		this.ctx.engine.backgroundColor = null;
		this.ctx.engine.begin();
		this.ctx.globalAlpha = this.alpha;
		this.ctx.begin();
		this.ctx.pushTargets(texs);
		if(outputs != null) {
			this.ctx.manager.setOutput(outputs);
		}
		if(texs.length == 1 && (texs[0].flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			this.ctx.engine.clear(0);
		}
		s.drawRec(this.ctx);
		if(outputs != null) {
			this.ctx.manager.setOutput();
		}
		this.ctx.popTarget();
		this.ctx.engine.backgroundColor = oldBG;
	}
	,syncOnly: function(et) {
		var engine = h3d_Engine.CURRENT;
		this.setElapsedTime(et);
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,captureBitmap: function(target) {
		var engine = h3d_Engine.CURRENT;
		if(target == null) {
			var tex = new h3d_mat_Texture(this.width,this.height,[h3d_mat_TextureFlags.Target]);
			target = new h2d_Tile(tex,0,0,this.width,this.height);
		}
		engine.begin();
		engine.setRenderZone(target.x | 0,target.y | 0,Math.ceil(target.width),Math.ceil(target.height));
		var tex1 = target.innerTex;
		engine.pushTarget(tex1);
		var ow = this.width;
		var oh = this.height;
		var ox = this.offsetX;
		var oy = this.offsetY;
		var ovx = this.viewportX;
		var ovy = this.viewportY;
		var orx = this.ratioX;
		var ory = this.ratioY;
		this.width = tex1.width;
		this.height = tex1.height;
		this.ratioX = 1;
		this.ratioY = 1;
		this.offsetX = 0;
		this.offsetY = 0;
		this.viewportX = 0;
		this.viewportY = 0;
		this.posChanged = true;
		this.render(engine);
		engine.popTarget();
		this.width = ow;
		this.height = oh;
		this.ratioX = orx;
		this.ratioY = ory;
		this.offsetX = ox;
		this.offsetY = oy;
		this.viewportX = ovx;
		this.viewportY = ovy;
		this.posChanged = true;
		engine.setRenderZone();
		engine.end();
		return new h2d_Bitmap(target);
	}
	,__class__: h2d_Scene
	,__properties__: $extend(h2d_Layers.prototype.__properties__,{set_renderer:"set_renderer",get_renderer:"get_renderer",set_defaultSmooth:"set_defaultSmooth",get_defaultSmooth:"get_defaultSmooth",set_scaleMode:"set_scaleMode",set_zoom:"set_zoom",get_zoom:"get_zoom",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX"})
});
var h2d_Align = $hxEnums["h2d.Align"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","MultilineRight","MultilineCenter"]
	,Left: {_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	this.constraintWidth = -1;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_letterSpacing(1);
	this.set_lineSpacing(0);
	this.set_text("");
	this.currentText = "";
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = "h2d.Text";
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			var _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				var smoothing = _g.smoothing;
				var alphaCutoff = _g.alphaCutoff;
				var channel = _g.channel;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d_shader_SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				break;
			}
		}
		if(this.glyphs != null) {
			var _this1 = this.glyphs;
			if(_this1 != null && _this1.parent != null) {
				_this1.parent.removeChild(_this1);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,set_letterSpacing: function(s) {
		if(this.letterSpacing == s) {
			return s;
		}
		this.letterSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineSpacing: function(s) {
		if(this.lineSpacing == s) {
			return s;
		}
		this.lineSpacing = s;
		this.rebuild();
		return s;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.updateConstraint();
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,checkText: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this1 = this.color;
			var x = oldR;
			var y = oldG;
			var z = oldB;
			var w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this1.x = x;
			_this1.y = y;
			_this1.z = z;
			_this1.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.textChanged = true;
		this.validateText();
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t1;
	}
	,validateText: function() {
	}
	,rebuild: function() {
		this.calcDone = false;
		this.needsRebuild = true;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,calcTextWidth: function(text) {
		if(this.calcDone) {
			var ow = this.calcWidth;
			var oh = this.calcHeight;
			var osh = this.calcSizeHeight;
			var ox = this.calcXMin;
			var oy = this.calcYMin;
			this.initGlyphs(text,false);
			var w = this.calcWidth;
			this.calcWidth = ow;
			this.calcHeight = oh;
			this.calcSizeHeight = osh;
			this.calcXMin = ox;
			this.calcYMin = oy;
			return w;
		} else {
			this.initGlyphs(text,false);
			this.calcDone = false;
			return this.calcWidth;
		}
	}
	,splitText: function(text) {
		return this.splitRawText(text,0,0);
	}
	,splitRawText: function(text,leftMargin,afterData,font,sizes,prevChar) {
		if(prevChar == null) {
			prevChar = -1;
		}
		if(afterData == null) {
			afterData = 0.;
		}
		if(leftMargin == null) {
			leftMargin = 0.;
		}
		var maxWidth = this.realMaxWidth;
		if(maxWidth < 0) {
			if(sizes == null) {
				return text;
			} else {
				maxWidth = Infinity;
			}
		}
		if(font == null) {
			font = this.font;
		}
		var lines = [];
		var restPos = 0;
		var x = leftMargin;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(text,i);
			var c = font.glyphs.h[cc];
			if(c == null) {
				c = font.charset.resolveChar(cc,font.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			if(font.charset.isBreakChar(cc)) {
				if(lines.length == 0 && leftMargin > 0 && x > maxWidth) {
					lines.push("");
					if(sizes != null) {
						sizes.push(leftMargin);
					}
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = prevChar;
				var breakFound = false;
				while(size <= maxWidth && k < max) {
					var cc1 = HxOverrides.cca(text,k++);
					if(font.charset.isSpace(cc1) || cc1 == 10) {
						breakFound = true;
						break;
					}
					var c1 = font.glyphs.h[cc1];
					if(c1 == null) {
						c1 = font.charset.resolveChar(cc1,font.glyphs);
						if(c1 == null) {
							c1 = cc1 == 13 || cc1 == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					if(font.charset.isBreakChar(cc1)) {
						break;
					}
				}
				if(size > maxWidth || !breakFound && size + afterData > maxWidth) {
					newline = true;
					if(font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null && cc != 10) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				if(sizes != null) {
					sizes.push(x);
				}
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > maxWidth) {
				lines.push("");
				if(sizes != null) {
					sizes.push(leftMargin);
				}
				x -= leftMargin;
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
			if(sizes != null) {
				sizes.push(x);
			}
		}
		return lines.join("\n");
	}
	,getTextProgress: function(text,progress) {
		if(progress >= text.length) {
			return text;
		}
		return HxOverrides.substr(text,0,progress | 0);
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0.;
		var y = 0.;
		var xMax = 0.;
		var xMin = 0.;
		var yMin = 0.;
		var prevChar = -1;
		var linei = 0;
		var align = this.textAlign;
		var lines = [];
		var dl = this.font.lineHeight + this.lineSpacing;
		var t = this.splitRawText(text,0,0,null,lines);
		var _g = 0;
		while(_g < lines.length) {
			var lw = lines[_g];
			++_g;
			if(lw > x) {
				x = lw;
			}
		}
		this.calcWidth = x;
		switch(align._hx_index) {
		case 0:
			x = 0;
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			var _g1 = 0;
			var _g2 = lines.length;
			while(_g1 < _g2) {
				var i = _g1++;
				lines[i] = Math.floor((max - lines[i]) * k);
			}
			x = lines[0];
			xMin = x;
			break;
		}
		var _g11 = 0;
		var _g21 = t.length;
		while(_g11 < _g21) {
			var i1 = _g11++;
			var cc = HxOverrides.cca(t,i1);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines[++linei];
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						var _this1 = this.glyphs;
						_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	,updateSize: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
	}
	,get_textHeight: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcHeight;
	}
	,get_textWidth: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcWidth;
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,updateConstraint: function() {
		var old = this.realMaxWidth;
		if(this.maxWidth == null) {
			this.realMaxWidth = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			this.realMaxWidth = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			this.realMaxWidth = a > b ? b : a;
		}
		if(this.realMaxWidth != old) {
			this.rebuild();
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight - this.calcYMin;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
	,__properties__: $extend(h2d_Drawable.prototype.__properties__,{set_lineSpacing:"set_lineSpacing",set_letterSpacing:"set_letterSpacing",set_textAlign:"set_textAlign",get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_maxWidth:"set_maxWidth",set_textColor:"set_textColor",set_text:"set_text",set_font:"set_font"})
});
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromBitmap = function(bmp) {
	var tex = h3d_mat_Texture.fromBitmap(bmp);
	return new h2d_Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
};
h2d_Tile.autoCut = function(bmp,width,height) {
	bmp.lock();
	if(height == null) {
		height = width;
	}
	var colorBG = bmp.getPixel(bmp.ctx.canvas.width - 1,bmp.ctx.canvas.height - 1);
	var tl = [];
	var w = 1;
	var h = 1;
	while(w < bmp.ctx.canvas.width) w <<= 1;
	while(h < bmp.ctx.canvas.height) h <<= 1;
	var tex = new h3d_mat_Texture(w,h);
	var _g = 0;
	var _g1 = bmp.ctx.canvas.height / height | 0;
	while(_g < _g1) {
		var y = _g++;
		var a = [];
		tl[y] = a;
		var _g2 = 0;
		var _g11 = bmp.ctx.canvas.width / width | 0;
		while(_g2 < _g11) {
			var x = _g2++;
			var sz = h2d_Tile.isEmpty(bmp,x * width,y * height,width,height,colorBG);
			if(sz == null) {
				break;
			}
			a.push(new h2d_Tile(tex,x * width + sz.dx,y * height + sz.dy,sz.w,sz.h,sz.dx,sz.dy));
		}
	}
	bmp.unlock();
	var main = new h2d_Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	main.upload(bmp);
	return { main : main, tiles : tl};
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.fromPixels = function(pixels) {
	var pix2 = pixels.makeSquare(true);
	var t = h3d_mat_Texture.fromPixels(pix2);
	if(pix2 != pixels) {
		pix2.dispose();
	}
	return new h2d_Tile(t,0,0,pixels.width,pixels.height);
};
h2d_Tile.isEmpty = function(b,px,py,width,height,bg) {
	var empty = true;
	var xmin = width;
	var ymin = height;
	var xmax = 0;
	var ymax = 0;
	var _g = 0;
	var _g1 = width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g11 = height;
		while(_g2 < _g11) {
			var y = _g2++;
			var color = b.getPixel(x + px,y + py);
			if((color & -16777216) == 0) {
				if(color != 0) {
					b.setPixel(x + px,y + py,0);
				}
				continue;
			}
			if(color != bg) {
				empty = false;
				if(x < xmin) {
					xmin = x;
				}
				if(y < ymin) {
					ymin = y;
				}
				if(x > xmax) {
					xmax = x;
				}
				if(y > ymax) {
					ymax = y;
				}
			}
			if(color == bg && color != 0) {
				b.setPixel(x + px,y + py,0);
			}
		}
	}
	if(empty) {
		return null;
	} else {
		return { dx : xmin, dy : ymin, w : xmax - xmin + 1, h : ymax - ymin + 1};
	}
};
h2d_Tile.prototype = {
	get_ix: function() {
		return Math.floor(this.x);
	}
	,get_iy: function() {
		return Math.floor(this.y);
	}
	,get_iwidth: function() {
		return Math.ceil(this.width + this.x) - Math.floor(this.x);
	}
	,get_iheight: function() {
		return Math.ceil(this.height + this.y) - Math.floor(this.y);
	}
	,getTexture: function() {
		return this.innerTex;
	}
	,isDisposed: function() {
		if(this.innerTex != null) {
			var _this = this.innerTex;
			if(_this.t == null) {
				return _this.realloc == null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,switchTexture: function(t) {
		this.setTexture(t.innerTex);
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,center: function() {
		return this.sub(0,0,this.width,this.height,-(this.width * .5),-(this.height * .5));
	}
	,setCenterRatio: function(px,py) {
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		this.dx = -(px * this.width);
		this.dy = -(py * this.height);
	}
	,flipX: function() {
		var tmp = this.u;
		this.u = this.u2;
		this.u2 = tmp;
		this.dx = -this.dx - this.width;
	}
	,flipY: function() {
		var tmp = this.v;
		this.v = this.v2;
		this.v2 = tmp;
		this.dy = -this.dy - this.height;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		var tex = this.innerTex;
		if(tex != null) {
			this.u = x / tex.width;
			this.v = y / tex.height;
			this.u2 = (x + this.width) / tex.width;
			this.v2 = (y + this.height) / tex.height;
		}
	}
	,setSize: function(w,h) {
		this.width = w;
		this.height = h;
		var tex = this.innerTex;
		if(tex != null) {
			this.u2 = (this.x + w) / tex.width;
			this.v2 = (this.y + h) / tex.height;
		}
	}
	,scaleToSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,scrollDiscrete: function(dx,dy) {
		var tex = this.innerTex;
		this.u += dx / tex.width;
		this.v -= dy / tex.height;
		this.u2 += dx / tex.width;
		this.v2 -= dy / tex.height;
		this.x = this.u * tex.width;
		this.y = this.v * tex.height;
	}
	,dispose: function() {
		if(this.innerTex != null) {
			this.innerTex.dispose();
		}
		this.innerTex = null;
	}
	,clone: function() {
		var t = new h2d_Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	,split: function(frames,vertical,subpixel) {
		if(subpixel == null) {
			subpixel = false;
		}
		if(vertical == null) {
			vertical = false;
		}
		if(frames == null) {
			frames = 0;
		}
		var tl = [];
		if(vertical) {
			if(frames == 0) {
				frames = this.height / this.width | 0;
			}
			var stride = subpixel ? this.height / frames : this.height / frames | 0;
			var _g = 0;
			var _g1 = frames;
			while(_g < _g1) {
				var i = _g++;
				tl.push(this.sub(0,i * stride,this.width,stride));
			}
		} else {
			if(frames == 0) {
				frames = this.width / this.height | 0;
			}
			var stride1 = subpixel ? this.width / frames : this.width / frames | 0;
			var _g2 = 0;
			var _g11 = frames;
			while(_g2 < _g11) {
				var i1 = _g2++;
				tl.push(this.sub(i1 * stride1,0,stride1,this.height));
			}
		}
		return tl;
	}
	,gridFlatten: function(size,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.height / size | 0;
		while(_g1 < _g2) {
			var y = _g1++;
			var _g11 = 0;
			var _g21 = this.width / size | 0;
			while(_g11 < _g21) {
				var x = _g11++;
				_g.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
		}
		return _g;
	}
	,grid: function(size,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.width / size | 0;
		while(_g1 < _g2) {
			var x = _g1++;
			var _g11 = [];
			var _g21 = 0;
			var _g3 = this.height / size | 0;
			while(_g21 < _g3) {
				var y = _g21++;
				_g11.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
			_g.push(_g11);
		}
		return _g;
	}
	,toString: function() {
		return "Tile(" + this.x + "," + this.y + "," + this.width + "x" + this.height + (this.dx != 0 || this.dy != 0 ? "," + this.dx + ":" + this.dy : "") + ")";
	}
	,upload: function(bmp) {
		var w = this.innerTex.width;
		var h = this.innerTex.height;
		this.innerTex.uploadBitmap(bmp);
	}
	,__class__: h2d_Tile
	,__properties__: {get_iheight:"get_iheight",get_iwidth:"get_iwidth",get_iy:"get_iy",get_ix:"get_ix"}
};
var h2d_TileLayerContent = function() {
	h3d_prim_Primitive.call(this);
	this.clear();
};
$hxClasses["h2d.TileLayerContent"] = h2d_TileLayerContent;
h2d_TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		if(this.buffer != null) {
			this.buffer.dispose();
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
	}
	,isEmpty: function() {
		return this.triCount() == 0;
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.totalVertices() >> 1;
		}
	}
	,addColor: function(x,y,color,t) {
		this.add(x,y,color.x,color.y,color.z,color.w,t);
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = sy;
		var this3 = this.tmp;
		var v = t.u;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = v;
		var this4 = this.tmp;
		var v1 = t.v;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v1;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = r;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = g;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = b;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = a;
		var this9 = this.tmp;
		var v2 = sx + t.width;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = v2;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = sy;
		var this11 = this.tmp;
		var v3 = t.u2;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = v3;
		var this12 = this.tmp;
		var v4 = t.v;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = v4;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = r;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = g;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = b;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = a;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = sx;
		var this18 = this.tmp;
		var v5 = sy + t.height;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = v5;
		var this19 = this.tmp;
		var v6 = t.u;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = v6;
		var this20 = this.tmp;
		var v7 = t.v2;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = v7;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = r;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = g;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = b;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = a;
		var this25 = this.tmp;
		var v8 = sx + t.width;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = v8;
		var this26 = this.tmp;
		var v9 = sy + t.height;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = v9;
		var this27 = this.tmp;
		var v10 = t.u2;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = v10;
		var this28 = this.tmp;
		var v11 = t.v2;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = v11;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = r;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = g;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = b;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
	}
	,addTransform: function(x,y,sx,sy,r,c,t) {
		var _gthis = this;
		var ca = Math.cos(r);
		var sa = Math.sin(r);
		var hx = t.width;
		var hy = t.height;
		var dx = t.dx * sx;
		var dy = t.dy * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = py;
		var this3 = this.tmp;
		var v = t.u;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = v;
		var this4 = this.tmp;
		var v1 = t.v;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v1;
		var this5 = this.tmp;
		var v2 = c.x;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = v2;
		var this6 = this.tmp;
		var v3 = c.y;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = v3;
		var this7 = this.tmp;
		var v4 = c.z;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = v4;
		var this8 = this.tmp;
		var v5 = c.w;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = v5;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		var dx1 = (t.dx + hx) * sx;
		var dy1 = t.dy * sy;
		var px1 = dx1 * ca - dy1 * sa + x;
		var py1 = dy1 * ca + dx1 * sa + y;
		var this9 = this.tmp;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = px1;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = py1;
		var this11 = this.tmp;
		var v6 = t.u2;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = v6;
		var this12 = this.tmp;
		var v7 = t.v;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = v7;
		var this13 = this.tmp;
		var v8 = c.x;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = v8;
		var this14 = this.tmp;
		var v9 = c.y;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = v9;
		var this15 = this.tmp;
		var v10 = c.z;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = v10;
		var this16 = this.tmp;
		var v11 = c.w;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = v11;
		if(px1 < _gthis.xMin) {
			_gthis.xMin = px1;
		}
		if(py1 < _gthis.yMin) {
			_gthis.yMin = py1;
		}
		if(px1 > _gthis.xMax) {
			_gthis.xMax = px1;
		}
		if(py1 > _gthis.yMax) {
			_gthis.yMax = py1;
		}
		var dx2 = t.dx * sx;
		var dy2 = (t.dy + hy) * sy;
		var px2 = dx2 * ca - dy2 * sa + x;
		var py2 = dy2 * ca + dx2 * sa + y;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = px2;
		var this18 = this.tmp;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = py2;
		var this19 = this.tmp;
		var v12 = t.u;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = v12;
		var this20 = this.tmp;
		var v13 = t.v2;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = v13;
		var this21 = this.tmp;
		var v14 = c.x;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = v14;
		var this22 = this.tmp;
		var v15 = c.y;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = v15;
		var this23 = this.tmp;
		var v16 = c.z;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = v16;
		var this24 = this.tmp;
		var v17 = c.w;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = v17;
		if(px2 < _gthis.xMin) {
			_gthis.xMin = px2;
		}
		if(py2 < _gthis.yMin) {
			_gthis.yMin = py2;
		}
		if(px2 > _gthis.xMax) {
			_gthis.xMax = px2;
		}
		if(py2 > _gthis.yMax) {
			_gthis.yMax = py2;
		}
		var dx3 = (t.dx + hx) * sx;
		var dy3 = (t.dy + hy) * sy;
		var px3 = dx3 * ca - dy3 * sa + x;
		var py3 = dy3 * ca + dx3 * sa + y;
		var this25 = this.tmp;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = px3;
		var this26 = this.tmp;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = py3;
		var this27 = this.tmp;
		var v18 = t.u2;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = v18;
		var this28 = this.tmp;
		var v19 = t.v2;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = v19;
		var this29 = this.tmp;
		var v20 = c.x;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = v20;
		var this30 = this.tmp;
		var v21 = c.y;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = v21;
		var this31 = this.tmp;
		var v22 = c.z;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = v22;
		var this32 = this.tmp;
		var v23 = c.w;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = v23;
		if(px3 < _gthis.xMin) {
			_gthis.xMin = px3;
		}
		if(py3 < _gthis.yMin) {
			_gthis.yMin = py3;
		}
		if(px3 > _gthis.xMax) {
			_gthis.xMax = px3;
		}
		if(py3 > _gthis.yMax) {
			_gthis.yMax = py3;
		}
	}
	,addPoint: function(x,y,color) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = y;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = 0;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = 0;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = (color >> 16 & 255) / 255.;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = (color >> 8 & 255) / 255.;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = (color & 255) / 255.;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = (color >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,insertColor: function(c) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (c >> 16 & 255) / 255.;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = (c >> 8 & 255) / 255.;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = (c & 255) / 255.;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = (c >>> 24) / 255.;
	}
	,rectColor: function(x,y,w,h,color) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = y;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = 0;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = 0;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = (color >> 16 & 255) / 255.;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = (color >> 8 & 255) / 255.;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = (color & 255) / 255.;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = (color >>> 24) / 255.;
		var this9 = this.tmp;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = x + w;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = y;
		var this11 = this.tmp;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = 1;
		var this12 = this.tmp;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = 0;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = (color >> 16 & 255) / 255.;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = (color >> 8 & 255) / 255.;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = (color & 255) / 255.;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = (color >>> 24) / 255.;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = x;
		var this18 = this.tmp;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = y + h;
		var this19 = this.tmp;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = 0;
		var this20 = this.tmp;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = 1;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = (color >> 16 & 255) / 255.;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = (color >> 8 & 255) / 255.;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = (color & 255) / 255.;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = (color >>> 24) / 255.;
		var this25 = this.tmp;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = x + w;
		var this26 = this.tmp;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = y + h;
		var this27 = this.tmp;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = 1;
		var this28 = this.tmp;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = 1;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = (color >> 16 & 255) / 255.;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = (color >> 8 & 255) / 255.;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = (color & 255) / 255.;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = (color >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		x += w;
		y += h;
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,rectGradient: function(x,y,w,h,ctl,ctr,cbl,cbr) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = y;
		var this3 = this.tmp;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = 0;
		var this4 = this.tmp;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = 0;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = (ctl >> 16 & 255) / 255.;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = (ctl >> 8 & 255) / 255.;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = (ctl & 255) / 255.;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = (ctl >>> 24) / 255.;
		var this9 = this.tmp;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = x + w;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = y;
		var this11 = this.tmp;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = 1;
		var this12 = this.tmp;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = 0;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = (ctr >> 16 & 255) / 255.;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = (ctr >> 8 & 255) / 255.;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = (ctr & 255) / 255.;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = (ctr >>> 24) / 255.;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = x;
		var this18 = this.tmp;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = y + h;
		var this19 = this.tmp;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = 0;
		var this20 = this.tmp;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = 1;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = (cbl >> 16 & 255) / 255.;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = (cbl >> 8 & 255) / 255.;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = (cbl & 255) / 255.;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = (cbl >>> 24) / 255.;
		var this25 = this.tmp;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = x + w;
		var this26 = this.tmp;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = y + h;
		var this27 = this.tmp;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = 1;
		var this28 = this.tmp;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = 0;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = (cbr >> 16 & 255) / 255.;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = (cbr >> 8 & 255) / 255.;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = (cbr & 255) / 255.;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = (cbr >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		x += w;
		y += h;
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,fillArc: function(x,y,ray,c,start,end) {
		if(end <= start) {
			return;
		}
		var arcLength = end - start;
		var nsegments = Math.ceil(ray * 3.14 * 2 / 4);
		if(nsegments < 4) {
			nsegments = 4;
		}
		var angle = arcLength / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var _x = 0.;
		var _y = 0.;
		var i = 0;
		while(i < nsegments) {
			var a = start + i * angle;
			_x = x + Math.cos(a) * ray;
			_y = y + Math.sin(a) * ray;
			if(prevX != -Infinity) {
				this.addPoint(x,y,c);
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(prevX,prevY,c);
			}
			prevX = _x;
			prevY = _y;
			++i;
		}
		var a1 = end;
		_x = x + Math.cos(a1) * ray;
		_y = y + Math.sin(a1) * ray;
		this.addPoint(x,y,c);
		this.addPoint(_x,_y,c);
		this.addPoint(prevX,prevY,c);
		this.addPoint(prevX,prevY,c);
	}
	,fillCircle: function(x,y,radius,c) {
		var nsegments = Math.ceil(radius * 3.14 * 2 / 2);
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = Math.PI * 2 / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var firstX = -Infinity;
		var firstY = -Infinity;
		var curX = 0.;
		var curY = 0.;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			curX = x + Math.cos(a) * radius;
			curY = y + Math.sin(a) * radius;
			if(prevX != -Infinity) {
				this.addPoint(x,y,c);
				this.addPoint(curX,curY,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(x,y,c);
			}
			if(firstX == -Infinity) {
				firstX = curX;
				firstY = curY;
			}
			prevX = curX;
			prevY = curY;
		}
		this.addPoint(x,y,c);
		this.addPoint(curX,curY,c);
		this.addPoint(firstX,firstY,c);
		this.addPoint(x,y,c);
	}
	,circle: function(x,y,ray,size,c) {
		if(size > ray) {
			return;
		}
		var nsegments = Math.ceil(ray * 3.14 * 2 / 2);
		if(nsegments < 3) {
			nsegments = 3;
		}
		var ray1 = ray - size;
		var angle = Math.PI * 2 / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var prevX1 = -Infinity;
		var prevY1 = -Infinity;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			var _x = x + Math.cos(a) * ray;
			var _y = y + Math.sin(a) * ray;
			var _x1 = x + Math.cos(a) * ray1;
			var _y1 = y + Math.sin(a) * ray1;
			if(prevX != -Infinity) {
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(_x1,_y1,c);
				this.addPoint(prevX1,prevY1,c);
			}
			prevX = _x;
			prevY = _y;
			prevX1 = _x1;
			prevY1 = _y1;
		}
	}
	,arc: function(x,y,ray,size,start,end,c) {
		if(size > ray) {
			return;
		}
		if(end <= start) {
			return;
		}
		var arcLength = end - start;
		var nsegments = Math.ceil(ray * 3.14 * 2 / 4);
		if(nsegments < 3) {
			nsegments = 3;
		}
		var ray1 = ray - size;
		var angle = arcLength / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var prevX1 = -Infinity;
		var prevY1 = -Infinity;
		var _x = 0.;
		var _y = 0.;
		var _x1 = 0.;
		var _y1 = 0.;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = start + i * angle;
			_x = x + Math.cos(a) * ray;
			_y = y + Math.sin(a) * ray;
			_x1 = x + Math.cos(a) * ray1;
			_y1 = y + Math.sin(a) * ray1;
			if(prevX != -Infinity) {
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(_x1,_y1,c);
				this.addPoint(prevX1,prevY1,c);
			}
			prevX = _x;
			prevY = _y;
			prevX1 = _x1;
			prevY1 = _y1;
		}
		var a1 = end;
		_x = x + Math.cos(a1) * ray;
		_y = y + Math.sin(a1) * ray;
		_x1 = x + Math.cos(a1) * ray1;
		_y1 = y + Math.sin(a1) * ray1;
		this.addPoint(_x,_y,c);
		this.addPoint(prevX,prevY,c);
		this.addPoint(_x1,_y1,c);
		this.addPoint(prevX1,prevY1,c);
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,flush: function() {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
	}
	,doRender: function(engine,min,len) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
		if(this.buffer != null) {
			var start = min;
			var max = len;
			if(max == null) {
				max = -1;
			}
			if(start == null) {
				start = 0;
			}
			engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,start,max);
		}
	}
	,__class__: h2d_TileLayerContent
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	this.curColor = new h3d_Vector(1,1,1,1);
	this.content = new h2d_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = "h2d.TileGroup";
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,invalidate: function() {
		this.content.dispose();
	}
	,count: function() {
		return this.content.triCount() >> 1;
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,setDefaultColor: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		this.curColor.x = (rgb >> 16 & 255) / 255;
		this.curColor.y = (rgb >> 8 & 255) / 255;
		this.curColor.z = (rgb & 255) / 255;
		this.curColor.w = alpha;
	}
	,add: function(x,y,t) {
		this.content.add(x,y,this.curColor.x,this.curColor.y,this.curColor.z,this.curColor.w,t);
	}
	,addColor: function(x,y,r,g,b,a,t) {
		this.content.add(x,y,r,g,b,a,t);
	}
	,addAlpha: function(x,y,a,t) {
		this.content.add(x,y,this.curColor.x,this.curColor.y,this.curColor.z,a,t);
	}
	,addTransform: function(x,y,sx,sy,r,t) {
		this.content.addTransform(x,y,sx,sy,r,this.curColor,t);
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawObject(obj,this.tile.innerTex)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		this.content.doRender(ctx.engine,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.fromValues = function(x0,y0,width,height) {
	var b = new h2d_col_Bounds();
	b.xMin = x0;
	b.yMin = y0;
	b.xMax = x0 + width;
	b.yMax = y0 + height;
	return b;
};
h2d_col_Bounds.fromPoints = function(min,max) {
	var b = new h2d_col_Bounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.xMax = max.x;
	b.yMax = max.y;
	return b;
};
h2d_col_Bounds.prototype = {
	toIBounds: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		var ix = Math.floor(this.xMin * scale);
		var iy = Math.floor(this.yMin * scale);
		var width = Math.ceil(this.xMax * scale) - ix;
		var height = Math.ceil(this.yMax * scale) - iy;
		var b = new h2d_col_IBounds();
		b.xMin = ix;
		b.yMin = iy;
		b.xMax = ix + width;
		b.yMax = iy + height;
		return b;
	}
	,intersects: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,addBounds: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	,addPos: function(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,set: function(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	,doIntersect: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		this.yMin = a1 < b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		this.xMax = a2 > b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		this.yMax = a3 > b4 ? b4 : a3;
	}
	,doUnion: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		this.yMin = a1 > b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		this.xMax = a2 < b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		this.yMax = a3 < b4 ? b4 : a3;
	}
	,intersection: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		i.yMin = a1 < b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		i.xMax = a2 > b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		i.yMax = a3 > b4 ? b4 : a3;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	,union: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		i.yMin = a1 > b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		i.xMax = a2 < b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		i.yMax = a3 < b4 ? b4 : a3;
		return i;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	,scalePivot: function(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.xMax *= v;
		this.yMax *= v;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.xMax = mx + dx;
		this.yMax = my + dy;
	}
	,rotate: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var x0 = this.xMin;
		var y0 = this.yMin;
		var x1 = this.xMax;
		var y1 = this.yMax;
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
		var x = x0 * cos - y0 * sin;
		var y = x0 * sin + y0 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var x2 = x1 * cos - y0 * sin;
		var y2 = x1 * sin + y0 * cos;
		if(x2 < this.xMin) {
			this.xMin = x2;
		}
		if(x2 > this.xMax) {
			this.xMax = x2;
		}
		if(y2 < this.yMin) {
			this.yMin = y2;
		}
		if(y2 > this.yMax) {
			this.yMax = y2;
		}
		var x3 = x0 * cos - y1 * sin;
		var y3 = x0 * sin + y1 * cos;
		if(x3 < this.xMin) {
			this.xMin = x3;
		}
		if(x3 > this.xMax) {
			this.xMax = x3;
		}
		if(y3 < this.yMin) {
			this.yMin = y3;
		}
		if(y3 > this.yMax) {
			this.yMax = y3;
		}
		var x4 = x1 * cos - y1 * sin;
		var y4 = x1 * sin + y1 * cos;
		if(x4 < this.xMin) {
			this.xMin = x4;
		}
		if(x4 > this.xMax) {
			this.xMax = x4;
		}
		if(y4 < this.yMin) {
			this.yMin = y4;
		}
		if(y4 > this.yMax) {
			this.yMax = y4;
		}
	}
	,offset: function(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	,getMin: function() {
		return new h2d_col_Point(this.xMin,this.yMin);
	}
	,getCenter: function() {
		return new h2d_col_Point((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5);
	}
	,getSize: function() {
		return new h2d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin);
	}
	,getMax: function() {
		return new h2d_col_Point(this.xMax,this.yMax);
	}
	,isEmpty: function() {
		if(!(this.xMax <= this.xMin)) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
	}
	,all: function() {
		this.xMin = -1e20;
		this.yMin = -1e20;
		this.xMax = 1e20;
		this.yMax = 1e20;
	}
	,clone: function() {
		var b = new h2d_col_Bounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	,get_x: function() {
		return this.xMin;
	}
	,get_y: function() {
		return this.yMin;
	}
	,set_x: function(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	,set_y: function(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	,get_width: function() {
		return this.xMax - this.xMin;
	}
	,get_height: function() {
		return this.yMax - this.yMin;
	}
	,set_width: function(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	,set_height: function(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	,toString: function() {
		return "{" + Std.string(new h2d_col_Point(this.xMin,this.yMin)) + "," + Std.string(new h2d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin)) + "}";
	}
	,__class__: h2d_col_Bounds
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var h2d_col_Collider = function() { };
$hxClasses["h2d.col.Collider"] = h2d_col_Collider;
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.__isInterface__ = true;
h2d_col_Collider.prototype = {
	__class__: h2d_col_Collider
};
var h2d_col_IBounds = function() {
	this.xMin = 2147483647;
	this.yMin = 2147483647;
	this.xMax = -2147483648;
	this.yMax = -2147483648;
};
$hxClasses["h2d.col.IBounds"] = h2d_col_IBounds;
h2d_col_IBounds.__name__ = "h2d.col.IBounds";
h2d_col_IBounds.fromValues = function(x0,y0,width,height) {
	var b = new h2d_col_IBounds();
	b.xMin = x0;
	b.yMin = y0;
	b.xMax = x0 + width;
	b.yMax = y0 + height;
	return b;
};
h2d_col_IBounds.fromPoints = function(min,max) {
	var b = new h2d_col_IBounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.xMax = max.x;
	b.yMax = max.y;
	return b;
};
h2d_col_IBounds.prototype = {
	toBounds: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		var x0 = this.xMin * scale;
		var y0 = this.yMin * scale;
		var width = (this.xMax - this.xMin) * scale;
		var height = (this.yMax - this.yMin) * scale;
		var b = new h2d_col_Bounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		return b;
	}
	,intersects: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,addBounds: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	,addPos: function(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,set: function(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	,doIntersect: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		this.yMin = a1 < b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		this.xMax = a2 > b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		this.yMax = a3 > b4 ? b4 : a3;
	}
	,doUnion: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		this.yMin = a1 > b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		this.xMax = a2 < b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		this.yMax = a3 < b4 ? b4 : a3;
	}
	,intersection: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		i.yMin = a1 < b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		i.xMax = a2 > b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		i.yMax = a3 > b4 ? b4 : a3;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	,union: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		var a1 = this.yMin;
		var b2 = b.yMin;
		i.yMin = a1 > b2 ? b2 : a1;
		var a2 = this.xMax;
		var b3 = b.xMax;
		i.xMax = a2 < b3 ? b3 : a2;
		var a3 = this.yMax;
		var b4 = b.yMax;
		i.yMax = a3 < b4 ? b4 : a3;
		return i;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	,offset: function(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	,getMin: function() {
		return new h2d_col_IPoint(this.xMin,this.yMin);
	}
	,getCenter: function() {
		return new h2d_col_IPoint(this.xMin + this.xMax >> 1,this.yMin + this.yMax >> 1);
	}
	,getSize: function() {
		return new h2d_col_IPoint(this.xMax - this.xMin,this.yMax - this.yMin);
	}
	,getMax: function() {
		return new h2d_col_IPoint(this.xMax,this.yMax);
	}
	,isEmpty: function() {
		if(this.xMax > this.xMin) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 2147483647;
		this.yMin = 2147483647;
		this.xMax = -2147483648;
		this.yMax = -2147483648;
	}
	,all: function() {
		this.xMin = -2147483648;
		this.yMin = -2147483648;
		this.xMax = 2147483647;
		this.yMax = 2147483647;
	}
	,clone: function() {
		var b = new h2d_col_IBounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	,get_x: function() {
		return this.xMin;
	}
	,get_y: function() {
		return this.yMin;
	}
	,set_x: function(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	,set_y: function(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	,get_width: function() {
		return this.xMax - this.xMin;
	}
	,get_height: function() {
		return this.yMax - this.yMin;
	}
	,set_width: function(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	,set_height: function(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	,toString: function() {
		return "{" + Std.string(new h2d_col_IPoint(this.xMin,this.yMin)) + "," + Std.string(new h2d_col_IPoint(this.xMax - this.xMin,this.yMax - this.yMin)) + "}";
	}
	,__class__: h2d_col_IBounds
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var h2d_col_IPoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.IPoint"] = h2d_col_IPoint;
h2d_col_IPoint.__name__ = "h2d.col.IPoint";
h2d_col_IPoint.prototype = {
	toPoint: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		return new h2d_col_Point(this.x * scale,this.y * scale);
	}
	,distanceSq: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,toString: function() {
		return "{" + this.x + "," + this.y + "}";
	}
	,sub: function(p) {
		return new h2d_col_Point(this.x - p.x,this.y - p.y);
	}
	,add: function(p) {
		return new h2d_col_Point(this.x + p.x,this.y + p.y);
	}
	,equals: function(other) {
		if(this.x == other.x) {
			return this.y == other.y;
		} else {
			return false;
		}
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,clone: function() {
		return new h2d_col_IPoint(this.x,this.y);
	}
	,__class__: h2d_col_IPoint
};
var h2d_col_Matrix = function() {
	this.a = 1;
	this.b = 0;
	this.c = 0;
	this.d = 1;
	this.x = 0;
	this.y = 0;
};
$hxClasses["h2d.col.Matrix"] = h2d_col_Matrix;
h2d_col_Matrix.__name__ = "h2d.col.Matrix";
h2d_col_Matrix.prototype = {
	identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = 0;
		this.y = 0;
	}
	,initTranslate: function(x,y) {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = x;
		this.y = y;
	}
	,initScale: function(sx,sy) {
		this.a = sx;
		this.b = 0;
		this.c = 0;
		this.d = sy;
		this.x = 0;
		this.y = 0;
	}
	,initRotate: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		this.a = cos;
		this.b = sin;
		this.c = -sin;
		this.d = cos;
		this.x = 0;
		this.y = 0;
	}
	,invert: function() {
		this.inverse(this);
	}
	,getDeterminant: function() {
		return this.a * this.d - this.b * this.c;
	}
	,inverse: function(m) {
		var a = m.a;
		var b = m.b;
		var c = m.c;
		var d = m.d;
		var x = m.x;
		var y = m.y;
		var invDet = 1 / (this.a * this.d - this.b * this.c);
		this.a = d * invDet;
		this.b = -b * invDet;
		this.c = -c * invDet;
		this.d = a * invDet;
		this.x = (-x * d + c * y) * invDet;
		this.y = (x * b - a * y) * invDet;
	}
	,transform: function(pt) {
		return new h2d_col_Point(pt.x * this.a + pt.y * this.c + this.x,pt.x * this.b + pt.y * this.d + this.y);
	}
	,translate: function(x,y) {
		this.x += x;
		this.y += y;
	}
	,prependTranslate: function(x,y) {
		this.x += this.a * x + this.c * y;
		this.y += this.b * x + this.d * y;
	}
	,multiply: function(a,b) {
		var aa = a.a;
		var ab = a.b;
		var ac = a.c;
		var ad = a.d;
		var ax = a.x;
		var ay = a.y;
		var ba = b.a;
		var bb = b.b;
		var bc = b.c;
		var bd = b.d;
		var bx = b.x;
		var by = b.y;
		this.a = aa * ba + ab * bc;
		this.b = aa * bb + ab * bd;
		this.c = ac * ba + ad * bc;
		this.d = ac * bb + ad * bd;
		this.x = ax * ba + ay * bc + bx;
		this.y = ax * bb + ay * bd + by;
	}
	,getScale: function(p) {
		if(p == null) {
			p = new h2d_col_Point();
		}
		p.x = Math.sqrt(this.a * this.a + this.b * this.b);
		p.y = Math.sqrt(this.c * this.c + this.d * this.d);
		if(this.a * this.d - this.b * this.c < 0) {
			p.x *= -1;
			p.y *= -1;
		}
		return p;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.c *= sx;
		this.x *= sx;
		this.b *= sy;
		this.d *= sy;
		this.y *= sy;
	}
	,rotate: function(angle) {
		var _this = h2d_col_Matrix.tmp;
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		_this.a = cos;
		_this.b = sin;
		_this.c = -sin;
		_this.d = cos;
		_this.x = 0;
		_this.y = 0;
		this.multiply(this,h2d_col_Matrix.tmp);
	}
	,clone: function() {
		var m = new h2d_col_Matrix();
		m.a = this.a;
		m.b = this.b;
		m.c = this.c;
		m.d = this.d;
		m.x = this.x;
		m.y = this.y;
		return m;
	}
	,getPosition: function(p) {
		if(p == null) {
			p = new h2d_col_Point();
		}
		p.x = this.x;
		p.y = this.y;
		return p;
	}
	,toString: function() {
		return "MAT=[\n" + "  [ " + hxd_Math.fmt(this.a) + ", " + hxd_Math.fmt(this.b) + " ]\n" + "  [ " + hxd_Math.fmt(this.c) + ", " + hxd_Math.fmt(this.d) + " ]\n" + "  [ " + hxd_Math.fmt(this.x) + ", " + hxd_Math.fmt(this.y) + " ]\n" + "]";
	}
	,__class__: h2d_col_Matrix
};
var h2d_col_Point = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.Point"] = h2d_col_Point;
h2d_col_Point.__name__ = "h2d.col.Point";
h2d_col_Point.prototype = {
	toIPoint: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		return new h2d_col_IPoint(Math.round(this.x * scale),Math.round(this.y * scale));
	}
	,distanceSq: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "}";
	}
	,sub: function(p) {
		return new h2d_col_Point(this.x - p.x,this.y - p.y);
	}
	,add: function(p) {
		return new h2d_col_Point(this.x + p.x,this.y + p.y);
	}
	,equals: function(other) {
		if(this.x == other.x) {
			return this.y == other.y;
		} else {
			return false;
		}
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y;
	}
	,rotate: function(angle) {
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var x2 = this.x * c - this.y * s;
		var y2 = this.x * s + this.y * c;
		this.x = x2;
		this.y = y2;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
	}
	,normalizeFast: function() {
		var k = this.x * this.x + this.y * this.y;
		k = 1. / Math.sqrt(k);
		this.x *= k;
		this.y *= k;
	}
	,set: function(x,y) {
		this.x = x;
		this.y = y;
	}
	,load: function(p) {
		this.x = p.x;
		this.y = p.y;
	}
	,scale: function(f) {
		this.x *= f;
		this.y *= f;
		return this;
	}
	,clone: function() {
		return new h2d_col_Point(this.x,this.y);
	}
	,__class__: h2d_col_Point
};
var h2d_filter_Filter = function() {
	this.enable = true;
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	get_enable: function() {
		return this.enable;
	}
	,set_enable: function(v) {
		return this.enable = v;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds) {
		s.getBounds(s,bounds);
		bounds.xMin -= this.boundsExtend;
		bounds.yMin -= this.boundsExtend;
		bounds.xMax += this.boundsExtend;
		bounds.yMax += this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
	,__properties__: {set_enable:"set_enable",get_enable:"get_enable"}
};
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__ : true, __constructs__ : ["Dynamic","Triangles","Quads","Managed","RawFormat","NoAlloc","UniformBuffer"]
	,Dynamic: {_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,Triangles: {_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,Quads: {_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,Managed: {_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,RawFormat: {_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_index:6,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer];
var h3d_Buffer = function(vertices,stride,flags) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,stride,flags) {
	var nvert = v.pos / stride | 0;
	var b = new h3d_Buffer(nvert,stride,flags);
	b.uploadVector(v,0,nvert);
	return b;
};
h3d_Buffer.ofSubFloats = function(v,stride,vertices,flags) {
	var b = new h3d_Buffer(vertices,stride,flags);
	b.uploadVector(v,0,vertices);
	return b;
};
h3d_Buffer.prototype = {
	isDisposed: function() {
		if(this.buffer != null) {
			return this.buffer.vbuf == null;
		} else {
			return true;
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	,totalVertices: function() {
		var count = 0;
		var b = this;
		while(b != null) {
			count += b.vertices;
			b = b.next;
		}
		return count;
	}
	,uploadVector: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	,uploadBytes: function(data,dataPos,vertices) {
		var cur = this;
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices > cur.vertices ? cur.vertices : vertices;
			cur.buffer.uploadVertexBytes(cur.position,count,data,dataPos);
			dataPos += count * this.buffer.stride * 4;
			vertices -= count;
			cur = cur.next;
		}
	}
	,readBytes: function(bytes,bytesPosition,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.readVertexBytes(cur.position + startVertice,count,bytes,bytesPosition);
			startVertice = 0;
			bytesPosition += count * this.buffer.stride * 4;
			vertices -= count;
			cur = cur.next;
		}
	}
	,__class__: h3d_Buffer
};
var h3d_BufferOffset = function(buffer,offset) {
	this.buffer = buffer;
	this.offset = offset;
};
$hxClasses["h3d.BufferOffset"] = h3d_BufferOffset;
h3d_BufferOffset.__name__ = "h3d.BufferOffset";
h3d_BufferOffset.prototype = {
	clone: function() {
		var b = new h3d_BufferOffset(this.buffer,this.offset);
		return b;
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		this.next = null;
	}
	,__class__: h3d_BufferOffset
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	this.pos = new h3d_Vector(2,3,4);
	this.up = new h3d_Vector(0,0,1);
	this.target = new h3d_Vector(0,0,0);
	this.m = new h3d_Matrix();
	this.mcam = new h3d_Matrix();
	this.mproj = new h3d_Matrix();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	setFovX: function(fovX,withRatio) {
		var degToRad = Math.PI / 180;
		this.fovY = 2 * Math.atan(Math.tan(fovX * 0.5 * degToRad) / withRatio) / degToRad;
	}
	,getFovX: function() {
		var degToRad = Math.PI / 180;
		var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
		var fovX = halfFovX * 2 / degToRad;
		return fovX;
	}
	,clone: function() {
		var c = new h3d_Camera(this.fovY,this.zoom,this.screenRatio,this.zNear,this.zFar,this.rightHanded);
		var _this = this.pos;
		c.pos = new h3d_Vector(_this.x,_this.y,_this.z,_this.w);
		var _this1 = this.up;
		c.up = new h3d_Vector(_this1.x,_this1.y,_this1.z,_this1.w);
		var _this2 = this.target;
		c.target = new h3d_Vector(_this2.x,_this2.y,_this2.z,_this2.w);
		c.update();
		return c;
	}
	,getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,getInverseProj: function() {
		if(this.mprojInv == null) {
			this.mprojInv = new h3d_Matrix();
			this.mprojInv._44 = 0;
		}
		if(this.mprojInv._44 == 0) {
			this.mprojInv.initInverse(this.mproj);
		}
		return this.mprojInv;
	}
	,getInverseView: function() {
		if(this.mcamInv == null) {
			this.mcamInv = new h3d_Matrix();
			this.mcamInv._44 = 0;
		}
		if(this.mcamInv._44 == 0) {
			this.mcamInv.initInverse(this.mcam);
		}
		return this.mcamInv;
	}
	,setCubeMap: function(face,position) {
		var dx = 0;
		var dy = 0;
		var dz = 0;
		switch(face) {
		case 0:
			dx = 1;
			var _this = this.up;
			var x = 0;
			var y = 1;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			break;
		case 1:
			dx = -1;
			var _this1 = this.up;
			var x1 = 0;
			var y1 = 1;
			var z1 = 0;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = 1.;
			break;
		case 2:
			dy = 1;
			var _this2 = this.up;
			var x2 = 0;
			var y2 = 0;
			var z2 = -1;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = z2;
			_this2.w = 1.;
			break;
		case 3:
			dy = -1;
			var _this3 = this.up;
			var x3 = 0;
			var y3 = 0;
			var z3 = 1;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			_this3.x = x3;
			_this3.y = y3;
			_this3.z = z3;
			_this3.w = 1.;
			break;
		case 4:
			dz = 1;
			var _this4 = this.up;
			var x4 = 0;
			var y4 = 1;
			var z4 = 0;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			_this4.x = x4;
			_this4.y = y4;
			_this4.z = z4;
			_this4.w = 1.;
			break;
		case 5:
			dz = -1;
			var _this5 = this.up;
			var x5 = 0;
			var y5 = 1;
			var z5 = 0;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			_this5.x = x5;
			_this5.y = y5;
			_this5.z = z5;
			_this5.w = 1.;
			break;
		}
		if(position != null) {
			var _this6 = this.pos;
			_this6.x = position.x;
			_this6.y = position.y;
			_this6.z = position.z;
			_this6.w = position.w;
		}
		var _this7 = this.target;
		var x6 = this.pos.x + dx;
		var y6 = this.pos.y + dy;
		var z6 = this.pos.z + dz;
		if(z6 == null) {
			z6 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		_this7.x = x6;
		_this7.y = y6;
		_this7.z = z6;
		_this7.w = 1.;
	}
	,unproject: function(screenX,screenY,camZ) {
		var p = new h3d_Vector(screenX,screenY,camZ);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	,rayFromScreen: function(pixelX,pixelY) {
		var engine = h3d_Engine.CURRENT;
		var rx = (pixelX / engine.width - 0.5) * 2;
		var ry = (0.5 - pixelY / engine.height) * 2;
		var _this = this.unproject(rx,ry,0);
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p1_x = x;
		var p1_y = y;
		var p1_z = z;
		var _this1 = this.unproject(rx,ry,1);
		var x1 = _this1.x;
		var y1 = _this1.y;
		var z1 = _this1.z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p2_x = x1;
		var p2_y = y1;
		var p2_z = z1;
		var r = new h3d_col_Ray();
		r.px = p1_x;
		r.py = p1_y;
		r.pz = p1_z;
		r.lx = p2_x - p1_x;
		r.ly = p2_y - p1_y;
		r.lz = p2_z - p1_z;
		r.normalize();
		return r;
	}
	,update: function() {
		if(this.follow != null) {
			var _this = this.pos;
			var x = 0;
			var y = 0;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			var _this1 = this.target;
			var x1 = 0;
			var y1 = 0;
			var z1 = 0;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = 1.;
			this.follow.pos.localToGlobal(this.pos);
			this.follow.target.localToGlobal(this.target);
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,getFrustumCorners: function(zMax) {
		if(zMax == null) {
			zMax = 1.;
		}
		return [this.unproject(-1,1,0),this.unproject(1,1,0),this.unproject(1,-1,0),this.unproject(-1,-1,0),this.unproject(-1,1,zMax),this.unproject(1,1,zMax),this.unproject(1,-1,zMax),this.unproject(-1,-1,zMax)];
	}
	,lostUp: function() {
		var _this = this.pos;
		var p2 = new h3d_Vector(_this.x,_this.y,_this.z,_this.w);
		p2.normalize();
		var v = this.up;
		return Math.abs(p2.x * v.x + p2.y * v.y + p2.z * v.z) > 0.999;
	}
	,movePosAxis: function(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		var x = dx;
		var y = dy;
		var z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var p_w = 1.;
		var m = this.mcam;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		var iw = 1 / (p_x * m._14 + p_y * m._24 + p_z * m._34 + p_w * m._44);
		p_x = px * iw;
		p_y = py * iw;
		p_z = pz * iw;
		p_w = 1;
		this.pos.x += p_x;
		this.pos.y += p_y;
		this.pos.z += p_z;
	}
	,moveTargetAxis: function(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		var x = dx;
		var y = dy;
		var z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var p_w = 1.;
		var m = this.mcam;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		var iw = 1 / (p_x * m._14 + p_y * m._24 + p_z * m._34 + p_w * m._44);
		p_x = px * iw;
		p_y = py * iw;
		p_z = pz * iw;
		p_w = 1;
		this.target.x += p_x;
		this.target.y += p_y;
		this.target.z += p_z;
	}
	,forward: function(speed) {
		if(speed == null) {
			speed = 1.;
		}
		var c = 1 - 0.025 * speed;
		var _this = this.pos;
		var x = this.target.x + (this.pos.x - this.target.x) * c;
		var y = this.target.y + (this.pos.y - this.target.y) * c;
		var z = this.target.z + (this.pos.z - this.target.z) * c;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
	}
	,backward: function(speed) {
		if(speed == null) {
			speed = 1.;
		}
		var c = 1 + 0.025 * speed;
		var _this = this.pos;
		var x = this.target.x + (this.pos.x - this.target.x) * c;
		var y = this.target.y + (this.pos.y - this.target.y) * c;
		var z = this.target.z + (this.pos.z - this.target.z) * c;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
	}
	,makeCameraMatrix: function(m) {
		var _this = this.target;
		var v = this.pos;
		var x = _this.x - v.x;
		var y = _this.y - v.y;
		var z = _this.z - v.z;
		var w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var az_x = x;
		var az_y = y;
		var az_z = z;
		var az_w = w;
		if(this.rightHanded) {
			az_x *= -1;
			az_y *= -1;
			az_z *= -1;
		}
		var k = 1. / Math.sqrt(az_x * az_x + az_y * az_y + az_z * az_z);
		az_x *= k;
		az_y *= k;
		az_z *= k;
		var _this1 = this.up;
		var x1 = _this1.y * az_z - _this1.z * az_y;
		var y1 = _this1.z * az_x - _this1.x * az_z;
		var z1 = _this1.x * az_y - _this1.y * az_x;
		var w1 = 1;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ax_x = x1;
		var ax_y = y1;
		var ax_z = z1;
		var ax_w = w1;
		var k1 = 1. / Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z);
		ax_x *= k1;
		ax_y *= k1;
		ax_z *= k1;
		if(Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z) == 0) {
			ax_x = az_y;
			ax_y = az_z;
			ax_z = az_x;
		}
		var x2 = az_y * ax_z - az_z * ax_y;
		var y2 = az_z * ax_x - az_x * ax_z;
		var z2 = az_x * ax_y - az_y * ax_x;
		var w2 = 1;
		if(w2 == null) {
			w2 = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var ay_x = x2;
		var ay_y = y2;
		var ay_z = z2;
		var ay_w = w2;
		m._11 = ax_x;
		m._12 = ay_x;
		m._13 = az_x;
		m._14 = 0;
		m._21 = ax_y;
		m._22 = ay_y;
		m._23 = az_y;
		m._24 = 0;
		m._31 = ax_z;
		m._32 = ay_z;
		m._33 = az_z;
		m._34 = 0;
		var v1 = this.pos;
		m._41 = -(ax_x * v1.x + ax_y * v1.y + ax_z * v1.z);
		var v2 = this.pos;
		m._42 = -(ay_x * v2.x + ay_y * v2.y + ay_z * v2.z);
		var v3 = this.pos;
		m._43 = -(az_x * v3.x + az_y * v3.y + az_z * v3.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,project: function(x,y,z,screenWidth,screenHeight,snapToPixel) {
		if(snapToPixel == null) {
			snapToPixel = true;
		}
		var p = new h3d_Vector(x,y,z);
		var m = this.m;
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		p.x = (p.x + 1) * 0.5 * screenWidth;
		p.y = (-p.y + 1) * 0.5 * screenHeight;
		if(snapToPixel) {
			p.x = Math.round(p.x);
			p.y = Math.round(p.y);
		}
		return p;
	}
	,load: function(cam) {
		var _this = this.pos;
		var v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this1 = this.target;
		var v1 = cam.target;
		_this1.x = v1.x;
		_this1.y = v1.y;
		_this1.z = v1.z;
		_this1.w = v1.w;
		var _this2 = this.up;
		var v2 = cam.up;
		_this2.x = v2.x;
		_this2.y = v2.y;
		_this2.z = v2.z;
		_this2.w = v2.w;
		if(cam.orthoBounds != null) {
			this.orthoBounds = new h3d_col_Bounds();
			this.orthoBounds.load(cam.orthoBounds);
		} else {
			this.orthoBounds = null;
		}
		this.fovY = cam.fovY;
		this.screenRatio = cam.screenRatio;
		this.zoom = cam.zoom;
		this.zNear = cam.zNear;
		this.zFar = cam.zFar;
		if(cam.follow != null) {
			this.follow = { pos : cam.follow.pos, target : cam.follow.target};
		} else {
			this.follow = null;
		}
		this.viewX = cam.viewX;
		this.viewY = cam.viewY;
		this.update();
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector();
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = Date.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	this.driver = new h3d_impl_GlDriver(this.antiAlias);
	h3d_Engine.CURRENT = this;
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.getCurrent = function() {
	return h3d_Engine.CURRENT;
};
h3d_Engine.prototype = {
	setDriver: function(d) {
		this.driver = d;
		if(this.mem != null) {
			this.mem.driver = d;
		}
	}
	,setCurrent: function() {
		h3d_Engine.CURRENT = this;
	}
	,init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,driverName: function(details) {
		if(details == null) {
			details = false;
		}
		return this.driver.getDriverName(details);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.isDisposed()) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderTriBuffer: function(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.triIndexes,3,start,max);
		return;
	}
	,renderQuadBuffer: function(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.quadIndexes,2,start,max);
		return;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			var ntri = b.vertices / vertPerTri | 0;
			var pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw new js__$Boot_HaxeError("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		var maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderMultiBuffers: function(buffers,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		var maxTri = indexes.count / 3 | 0;
		if(maxTri <= 0) {
			return;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(buffers);
		if(indexes.isDisposed()) {
			return;
		}
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderInstanced: function(buffers,indexes,commands) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(buffers);
		if(indexes.isDisposed()) {
			return;
		}
		if(commands.commandCount > 0) {
			this.driver.drawInstanced(indexes.ibuf,commands);
			this.drawTriangles += commands.triCount;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,hasFeature: function(f) {
		return this.driver.hasFeature(f);
	}
	,end: function() {
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null;
		}
	}
	,pushTargets: function(textures) {
		this.pushTarget(this.nullTexture);
		this.targetStack.textures = textures;
		this.needFlushTarget = true;
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw new js__$Boot_HaxeError("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,flushTarget: function() {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.textures != null) {
				this.driver.setRenderTargets(t.textures);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	,clearF: function(color,depth,stencil) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color,depth,stencil);
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = Date.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,dispose: function() {
		this.driver.dispose();
		this.window.removeResizeEvent($bind(this,this.onWindowResize));
	}
	,get_fps: function() {
		return Math.ceil(this.realFps * 100) / 100;
	}
	,__class__: h3d_Engine
	,__properties__: {get_fps:"get_fps",set_fullScreen:"set_fullScreen",set_debug:"set_debug"}
};
var h3d_Indexes = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	this.mem = h3d_Engine.CURRENT.mem;
	this.count = count;
	this.is32 = is32;
	this.mem.allocIndexes(this);
};
$hxClasses["h3d.Indexes"] = h3d_Indexes;
h3d_Indexes.__name__ = "h3d.Indexes";
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = new h3d_Indexes(length);
	idx.upload(i,0,length);
	return idx;
};
h3d_Indexes.prototype = {
	isDisposed: function() {
		return this.ibuf == null;
	}
	,upload: function(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	,uploadBytes: function(bytes,dataPos,indices) {
		this.mem.driver.uploadIndexBytes(this.ibuf,0,indices,bytes,dataPos);
	}
	,readBytes: function(bytes,bytesPosition,indices,startIndice) {
		if(startIndice == null) {
			startIndice = 0;
		}
		this.mem.driver.readIndexBytes(this.ibuf,startIndice,indices,bytes,bytesPosition);
	}
	,dispose: function() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	,__class__: h3d_Indexes
};
var h3d_Matrix = function() {
};
$hxClasses["h3d.Matrix"] = h3d_Matrix;
h3d_Matrix.__name__ = "h3d.Matrix";
h3d_Matrix.I = function() {
	var m = new h3d_Matrix();
	m.identity();
	return m;
};
h3d_Matrix.L = function(a) {
	var m = new h3d_Matrix();
	m.loadValues(a);
	return m;
};
h3d_Matrix.T = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var m = new h3d_Matrix();
	m.initTranslation(x,y,z);
	return m;
};
h3d_Matrix.R = function(x,y,z) {
	var m = new h3d_Matrix();
	m.initRotation(x,y,z);
	return m;
};
h3d_Matrix.S = function(x,y,z) {
	if(z == null) {
		z = 1.0;
	}
	if(y == null) {
		y = 1.;
	}
	if(x == null) {
		x = 1.;
	}
	var m = new h3d_Matrix();
	m.initScale(x,y,z);
	return m;
};
h3d_Matrix.lookAtX = function(dir,up,m) {
	if(up == null) {
		up = new h3d_Vector(0,0,1);
	}
	if(m == null) {
		m = new h3d_Matrix();
	}
	var k = dir.x * dir.x + dir.y * dir.y + dir.z * dir.z;
	if(k < 1e-10) {
		k = 0;
	} else {
		k = 1. / Math.sqrt(k);
	}
	var x = dir.x * k;
	var y = dir.y * k;
	var z = dir.z * k;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var ax_x = x;
	var ax_y = y;
	var ax_z = z;
	var ax_w = 1.;
	var x1 = up.y * ax_z - up.z * ax_y;
	var y1 = up.z * ax_x - up.x * ax_z;
	var z1 = up.x * ax_y - up.y * ax_x;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var _this_x = x1;
	var _this_y = y1;
	var _this_z = z1;
	var _this_w = w;
	var k1 = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
	if(k1 < 1e-10) {
		k1 = 0;
	} else {
		k1 = 1. / Math.sqrt(k1);
	}
	var x2 = _this_x * k1;
	var y2 = _this_y * k1;
	var z2 = _this_z * k1;
	if(z2 == null) {
		z2 = 0.;
	}
	if(y2 == null) {
		y2 = 0.;
	}
	if(x2 == null) {
		x2 = 0.;
	}
	var ay_x = x2;
	var ay_y = y2;
	var ay_z = z2;
	var ay_w = 1.;
	if(ay_x * ay_x + ay_y * ay_y + ay_z * ay_z < 1e-10) {
		ay_x = ax_y;
		ay_y = ax_z;
		ay_z = ax_x;
	}
	var x3 = ax_y * ay_z - ax_z * ay_y;
	var y3 = ax_z * ay_x - ax_x * ay_z;
	var z3 = ax_x * ay_y - ax_y * ay_x;
	var w1 = 1;
	if(w1 == null) {
		w1 = 1.;
	}
	if(z3 == null) {
		z3 = 0.;
	}
	if(y3 == null) {
		y3 = 0.;
	}
	if(x3 == null) {
		x3 = 0.;
	}
	var az_x = x3;
	var az_y = y3;
	var az_z = z3;
	var az_w = w1;
	m._11 = ax_x;
	m._12 = ax_y;
	m._13 = ax_z;
	m._14 = 0;
	m._21 = ay_x;
	m._22 = ay_y;
	m._23 = ay_z;
	m._24 = 0;
	m._31 = az_x;
	m._32 = az_y;
	m._33 = az_z;
	m._34 = 0;
	m._41 = 0;
	m._42 = 0;
	m._43 = 0;
	m._44 = 1;
	return m;
};
h3d_Matrix.prototype = {
	get_tx: function() {
		return this._41;
	}
	,get_ty: function() {
		return this._42;
	}
	,get_tz: function() {
		return this._43;
	}
	,set_tx: function(v) {
		return this._41 = v;
	}
	,set_ty: function(v) {
		return this._42 = v;
	}
	,set_tz: function(v) {
		return this._43 = v;
	}
	,equal: function(other) {
		if(this._11 == other._11 && this._12 == other._12 && this._13 == other._13 && this._14 == other._14 && this._21 == other._21 && this._22 == other._22 && this._23 == other._23 && this._24 == other._24 && this._31 == other._31 && this._32 == other._32 && this._33 == other._33 && this._34 == other._34 && this._41 == other._41 && this._42 == other._42 && this._43 == other._43) {
			return this._44 == other._44;
		} else {
			return false;
		}
	}
	,zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationX: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = cos;
		this._23 = sin;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = -sin;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationY: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = cos;
		this._12 = 0.0;
		this._13 = -sin;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = sin;
		this._32 = 0.0;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationZ: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = cos;
		this._12 = sin;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = -sin;
		this._22 = cos;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initTranslation: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = x;
		this._42 = y;
		this._43 = z;
		this._44 = 1.0;
	}
	,initScale: function(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 = x;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = y;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = z;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationAxis: function(axis,angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var cos1 = 1 - cos;
		var x = -axis.x;
		var y = -axis.y;
		var z = -axis.z;
		var xx = x * x;
		var yy = y * y;
		var zz = z * z;
		var len = 1. / Math.sqrt(xx + yy + zz);
		x *= len;
		y *= len;
		z *= len;
		var xcos1 = x * cos1;
		var zcos1 = z * cos1;
		this._11 = cos + x * xcos1;
		this._12 = y * xcos1 - z * sin;
		this._13 = x * zcos1 + y * sin;
		this._14 = 0.;
		this._21 = y * xcos1 + z * sin;
		this._22 = cos + y * y * cos1;
		this._23 = y * zcos1 - x * sin;
		this._24 = 0.;
		this._31 = x * zcos1 - y * sin;
		this._32 = y * zcos1 + x * sin;
		this._33 = cos + z * zcos1;
		this._34 = 0.;
		this._41 = 0.;
		this._42 = 0.;
		this._43 = 0.;
		this._44 = 1.;
	}
	,initRotation: function(x,y,z) {
		var cx = Math.cos(x);
		var sx = Math.sin(x);
		var cy = Math.cos(y);
		var sy = Math.sin(y);
		var cz = Math.cos(z);
		var sz = Math.sin(z);
		var cxsy = cx * sy;
		var sxsy = sx * sy;
		this._11 = cy * cz;
		this._12 = cy * sz;
		this._13 = -sy;
		this._14 = 0;
		this._21 = sxsy * cz - cx * sz;
		this._22 = sxsy * sz + cx * cz;
		this._23 = sx * cy;
		this._24 = 0;
		this._31 = cxsy * cz + sx * sz;
		this._32 = cxsy * sz - sx * cz;
		this._33 = cx * cy;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	,translate: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 += x * this._14;
		this._12 += y * this._14;
		this._13 += z * this._14;
		this._21 += x * this._24;
		this._22 += y * this._24;
		this._23 += z * this._24;
		this._31 += x * this._34;
		this._32 += y * this._34;
		this._33 += z * this._34;
		this._41 += x * this._44;
		this._42 += y * this._44;
		this._43 += z * this._44;
	}
	,scale: function(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 *= x;
		this._21 *= x;
		this._31 *= x;
		this._41 *= x;
		this._12 *= y;
		this._22 *= y;
		this._32 *= y;
		this._42 *= y;
		this._13 *= z;
		this._23 *= z;
		this._33 *= z;
		this._43 *= z;
	}
	,rotate: function(x,y,z) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotation(x,y,z);
		this.multiply(this,tmp);
	}
	,rotateAxis: function(axis,angle) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotationAxis(axis,angle);
		this.multiply(this,tmp);
	}
	,getPosition: function(v) {
		if(v == null) {
			v = new h3d_Vector();
		}
		var x = this._41;
		var y = this._42;
		var z = this._43;
		var w = this._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v.x = x;
		v.y = y;
		v.z = z;
		v.w = w;
		return v;
	}
	,setPosition: function(v) {
		this._41 = v.x;
		this._42 = v.y;
		this._43 = v.z;
		this._44 = v.w;
	}
	,prependTranslation: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var vx = this._11 * x + this._21 * y + this._31 * z + this._41;
		var vy = this._12 * x + this._22 * y + this._32 * z + this._42;
		var vz = this._13 * x + this._23 * y + this._33 * z + this._43;
		var vw = this._14 * x + this._24 * y + this._34 * z + this._44;
		this._41 = vx;
		this._42 = vy;
		this._43 = vz;
		this._44 = vw;
	}
	,getScale: function(v) {
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(this._11 * this._11 + this._12 * this._12 + this._13 * this._13);
		v.y = Math.sqrt(this._21 * this._21 + this._22 * this._22 + this._23 * this._23);
		v.z = Math.sqrt(this._31 * this._31 + this._32 * this._32 + this._33 * this._33);
		if(this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		return v;
	}
	,prependRotation: function(x,y,z) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotation(x,y,z);
		this.multiply(tmp,this);
	}
	,prependRotationAxis: function(axis,angle) {
		var tmp = h3d_Matrix.tmp;
		tmp.initRotationAxis(axis,angle);
		this.multiply(tmp,this);
	}
	,prependScale: function(sx,sy,sz) {
		if(sz == null) {
			sz = 1.;
		}
		if(sy == null) {
			sy = 1.;
		}
		if(sx == null) {
			sx = 1.;
		}
		var tmp = h3d_Matrix.tmp;
		tmp.initScale(sx,sy,sz);
		this.multiply(tmp,this);
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply3x4inline: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,multiplyValue: function(v) {
		this._11 *= v;
		this._12 *= v;
		this._13 *= v;
		this._14 *= v;
		this._21 *= v;
		this._22 *= v;
		this._23 *= v;
		this._24 *= v;
		this._31 *= v;
		this._32 *= v;
		this._33 *= v;
		this._34 *= v;
		this._41 *= v;
		this._42 *= v;
		this._43 *= v;
		this._44 *= v;
	}
	,invert: function() {
		this.initInverse(this);
	}
	,getDeterminant: function() {
		return this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31);
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,initInverse3x3: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		this._11 = m22 * m33 - m32 * m23;
		this._12 = -m12 * m33 + m32 * m13;
		this._13 = m12 * m23 - m22 * m13;
		this._21 = -m21 * m33 + m31 * m23;
		this._22 = m11 * m33 - m31 * m13;
		this._23 = -m11 * m23 + m21 * m13;
		this._31 = m21 * m32 - m31 * m22;
		this._32 = -m11 * m32 + m31 * m12;
		this._33 = m11 * m22 - m21 * m12;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 = 0;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 = 0;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	,front: function() {
		var v = new h3d_Vector(this._11,this._12,this._13);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,right: function() {
		var v = new h3d_Vector(this._21,this._22,this._23);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,up: function() {
		var v = new h3d_Vector(this._31,this._32,this._33);
		var k = 1. / Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,transpose: function() {
		var tmp = this._12;
		this._12 = this._21;
		this._21 = tmp;
		tmp = this._13;
		this._13 = this._31;
		this._31 = tmp;
		tmp = this._14;
		this._14 = this._41;
		this._41 = tmp;
		tmp = this._23;
		this._23 = this._32;
		this._32 = tmp;
		tmp = this._24;
		this._24 = this._42;
		this._42 = tmp;
		tmp = this._34;
		this._34 = this._43;
		this._43 = tmp;
	}
	,clone: function() {
		var m = new h3d_Matrix();
		m._11 = this._11;
		m._12 = this._12;
		m._13 = this._13;
		m._14 = this._14;
		m._21 = this._21;
		m._22 = this._22;
		m._23 = this._23;
		m._24 = this._24;
		m._31 = this._31;
		m._32 = this._32;
		m._33 = this._33;
		m._34 = this._34;
		m._41 = this._41;
		m._42 = this._42;
		m._43 = this._43;
		m._44 = this._44;
		return m;
	}
	,load: function(m) {
		this._11 = m._11;
		this._12 = m._12;
		this._13 = m._13;
		this._14 = m._14;
		this._21 = m._21;
		this._22 = m._22;
		this._23 = m._23;
		this._24 = m._24;
		this._31 = m._31;
		this._32 = m._32;
		this._33 = m._33;
		this._34 = m._34;
		this._41 = m._41;
		this._42 = m._42;
		this._43 = m._43;
		this._44 = m._44;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,getFloats: function() {
		return [this._11,this._12,this._13,this._14,this._21,this._22,this._23,this._24,this._31,this._32,this._33,this._34,this._41,this._42,this._43,this._44];
	}
	,getEulerAngles: function() {
		var m = this.clone();
		var v = null;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(this._11 * this._11 + this._12 * this._12 + this._13 * this._13);
		v.y = Math.sqrt(this._21 * this._21 + this._22 * this._22 + this._23 * this._23);
		v.z = Math.sqrt(this._31 * this._31 + this._32 * this._32 + this._33 * this._33);
		if(this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var s = v;
		m.prependScale(1.0 / s.x,1.0 / s.y,1.0 / s.z);
		var cy = Math.sqrt(m._11 * m._11 + m._12 * m._12);
		if(cy > 0.01) {
			var v1 = new h3d_Vector(Math.atan2(m._23,m._33),Math.atan2(-m._13,cy),Math.atan2(m._12,m._11));
			var v2 = new h3d_Vector(Math.atan2(-m._23,-m._33),Math.atan2(-m._13,-cy),Math.atan2(-m._12,-m._11));
			if(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z < v2.x * v2.x + v2.y * v2.y + v2.z * v2.z) {
				return v1;
			} else {
				return v2;
			}
		} else {
			return new h3d_Vector(Math.atan2(-m._32,m._22),Math.atan2(-m._13,cy),0.0);
		}
	}
	,toString: function() {
		return "MAT=[\n" + "  [ " + hxd_Math.fmt(this._11) + ", " + hxd_Math.fmt(this._12) + ", " + hxd_Math.fmt(this._13) + ", " + hxd_Math.fmt(this._14) + " ]\n" + "  [ " + hxd_Math.fmt(this._21) + ", " + hxd_Math.fmt(this._22) + ", " + hxd_Math.fmt(this._23) + ", " + hxd_Math.fmt(this._24) + " ]\n" + "  [ " + hxd_Math.fmt(this._31) + ", " + hxd_Math.fmt(this._32) + ", " + hxd_Math.fmt(this._33) + ", " + hxd_Math.fmt(this._34) + " ]\n" + "  [ " + hxd_Math.fmt(this._41) + ", " + hxd_Math.fmt(this._42) + ", " + hxd_Math.fmt(this._43) + ", " + hxd_Math.fmt(this._44) + " ]\n" + "]";
	}
	,colorHue: function(hue) {
		if(hue == 0.) {
			return;
		}
		var cosA = Math.cos(-hue);
		var sinA = Math.sin(-hue);
		var ch = (1 - cosA) / 3;
		var tmp = h3d_Matrix.tmp;
		tmp._11 = cosA + ch;
		tmp._12 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._13 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._21 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._22 = cosA + ch;
		tmp._23 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._31 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._32 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._33 = cosA + ch;
		tmp._34 = 0;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorSaturate: function(sat) {
		++sat;
		var is = 1 - sat;
		var r = is * 0.212671;
		var g = is * 0.71516;
		var b = is * 0.072169;
		var tmp = h3d_Matrix.tmp;
		tmp._11 = r + sat;
		tmp._12 = r;
		tmp._13 = r;
		tmp._21 = g;
		tmp._22 = g + sat;
		tmp._23 = g;
		tmp._31 = b;
		tmp._32 = b;
		tmp._33 = b + sat;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorContrast: function(contrast) {
		var tmp = h3d_Matrix.tmp;
		var v = contrast + 1;
		tmp._11 = v;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = v;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = v;
		tmp._41 = -contrast * 0.5;
		tmp._42 = -contrast * 0.5;
		tmp._43 = -contrast * 0.5;
		this.multiply3x4(this,tmp);
	}
	,colorLightness: function(lightness) {
		this._41 += lightness;
		this._42 += lightness;
		this._43 += lightness;
	}
	,colorGain: function(color,alpha) {
		var tmp = h3d_Matrix.tmp;
		tmp._11 = 1 - alpha;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = 1 - alpha;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = 1 - alpha;
		tmp._41 = (color >> 16 & 255) / 255 * alpha;
		tmp._42 = (color >> 8 & 255) / 255 * alpha;
		tmp._43 = (color & 255) / 255 * alpha;
		this.multiply3x4(this,tmp);
	}
	,colorBits: function(bits,blend) {
		var t11 = 0.;
		var t12 = 0.;
		var t13 = 0.;
		var t21 = 0.;
		var t22 = 0.;
		var t23 = 0.;
		var t31 = 0.;
		var t32 = 0.;
		var t33 = 0.;
		var c = bits;
		if((c & 1) == 1) {
			t11 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t12 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t13 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t21 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t22 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t23 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t31 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t32 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t33 = 1;
		}
		c >>= 1;
		var r = t11 + t21 + t31;
		var g = t12 + t22 + t32;
		var b = t13 + t23 + t33;
		if(r > 1) {
			t11 /= r;
			t21 /= r;
			t31 /= r;
		}
		if(g > 1) {
			t12 /= g;
			t22 /= g;
			t32 /= g;
		}
		if(b > 1) {
			t13 /= b;
			t23 /= b;
			t33 /= b;
		}
		var b11 = this._11 * t11 + this._12 * t21 + this._13 * t31;
		var b12 = this._11 * t12 + this._12 * t22 + this._13 * t32;
		var b13 = this._11 * t13 + this._12 * t23 + this._13 * t33;
		var b21 = this._21 * t11 + this._22 * t21 + this._23 * t31;
		var b22 = this._21 * t12 + this._22 * t22 + this._23 * t32;
		var b23 = this._21 * t13 + this._22 * t23 + this._23 * t33;
		var b31 = this._31 * t11 + this._32 * t21 + this._33 * t31;
		var b32 = this._31 * t12 + this._32 * t22 + this._33 * t32;
		var b33 = this._31 * t13 + this._32 * t23 + this._33 * t33;
		var ik = blend;
		var k = 1 - ik;
		this._11 = this._11 * k + b11 * ik;
		this._12 = this._12 * k + b12 * ik;
		this._13 = this._13 * k + b13 * ik;
		this._21 = this._21 * k + b21 * ik;
		this._22 = this._22 * k + b22 * ik;
		this._23 = this._23 * k + b23 * ik;
		this._31 = this._31 * k + b31 * ik;
		this._32 = this._32 * k + b32 * ik;
		this._33 = this._33 * k + b33 * ik;
	}
	,colorAdd: function(c) {
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	,colorSet: function(c,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.zero();
		this._44 = alpha;
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	,adjustColor: function(col) {
		if(col.hue != null) {
			this.colorHue(col.hue);
		}
		if(col.saturation != null) {
			this.colorSaturate(col.saturation);
		}
		if(col.contrast != null) {
			this.colorContrast(col.contrast);
		}
		if(col.lightness != null) {
			this.colorLightness(col.lightness);
		}
		if(col.gain != null) {
			this.colorGain(col.gain.color,col.gain.alpha);
		}
	}
	,__class__: h3d_Matrix
	,__properties__: {set_tz:"set_tz",get_tz:"get_tz",set_ty:"set_ty",get_ty:"get_ty",set_tx:"set_tx",get_tx:"get_tx"}
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	set: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,identity: function() {
		this.x = this.y = this.z = 0;
		this.w = 1;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,load: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	,clone: function() {
		return new h3d_Quat(this.x,this.y,this.z,this.w);
	}
	,initMoveTo: function(from,to) {
		var hx = from.x + to.x;
		var hy = from.y + to.y;
		var hz = from.z + to.z;
		var h = 1. / Math.sqrt(hx * hx + hy * hy + hz * hz);
		this.x = from.y * hz - from.z * hy;
		this.y = from.z * hx - from.x * hz;
		this.z = from.x * hy - from.y * hx;
		this.w = from.x * hx + from.y * hy + from.z * hz;
		this.normalize();
	}
	,initDirection: function(dir) {
		var x = dir.x;
		var y = dir.y;
		var z = dir.z;
		var w = dir.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var _this_w = w;
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x1 = _this_x * k;
		var y1 = _this_y * k;
		var z1 = _this_z * k;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ax_x = x1;
		var ax_y = y1;
		var ax_z = z1;
		var ax_w = 1.;
		var x2 = -ax_y;
		var y2 = ax_x;
		var z2 = 0;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var _this_x1 = x2;
		var _this_y1 = y2;
		var _this_z1 = z2;
		var _this_w1 = 1.;
		var k1 = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		if(k1 < 1e-10) {
			k1 = 0;
		} else {
			k1 = 1. / Math.sqrt(k1);
		}
		var x3 = _this_x1 * k1;
		var y3 = _this_y1 * k1;
		var z3 = _this_z1 * k1;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		var ay_x = x3;
		var ay_y = y3;
		var ay_z = z3;
		var ay_w = 1.;
		if(ay_x * ay_x + ay_y * ay_y + ay_z * ay_z < 1e-10) {
			ay_x = ax_y;
			ay_y = ax_z;
			ay_z = ax_x;
		}
		var x4 = ax_y * ay_z - ax_z * ay_y;
		var y4 = ax_z * ay_x - ax_x * ay_z;
		var z4 = ax_x * ay_y - ax_y * ay_x;
		var w1 = 1;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		var az_x = x4;
		var az_y = y4;
		var az_z = z4;
		var az_w = w1;
		var tr = ax_x + ay_y + az_z;
		if(tr > 0) {
			var s = Math.sqrt(tr + 1.0) * 2;
			var is = 1 / s;
			this.x = (ay_z - az_y) * is;
			this.y = (az_x - ax_z) * is;
			this.z = (ax_y - ay_x) * is;
			this.w = 0.25 * s;
		} else if(ax_x > ay_y && ax_x > az_z) {
			var s1 = Math.sqrt(1.0 + ax_x - ay_y - az_z) * 2;
			var is1 = 1 / s1;
			this.x = 0.25 * s1;
			this.y = (ay_x + ax_y) * is1;
			this.z = (az_x + ax_z) * is1;
			this.w = (ay_z - az_y) * is1;
		} else if(ay_y > az_z) {
			var s2 = Math.sqrt(1.0 + ay_y - ax_x - az_z) * 2;
			var is2 = 1 / s2;
			this.x = (ay_x + ax_y) * is2;
			this.y = 0.25 * s2;
			this.z = (az_y + ay_z) * is2;
			this.w = (az_x - ax_z) * is2;
		} else {
			var s3 = Math.sqrt(1.0 + az_z - ax_x - ay_y) * 2;
			var is3 = 1 / s3;
			this.x = (az_x + ax_z) * is3;
			this.y = (az_y + ay_z) * is3;
			this.z = 0.25 * s3;
			this.w = (ax_y - ay_x) * is3;
		}
	}
	,initRotateAxis: function(x,y,z,a) {
		var sin = Math.sin(a / 2);
		var cos = Math.cos(a / 2);
		this.x = x * sin;
		this.y = y * sin;
		this.z = z * sin;
		this.w = cos * Math.sqrt(x * x + y * y + z * z);
		this.normalize();
	}
	,initRotateMatrix: function(m) {
		var tr = m._11 + m._22 + m._33;
		if(tr > 0) {
			var s = Math.sqrt(tr + 1.0) * 2;
			var is = 1 / s;
			this.x = (m._23 - m._32) * is;
			this.y = (m._31 - m._13) * is;
			this.z = (m._12 - m._21) * is;
			this.w = 0.25 * s;
		} else if(m._11 > m._22 && m._11 > m._33) {
			var s1 = Math.sqrt(1.0 + m._11 - m._22 - m._33) * 2;
			var is1 = 1 / s1;
			this.x = 0.25 * s1;
			this.y = (m._21 + m._12) * is1;
			this.z = (m._31 + m._13) * is1;
			this.w = (m._23 - m._32) * is1;
		} else if(m._22 > m._33) {
			var s2 = Math.sqrt(1.0 + m._22 - m._11 - m._33) * 2;
			var is2 = 1 / s2;
			this.x = (m._21 + m._12) * is2;
			this.y = 0.25 * s2;
			this.z = (m._32 + m._23) * is2;
			this.w = (m._31 - m._13) * is2;
		} else {
			var s3 = Math.sqrt(1.0 + m._33 - m._11 - m._22) * 2;
			var is3 = 1 / s3;
			this.x = (m._31 + m._13) * is3;
			this.y = (m._32 + m._23) * is3;
			this.z = 0.25 * s3;
			this.w = (m._12 - m._21) * is3;
		}
	}
	,normalize: function() {
		var len = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
		if(len < 1e-10) {
			this.x = this.y = this.z = 0;
			this.w = 1;
		} else {
			var m = 1. / Math.sqrt(len);
			this.x *= m;
			this.y *= m;
			this.z *= m;
			this.w *= m;
		}
	}
	,initRotation: function(ax,ay,az) {
		var sinX = Math.sin(ax * 0.5);
		var cosX = Math.cos(ax * 0.5);
		var sinY = Math.sin(ay * 0.5);
		var cosY = Math.cos(ay * 0.5);
		var sinZ = Math.sin(az * 0.5);
		var cosZ = Math.cos(az * 0.5);
		var cosYZ = cosY * cosZ;
		var sinYZ = sinY * sinZ;
		this.x = sinX * cosYZ - cosX * sinYZ;
		this.y = cosX * sinY * cosZ + sinX * cosY * sinZ;
		this.z = cosX * cosY * sinZ - sinX * sinY * cosZ;
		this.w = cosX * cosYZ + sinX * sinYZ;
	}
	,multiply: function(q1,q2) {
		var x2 = q1.x * q2.w + q1.w * q2.x + q1.y * q2.z - q1.z * q2.y;
		var y2 = q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x;
		var z2 = q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w;
		var w2 = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
		this.x = x2;
		this.y = y2;
		this.z = z2;
		this.w = w2;
	}
	,toEuler: function() {
		return this.toMatrix().getEulerAngles();
	}
	,lerp: function(q1,q2,v,nearest) {
		if(nearest == null) {
			nearest = false;
		}
		var v2;
		if(nearest && q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
			v2 = v - 1;
		} else {
			v2 = 1 - v;
		}
		var x = q1.x * v + q2.x * v2;
		var y = q1.y * v + q2.y * v2;
		var z = q1.z * v + q2.z * v2;
		var w = q1.w * v + q2.w * v2;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,slerp: function(q1,q2,v) {
		var cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;
		if((cosHalfTheta < 0 ? -cosHalfTheta : cosHalfTheta) >= 1) {
			this.x = q1.x;
			this.y = q1.y;
			this.z = q1.z;
			this.w = q1.w;
			return;
		}
		var halfTheta = Math.acos(cosHalfTheta);
		var invSinHalfTheta = 1. / Math.sqrt(1 - cosHalfTheta * cosHalfTheta);
		if((invSinHalfTheta < 0 ? -invSinHalfTheta : invSinHalfTheta) > 1e3) {
			var nearest = true;
			if(nearest == null) {
				nearest = false;
			}
			var v2;
			if(nearest && q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
				v2 = -0.5;
			} else {
				v2 = 0.5;
			}
			var x = q1.x * 0.5 + q2.x * v2;
			var y = q1.y * 0.5 + q2.y * v2;
			var z = q1.z * 0.5 + q2.z * v2;
			var w = q1.w * 0.5 + q2.w * v2;
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
			return;
		}
		var a = Math.sin((1 - v) * halfTheta) * invSinHalfTheta;
		var b = Math.sin(v * halfTheta) * invSinHalfTheta * (cosHalfTheta < 0 ? -1 : 1);
		this.x = q1.x * a + q2.x * b;
		this.y = q1.y * a + q2.y * b;
		this.z = q1.z * a + q2.z * b;
		this.w = q1.w * a + q2.w * b;
	}
	,conjugate: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
	}
	,negate: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
		this.w = -this.w;
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,getDirection: function() {
		return new h3d_Vector(1 - 2 * (this.y * this.y + this.z * this.z),2 * (this.x * this.y - this.z * this.w),2 * (this.x * this.z + this.y * this.w));
	}
	,toMatrix: function(m) {
		if(m == null) {
			m = new h3d_Matrix();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "," + hxd_Math.fmt(this.w) + "}";
	}
	,__class__: h3d_Quat
};
var h3d_Vector = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector"] = h3d_Vector;
h3d_Vector.__name__ = "h3d.Vector";
h3d_Vector.fromColor = function(c,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	var s = scale / 255;
	return new h3d_Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
};
h3d_Vector.fromArray = function(a) {
	var r = new h3d_Vector();
	if(a.length > 0) {
		r.x = a[0];
	}
	if(a.length > 1) {
		r.y = a[1];
	}
	if(a.length > 2) {
		r.z = a[2];
	}
	if(a.length > 3) {
		r.w = a[3];
	}
	return r;
};
h3d_Vector.prototype = {
	distance: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		var dz = v.z - this.z;
		return Math.sqrt(dx * dx + dy * dy + dz * dz);
	}
	,distanceSq: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		var dz = v.z - this.z;
		return dx * dx + dy * dy + dz * dz;
	}
	,sub: function(v) {
		return new h3d_Vector(this.x - v.x,this.y - v.y,this.z - v.z,this.w - v.w);
	}
	,add: function(v) {
		return new h3d_Vector(this.x + v.x,this.y + v.y,this.z + v.z,this.w + v.w);
	}
	,cross: function(v) {
		return new h3d_Vector(this.y * v.z - this.z * v.y,this.z * v.x - this.x * v.z,this.x * v.y - this.y * v.x,1);
	}
	,reflect: function(n) {
		var k = 2 * (this.x * n.x + this.y * n.y + this.z * n.z);
		return new h3d_Vector(this.x - k * n.x,this.y - k * n.y,this.z - k * n.z,1);
	}
	,dot3: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,dot4: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,normalizeFast: function() {
		var k = 1. / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,getNormalized: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		return new h3d_Vector(this.x * k,this.y * k,this.z * k);
	}
	,set: function(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,load: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
	}
	,scale3: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
	}
	,project: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var iw = 1 / (this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44);
		this.x = px * iw;
		this.y = py * iw;
		this.z = pz * iw;
		this.w = 1;
	}
	,lerp: function(v1,v2,k) {
		var a = v1.x;
		var x = a + k * (v2.x - a);
		var a1 = v1.y;
		var y = a1 + k * (v2.y - a1);
		var a2 = v1.z;
		var z = a2 + k * (v2.z - a2);
		var a3 = v1.w;
		var w = a3 + k * (v2.w - a3);
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,transform3x4: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transform3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transform: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var pw = this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44;
		this.x = px;
		this.y = py;
		this.z = pz;
		this.w = pw;
	}
	,clone: function() {
		return new h3d_Vector(this.x,this.y,this.z,this.w);
	}
	,toPoint: function() {
		return new h3d_col_Point(this.x,this.y,this.z);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "," + hxd_Math.fmt(this.w) + "}";
	}
	,get_r: function() {
		return this.x;
	}
	,get_g: function() {
		return this.y;
	}
	,get_b: function() {
		return this.z;
	}
	,get_a: function() {
		return this.w;
	}
	,set_r: function(v) {
		return this.x = v;
	}
	,set_g: function(v) {
		return this.y = v;
	}
	,set_b: function(v) {
		return this.z = v;
	}
	,set_a: function(v) {
		return this.w = v;
	}
	,setColor: function(c) {
		this.x = (c >> 16 & 255) / 255;
		this.y = (c >> 8 & 255) / 255;
		this.z = (c & 255) / 255;
		this.w = (c >>> 24) / 255;
	}
	,makeColor: function(hue,saturation,brightness) {
		if(brightness == null) {
			brightness = 0.5;
		}
		if(saturation == null) {
			saturation = 1.;
		}
		var r = hue % 6.2831853071795862;
		hue = r >= 0 ? r : r + 6.2831853071795862;
		var f = 2 * brightness - 1;
		var c = (1 - (f < 0 ? -f : f)) * saturation;
		var f1 = hue * 3 / 3.14159265358979323 % 2. - 1;
		var x = c * (1 - (f1 < 0 ? -f1 : f1));
		var m = brightness - c / 2;
		if(hue < 1.0471975511965976) {
			this.x = c;
			this.y = x;
			this.z = 0;
		} else if(hue < 2.0943951023931953) {
			this.x = x;
			this.y = c;
			this.z = 0;
		} else if(hue < 3.14159265358979323) {
			this.x = 0;
			this.y = c;
			this.z = x;
		} else if(hue < 4.1887902047863905) {
			this.x = 0;
			this.y = x;
			this.z = c;
		} else if(hue < 5.2359877559829888) {
			this.x = x;
			this.y = 0;
			this.z = c;
		} else {
			this.x = c;
			this.y = 0;
			this.z = x;
		}
		this.x += m;
		this.y += m;
		this.z += m;
		this.w = 1;
	}
	,toColor: function() {
		var f = this.w;
		var f1 = this.x;
		var f2 = this.y;
		var f3 = this.z;
		return ((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0);
	}
	,toColorHSL: function() {
		var a = this.x;
		var b = this.y;
		var a1 = a < b ? b : a;
		var b1 = this.z;
		var max = a1 < b1 ? b1 : a1;
		var a2 = this.x;
		var b2 = this.y;
		var a3 = a2 > b2 ? b2 : a2;
		var b3 = this.z;
		var min = a3 > b3 ? b3 : a3;
		var h;
		var s;
		var l = (max + min) / 2.0;
		if(max == min) {
			s = 0.0;
			h = s;
		} else {
			var d = max - min;
			s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
			if(max == this.x) {
				h = (this.y - this.z) / d + (this.y < this.z ? 6.0 : 0.0);
			} else if(max == this.y) {
				h = (this.z - this.x) / d + 2.0;
			} else {
				h = (this.x - this.y) / d + 4.0;
			}
			h *= 1.0471975511965976;
		}
		return new h3d_Vector(h,s,l,this.w);
	}
	,__class__: h3d_Vector
	,__properties__: {set_a:"set_a",get_a:"get_a",set_b:"set_b",get_b:"get_b",set_g:"set_g",get_g:"get_g",set_r:"set_r",get_r:"get_r"}
};
var h3d_anim_AnimatedObject = function(name) {
	this.objectName = name;
};
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
h3d_anim_AnimatedObject.prototype = {
	clone: function() {
		return new h3d_anim_AnimatedObject(this.objectName);
	}
	,__class__: h3d_anim_AnimatedObject
};
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_anim_Animation.prototype = {
	getDuration: function() {
		return this.frameCount / (this.sampling * this.speed);
	}
	,getIFrame: function() {
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		return f;
	}
	,unbind: function(objectName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objectName) {
				this.isSync = false;
				o.targetObject = null;
				o.targetSkin = null;
				return;
			}
		}
	}
	,setEvents: function(el) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.frameCount;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(null);
		}
		this.events = _g;
		var e = $getIterator(el);
		while(e.hasNext()) {
			var e1 = e.next();
			if(this.events[e1.frame] == null) {
				this.events[e1.frame] = [];
			}
			this.events[e1.frame].push(e1.data);
		}
	}
	,addEvent: function(frame,data) {
		if(this.events == null) {
			this.events = [];
		}
		if(this.events[frame] == null) {
			this.events[frame] = [data];
		} else {
			this.events[frame].push(data);
		}
	}
	,getEvents: function() {
		return this.events;
	}
	,getObjects: function() {
		return this.objects;
	}
	,setFrame: function(f) {
		this.frame = f;
		this.lastEvent = -1;
		while(this.frame < 0) this.frame += this.frameCount;
		while(this.frame > this.frameCount) this.frame -= this.frameCount;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_Animation(this.name,this.frameCount,this.sampling);
		}
		a.objects = this.objects;
		a.speed = this.speed;
		a.loop = this.loop;
		a.pause = this.pause;
		a.events = this.events;
		a.resourcePath = this.resourcePath;
		return a;
	}
	,initInstance: function() {
		this.isInstance = true;
	}
	,createInstance: function(base) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.objects;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(a.clone());
		}
		var objects = _g;
		var a1 = this.clone();
		a1.objects = objects;
		a1.bind(base);
		a1.initInstance();
		return a1;
	}
	,bind: function(base) {
		var currentSkin = null;
		var _g = 0;
		var _g1 = this.objects.slice();
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(currentSkin != null) {
				var key = a.objectName;
				var _this = currentSkin.skinData.namedJoints;
				var j = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(j != null) {
					a.targetSkin = currentSkin;
					a.targetJoint = j.index;
					continue;
				}
			}
			var obj = base.getObjectByName(a.objectName);
			if(obj == null) {
				HxOverrides.remove(this.objects,a);
				continue;
			}
			var joint = ((obj) instanceof h3d_scene_Joint) ? obj : null;
			if(joint != null) {
				currentSkin = joint.parent;
				a.targetSkin = currentSkin;
				a.targetJoint = joint.index;
			} else {
				a.targetObject = obj;
			}
		}
		this.isSync = false;
	}
	,getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw new js__$Boot_HaxeError("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw new js__$Boot_HaxeError("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g11 = this.events[f];
					while(_g2 < _g11.length) {
						var e = _g11[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,initAndBind: function(obj) {
		this.bind(obj);
		this.initInstance();
		this.pause = true;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: h3d_anim_Animation
};
var h3d_anim_DataLayout = $hxEnums["h3d.anim.DataLayout"] = { __ename__ : true, __constructs__ : ["Position","Rotation","Scale","UV","Alpha","Property","SingleFrame"]
	,Position: {_hx_index:0,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Rotation: {_hx_index:1,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Scale: {_hx_index:2,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,UV: {_hx_index:3,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Alpha: {_hx_index:4,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Property: {_hx_index:5,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,SingleFrame: {_hx_index:6,__enum__:"h3d.anim.DataLayout",toString:$estr}
};
h3d_anim_DataLayout.__empty_constructs__ = [h3d_anim_DataLayout.Position,h3d_anim_DataLayout.Rotation,h3d_anim_DataLayout.Scale,h3d_anim_DataLayout.UV,h3d_anim_DataLayout.Alpha,h3d_anim_DataLayout.Property,h3d_anim_DataLayout.SingleFrame];
var h3d_anim_BufferObject = function(objectName,dataOffset) {
	h3d_anim_AnimatedObject.call(this,objectName);
	this.dataOffset = dataOffset;
};
$hxClasses["h3d.anim.BufferObject"] = h3d_anim_BufferObject;
h3d_anim_BufferObject.__name__ = "h3d.anim.BufferObject";
h3d_anim_BufferObject.__super__ = h3d_anim_AnimatedObject;
h3d_anim_BufferObject.prototype = $extend(h3d_anim_AnimatedObject.prototype,{
	getStride: function() {
		var stride = 0;
		if((this.layout & 1 << h3d_anim_DataLayout.Position._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Rotation._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.UV._hx_index) != 0) {
			stride += 2;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Alpha._hx_index) != 0) {
			++stride;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Property._hx_index) != 0) {
			++stride;
		}
		return stride;
	}
	,clone: function() {
		var o = new h3d_anim_BufferObject(this.objectName,this.dataOffset);
		o.layout = this.layout;
		o.propName = this.propName;
		return o;
	}
	,__class__: h3d_anim_BufferObject
});
var h3d_anim_BufferAnimation = function(name,frame,sampling) {
	h3d_anim_Animation.call(this,name,frame,sampling);
	this.syncFrame = -1;
};
$hxClasses["h3d.anim.BufferAnimation"] = h3d_anim_BufferAnimation;
h3d_anim_BufferAnimation.__name__ = "h3d.anim.BufferAnimation";
h3d_anim_BufferAnimation.__super__ = h3d_anim_Animation;
h3d_anim_BufferAnimation.prototype = $extend(h3d_anim_Animation.prototype,{
	setData: function(data,stride) {
		this.data = data;
		this.stride = stride;
	}
	,addObject: function(objName,offset) {
		var f = new h3d_anim_BufferObject(objName,offset);
		this.objects.push(f);
		return f;
	}
	,getPropValue: function(objName,propName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objName && o.propName == propName) {
				return o.propCurrentValue;
			}
		}
		return null;
	}
	,getFrames: function() {
		return this.objects;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_BufferAnimation(this.name,this.frameCount,this.sampling);
		}
		h3d_anim_Animation.prototype.clone.call(this,a);
		var la = ((a) instanceof h3d_anim_BufferAnimation) ? a : null;
		la.setData(this.data,this.stride);
		return a;
	}
	,endFrame: function() {
		if(this.loop) {
			return this.frameCount;
		} else {
			return this.frameCount - 1;
		}
	}
	,initInstance: function() {
		h3d_anim_Animation.prototype.initInstance.call(this);
		var frames = this.objects;
		var _g = 0;
		while(_g < frames.length) {
			var a = frames[_g];
			++_g;
			if((a.layout & 1 << h3d_anim_DataLayout.Property._hx_index) != 0) {
				a.propCurrentValue = this.data[a.dataOffset];
			}
			var tmp;
			if((a.layout & 1 << h3d_anim_DataLayout.Alpha._hx_index) != 0) {
				if(a.targetObject != null) {
					var _this = a.targetObject;
					tmp = (((_this) instanceof h3d_scene_Mesh) ? _this : null) == null;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(a.objectName + " should be a mesh (for alpha animation)");
			}
			if((a.layout & 1 << h3d_anim_DataLayout.Position._hx_index) != 0 || (a.layout & 1 << h3d_anim_DataLayout.Rotation._hx_index) != 0 || (a.layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
				a.matrix = new h3d_Matrix();
				a.matrix.identity();
				if((a.layout & 1 << h3d_anim_DataLayout.Position._hx_index) == 0 && a.targetSkin != null) {
					var m2 = a.targetSkin.getSkinData().allJoints[a.targetJoint].defMat;
					a.matrix._14 = m2._41;
					a.matrix._24 = m2._42;
					a.matrix._34 = m2._43;
				}
			}
		}
		frames.sort($bind(this,this.sortByFrameCountDesc));
	}
	,sortByFrameCountDesc: function(o1,o2) {
		return ((o2.layout & 1 << h3d_anim_DataLayout.SingleFrame._hx_index) != 0 ? 0 : 1) - ((o1.layout & 1 << h3d_anim_DataLayout.SingleFrame._hx_index) != 0 ? 0 : 1);
	}
	,uvLerp: function(v1,v2,k) {
		v1 %= 1.;
		v2 %= 1.;
		if(v1 < v2 - 0.5) {
			++v1;
		} else if(v1 > v2 + 0.5) {
			--v1;
		}
		return v1 * (1 - k) + v2 * k;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		var _gthis = this;
		if(this.frame == this.syncFrame && !decompose) {
			return;
		}
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		var frame1 = f;
		var frame2 = (frame1 + 1) % this.frameCount;
		var k2 = this.frame - frame1;
		var k1 = 1 - k2;
		if(frame1 < 0) {
			frame2 = 0;
			frame1 = frame2;
		} else if(this.frame >= this.frameCount) {
			frame2 = this.frameCount - 1;
			frame1 = frame2;
		} else if(!this.loop && frame2 == 0) {
			frame2 = this.frameCount - 1;
		}
		this.syncFrame = this.frame;
		if(decompose) {
			this.isSync = false;
		}
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.targetObject == null && o.targetSkin == null) {
				continue;
			}
			var layout = o.layout;
			var offset1 = this.stride * frame1 + o.dataOffset;
			var offset2 = this.stride * frame2 + o.dataOffset;
			var frame11 = frame1;
			var frame21 = frame2;
			if((layout & 1 << h3d_anim_DataLayout.SingleFrame._hx_index) != 0) {
				if(this.isSync) {
					break;
				}
				frame21 = 0;
				frame11 = frame21;
				offset2 = o.dataOffset;
				offset1 = offset2;
			}
			var m = o.matrix;
			if(m != null) {
				if((layout & 1 << h3d_anim_DataLayout.Position._hx_index) != 0) {
					m._41 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					m._42 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					m._43 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
				} else {
					m._41 = m._14;
					m._42 = m._24;
					m._43 = m._34;
				}
				if((layout & 1 << h3d_anim_DataLayout.Rotation._hx_index) != 0) {
					var q1x = this.data[offset1++];
					var q1y = this.data[offset1++];
					var q1z = this.data[offset1++];
					var f1 = 1 - (q1x * q1x + q1y * q1y + q1z * q1z);
					var q1w = Math.sqrt(f1 < 0 ? -f1 : f1);
					var q2x = this.data[offset2++];
					var q2y = this.data[offset2++];
					var q2z = this.data[offset2++];
					var f2 = 1 - (q2x * q2x + q2y * q2y + q2z * q2z);
					var q2w = Math.sqrt(f2 < 0 ? -f2 : f2);
					var dot = q1x * q2x + q1y * q2y + q1z * q2z + q1w * q2w;
					var q2 = dot < 0 ? -k2 : k2;
					var qx = q1x * k1 + q2x * q2;
					var qy = q1y * k1 + q2y * q2;
					var qz = q1z * k1 + q2z * q2;
					var qw = q1w * k1 + q2w * q2;
					var ql = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
					qx *= ql;
					qy *= ql;
					qz *= ql;
					qw *= ql;
					if(decompose) {
						m._12 = qx;
						m._13 = qy;
						m._21 = qz;
						m._23 = qw;
						if((layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
							m._11 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._22 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._33 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						} else {
							m._11 = 1;
							m._22 = 1;
							m._33 = 1;
						}
					} else {
						var xx = qx * qx;
						var xy = qx * qy;
						var xz = qx * qz;
						var xw = qx * qw;
						var yy = qy * qy;
						var yz = qy * qz;
						var yw = qy * qw;
						var zz = qz * qz;
						var zw = qz * qw;
						m._11 = 1 - 2 * (yy + zz);
						m._12 = 2 * (xy + zw);
						m._13 = 2 * (xz - yw);
						m._21 = 2 * (xy - zw);
						m._22 = 1 - 2 * (xx + zz);
						m._23 = 2 * (yz + xw);
						m._31 = 2 * (xz + yw);
						m._32 = 2 * (yz - xw);
						m._33 = 1 - 2 * (xx + yy);
						if((layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
							var sx = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							var sy = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							var sz = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._11 *= sx;
							m._12 *= sx;
							m._13 *= sx;
							m._21 *= sy;
							m._22 *= sy;
							m._23 *= sy;
							m._31 *= sz;
							m._32 *= sz;
							m._33 *= sz;
						}
					}
				} else {
					m._12 = 0;
					m._13 = 0;
					m._21 = 0;
					m._23 = decompose ? 1 : 0;
					if((layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
						m._11 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						m._22 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						m._33 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					} else {
						m._11 = 1;
						m._22 = 1;
						m._33 = 1;
					}
				}
				if(o.targetSkin != null) {
					o.targetSkin.currentRelPose[o.targetJoint] = m;
					o.targetSkin.jointsUpdated = true;
				} else {
					var _this = o.targetObject;
					_this.defaultTransform = m;
					var f3 = 1;
					var b = true;
					if(b) {
						_this.flags |= f3;
					} else {
						_this.flags &= ~f3;
					}
				}
			}
			if((layout & 1 << h3d_anim_DataLayout.UV._hx_index) != 0) {
				var mat = o.targetObject.toMesh().material;
				var s = mat.passes.getShader(h3d_shader_UVDelta);
				if(s == null) {
					s = mat.passes.addShader(new h3d_shader_UVDelta());
					mat.get_texture().set_wrap(h3d_mat_Wrap.Repeat);
				}
				var v1 = this.data[offset1++];
				var v2 = this.data[offset2++];
				v1 %= 1.;
				v2 %= 1.;
				if(v1 < v2 - 0.5) {
					++v1;
				} else if(v1 > v2 + 0.5) {
					--v1;
				}
				s.uvDelta__.x = v1 * (1 - k2) + v2 * k2;
				var v11 = this.data[offset1++];
				var v21 = this.data[offset2++];
				v11 %= 1.;
				v21 %= 1.;
				if(v11 < v21 - 0.5) {
					++v11;
				} else if(v11 > v21 + 0.5) {
					--v11;
				}
				s.uvDelta__.y = v11 * (1 - k2) + v21 * k2;
			}
			if((layout & 1 << h3d_anim_DataLayout.Alpha._hx_index) != 0) {
				var mat1 = o.targetObject.toMesh().material;
				if(mat1.blendMode == h2d_BlendMode.None) {
					mat1.set_blendMode(h2d_BlendMode.Alpha);
				}
				mat1.mshader.color__.w = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
			}
			if((layout & 1 << h3d_anim_DataLayout.Property._hx_index) != 0) {
				o.propCurrentValue = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
			}
		}
		if(!decompose) {
			this.isSync = true;
		}
	}
	,__class__: h3d_anim_BufferAnimation
});
var h3d_anim_LinearFrame = function() {
};
$hxClasses["h3d.anim.LinearFrame"] = h3d_anim_LinearFrame;
h3d_anim_LinearFrame.__name__ = "h3d.anim.LinearFrame";
h3d_anim_LinearFrame.prototype = {
	toMatrix: function() {
		var m = new h3d_Matrix();
		new h3d_Quat(this.qx,this.qy,this.qz,this.qw).toMatrix(m);
		m.prependScale(this.sx,this.sy,this.sz);
		m.translate(this.tx,this.ty,this.tz);
		return m;
	}
	,__class__: h3d_anim_LinearFrame
};
var h3d_anim_LinearObject = function(name) {
	this.hasPosition = true;
	h3d_anim_AnimatedObject.call(this,name);
};
$hxClasses["h3d.anim.LinearObject"] = h3d_anim_LinearObject;
h3d_anim_LinearObject.__name__ = "h3d.anim.LinearObject";
h3d_anim_LinearObject.__super__ = h3d_anim_AnimatedObject;
h3d_anim_LinearObject.prototype = $extend(h3d_anim_AnimatedObject.prototype,{
	clone: function() {
		var o = new h3d_anim_LinearObject(this.objectName);
		o.hasPosition = this.hasPosition;
		o.hasRotation = this.hasRotation;
		o.hasScale = this.hasScale;
		o.frames = this.frames;
		o.alphas = this.alphas;
		o.uvs = this.uvs;
		o.propName = this.propName;
		o.propValues = this.propValues;
		return o;
	}
	,__class__: h3d_anim_LinearObject
});
var h3d_anim_LinearAnimation = function(name,frame,sampling) {
	h3d_anim_Animation.call(this,name,frame,sampling);
	this.syncFrame = -1;
};
$hxClasses["h3d.anim.LinearAnimation"] = h3d_anim_LinearAnimation;
h3d_anim_LinearAnimation.__name__ = "h3d.anim.LinearAnimation";
h3d_anim_LinearAnimation.__super__ = h3d_anim_Animation;
h3d_anim_LinearAnimation.prototype = $extend(h3d_anim_Animation.prototype,{
	addCurve: function(objName,frames,hasPos,hasRot,hasScale) {
		var f = new h3d_anim_LinearObject(objName);
		f.frames = frames;
		f.hasPosition = hasPos;
		f.hasRotation = hasRot;
		f.hasScale = hasScale;
		this.objects.push(f);
	}
	,addAlphaCurve: function(objName,alphas) {
		var f = new h3d_anim_LinearObject(objName);
		f.alphas = alphas;
		this.objects.push(f);
	}
	,addUVCurve: function(objName,uvs) {
		var f = new h3d_anim_LinearObject(objName);
		f.uvs = uvs;
		this.objects.push(f);
	}
	,addPropCurve: function(objName,propName,values) {
		var f = new h3d_anim_LinearObject(objName);
		f.propName = propName;
		f.propValues = values;
		this.objects.push(f);
	}
	,getPropValue: function(objName,propName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objName && o.propName == propName) {
				return o.propCurrentValue;
			}
		}
		return null;
	}
	,getFrames: function() {
		return this.objects;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_LinearAnimation(this.name,this.frameCount,this.sampling);
		}
		h3d_anim_Animation.prototype.clone.call(this,a);
		return a;
	}
	,endFrame: function() {
		if(this.loop) {
			return this.frameCount;
		} else {
			return this.frameCount - 1;
		}
	}
	,initInstance: function() {
		h3d_anim_Animation.prototype.initInstance.call(this);
		var frames = this.objects;
		var _g = 0;
		while(_g < frames.length) {
			var a = frames[_g];
			++_g;
			if(a.propValues != null) {
				a.propCurrentValue = a.propValues[0];
				continue;
			}
			var tmp;
			if(a.alphas != null) {
				if(a.targetObject != null) {
					var _this = a.targetObject;
					tmp = (((_this) instanceof h3d_scene_Mesh) ? _this : null) == null;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(a.objectName + " should be a mesh (for alpha animation)");
			}
			if(a.uvs != null || a.alphas != null) {
				continue;
			}
			a.matrix = new h3d_Matrix();
			a.matrix.identity();
		}
		frames.sort($bind(this,this.sortByFrameCountDesc));
	}
	,sortByFrameCountDesc: function(o1,o2) {
		return (o2.frames == null ? 10 : o2.frames.length) - (o1.frames == null ? 10 : o1.frames.length);
	}
	,uvLerp: function(v1,v2,k) {
		v1 %= 1.;
		v2 %= 1.;
		if(v1 < v2 - 0.5) {
			++v1;
		} else if(v1 > v2 + 0.5) {
			--v1;
		}
		return v1 * (1 - k) + v2 * k;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		if(this.frame == this.syncFrame && !decompose) {
			return;
		}
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		var frame1 = f;
		var frame2 = (frame1 + 1) % this.frameCount;
		var k2 = this.frame - frame1;
		var k1 = 1 - k2;
		if(frame1 < 0) {
			frame2 = 0;
			frame1 = frame2;
		} else if(this.frame >= this.frameCount) {
			frame2 = this.frameCount - 1;
			frame1 = frame2;
		} else if(!this.loop && frame2 == 0) {
			frame2 = this.frameCount - 1;
		}
		this.syncFrame = this.frame;
		if(decompose) {
			this.isSync = false;
		}
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.targetObject == null && o.targetSkin == null) {
				continue;
			}
			if(o.alphas != null) {
				var mat = o.targetObject.toMesh().material;
				if(mat.blendMode == h2d_BlendMode.None) {
					mat.set_blendMode(h2d_BlendMode.Alpha);
				}
				mat.mshader.color__.w = o.alphas[frame1] * k1 + o.alphas[frame2] * k2;
				continue;
			}
			if(o.uvs != null) {
				var mat1 = o.targetObject.toMesh().material;
				var s = mat1.passes.getShader(h3d_shader_UVDelta);
				if(s == null) {
					s = mat1.passes.addShader(new h3d_shader_UVDelta());
					mat1.get_texture().set_wrap(h3d_mat_Wrap.Repeat);
				}
				var v1 = o.uvs[frame1 << 1];
				var v2 = o.uvs[frame2 << 1];
				v1 %= 1.;
				v2 %= 1.;
				if(v1 < v2 - 0.5) {
					++v1;
				} else if(v1 > v2 + 0.5) {
					--v1;
				}
				s.uvDelta__.x = v1 * (1 - k2) + v2 * k2;
				var v11 = o.uvs[frame1 << 1 | 1];
				var v21 = o.uvs[frame2 << 1 | 1];
				v11 %= 1.;
				v21 %= 1.;
				if(v11 < v21 - 0.5) {
					++v11;
				} else if(v11 > v21 + 0.5) {
					--v11;
				}
				s.uvDelta__.y = v11 * (1 - k2) + v21 * k2;
				continue;
			}
			if(o.propValues != null) {
				o.propCurrentValue = o.propValues[frame1] * k1 + o.propValues[frame2] * k2;
				continue;
			}
			var frame11 = frame1;
			var frame21 = frame2;
			if(o.frames.length == 1) {
				if(this.isSync) {
					break;
				}
				frame21 = 0;
				frame11 = frame21;
			}
			var f1 = o.frames[frame11];
			var f2 = o.frames[frame21];
			var m = o.matrix;
			m._41 = f1.tx * k1 + f2.tx * k2;
			m._42 = f1.ty * k1 + f2.ty * k2;
			m._43 = f1.tz * k1 + f2.tz * k2;
			if(o.hasRotation) {
				var dot = f1.qx * f2.qx + f1.qy * f2.qy + f1.qz * f2.qz + f1.qw * f2.qw;
				var q2 = dot < 0 ? -k2 : k2;
				var qx = f1.qx * k1 + f2.qx * q2;
				var qy = f1.qy * k1 + f2.qy * q2;
				var qz = f1.qz * k1 + f2.qz * q2;
				var qw = f1.qw * k1 + f2.qw * q2;
				var ql = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
				qx *= ql;
				qy *= ql;
				qz *= ql;
				qw *= ql;
				if(decompose) {
					m._12 = qx;
					m._13 = qy;
					m._21 = qz;
					m._23 = qw;
					if(o.hasScale) {
						m._11 = f1.sx * k1 + f2.sx * k2;
						m._22 = f1.sy * k1 + f2.sy * k2;
						m._33 = f1.sz * k1 + f2.sz * k2;
					} else {
						m._11 = 1;
						m._22 = 1;
						m._33 = 1;
					}
				} else {
					var xx = qx * qx;
					var xy = qx * qy;
					var xz = qx * qz;
					var xw = qx * qw;
					var yy = qy * qy;
					var yz = qy * qz;
					var yw = qy * qw;
					var zz = qz * qz;
					var zw = qz * qw;
					m._11 = 1 - 2 * (yy + zz);
					m._12 = 2 * (xy + zw);
					m._13 = 2 * (xz - yw);
					m._21 = 2 * (xy - zw);
					m._22 = 1 - 2 * (xx + zz);
					m._23 = 2 * (yz + xw);
					m._31 = 2 * (xz + yw);
					m._32 = 2 * (yz - xw);
					m._33 = 1 - 2 * (xx + yy);
					if(o.hasScale) {
						var sx = f1.sx * k1 + f2.sx * k2;
						var sy = f1.sy * k1 + f2.sy * k2;
						var sz = f1.sz * k1 + f2.sz * k2;
						m._11 *= sx;
						m._12 *= sx;
						m._13 *= sx;
						m._21 *= sy;
						m._22 *= sy;
						m._23 *= sy;
						m._31 *= sz;
						m._32 *= sz;
						m._33 *= sz;
					}
				}
			} else {
				m._12 = 0;
				m._13 = 0;
				m._21 = 0;
				m._23 = decompose ? 1 : 0;
				if(o.hasScale) {
					m._11 = f1.sx * k1 + f2.sx * k2;
					m._22 = f1.sy * k1 + f2.sy * k2;
					m._33 = f1.sz * k1 + f2.sz * k2;
				} else {
					m._11 = 1;
					m._22 = 1;
					m._33 = 1;
				}
			}
			if(o.targetSkin != null) {
				o.targetSkin.currentRelPose[o.targetJoint] = o.matrix;
				o.targetSkin.jointsUpdated = true;
			} else {
				var _this = o.targetObject;
				var v = o.matrix;
				_this.defaultTransform = v;
				var f3 = 1;
				var b = true;
				if(b) {
					_this.flags |= f3;
				} else {
					_this.flags &= ~f3;
				}
			}
		}
		if(!decompose) {
			this.isSync = true;
		}
	}
	,__class__: h3d_anim_LinearAnimation
});
var h3d_anim_Joint = function() {
	this.bindIndex = -1;
	this.splitIndex = -1;
	this.subs = [];
};
$hxClasses["h3d.anim.Joint"] = h3d_anim_Joint;
h3d_anim_Joint.__name__ = "h3d.anim.Joint";
h3d_anim_Joint.prototype = {
	__class__: h3d_anim_Joint
};
var h3d_anim__$Skin_Permut = function() {
};
$hxClasses["h3d.anim._Skin.Permut"] = h3d_anim__$Skin_Permut;
h3d_anim__$Skin_Permut.__name__ = "h3d.anim._Skin.Permut";
h3d_anim__$Skin_Permut.prototype = {
	__class__: h3d_anim__$Skin_Permut
};
var h3d_anim__$Skin_Influence = function(j,w) {
	this.j = j;
	this.w = w;
};
$hxClasses["h3d.anim._Skin.Influence"] = h3d_anim__$Skin_Influence;
h3d_anim__$Skin_Influence.__name__ = "h3d.anim._Skin.Influence";
h3d_anim__$Skin_Influence.prototype = {
	__class__: h3d_anim__$Skin_Influence
};
var h3d_anim_Skin = function(name,vertexCount,bonesPerVertex) {
	this.name = name;
	this.vertexCount = vertexCount;
	this.bonesPerVertex = bonesPerVertex;
	if(vertexCount > 0) {
		var this1 = new Array(vertexCount * bonesPerVertex);
		this.vertexJoints = this1;
		var this2 = new Array(vertexCount * bonesPerVertex);
		this.vertexWeights = this2;
		this.envelop = [];
	}
};
$hxClasses["h3d.anim.Skin"] = h3d_anim_Skin;
h3d_anim_Skin.__name__ = "h3d.anim.Skin";
h3d_anim_Skin.prototype = {
	setJoints: function(joints,roots) {
		this.rootJoints = roots;
		this.allJoints = joints;
		this.namedJoints = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < joints.length) {
			var j = joints[_g];
			++_g;
			if(j.name != null) {
				var key = j.name;
				var _this = this.namedJoints;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,j);
				} else {
					_this.h[key] = j;
				}
			}
		}
	}
	,addInfluence: function(vid,j,w) {
		var il = this.envelop[vid];
		if(il == null) {
			il = this.envelop[vid] = [];
		}
		il.push(new h3d_anim__$Skin_Influence(j,w));
	}
	,sortInfluences: function(i1,i2) {
		if(i2.w > i1.w) {
			return 1;
		} else {
			return -1;
		}
	}
	,isSplit: function() {
		return this.splitJoints != null;
	}
	,initWeights: function() {
		this.boundJoints = [];
		var pos = 0;
		var _g = 0;
		var _g1 = this.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var il = this.envelop[i];
			if(il == null) {
				il = [];
			}
			haxe_ds_ArraySort.sort(il,$bind(this,this.sortInfluences));
			if(il.length > this.bonesPerVertex) {
				il = il.slice(0,this.bonesPerVertex);
			}
			var tw = 0.;
			var _g2 = 0;
			while(_g2 < il.length) {
				var i1 = il[_g2];
				++_g2;
				tw += i1.w;
			}
			tw = 1 / tw;
			var _g11 = 0;
			var _g21 = this.bonesPerVertex;
			while(_g11 < _g21) {
				var i2 = _g11++;
				var i3 = il[i2];
				if(i3 == null) {
					this.vertexJoints[pos] = 0;
					this.vertexWeights[pos] = 0;
				} else {
					if(i3.j.bindIndex == -1) {
						i3.j.bindIndex = this.boundJoints.length;
						this.boundJoints.push(i3.j);
					}
					this.vertexJoints[pos] = i3.j.bindIndex;
					this.vertexWeights[pos] = i3.w * tw;
				}
				++pos;
			}
		}
		this.envelop = null;
	}
	,sortByBindIndex: function(j1,j2) {
		return j1.bindIndex - j2.bindIndex;
	}
	,isSub: function(a,b) {
		var j = 0;
		var max = b.length;
		var _g = 0;
		while(_g < a.length) {
			var e = a[_g];
			++_g;
			while(e != b[j++]) {
				if(j >= max) {
					return false;
				}
				continue;
			}
		}
		return true;
	}
	,merge: function(permuts) {
		var _g = 0;
		while(_g < permuts.length) {
			var p1 = permuts[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < permuts.length) {
				var p2 = permuts[_g1];
				++_g1;
				if(p1 != p2 && p1.material == p2.material && this.isSub(p1.joints,p2.joints)) {
					var _g2 = 0;
					var _g11 = p1.triangles;
					while(_g2 < _g11.length) {
						var t = _g11[_g2];
						++_g2;
						p2.triangles.push(t);
					}
					HxOverrides.remove(permuts,p1);
					return true;
				}
			}
		}
		return false;
	}
	,jointsDiff: function(p1,p2) {
		var diff = 0;
		var i = 0;
		var j = 0;
		var imax = p1.joints.length;
		var jmax = p2.joints.length;
		while(i < imax && j < jmax) {
			var j1 = p1.joints[i];
			var j2 = p2.joints[j];
			if(j1 == j2) {
				++i;
				++j;
			} else {
				++diff;
				if(j1.bindIndex < j2.bindIndex) {
					++i;
				} else {
					++j;
				}
			}
		}
		return diff + (imax - i) + (jmax - j);
	}
	,split: function(maxBones,index,triangleMaterials) {
		if(this.splitJoints != null) {
			return true;
		}
		if(this.boundJoints.length <= maxBones) {
			return false;
		}
		this.splitJoints = [];
		var this1 = new Array(index.length / 3 | 0);
		this.triangleGroups = this1;
		var permuts = [];
		var _g = 0;
		var _g1 = index.length / 3 | 0;
		while(_g < _g1) {
			var tri = _g++;
			var iid = tri * 3;
			var mid = triangleMaterials == null ? 0 : triangleMaterials[tri];
			var jl = [];
			var _g2 = 0;
			while(_g2 < 3) {
				var i = _g2++;
				var vid = index[iid + i];
				var _g3 = 0;
				var _g11 = this.bonesPerVertex;
				while(_g3 < _g11) {
					var b = _g3++;
					var bidx = vid * this.bonesPerVertex + b;
					if(this.vertexWeights[bidx] == 0) {
						continue;
					}
					var j = this.boundJoints[this.vertexJoints[bidx]];
					if(j.splitIndex != iid) {
						j.splitIndex = iid;
						jl.push(j);
					}
				}
			}
			jl.sort($bind(this,this.sortByBindIndex));
			var _g12 = 0;
			while(_g12 < permuts.length) {
				var p2 = permuts[_g12];
				++_g12;
				if(p2.material == mid && this.isSub(jl,p2.joints)) {
					p2.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			var _g21 = 0;
			while(_g21 < permuts.length) {
				var p21 = permuts[_g21];
				++_g21;
				if(p21.material == mid && this.isSub(p21.joints,jl)) {
					p21.joints = jl;
					p21.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			var pr = new h3d_anim__$Skin_Permut();
			pr.joints = jl;
			pr.triangles = [tri];
			pr.material = mid;
			permuts.push(pr);
		}
		while(true) {
			while(this.merge(permuts)) {
			}
			var minDif = 100000;
			var minTot = 100000;
			var minP1 = null;
			var minP2 = null;
			var _g22 = 0;
			var _g31 = permuts.length;
			while(_g22 < _g31) {
				var i1 = _g22++;
				var p1 = permuts[i1];
				if(p1.joints.length == maxBones) {
					continue;
				}
				var _g23 = i1 + 1;
				var _g32 = permuts.length;
				while(_g23 < _g32) {
					var j1 = _g23++;
					var p22 = permuts[j1];
					if(p22.joints.length == maxBones || p1.material != p22.material) {
						continue;
					}
					var count = this.jointsDiff(p1,p22);
					var tot = count + (p1.joints.length + p22.joints.length - count >> 1);
					if(tot > maxBones || tot > minTot || tot == minTot && count > minDif) {
						continue;
					}
					minDif = count;
					minTot = tot;
					minP1 = p1;
					minP2 = p22;
				}
			}
			if(minP1 == null) {
				break;
			}
			var p11 = minP1;
			var p23 = minP2;
			var _g4 = 0;
			var _g5 = p11.joints;
			while(_g4 < _g5.length) {
				var j2 = _g5[_g4];
				++_g4;
				HxOverrides.remove(p23.joints,j2);
				p23.joints.push(j2);
			}
			p23.joints.sort($bind(this,this.sortByBindIndex));
			var _g6 = 0;
			var _g7 = p11.triangles;
			while(_g6 < _g7.length) {
				var t = _g7[_g6];
				++_g6;
				p23.triangles.push(t);
			}
			HxOverrides.remove(permuts,p11);
		}
		var _g24 = 0;
		var _g33 = permuts.length;
		while(_g24 < _g33) {
			var i2 = _g24++;
			var _g25 = 0;
			var _g34 = permuts[i2].triangles;
			while(_g25 < _g34.length) {
				var tri1 = _g34[_g25];
				++_g25;
				this.triangleGroups[tri1] = i2;
			}
		}
		var jointsPermuts = [];
		var _g41 = 0;
		var _g51 = this.boundJoints;
		while(_g41 < _g51.length) {
			var j3 = _g51[_g41];
			++_g41;
			var pl = [];
			var _g42 = 0;
			while(_g42 < permuts.length) {
				var p = permuts[_g42];
				++_g42;
				if(p.joints.indexOf(j3) >= 0) {
					pl.push(p);
				}
			}
			jointsPermuts.push({ j : j3, pl : pl});
		}
		jointsPermuts.sort(function(j11,j21) {
			return j21.pl.length - j11.pl.length;
		});
		var _g61 = 0;
		while(_g61 < permuts.length) {
			var p3 = permuts[_g61];
			++_g61;
			p3.indexedJoints = [];
		}
		var _g71 = 0;
		while(_g71 < jointsPermuts.length) {
			var j4 = jointsPermuts[_g71];
			++_g71;
			j4.j.splitIndex = -1;
			var _g72 = 0;
			var _g8 = maxBones;
			while(_g72 < _g8) {
				var id = _g72++;
				var ok = true;
				var _g73 = 0;
				var _g81 = j4.pl;
				while(_g73 < _g81.length) {
					var p4 = _g81[_g73];
					++_g73;
					if(p4.indexedJoints[id] != null) {
						ok = false;
						break;
					}
				}
				if(ok) {
					j4.j.splitIndex = id;
					var _g9 = 0;
					var _g10 = j4.pl;
					while(_g9 < _g10.length) {
						var p5 = _g10[_g9];
						++_g9;
						p5.indexedJoints[id] = j4.j;
					}
					break;
				}
			}
			if(j4.j.splitIndex < 0) {
				throw new js__$Boot_HaxeError("Failed to assign index while spliting skin");
			}
		}
		this.splitJoints = [];
		var _g82 = 0;
		while(_g82 < permuts.length) {
			var p6 = permuts[_g82];
			++_g82;
			var jl1 = [];
			var _g83 = 0;
			var _g91 = p6.indexedJoints.length;
			while(_g83 < _g91) {
				var i3 = _g83++;
				var j5 = p6.indexedJoints[i3];
				if(j5 == null) {
					j5 = this.boundJoints[0];
				}
				jl1.push(j5);
			}
			this.splitJoints.push({ material : p6.material, joints : jl1});
		}
		var _g92 = 0;
		var _g101 = this.vertexJoints.length;
		while(_g92 < _g101) {
			var i4 = _g92++;
			this.vertexJoints[i4] = this.boundJoints[this.vertexJoints[i4]].splitIndex;
		}
		return true;
	}
	,__class__: h3d_anim_Skin
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.__isInterface__ = true;
h3d_col_Collider.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.__interfaces__ = [h3d_col_Collider];
h3d_col_Bounds.fromPoints = function(min,max) {
	var b = new h3d_col_Bounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.zMin = min.z;
	b.xMax = max.x;
	b.yMax = max.y;
	b.zMax = max.z;
	return b;
};
h3d_col_Bounds.fromValues = function(x,y,z,dx,dy,dz) {
	var b = new h3d_col_Bounds();
	b.xMin = x;
	b.yMin = y;
	b.zMin = z;
	b.xMax = x + dx;
	b.yMax = y + dy;
	b.zMax = z + dz;
	return b;
};
h3d_col_Bounds.prototype = {
	inFrustum: function(f,m) {
		if(m != null) {
			throw new js__$Boot_HaxeError("Not implemented");
		}
		return f.hasBounds(this);
	}
	,inSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var c_x = x;
		var c_y = y;
		var c_z = z;
		var a = this.xMin;
		var a1 = s.x;
		var b = this.xMax;
		var b1 = a1 > b ? b : a1;
		var x1 = a < b1 ? b1 : a;
		var a2 = this.yMin;
		var a3 = s.y;
		var b2 = this.yMax;
		var b3 = a3 > b2 ? b2 : a3;
		var y1 = a2 < b3 ? b3 : a2;
		var a4 = this.zMin;
		var a5 = s.z;
		var b4 = this.zMax;
		var b5 = a5 > b4 ? b4 : a5;
		var z1 = a4 < b5 ? b5 : a4;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var dx = p_x - c_x;
		var dy = p_y - c_y;
		var dz = p_z - c_z;
		return dx * dx + dy * dy + dz * dz < s.r * s.r;
	}
	,testPlane: function(p) {
		var a = p.nx;
		var b = p.ny;
		var c = p.nz;
		var dd = a * (this.xMax + this.xMin) + b * (this.yMax + this.yMin) + c * (this.zMax + this.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b < 0) {
			b = -b;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (this.xMax - this.xMin) + b * (this.yMax - this.yMin) + c * (this.zMax - this.zMin);
		return dd + rr - p.d * 2;
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a1 = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a1 < realMinTz ? realMinTz : a1;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,inFrustumDetails: function(mvp,checkZ) {
		if(checkZ == null) {
			checkZ = true;
		}
		var ret = 1;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = mvp._44 + mvp._41;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		var p_nx1 = mvp._14 - mvp._11;
		var p_ny1 = mvp._24 - mvp._21;
		var p_nz1 = mvp._34 - mvp._31;
		var p_d1 = mvp._44 - mvp._41;
		var m1 = p_nx1 * (p_nx1 > 0 ? this.xMax : this.xMin) + p_ny1 * (p_ny1 > 0 ? this.yMax : this.yMin) + p_nz1 * (p_nz1 > 0 ? this.zMax : this.zMin);
		if(m1 + p_d1 < 0) {
			return -1;
		}
		var n1 = p_nx1 * (p_nx1 > 0 ? this.xMin : this.xMax) + p_ny1 * (p_ny1 > 0 ? this.yMin : this.yMax) + p_nz1 * (p_nz1 > 0 ? this.zMin : this.zMax);
		if(n1 + p_d1 < 0) {
			ret = 0;
		}
		var p_nx2 = mvp._14 + mvp._12;
		var p_ny2 = mvp._24 + mvp._22;
		var p_nz2 = mvp._34 + mvp._32;
		var p_d2 = mvp._44 + mvp._42;
		var m2 = p_nx2 * (p_nx2 > 0 ? this.xMax : this.xMin) + p_ny2 * (p_ny2 > 0 ? this.yMax : this.yMin) + p_nz2 * (p_nz2 > 0 ? this.zMax : this.zMin);
		if(m2 + p_d2 < 0) {
			return -1;
		}
		var n2 = p_nx2 * (p_nx2 > 0 ? this.xMin : this.xMax) + p_ny2 * (p_ny2 > 0 ? this.yMin : this.yMax) + p_nz2 * (p_nz2 > 0 ? this.zMin : this.zMax);
		if(n2 + p_d2 < 0) {
			ret = 0;
		}
		var p_nx3 = mvp._14 - mvp._12;
		var p_ny3 = mvp._24 - mvp._22;
		var p_nz3 = mvp._34 - mvp._32;
		var p_d3 = mvp._44 - mvp._42;
		var m3 = p_nx3 * (p_nx3 > 0 ? this.xMax : this.xMin) + p_ny3 * (p_ny3 > 0 ? this.yMax : this.yMin) + p_nz3 * (p_nz3 > 0 ? this.zMax : this.zMin);
		if(m3 + p_d3 < 0) {
			return -1;
		}
		var n3 = p_nx3 * (p_nx3 > 0 ? this.xMin : this.xMax) + p_ny3 * (p_ny3 > 0 ? this.yMin : this.yMax) + p_nz3 * (p_nz3 > 0 ? this.zMin : this.zMax);
		if(n3 + p_d3 < 0) {
			ret = 0;
		}
		if(checkZ) {
			var p_nx4 = mvp._13;
			var p_ny4 = mvp._23;
			var p_nz4 = mvp._33;
			var p_d4 = mvp._43;
			var m4 = p_nx4 * (p_nx4 > 0 ? this.xMax : this.xMin) + p_ny4 * (p_ny4 > 0 ? this.yMax : this.yMin) + p_nz4 * (p_nz4 > 0 ? this.zMax : this.zMin);
			if(m4 + p_d4 < 0) {
				return -1;
			}
			var n4 = p_nx4 * (p_nx4 > 0 ? this.xMin : this.xMax) + p_ny4 * (p_ny4 > 0 ? this.yMin : this.yMax) + p_nz4 * (p_nz4 > 0 ? this.zMin : this.zMax);
			if(n4 + p_d4 < 0) {
				ret = 0;
			}
			var p_nx5 = mvp._14 - mvp._13;
			var p_ny5 = mvp._24 - mvp._23;
			var p_nz5 = mvp._34 - mvp._33;
			var p_d5 = mvp._44 - mvp._43;
			var m5 = p_nx5 * (p_nx5 > 0 ? this.xMax : this.xMin) + p_ny5 * (p_ny5 > 0 ? this.yMax : this.yMin) + p_nz5 * (p_nz5 > 0 ? this.zMax : this.zMin);
			if(m5 + p_d5 < 0) {
				return -1;
			}
			var n5 = p_nx5 * (p_nx5 > 0 ? this.xMin : this.xMax) + p_ny5 * (p_ny5 > 0 ? this.yMin : this.yMax) + p_nz5 * (p_nz5 > 0 ? this.zMin : this.zMax);
			if(n5 + p_d5 < 0) {
				ret = 0;
			}
		}
		return ret;
	}
	,transform3x3: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		var v_x = 0.;
		var v_y = 0.;
		var v_z = 0.;
		v_x = xMin;
		v_y = yMin;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMin;
		v_z = zMax;
		var px1 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py1 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz1 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px1;
		v_y = py1;
		v_z = pz1;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMin;
		var px2 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py2 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz2 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px2;
		v_y = py2;
		v_z = pz2;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMax;
		var px3 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py3 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz3 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px3;
		v_y = py3;
		v_z = pz3;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMin;
		var px4 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py4 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz4 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px4;
		v_y = py4;
		v_z = pz4;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMax;
		var px5 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py5 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz5 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px5;
		v_y = py5;
		v_z = pz5;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMin;
		var px6 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py6 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz6 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px6;
		v_y = py6;
		v_z = pz6;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMax;
		var px7 = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py7 = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz7 = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px7;
		v_y = py7;
		v_z = pz7;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
	}
	,transform: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		if(xMax < xMin && yMax < yMin && zMax < zMin) {
			return;
		}
		var v_x = 0.;
		var v_y = 0.;
		var v_z = 0.;
		v_x = xMin;
		v_y = yMin;
		v_z = zMin;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMin;
		v_z = zMax;
		var px1 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py1 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz1 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px1;
		v_y = py1;
		v_z = pz1;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMin;
		var px2 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py2 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz2 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px2;
		v_y = py2;
		v_z = pz2;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMin;
		v_y = yMax;
		v_z = zMax;
		var px3 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py3 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz3 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px3;
		v_y = py3;
		v_z = pz3;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMin;
		var px4 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py4 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz4 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px4;
		v_y = py4;
		v_z = pz4;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMin;
		v_z = zMax;
		var px5 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py5 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz5 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px5;
		v_y = py5;
		v_z = pz5;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMin;
		var px6 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py6 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz6 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px6;
		v_y = py6;
		v_z = pz6;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		v_x = xMax;
		v_y = yMax;
		v_z = zMax;
		var px7 = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py7 = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz7 = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px7;
		v_y = py7;
		v_z = pz7;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
	}
	,collide: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.zMin > b.zMax || this.xMax < b.xMin || this.yMax < b.yMin || this.zMax < b.zMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin && p.y < this.yMax && p.z >= this.zMin) {
			return p.z < this.zMax;
		} else {
			return false;
		}
	}
	,add: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
		if(b.zMin < this.zMin) {
			this.zMin = b.zMin;
		}
		if(b.zMax > this.zMax) {
			this.zMax = b.zMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
		if(p.z < this.zMin) {
			this.zMin = p.z;
		}
		if(p.z > this.zMax) {
			this.zMax = p.z;
		}
	}
	,addPos: function(x,y,z) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(z < this.zMin) {
			this.zMin = z;
		}
		if(z > this.zMax) {
			this.zMax = z;
		}
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a2 = a.yMin;
		var b2 = b.yMin;
		var yMin = a2 < b2 ? b2 : a2;
		var a3 = a.zMin;
		var b3 = b.zMin;
		var zMin = a3 < b3 ? b3 : a3;
		var a4 = a.xMax;
		var b4 = b.xMax;
		var xMax = a4 > b4 ? b4 : a4;
		var a5 = a.yMax;
		var b5 = b.yMax;
		var yMax = a5 > b5 ? b5 : a5;
		var a6 = a.zMax;
		var b6 = b.zMax;
		var zMax = a6 > b6 ? b6 : a6;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,offset: function(dx,dy,dz) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
		this.zMin += dz;
		this.zMax += dz;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
		this.zMin = p.z;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
		this.zMax = p.z;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.xMax = b.xMax;
		this.yMin = b.yMin;
		this.yMax = b.yMax;
		this.zMin = b.zMin;
		this.zMax = b.zMax;
	}
	,scalePivot: function(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.zMin *= v;
		this.xMax *= v;
		this.yMax *= v;
		this.zMax *= v;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,getMin: function() {
		return new h3d_col_Point(this.xMin,this.yMin,this.zMin);
	}
	,getCenter: function() {
		return new h3d_col_Point((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,(this.zMin + this.zMax) * 0.5);
	}
	,getSize: function() {
		return new h3d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin,this.zMax - this.zMin);
	}
	,getMax: function() {
		return new h3d_col_Point(this.xMax,this.yMax,this.zMax);
	}
	,get_xSize: function() {
		return this.xMax - this.xMin;
	}
	,get_ySize: function() {
		return this.yMax - this.yMin;
	}
	,get_zSize: function() {
		return this.zMax - this.zMin;
	}
	,set_xSize: function(v) {
		this.xMax = this.xMin + v;
		return v;
	}
	,set_ySize: function(v) {
		this.yMax = this.yMin + v;
		return v;
	}
	,set_zSize: function(v) {
		this.zMax = this.zMin + v;
		return v;
	}
	,isEmpty: function() {
		if(!(this.xMax < this.xMin || this.yMax < this.yMin)) {
			return this.zMax < this.zMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
	}
	,all: function() {
		this.xMin = -1e20;
		this.xMax = 1e20;
		this.yMin = -1e20;
		this.yMax = 1e20;
		this.zMin = -1e20;
		this.zMax = 1e20;
	}
	,clone: function() {
		var b = new h3d_col_Bounds();
		b.xMin = this.xMin;
		b.xMax = this.xMax;
		b.yMin = this.yMin;
		b.yMax = this.yMax;
		b.zMin = this.zMin;
		b.zMax = this.zMax;
		return b;
	}
	,toString: function() {
		return "Bounds{" + Std.string(new h3d_col_Point(this.xMin,this.yMin,this.zMin)) + "," + Std.string(new h3d_col_Point(this.xMax - this.xMin,this.yMax - this.yMin,this.zMax - this.zMin)) + "}";
	}
	,toSphere: function() {
		var dx = this.xMax - this.xMin;
		var dy = this.yMax - this.yMin;
		var dz = this.zMax - this.zMin;
		return new h3d_col_Sphere((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,(this.zMin + this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
	}
	,__class__: h3d_col_Bounds
	,__properties__: {set_zSize:"set_zSize",get_zSize:"get_zSize",set_ySize:"set_ySize",get_ySize:"get_ySize",set_xSize:"set_xSize",get_xSize:"get_xSize"}
};
var h3d_col_OptimizedCollider = function(a,b) {
	this.a = a;
	this.b = b;
};
$hxClasses["h3d.col.OptimizedCollider"] = h3d_col_OptimizedCollider;
h3d_col_OptimizedCollider.__name__ = "h3d.col.OptimizedCollider";
h3d_col_OptimizedCollider.__interfaces__ = [h3d_col_Collider,hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_OptimizedCollider.prototype = {
	rayIntersection: function(r,bestMatch) {
		if(this.a.rayIntersection(r,bestMatch) < 0) {
			return -1;
		}
		return this.b.rayIntersection(r,bestMatch);
	}
	,contains: function(p) {
		if(this.a.contains(p)) {
			return this.b.contains(p);
		} else {
			return false;
		}
	}
	,inFrustum: function(f,m) {
		if(this.a.inFrustum(f,m)) {
			return this.b.inFrustum(f,m);
		} else {
			return false;
		}
	}
	,inSphere: function(s) {
		if(this.a.inSphere(s)) {
			return this.b.inSphere(s);
		} else {
			return false;
		}
	}
	,__class__: h3d_col_OptimizedCollider
};
var h3d_col_GroupCollider = function(colliders) {
	this.colliders = colliders;
};
$hxClasses["h3d.col.GroupCollider"] = h3d_col_GroupCollider;
h3d_col_GroupCollider.__name__ = "h3d.col.GroupCollider";
h3d_col_GroupCollider.__interfaces__ = [h3d_col_Collider];
h3d_col_GroupCollider.prototype = {
	rayIntersection: function(r,bestMatch) {
		var best = -1.;
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var d = c.rayIntersection(r,bestMatch);
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
		}
		return best;
	}
	,contains: function(p) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.contains(p)) {
				return true;
			}
		}
		return false;
	}
	,inFrustum: function(f,m) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.inFrustum(f,m)) {
				return true;
			}
		}
		return false;
	}
	,inSphere: function(s) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.inSphere(s)) {
				return true;
			}
		}
		return false;
	}
	,__class__: h3d_col_GroupCollider
};
var h3d_col_FPoint = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.col.FPoint"] = h3d_col_FPoint;
h3d_col_FPoint.__name__ = "h3d.col.FPoint";
h3d_col_FPoint.prototype = {
	sub: function(p) {
		return new h3d_col_FPoint(this.x - p.x,this.y - p.y,this.z - p.z);
	}
	,add: function(p) {
		return new h3d_col_FPoint(this.x + p.x,this.y + p.y,this.z + p.z);
	}
	,cross: function(p) {
		return new h3d_col_FPoint(this.y * p.z - this.z * p.y,this.z * p.x - this.x * p.z,this.x * p.y - this.y * p.x);
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y + this.z * p.z;
	}
	,toString: function() {
		return "FPoint{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "}";
	}
	,__class__: h3d_col_FPoint
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	clone: function() {
		var f = new h3d_col_Frustum();
		var _this = f.pleft;
		var p = this.pleft;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this1 = f.pright;
		var p1 = this.pright;
		_this1.nx = p1.nx;
		_this1.ny = p1.ny;
		_this1.nz = p1.nz;
		_this1.d = p1.d;
		var _this2 = f.ptop;
		var p2 = this.ptop;
		_this2.nx = p2.nx;
		_this2.ny = p2.ny;
		_this2.nz = p2.nz;
		_this2.d = p2.d;
		var _this3 = f.pbottom;
		var p3 = this.pbottom;
		_this3.nx = p3.nx;
		_this3.ny = p3.ny;
		_this3.nz = p3.nz;
		_this3.d = p3.d;
		var _this4 = f.pnear;
		var p4 = this.pnear;
		_this4.nx = p4.nx;
		_this4.ny = p4.ny;
		_this4.nz = p4.nz;
		_this4.d = p4.d;
		var _this5 = f.pfar;
		var p5 = this.pfar;
		_this5.nx = p5.nx;
		_this5.ny = p5.ny;
		_this5.nz = p5.nz;
		_this5.d = p5.d;
		f.checkNearFar = this.checkNearFar;
		return f;
	}
	,loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this1 = this.pright;
		var p_nx1 = mvp._14 - mvp._11;
		var p_ny1 = mvp._24 - mvp._21;
		var p_nz1 = mvp._34 - mvp._31;
		var p_d1 = mvp._41 - mvp._44;
		_this1.nx = p_nx1;
		_this1.ny = p_ny1;
		_this1.nz = p_nz1;
		_this1.d = p_d1;
		var _this2 = this.ptop;
		var p_nx2 = mvp._14 - mvp._12;
		var p_ny2 = mvp._24 - mvp._22;
		var p_nz2 = mvp._34 - mvp._32;
		var p_d2 = mvp._42 - mvp._44;
		_this2.nx = p_nx2;
		_this2.ny = p_ny2;
		_this2.nz = p_nz2;
		_this2.d = p_d2;
		var _this3 = this.pbottom;
		var p_nx3 = mvp._14 + mvp._12;
		var p_ny3 = mvp._24 + mvp._22;
		var p_nz3 = mvp._34 + mvp._32;
		var p_d3 = -(mvp._44 + mvp._42);
		_this3.nx = p_nx3;
		_this3.ny = p_ny3;
		_this3.nz = p_nz3;
		_this3.d = p_d3;
		var _this4 = this.pnear;
		var p_nx4 = mvp._13;
		var p_ny4 = mvp._23;
		var p_nz4 = mvp._33;
		var p_d4 = -mvp._43;
		_this4.nx = p_nx4;
		_this4.ny = p_ny4;
		_this4.nz = p_nz4;
		_this4.d = p_d4;
		var _this5 = this.pfar;
		var p_nx5 = mvp._14 - mvp._13;
		var p_ny5 = mvp._24 - mvp._23;
		var p_nz5 = mvp._34 - mvp._33;
		var p_d5 = mvp._43 - mvp._44;
		_this5.nx = p_nx5;
		_this5.ny = p_ny5;
		_this5.nz = p_nz5;
		_this5.d = p_d5;
		var _this6 = this.pleft;
		var len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		var _this7 = this.pright;
		var len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		var _this8 = this.ptop;
		var len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		var _this9 = this.pbottom;
		var len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		var _this10 = this.pnear;
		var len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		var _this11 = this.pfar;
		var len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	,transform: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse(m);
		m2.transpose();
		var _this = this.pleft;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this1 = this.pright;
		var x1 = _this1.nx;
		var y1 = _this1.ny;
		var z1 = _this1.nz;
		var w1 = -_this1.d;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x1 = x1;
		var v_y1 = y1;
		var v_z1 = z1;
		var v_w1 = w1;
		var px1 = v_x1 * m2._11 + v_y1 * m2._21 + v_z1 * m2._31 + v_w1 * m2._41;
		var py1 = v_x1 * m2._12 + v_y1 * m2._22 + v_z1 * m2._32 + v_w1 * m2._42;
		var pz1 = v_x1 * m2._13 + v_y1 * m2._23 + v_z1 * m2._33 + v_w1 * m2._43;
		var pw1 = v_x1 * m2._14 + v_y1 * m2._24 + v_z1 * m2._34 + v_w1 * m2._44;
		v_x1 = px1;
		v_y1 = py1;
		v_z1 = pz1;
		v_w1 = pw1;
		_this1.nx = v_x1;
		_this1.ny = v_y1;
		_this1.nz = v_z1;
		_this1.d = -v_w1;
		var _this2 = this.ptop;
		var x2 = _this2.nx;
		var y2 = _this2.ny;
		var z2 = _this2.nz;
		var w2 = -_this2.d;
		if(w2 == null) {
			w2 = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var v_x2 = x2;
		var v_y2 = y2;
		var v_z2 = z2;
		var v_w2 = w2;
		var px2 = v_x2 * m2._11 + v_y2 * m2._21 + v_z2 * m2._31 + v_w2 * m2._41;
		var py2 = v_x2 * m2._12 + v_y2 * m2._22 + v_z2 * m2._32 + v_w2 * m2._42;
		var pz2 = v_x2 * m2._13 + v_y2 * m2._23 + v_z2 * m2._33 + v_w2 * m2._43;
		var pw2 = v_x2 * m2._14 + v_y2 * m2._24 + v_z2 * m2._34 + v_w2 * m2._44;
		v_x2 = px2;
		v_y2 = py2;
		v_z2 = pz2;
		v_w2 = pw2;
		_this2.nx = v_x2;
		_this2.ny = v_y2;
		_this2.nz = v_z2;
		_this2.d = -v_w2;
		var _this3 = this.pbottom;
		var x3 = _this3.nx;
		var y3 = _this3.ny;
		var z3 = _this3.nz;
		var w3 = -_this3.d;
		if(w3 == null) {
			w3 = 1.;
		}
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		var v_x3 = x3;
		var v_y3 = y3;
		var v_z3 = z3;
		var v_w3 = w3;
		var px3 = v_x3 * m2._11 + v_y3 * m2._21 + v_z3 * m2._31 + v_w3 * m2._41;
		var py3 = v_x3 * m2._12 + v_y3 * m2._22 + v_z3 * m2._32 + v_w3 * m2._42;
		var pz3 = v_x3 * m2._13 + v_y3 * m2._23 + v_z3 * m2._33 + v_w3 * m2._43;
		var pw3 = v_x3 * m2._14 + v_y3 * m2._24 + v_z3 * m2._34 + v_w3 * m2._44;
		v_x3 = px3;
		v_y3 = py3;
		v_z3 = pz3;
		v_w3 = pw3;
		_this3.nx = v_x3;
		_this3.ny = v_y3;
		_this3.nz = v_z3;
		_this3.d = -v_w3;
		var _this4 = this.pfar;
		var x4 = _this4.nx;
		var y4 = _this4.ny;
		var z4 = _this4.nz;
		var w4 = -_this4.d;
		if(w4 == null) {
			w4 = 1.;
		}
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		var v_x4 = x4;
		var v_y4 = y4;
		var v_z4 = z4;
		var v_w4 = w4;
		var px4 = v_x4 * m2._11 + v_y4 * m2._21 + v_z4 * m2._31 + v_w4 * m2._41;
		var py4 = v_x4 * m2._12 + v_y4 * m2._22 + v_z4 * m2._32 + v_w4 * m2._42;
		var pz4 = v_x4 * m2._13 + v_y4 * m2._23 + v_z4 * m2._33 + v_w4 * m2._43;
		var pw4 = v_x4 * m2._14 + v_y4 * m2._24 + v_z4 * m2._34 + v_w4 * m2._44;
		v_x4 = px4;
		v_y4 = py4;
		v_z4 = pz4;
		v_w4 = pw4;
		_this4.nx = v_x4;
		_this4.ny = v_y4;
		_this4.nz = v_z4;
		_this4.d = -v_w4;
		var _this5 = this.pnear;
		var x5 = _this5.nx;
		var y5 = _this5.ny;
		var z5 = _this5.nz;
		var w5 = -_this5.d;
		if(w5 == null) {
			w5 = 1.;
		}
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		var v_x5 = x5;
		var v_y5 = y5;
		var v_z5 = z5;
		var v_w5 = w5;
		var px5 = v_x5 * m2._11 + v_y5 * m2._21 + v_z5 * m2._31 + v_w5 * m2._41;
		var py5 = v_x5 * m2._12 + v_y5 * m2._22 + v_z5 * m2._32 + v_w5 * m2._42;
		var pz5 = v_x5 * m2._13 + v_y5 * m2._23 + v_z5 * m2._33 + v_w5 * m2._43;
		var pw5 = v_x5 * m2._14 + v_y5 * m2._24 + v_z5 * m2._34 + v_w5 * m2._44;
		v_x5 = px5;
		v_y5 = py5;
		v_z5 = pz5;
		v_w5 = pw5;
		_this5.nx = v_x5;
		_this5.ny = v_y5;
		_this5.nz = v_z5;
		_this5.d = -v_w5;
		var _this6 = this.pleft;
		var len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		var _this7 = this.pright;
		var len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		var _this8 = this.ptop;
		var len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		var _this9 = this.pbottom;
		var len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		var _this10 = this.pnear;
		var len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		var _this11 = this.pfar;
		var len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	,transform3x3: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse3x3(m);
		m2.transpose();
		var _this = this.pleft;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this1 = this.pright;
		var x1 = _this1.nx;
		var y1 = _this1.ny;
		var z1 = _this1.nz;
		var w1 = -_this1.d;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x1 = x1;
		var v_y1 = y1;
		var v_z1 = z1;
		var v_w1 = w1;
		var px1 = v_x1 * m2._11 + v_y1 * m2._21 + v_z1 * m2._31 + v_w1 * m2._41;
		var py1 = v_x1 * m2._12 + v_y1 * m2._22 + v_z1 * m2._32 + v_w1 * m2._42;
		var pz1 = v_x1 * m2._13 + v_y1 * m2._23 + v_z1 * m2._33 + v_w1 * m2._43;
		var pw1 = v_x1 * m2._14 + v_y1 * m2._24 + v_z1 * m2._34 + v_w1 * m2._44;
		v_x1 = px1;
		v_y1 = py1;
		v_z1 = pz1;
		v_w1 = pw1;
		_this1.nx = v_x1;
		_this1.ny = v_y1;
		_this1.nz = v_z1;
		_this1.d = -v_w1;
		var _this2 = this.ptop;
		var x2 = _this2.nx;
		var y2 = _this2.ny;
		var z2 = _this2.nz;
		var w2 = -_this2.d;
		if(w2 == null) {
			w2 = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var v_x2 = x2;
		var v_y2 = y2;
		var v_z2 = z2;
		var v_w2 = w2;
		var px2 = v_x2 * m2._11 + v_y2 * m2._21 + v_z2 * m2._31 + v_w2 * m2._41;
		var py2 = v_x2 * m2._12 + v_y2 * m2._22 + v_z2 * m2._32 + v_w2 * m2._42;
		var pz2 = v_x2 * m2._13 + v_y2 * m2._23 + v_z2 * m2._33 + v_w2 * m2._43;
		var pw2 = v_x2 * m2._14 + v_y2 * m2._24 + v_z2 * m2._34 + v_w2 * m2._44;
		v_x2 = px2;
		v_y2 = py2;
		v_z2 = pz2;
		v_w2 = pw2;
		_this2.nx = v_x2;
		_this2.ny = v_y2;
		_this2.nz = v_z2;
		_this2.d = -v_w2;
		var _this3 = this.pbottom;
		var x3 = _this3.nx;
		var y3 = _this3.ny;
		var z3 = _this3.nz;
		var w3 = -_this3.d;
		if(w3 == null) {
			w3 = 1.;
		}
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		var v_x3 = x3;
		var v_y3 = y3;
		var v_z3 = z3;
		var v_w3 = w3;
		var px3 = v_x3 * m2._11 + v_y3 * m2._21 + v_z3 * m2._31 + v_w3 * m2._41;
		var py3 = v_x3 * m2._12 + v_y3 * m2._22 + v_z3 * m2._32 + v_w3 * m2._42;
		var pz3 = v_x3 * m2._13 + v_y3 * m2._23 + v_z3 * m2._33 + v_w3 * m2._43;
		var pw3 = v_x3 * m2._14 + v_y3 * m2._24 + v_z3 * m2._34 + v_w3 * m2._44;
		v_x3 = px3;
		v_y3 = py3;
		v_z3 = pz3;
		v_w3 = pw3;
		_this3.nx = v_x3;
		_this3.ny = v_y3;
		_this3.nz = v_z3;
		_this3.d = -v_w3;
		var _this4 = this.pfar;
		var x4 = _this4.nx;
		var y4 = _this4.ny;
		var z4 = _this4.nz;
		var w4 = -_this4.d;
		if(w4 == null) {
			w4 = 1.;
		}
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		var v_x4 = x4;
		var v_y4 = y4;
		var v_z4 = z4;
		var v_w4 = w4;
		var px4 = v_x4 * m2._11 + v_y4 * m2._21 + v_z4 * m2._31 + v_w4 * m2._41;
		var py4 = v_x4 * m2._12 + v_y4 * m2._22 + v_z4 * m2._32 + v_w4 * m2._42;
		var pz4 = v_x4 * m2._13 + v_y4 * m2._23 + v_z4 * m2._33 + v_w4 * m2._43;
		var pw4 = v_x4 * m2._14 + v_y4 * m2._24 + v_z4 * m2._34 + v_w4 * m2._44;
		v_x4 = px4;
		v_y4 = py4;
		v_z4 = pz4;
		v_w4 = pw4;
		_this4.nx = v_x4;
		_this4.ny = v_y4;
		_this4.nz = v_z4;
		_this4.d = -v_w4;
		var _this5 = this.pnear;
		var x5 = _this5.nx;
		var y5 = _this5.ny;
		var z5 = _this5.nz;
		var w5 = -_this5.d;
		if(w5 == null) {
			w5 = 1.;
		}
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		var v_x5 = x5;
		var v_y5 = y5;
		var v_z5 = z5;
		var v_w5 = w5;
		var px5 = v_x5 * m2._11 + v_y5 * m2._21 + v_z5 * m2._31 + v_w5 * m2._41;
		var py5 = v_x5 * m2._12 + v_y5 * m2._22 + v_z5 * m2._32 + v_w5 * m2._42;
		var pz5 = v_x5 * m2._13 + v_y5 * m2._23 + v_z5 * m2._33 + v_w5 * m2._43;
		var pw5 = v_x5 * m2._14 + v_y5 * m2._24 + v_z5 * m2._34 + v_w5 * m2._44;
		v_x5 = px5;
		v_y5 = py5;
		v_z5 = pz5;
		v_w5 = pw5;
		_this5.nx = v_x5;
		_this5.ny = v_y5;
		_this5.nz = v_z5;
		_this5.d = -v_w5;
		var _this6 = this.pleft;
		var len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		var _this7 = this.pright;
		var len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		var _this8 = this.ptop;
		var len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		var _this9 = this.pbottom;
		var len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		var _this10 = this.pnear;
		var len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		var _this11 = this.pfar;
		var len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	,hasPoint: function(p) {
		var _this = this.pleft;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		var _this1 = this.pright;
		if(_this1.nx * p.x + _this1.ny * p.y + _this1.nz * p.z - _this1.d < 0) {
			return false;
		}
		var _this2 = this.ptop;
		if(_this2.nx * p.x + _this2.ny * p.y + _this2.nz * p.z - _this2.d < 0) {
			return false;
		}
		var _this3 = this.pbottom;
		if(_this3.nx * p.x + _this3.ny * p.y + _this3.nz * p.z - _this3.d < 0) {
			return false;
		}
		if(this.checkNearFar) {
			var _this4 = this.pnear;
			if(_this4.nx * p.x + _this4.ny * p.y + _this4.nz * p.z - _this4.d < 0) {
				return false;
			}
			var _this5 = this.pfar;
			if(_this5.nx * p.x + _this5.ny * p.y + _this5.nz * p.z - _this5.d < 0) {
				return false;
			}
		}
		return true;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this1 = this.pright;
		if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
			return false;
		}
		var _this2 = this.ptop;
		if(_this2.nx * p_x + _this2.ny * p_y + _this2.nz * p_z - _this2.d < -s.r) {
			return false;
		}
		var _this3 = this.pbottom;
		if(_this3.nx * p_x + _this3.ny * p_y + _this3.nz * p_z - _this3.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this4 = this.pnear;
			if(_this4.nx * p_x + _this4.ny * p_y + _this4.nz * p_z - _this4.d < -s.r) {
				return false;
			}
			var _this5 = this.pfar;
			if(_this5.nx * p_x + _this5.ny * p_y + _this5.nz * p_z - _this5.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p1 = this.pright;
		var a1 = p1.nx;
		var b2 = p1.ny;
		var c1 = p1.nz;
		var dd1 = a1 * (b.xMax + b.xMin) + b2 * (b.yMax + b.yMin) + c1 * (b.zMax + b.zMin);
		if(a1 < 0) {
			a1 = -a1;
		}
		if(b2 < 0) {
			b2 = -b2;
		}
		if(c1 < 0) {
			c1 = -c1;
		}
		var rr1 = a1 * (b.xMax - b.xMin) + b2 * (b.yMax - b.yMin) + c1 * (b.zMax - b.zMin);
		if(dd1 + rr1 - p1.d * 2 < 0) {
			return false;
		}
		var p2 = this.ptop;
		var a2 = p2.nx;
		var b3 = p2.ny;
		var c2 = p2.nz;
		var dd2 = a2 * (b.xMax + b.xMin) + b3 * (b.yMax + b.yMin) + c2 * (b.zMax + b.zMin);
		if(a2 < 0) {
			a2 = -a2;
		}
		if(b3 < 0) {
			b3 = -b3;
		}
		if(c2 < 0) {
			c2 = -c2;
		}
		var rr2 = a2 * (b.xMax - b.xMin) + b3 * (b.yMax - b.yMin) + c2 * (b.zMax - b.zMin);
		if(dd2 + rr2 - p2.d * 2 < 0) {
			return false;
		}
		var p3 = this.ptop;
		var a3 = p3.nx;
		var b4 = p3.ny;
		var c3 = p3.nz;
		var dd3 = a3 * (b.xMax + b.xMin) + b4 * (b.yMax + b.yMin) + c3 * (b.zMax + b.zMin);
		if(a3 < 0) {
			a3 = -a3;
		}
		if(b4 < 0) {
			b4 = -b4;
		}
		if(c3 < 0) {
			c3 = -c3;
		}
		var rr3 = a3 * (b.xMax - b.xMin) + b4 * (b.yMax - b.yMin) + c3 * (b.zMax - b.zMin);
		if(dd3 + rr3 - p3.d * 2 < 0) {
			return false;
		}
		var p4 = this.pnear;
		var a4 = p4.nx;
		var b5 = p4.ny;
		var c4 = p4.nz;
		var dd4 = a4 * (b.xMax + b.xMin) + b5 * (b.yMax + b.yMin) + c4 * (b.zMax + b.zMin);
		if(a4 < 0) {
			a4 = -a4;
		}
		if(b5 < 0) {
			b5 = -b5;
		}
		if(c4 < 0) {
			c4 = -c4;
		}
		var rr4 = a4 * (b.xMax - b.xMin) + b5 * (b.yMax - b.yMin) + c4 * (b.zMax - b.zMin);
		if(dd4 + rr4 - p4.d * 2 < 0) {
			return false;
		}
		var p5 = this.pfar;
		var a5 = p5.nx;
		var b6 = p5.ny;
		var c5 = p5.nz;
		var dd5 = a5 * (b.xMax + b.xMin) + b6 * (b.yMax + b.yMin) + c5 * (b.zMax + b.zMin);
		if(a5 < 0) {
			a5 = -a5;
		}
		if(b6 < 0) {
			b6 = -b6;
		}
		if(c5 < 0) {
			c5 = -c5;
		}
		var rr5 = a5 * (b.xMax - b.xMin) + b6 * (b.yMax - b.yMin) + c5 * (b.zMax - b.zMin);
		if(dd5 + rr5 - p5.d * 2 < 0) {
			return false;
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.fromPoints = function(p1,p2) {
	var r = new h3d_col_Ray();
	r.px = p1.x;
	r.py = p1.y;
	r.pz = p1.z;
	r.lx = p2.x - p1.x;
	r.ly = p2.y - p1.y;
	r.lz = p2.z - p1.z;
	r.normalize();
	return r;
};
h3d_col_Ray.fromValues = function(x,y,z,dx,dy,dz) {
	var r = new h3d_col_Ray();
	r.px = x;
	r.py = y;
	r.pz = z;
	r.lx = dx;
	r.ly = dy;
	r.lz = dz;
	r.normalize();
	return r;
};
h3d_col_Ray.prototype = {
	clone: function() {
		var r = new h3d_col_Ray();
		r.px = this.px;
		r.py = this.py;
		r.pz = this.pz;
		r.lx = this.lx;
		r.ly = this.ly;
		r.lz = this.lz;
		return r;
	}
	,load: function(r) {
		this.px = r.px;
		this.py = r.py;
		this.pz = r.pz;
		this.lx = r.lx;
		this.ly = r.ly;
		this.lz = r.lz;
	}
	,normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,transform: function(m) {
		var x = this.px;
		var y = this.py;
		var z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var p_w = 1.;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		this.px = p_x;
		this.py = p_y;
		this.pz = p_z;
		var x1 = this.lx;
		var y1 = this.ly;
		var z1 = this.lz;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var l_x = x1;
		var l_y = y1;
		var l_z = z1;
		var l_w = 1.;
		var px1 = l_x * m._11 + l_y * m._21 + l_z * m._31;
		var py1 = l_x * m._12 + l_y * m._22 + l_z * m._32;
		var pz1 = l_x * m._13 + l_y * m._23 + l_z * m._33;
		l_x = px1;
		l_y = py1;
		l_z = pz1;
		this.lx = l_x;
		this.ly = l_y;
		this.lz = l_z;
		this.normalize();
	}
	,getPos: function() {
		return new h3d_col_Point(this.px,this.py,this.pz);
	}
	,getDir: function() {
		return new h3d_col_Point(this.lx,this.ly,this.lz);
	}
	,getPoint: function(distance) {
		return new h3d_col_Point(this.px + distance * this.lx,this.py + distance * this.ly,this.pz + distance * this.lz);
	}
	,toString: function() {
		return "Ray{" + Std.string(new h3d_col_Point(this.px,this.py,this.pz)) + "," + Std.string(new h3d_col_Point(this.lx,this.ly,this.lz)) + "}";
	}
	,intersect: function(p) {
		var d = this.lx * p.nx + this.ly * p.ny + this.lz * p.nz;
		var nd = p.d - (this.px * p.nx + this.py * p.ny + this.pz * p.nz);
		if((d < 0 ? -d : d) < 1e-10) {
			if((nd < 0 ? -nd : nd) < 1e-10) {
				return new h3d_col_Point(this.px,this.py,this.pz);
			} else {
				return null;
			}
		} else {
			var k = nd / d;
			return new h3d_col_Point(this.px + this.lx * k,this.py + this.ly * k,this.pz + this.lz * k);
		}
	}
	,collideFrustum: function(mvp) {
		var x = this.px;
		var y = this.py;
		var z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var a_x = x;
		var a_y = y;
		var a_z = z;
		var a_w = 1.;
		var px = a_x * mvp._11 + a_y * mvp._21 + a_z * mvp._31 + a_w * mvp._41;
		var py = a_x * mvp._12 + a_y * mvp._22 + a_z * mvp._32 + a_w * mvp._42;
		var pz = a_x * mvp._13 + a_y * mvp._23 + a_z * mvp._33 + a_w * mvp._43;
		var iw = 1 / (a_x * mvp._14 + a_y * mvp._24 + a_z * mvp._34 + a_w * mvp._44);
		a_x = px * iw;
		a_y = py * iw;
		a_z = pz * iw;
		a_w = 1;
		var x1 = this.px + this.lx;
		var y1 = this.py + this.ly;
		var z1 = this.pz + this.lz;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var b_x = x1;
		var b_y = y1;
		var b_z = z1;
		var b_w = 1.;
		var px1 = b_x * mvp._11 + b_y * mvp._21 + b_z * mvp._31 + b_w * mvp._41;
		var py1 = b_x * mvp._12 + b_y * mvp._22 + b_z * mvp._32 + b_w * mvp._42;
		var pz1 = b_x * mvp._13 + b_y * mvp._23 + b_z * mvp._33 + b_w * mvp._43;
		var iw1 = 1 / (b_x * mvp._14 + b_y * mvp._24 + b_z * mvp._34 + b_w * mvp._44);
		b_x = px1 * iw1;
		b_y = py1 * iw1;
		b_z = pz1 * iw1;
		b_w = 1;
		var lx = b_x - a_x;
		var ly = b_y - a_y;
		var lz = b_z - a_z;
		var dx = 1 / lx;
		var dy = 1 / ly;
		var dz = 1 / lz;
		var t1 = (-1 - a_x) * dx;
		var t2 = (1 - a_x) * dx;
		var t3 = (-1 - a_y) * dy;
		var t4 = (1 - a_y) * dy;
		var t5 = (0 - a_z) * dz;
		var t6 = (1 - a_z) * dz;
		var a = t1 > t2 ? t2 : t1;
		var b = t3 > t4 ? t4 : t3;
		var a1 = a < b ? b : a;
		var b1 = t5 > t6 ? t6 : t5;
		var tmin = a1 < b1 ? b1 : a1;
		var a2 = t1 < t2 ? t2 : t1;
		var b2 = t3 < t4 ? t4 : t3;
		var a3 = a2 > b2 ? b2 : a2;
		var b3 = t5 < t6 ? t6 : t5;
		var tmax = a3 > b3 ? b3 : a3;
		return !(tmax < 0 || tmin > tmax);
	}
	,collide: function(b) {
		var dx = 1 / this.lx;
		var dy = 1 / this.ly;
		var dz = 1 / this.lz;
		var t1 = (b.xMin - this.px) * dx;
		var t2 = (b.xMax - this.px) * dx;
		var t3 = (b.yMin - this.py) * dy;
		var t4 = (b.yMax - this.py) * dy;
		var t5 = (b.zMin - this.pz) * dz;
		var t6 = (b.zMax - this.pz) * dz;
		var a = t1 > t2 ? t2 : t1;
		var b1 = t3 > t4 ? t4 : t3;
		var a1 = a < b1 ? b1 : a;
		var b2 = t5 > t6 ? t6 : t5;
		var tmin = a1 < b2 ? b2 : a1;
		var a2 = t1 < t2 ? t2 : t1;
		var b3 = t3 < t4 ? t4 : t3;
		var a3 = a2 > b3 ? b3 : a2;
		var b4 = t5 < t6 ? t6 : t5;
		var tmax = a3 > b4 ? b4 : a3;
		if(tmax < 0) {
			return false;
		} else if(tmin > tmax) {
			return false;
		} else {
			return true;
		}
	}
	,__class__: h3d_col_Ray
};
var h3d_col_ObjectCollider = function(obj,collider) {
	this.obj = obj;
	this.collider = collider;
};
$hxClasses["h3d.col.ObjectCollider"] = h3d_col_ObjectCollider;
h3d_col_ObjectCollider.__name__ = "h3d.col.ObjectCollider";
h3d_col_ObjectCollider.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport,h3d_col_Collider];
h3d_col_ObjectCollider.prototype = {
	rayIntersection: function(r,bestMatch) {
		var tmpRay = h3d_col_ObjectCollider.TMP_RAY;
		h3d_col_ObjectCollider.TMP_RAY = null;
		tmpRay.px = r.px;
		tmpRay.py = r.py;
		tmpRay.pz = r.pz;
		tmpRay.lx = r.lx;
		tmpRay.ly = r.ly;
		tmpRay.lz = r.lz;
		var m = this.obj.getInvPos();
		var x = r.px;
		var y = r.py;
		var z = r.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var p_w = 1.;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		r.px = p_x;
		r.py = p_y;
		r.pz = p_z;
		var x1 = r.lx;
		var y1 = r.ly;
		var z1 = r.lz;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var l_x = x1;
		var l_y = y1;
		var l_z = z1;
		var l_w = 1.;
		var px1 = l_x * m._11 + l_y * m._21 + l_z * m._31;
		var py1 = l_x * m._12 + l_y * m._22 + l_z * m._32;
		var pz1 = l_x * m._13 + l_y * m._23 + l_z * m._33;
		l_x = px1;
		l_y = py1;
		l_z = pz1;
		r.lx = l_x;
		r.ly = l_y;
		r.lz = l_z;
		r.normalize();
		var hit = this.collider.rayIntersection(r,bestMatch);
		if(hit < 0) {
			r.px = tmpRay.px;
			r.py = tmpRay.py;
			r.pz = tmpRay.pz;
			r.lx = tmpRay.lx;
			r.ly = tmpRay.ly;
			r.lz = tmpRay.lz;
			h3d_col_ObjectCollider.TMP_RAY = tmpRay;
			return hit;
		}
		var x2 = r.px + hit * r.lx;
		var y2 = r.py + hit * r.ly;
		var z2 = r.pz + hit * r.lz;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var pt_x = x2;
		var pt_y = y2;
		var pt_z = z2;
		var m1 = this.obj.absPos;
		var px2 = pt_x * m1._11 + pt_y * m1._21 + pt_z * m1._31 + m1._41;
		var py2 = pt_x * m1._12 + pt_y * m1._22 + pt_z * m1._32 + m1._42;
		var pz2 = pt_x * m1._13 + pt_y * m1._23 + pt_z * m1._33 + m1._43;
		pt_x = px2;
		pt_y = py2;
		pt_z = pz2;
		r.px = tmpRay.px;
		r.py = tmpRay.py;
		r.pz = tmpRay.pz;
		r.lx = tmpRay.lx;
		r.ly = tmpRay.ly;
		r.lz = tmpRay.lz;
		h3d_col_ObjectCollider.TMP_RAY = tmpRay;
		var dx = pt_x - r.px;
		var dy = pt_y - r.py;
		var dz = pt_z - r.pz;
		if(dz == null) {
			dz = 0.;
		}
		var dz1 = dz;
		if(dz1 == null) {
			dz1 = 0.;
		}
		return Math.sqrt(dx * dx + dy * dy + dz1 * dz1);
	}
	,contains: function(p) {
		var x = p.x;
		var y = p.y;
		var z = p.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ptmp_x = x;
		var ptmp_y = y;
		var ptmp_z = z;
		var m = this.obj.getInvPos();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + m._43;
		p.x = px;
		p.y = py;
		p.z = pz;
		var b = this.collider.contains(p);
		p.x = ptmp_x;
		p.y = ptmp_y;
		p.z = ptmp_z;
		return b;
	}
	,inFrustum: function(f,m) {
		if(m == null) {
			return this.collider.inFrustum(f,this.obj.getAbsPos());
		}
		var mat = h3d_col_ObjectCollider.TMP_MAT;
		var b = this.obj.getAbsPos();
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var a31 = m._31;
		var a32 = m._32;
		var a33 = m._33;
		var a41 = m._41;
		var a42 = m._42;
		var a43 = m._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		mat._11 = m11 * b11 + m12 * b21 + m13 * b31;
		mat._12 = m11 * b12 + m12 * b22 + m13 * b32;
		mat._13 = m11 * b13 + m12 * b23 + m13 * b33;
		mat._14 = 0;
		mat._21 = m21 * b11 + m22 * b21 + m23 * b31;
		mat._22 = m21 * b12 + m22 * b22 + m23 * b32;
		mat._23 = m21 * b13 + m22 * b23 + m23 * b33;
		mat._24 = 0;
		mat._31 = a31 * b11 + a32 * b21 + a33 * b31;
		mat._32 = a31 * b12 + a32 * b22 + a33 * b32;
		mat._33 = a31 * b13 + a32 * b23 + a33 * b33;
		mat._34 = 0;
		mat._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		mat._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		mat._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		mat._44 = 1;
		return this.collider.inFrustum(f,mat);
	}
	,inSphere: function(s) {
		var invMat = this.obj.getInvPos();
		var oldX = s.x;
		var oldY = s.y;
		var oldZ = s.z;
		var oldR = s.r;
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var center_x = x;
		var center_y = y;
		var center_z = z;
		var px = center_x * invMat._11 + center_y * invMat._21 + center_z * invMat._31 + invMat._41;
		var py = center_x * invMat._12 + center_y * invMat._22 + center_z * invMat._32 + invMat._42;
		var pz = center_x * invMat._13 + center_y * invMat._23 + center_z * invMat._33 + invMat._43;
		center_x = px;
		center_y = py;
		center_z = pz;
		var v = null;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(invMat._11 * invMat._11 + invMat._12 * invMat._12 + invMat._13 * invMat._13);
		v.y = Math.sqrt(invMat._21 * invMat._21 + invMat._22 * invMat._22 + invMat._23 * invMat._23);
		v.z = Math.sqrt(invMat._31 * invMat._31 + invMat._32 * invMat._32 + invMat._33 * invMat._33);
		if(invMat._11 * (invMat._22 * invMat._33 - invMat._23 * invMat._32) + invMat._12 * (invMat._23 * invMat._31 - invMat._21 * invMat._33) + invMat._13 * (invMat._21 * invMat._32 - invMat._22 * invMat._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var scale = v;
		s.x = center_x;
		s.y = center_y;
		s.z = center_z;
		s.r *= Math.max(Math.max(scale.x,scale.y),scale.z);
		var res = this.collider.inSphere(s);
		s.x = oldX;
		s.y = oldY;
		s.z = oldZ;
		s.r = oldR;
		return res;
	}
	,__class__: h3d_col_ObjectCollider
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.fromPoints = function(p0,p1,p2) {
	var x = p1.x - p0.x;
	var y = p1.y - p0.y;
	var z = p1.z - p0.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var d1_x = x;
	var d1_y = y;
	var d1_z = z;
	var x1 = p2.x - p0.x;
	var y1 = p2.y - p0.y;
	var z1 = p2.z - p0.z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var d2_x = x1;
	var d2_y = y1;
	var d2_z = z1;
	var x2 = d1_y * d2_z - d1_z * d2_y;
	var y2 = d1_z * d2_x - d1_x * d2_z;
	var z2 = d1_x * d2_y - d1_y * d2_x;
	if(z2 == null) {
		z2 = 0.;
	}
	if(y2 == null) {
		y2 = 0.;
	}
	if(x2 == null) {
		x2 = 0.;
	}
	var n_x = x2;
	var n_y = y2;
	var n_z = z2;
	return new h3d_col_Plane(n_x,n_y,n_z,n_x * p0.x + n_y * p0.y + n_z * p0.z);
};
h3d_col_Plane.fromNormalPoint = function(n,p) {
	return new h3d_col_Plane(n.x,n.y,n.z,n.x * p.x + n.y * p.y + n.z * p.z);
};
h3d_col_Plane.X = function(v) {
	if(v == null) {
		v = 0.0;
	}
	return new h3d_col_Plane(1,0,0,v);
};
h3d_col_Plane.Y = function(v) {
	if(v == null) {
		v = 0.0;
	}
	return new h3d_col_Plane(0,1,0,v);
};
h3d_col_Plane.Z = function(v) {
	if(v == null) {
		v = 0.0;
	}
	return new h3d_col_Plane(0,0,1,v);
};
h3d_col_Plane.frustumLeft = function(mvp) {
	return new h3d_col_Plane(mvp._14 + mvp._11,mvp._24 + mvp._21,mvp._34 + mvp._31,-(mvp._44 + mvp._41));
};
h3d_col_Plane.frustumRight = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._11,mvp._24 - mvp._21,mvp._34 - mvp._31,mvp._41 - mvp._44);
};
h3d_col_Plane.frustumBottom = function(mvp) {
	return new h3d_col_Plane(mvp._14 + mvp._12,mvp._24 + mvp._22,mvp._34 + mvp._32,-(mvp._44 + mvp._42));
};
h3d_col_Plane.frustumTop = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._12,mvp._24 - mvp._22,mvp._34 - mvp._32,mvp._42 - mvp._44);
};
h3d_col_Plane.frustumNear = function(mvp) {
	return new h3d_col_Plane(mvp._13,mvp._23,mvp._33,-mvp._43);
};
h3d_col_Plane.frustumFar = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._13,mvp._24 - mvp._23,mvp._34 - mvp._33,mvp._43 - mvp._44);
};
h3d_col_Plane.prototype = {
	getNormal: function() {
		return new h3d_col_Point(this.nx,this.ny,this.nz);
	}
	,getNormalDistance: function() {
		return this.d;
	}
	,load: function(p) {
		this.nx = p.nx;
		this.ny = p.ny;
		this.nz = p.nz;
		this.d = p.d;
	}
	,transform: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse(m);
		m2.transpose();
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		var w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,transform3x3: function(m) {
		var m2 = new h3d_Matrix();
		m2.initInverse3x3(m);
		m2.transpose();
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		var w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,transformInverseTranspose: function(m) {
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		var w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var v_w = w;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + v_w * m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + v_w * m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + v_w * m._43;
		var pw = v_x * m._14 + v_y * m._24 + v_z * m._34 + v_w * m._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,normalize: function() {
		var len = 1. / Math.sqrt(this.nx * this.nx + this.ny * this.ny + this.nz * this.nz);
		this.nx *= len;
		this.ny *= len;
		this.nz *= len;
		this.d *= len;
	}
	,toString: function() {
		return "Plane{" + Std.string(new h3d_col_Point(this.nx,this.ny,this.nz)) + "," + hxd_Math.fmt(this.d) + "}";
	}
	,distance: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
	}
	,side: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	,project: function(p) {
		var d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		return new h3d_col_Point(p.x - d * this.nx,p.y - d * this.ny,p.z - d * this.nz);
	}
	,projectTo: function(p,out) {
		var d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		out.x = p.x - d * this.nx;
		out.y = p.y - d * this.ny;
		out.z = p.z - d * this.nz;
	}
	,__class__: h3d_col_Plane
};
var h3d_col_Point = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.col.Point"] = h3d_col_Point;
h3d_col_Point.__name__ = "h3d.col.Point";
h3d_col_Point.prototype = {
	scale: function(v) {
		this.x *= v;
		this.y *= v;
		this.z *= v;
	}
	,inFrustum: function(f,m) {
		return f.hasPoint(this);
	}
	,set: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,multiply: function(f) {
		return new h3d_col_Point(this.x * f,this.y * f,this.z * f);
	}
	,sub: function(p) {
		return new h3d_col_Point(this.x - p.x,this.y - p.y,this.z - p.z);
	}
	,add: function(p) {
		return new h3d_col_Point(this.x + p.x,this.y + p.y,this.z + p.z);
	}
	,cross: function(p) {
		return new h3d_col_Point(this.y * p.z - this.z * p.y,this.z * p.x - this.x * p.z,this.x * p.y - this.y * p.x);
	}
	,equals: function(other) {
		if(this.x == other.x && this.y == other.y) {
			return this.z == other.z;
		} else {
			return false;
		}
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,setLength: function(len) {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		k = 1. / Math.sqrt(k);
		this.x *= k;
		this.y *= k;
		this.z *= k;
		this.x *= len;
		this.y *= len;
		this.z *= len;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y + this.z * p.z;
	}
	,distanceSq: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz;
	}
	,distance: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return Math.sqrt(dx * dx + dy * dy + dz * dz);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
		return this;
	}
	,normalizeFast: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		k = 1. / Math.sqrt(k);
		this.x *= k;
		this.y *= k;
		this.z *= k;
		return this;
	}
	,lerp: function(p1,p2,k) {
		var a = p1.x;
		var x = a + k * (p2.x - a);
		var a1 = p1.y;
		var y = a1 + k * (p2.y - a1);
		var a2 = p1.z;
		var z = a2 + k * (p2.z - a2);
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,transform: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transform3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,toVector: function() {
		return new h3d_Vector(this.x,this.y,this.z);
	}
	,clone: function() {
		return new h3d_col_Point(this.x,this.y,this.z);
	}
	,load: function(p) {
		this.x = p.x;
		this.y = p.y;
		this.z = p.z;
	}
	,toString: function() {
		return "Point{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "}";
	}
	,__class__: h3d_col_Point
};
var h3d_col_TriPlane = function() {
	this.next = null;
};
$hxClasses["h3d.col.TriPlane"] = h3d_col_TriPlane;
h3d_col_TriPlane.__name__ = "h3d.col.TriPlane";
h3d_col_TriPlane.__interfaces__ = [h3d_col_Collider];
h3d_col_TriPlane.prototype = {
	init: function(p0,p1,p2) {
		this.p0x = p0.x;
		this.p0y = p0.y;
		this.p0z = p0.z;
		var x = p1.x - p0.x;
		var y = p1.y - p0.y;
		var z = p1.z - p0.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var d1_x = x;
		var d1_y = y;
		var d1_z = z;
		var x1 = p2.x - p0.x;
		var y1 = p2.y - p0.y;
		var z1 = p2.z - p0.z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var d2_x = x1;
		var d2_y = y1;
		var d2_z = z1;
		var x2 = d1_y * d2_z - d1_z * d2_y;
		var y2 = d1_z * d2_x - d1_x * d2_z;
		var z2 = d1_x * d2_y - d1_y * d2_x;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var n_x = x2;
		var n_y = y2;
		var n_z = z2;
		this.d = n_x * p0.x + n_y * p0.y + n_z * p0.z;
		this.nx = n_x;
		this.ny = n_y;
		this.nz = n_z;
		this.d1x = d1_x;
		this.d1y = d1_y;
		this.d1z = d1_z;
		this.d2x = d2_x;
		this.d2y = d2_y;
		this.d2z = d2_z;
		this.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
		this.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
		this.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
		this.invDenom = 1 / (this.dot00 * this.dot11 - this.dot01 * this.dot01);
	}
	,clone: function() {
		var clone = new h3d_col_TriPlane();
		clone.p0x = this.p0x;
		clone.p0y = this.p0y;
		clone.p0z = this.p0z;
		clone.d1x = this.d1x;
		clone.d1y = this.d1y;
		clone.d1z = this.d1z;
		clone.d2x = this.d2x;
		clone.d2y = this.d2y;
		clone.d2z = this.d2z;
		clone.dot00 = this.dot00;
		clone.dot01 = this.dot01;
		clone.dot11 = this.dot11;
		clone.invDenom = this.invDenom;
		clone.nx = this.nx;
		clone.ny = this.ny;
		clone.nz = this.nz;
		clone.d = this.d;
		if(this.next != null) {
			clone.next = this.next.clone();
		}
		return clone;
	}
	,load: function(tp) {
		this.p0x = tp.p0x;
		this.p0y = tp.p0y;
		this.p0z = tp.p0z;
		this.d1x = tp.d1x;
		this.d1y = tp.d1y;
		this.d1z = tp.d1z;
		this.d2x = tp.d2x;
		this.d2y = tp.d2y;
		this.d2z = tp.d2z;
		this.dot00 = tp.dot00;
		this.dot01 = tp.dot01;
		this.dot11 = tp.dot11;
		this.invDenom = tp.invDenom;
		this.nx = tp.nx;
		this.ny = tp.ny;
		this.nz = tp.nz;
		this.d = tp.d;
	}
	,transform: function(m) {
		var x = this.p0x;
		var y = this.p0y;
		var z = this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p0_x = x;
		var p0_y = y;
		var p0_z = z;
		var x1 = this.d1x + this.p0x;
		var y1 = this.d1y + this.p0y;
		var z1 = this.d1z + this.p0z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p1_x = x1;
		var p1_y = y1;
		var p1_z = z1;
		var x2 = this.d2x + this.p0x;
		var y2 = this.d2y + this.p0y;
		var z2 = this.d2z + this.p0z;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var p2_x = x2;
		var p2_y = y2;
		var p2_z = z2;
		var px = p0_x * m._11 + p0_y * m._21 + p0_z * m._31 + m._41;
		var py = p0_x * m._12 + p0_y * m._22 + p0_z * m._32 + m._42;
		var pz = p0_x * m._13 + p0_y * m._23 + p0_z * m._33 + m._43;
		p0_x = px;
		p0_y = py;
		p0_z = pz;
		var px1 = p1_x * m._11 + p1_y * m._21 + p1_z * m._31 + m._41;
		var py1 = p1_x * m._12 + p1_y * m._22 + p1_z * m._32 + m._42;
		var pz1 = p1_x * m._13 + p1_y * m._23 + p1_z * m._33 + m._43;
		p1_x = px1;
		p1_y = py1;
		p1_z = pz1;
		var px2 = p2_x * m._11 + p2_y * m._21 + p2_z * m._31 + m._41;
		var py2 = p2_x * m._12 + p2_y * m._22 + p2_z * m._32 + m._42;
		var pz2 = p2_x * m._13 + p2_y * m._23 + p2_z * m._33 + m._43;
		p2_x = px2;
		p2_y = py2;
		p2_z = pz2;
		this.p0x = p0_x;
		this.p0y = p0_y;
		this.p0z = p0_z;
		var x3 = p1_x - p0_x;
		var y3 = p1_y - p0_y;
		var z3 = p1_z - p0_z;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		var d1_x = x3;
		var d1_y = y3;
		var d1_z = z3;
		var x4 = p2_x - p0_x;
		var y4 = p2_y - p0_y;
		var z4 = p2_z - p0_z;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		var d2_x = x4;
		var d2_y = y4;
		var d2_z = z4;
		var x5 = d1_y * d2_z - d1_z * d2_y;
		var y5 = d1_z * d2_x - d1_x * d2_z;
		var z5 = d1_x * d2_y - d1_y * d2_x;
		if(z5 == null) {
			z5 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		var n_x = x5;
		var n_y = y5;
		var n_z = z5;
		this.d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
		this.nx = n_x;
		this.ny = n_y;
		this.nz = n_z;
		this.d1x = d1_x;
		this.d1y = d1_y;
		this.d1z = d1_z;
		this.d2x = d2_x;
		this.d2y = d2_y;
		this.d2z = d2_z;
		this.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
		this.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
		this.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
		this.invDenom = 1 / (this.dot00 * this.dot11 - this.dot01 * this.dot01);
	}
	,contains: function(p) {
		var x = p.x - this.p0x;
		var y = p.y - this.p0y;
		var z = p.z - this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v2_x = x;
		var v2_y = y;
		var v2_z = z;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	,side: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	,inFrustum: function(f,m) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,inSphere: function(s) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		var dr = r.lx * this.nx + r.ly * this.ny + r.lz * this.nz;
		if(dr >= 0) {
			return -1.;
		}
		var nd = this.d - (r.px * this.nx + r.py * this.ny + r.pz * this.nz);
		var k = nd / dr;
		if(k < 0) {
			return -1;
		}
		var px = r.px + r.lx * k;
		var py = r.py + r.ly * k;
		var pz = r.pz + r.lz * k;
		var x = px - this.p0x;
		var y = py - this.p0y;
		var z = pz - this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v2_x = x;
		var v2_y = y;
		var v2_z = z;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(!(u >= 0 && v >= 0 && u + v < 1)) {
			return -1;
		}
		return k;
	}
	,isPointInTriangle: function(x,y,z) {
		var x1 = x - this.p0x;
		var y1 = y - this.p0y;
		var z1 = z - this.p0z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v2_x = x1;
		var v2_y = y1;
		var v2_z = z1;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	,getPoints: function() {
		return [new h3d_col_Point(this.p0x,this.p0y,this.p0z),new h3d_col_Point(this.d1x + this.p0x,this.d1y + this.p0y,this.d1z + this.p0z),new h3d_col_Point(this.d2x + this.p0x,this.d2y + this.p0y,this.d2z + this.p0z)];
	}
	,__class__: h3d_col_TriPlane
};
var h3d_col_Polygon = function() {
};
$hxClasses["h3d.col.Polygon"] = h3d_col_Polygon;
h3d_col_Polygon.__name__ = "h3d.col.Polygon";
h3d_col_Polygon.__interfaces__ = [h3d_col_Collider];
h3d_col_Polygon.prototype = {
	addBuffers: function(vertexes,indexes,stride) {
		if(stride == null) {
			stride = 3;
		}
		var _g = 0;
		var _g1 = indexes.length / 3 | 0;
		while(_g < _g1) {
			var i = _g++;
			var k = i * 3;
			var t = new h3d_col_TriPlane();
			var i0 = indexes[k] * stride;
			var i1 = indexes[k + 1] * stride;
			var i2 = indexes[k + 2] * stride;
			var x = vertexes[i0];
			var y = vertexes[i0 + 1];
			var z = vertexes[i0 + 2];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p0_x = x;
			var p0_y = y;
			var p0_z = z;
			var x1 = vertexes[i1];
			var y1 = vertexes[i1 + 1];
			var z1 = vertexes[i1 + 2];
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p1_x = x1;
			var p1_y = y1;
			var p1_z = z1;
			var x2 = vertexes[i2];
			var y2 = vertexes[i2 + 1];
			var z2 = vertexes[i2 + 2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p2_x = x2;
			var p2_y = y2;
			var p2_z = z2;
			t.p0x = p0_x;
			t.p0y = p0_y;
			t.p0z = p0_z;
			var x3 = p1_x - p0_x;
			var y3 = p1_y - p0_y;
			var z3 = p1_z - p0_z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var d1_x = x3;
			var d1_y = y3;
			var d1_z = z3;
			var x4 = p2_x - p0_x;
			var y4 = p2_y - p0_y;
			var z4 = p2_z - p0_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var d2_x = x4;
			var d2_y = y4;
			var d2_z = z4;
			var x5 = d1_y * d2_z - d1_z * d2_y;
			var y5 = d1_z * d2_x - d1_x * d2_z;
			var z5 = d1_x * d2_y - d1_y * d2_x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var n_x = x5;
			var n_y = y5;
			var n_z = z5;
			t.d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			t.nx = n_x;
			t.ny = n_y;
			t.nz = n_z;
			t.d1x = d1_x;
			t.d1y = d1_y;
			t.d1z = d1_z;
			t.d2x = d2_x;
			t.d2y = d2_y;
			t.d2z = d2_z;
			t.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
			t.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
			t.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
			t.invDenom = 1 / (t.dot00 * t.dot11 - t.dot01 * t.dot01);
			t.next = this.triPlanes;
			this.triPlanes = t;
		}
	}
	,isConvex: function() {
		return true;
	}
	,clone: function() {
		var clone = new h3d_col_Polygon();
		clone.triPlanes = new h3d_col_TriPlane();
		var _this = this.triPlanes;
		var clone1 = new h3d_col_TriPlane();
		clone1.p0x = _this.p0x;
		clone1.p0y = _this.p0y;
		clone1.p0z = _this.p0z;
		clone1.d1x = _this.d1x;
		clone1.d1y = _this.d1y;
		clone1.d1z = _this.d1z;
		clone1.d2x = _this.d2x;
		clone1.d2y = _this.d2y;
		clone1.d2z = _this.d2z;
		clone1.dot00 = _this.dot00;
		clone1.dot01 = _this.dot01;
		clone1.dot11 = _this.dot11;
		clone1.invDenom = _this.invDenom;
		clone1.nx = _this.nx;
		clone1.ny = _this.ny;
		clone1.nz = _this.nz;
		clone1.d = _this.d;
		if(_this.next != null) {
			var _this1 = _this.next;
			var clone2 = new h3d_col_TriPlane();
			clone2.p0x = _this1.p0x;
			clone2.p0y = _this1.p0y;
			clone2.p0z = _this1.p0z;
			clone2.d1x = _this1.d1x;
			clone2.d1y = _this1.d1y;
			clone2.d1z = _this1.d1z;
			clone2.d2x = _this1.d2x;
			clone2.d2y = _this1.d2y;
			clone2.d2z = _this1.d2z;
			clone2.dot00 = _this1.dot00;
			clone2.dot01 = _this1.dot01;
			clone2.dot11 = _this1.dot11;
			clone2.invDenom = _this1.invDenom;
			clone2.nx = _this1.nx;
			clone2.ny = _this1.ny;
			clone2.nz = _this1.nz;
			clone2.d = _this1.d;
			if(_this1.next != null) {
				clone2.next = _this1.next.clone();
			}
			clone1.next = clone2;
		}
		clone.triPlanes = clone1;
		return clone;
	}
	,transform: function(m) {
		var t = this.triPlanes;
		while(t != null) {
			t.transform(m);
			t = t.next;
		}
	}
	,getPoints: function() {
		var ret = [];
		var t = this.triPlanes;
		while(t != null) {
			ret = ret.concat(t.getPoints());
			t = t.next;
		}
		return ret;
	}
	,getBounds: function(bnds) {
		if(bnds == null) {
			bnds = new h3d_col_Bounds();
		}
		bnds.xMin = 1e20;
		bnds.xMax = -1e20;
		bnds.yMin = 1e20;
		bnds.yMax = -1e20;
		bnds.zMin = 1e20;
		bnds.zMax = -1e20;
		var t = this.triPlanes;
		while(t != null) {
			var x = t.p0x;
			var y = t.p0y;
			var z = t.p0z;
			if(x < bnds.xMin) {
				bnds.xMin = x;
			}
			if(x > bnds.xMax) {
				bnds.xMax = x;
			}
			if(y < bnds.yMin) {
				bnds.yMin = y;
			}
			if(y > bnds.yMax) {
				bnds.yMax = y;
			}
			if(z < bnds.zMin) {
				bnds.zMin = z;
			}
			if(z > bnds.zMax) {
				bnds.zMax = z;
			}
			var x1 = t.d1x + t.p0x;
			var y1 = t.d1y + t.p0y;
			var z1 = t.d1z + t.p0z;
			if(x1 < bnds.xMin) {
				bnds.xMin = x1;
			}
			if(x1 > bnds.xMax) {
				bnds.xMax = x1;
			}
			if(y1 < bnds.yMin) {
				bnds.yMin = y1;
			}
			if(y1 > bnds.yMax) {
				bnds.yMax = y1;
			}
			if(z1 < bnds.zMin) {
				bnds.zMin = z1;
			}
			if(z1 > bnds.zMax) {
				bnds.zMax = z1;
			}
			var x2 = t.d2x + t.p0x;
			var y2 = t.d2y + t.p0y;
			var z2 = t.d2z + t.p0z;
			if(x2 < bnds.xMin) {
				bnds.xMin = x2;
			}
			if(x2 > bnds.xMax) {
				bnds.xMax = x2;
			}
			if(y2 < bnds.yMin) {
				bnds.yMin = y2;
			}
			if(y2 > bnds.yMax) {
				bnds.yMax = y2;
			}
			if(z2 < bnds.zMin) {
				bnds.zMin = z2;
			}
			if(z2 > bnds.zMax) {
				bnds.zMax = z2;
			}
			t = t.next;
		}
		return bnds;
	}
	,contains: function(p) {
		if(!this.isConvex()) {
			throw new js__$Boot_HaxeError("Not implemented for concave polygon");
		}
		var t = this.triPlanes;
		while(t != null) {
			if(t.nx * p.x + t.ny * p.y + t.nz * p.z - t.d >= 0) {
				return false;
			}
			t = t.next;
		}
		return true;
	}
	,rayIntersection: function(r,bestMatch) {
		var t = this.triPlanes;
		var best = -1.;
		while(t != null) {
			var dr = r.lx * t.nx + r.ly * t.ny + r.lz * t.nz;
			var d;
			if(dr >= 0) {
				d = -1.;
			} else {
				var nd = t.d - (r.px * t.nx + r.py * t.ny + r.pz * t.nz);
				var k = nd / dr;
				if(k < 0) {
					d = -1;
				} else {
					var px = r.px + r.lx * k;
					var py = r.py + r.ly * k;
					var pz = r.pz + r.lz * k;
					var x = px - t.p0x;
					var y = py - t.p0y;
					var z = pz - t.p0z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var v2_x = x;
					var v2_y = y;
					var v2_z = z;
					var dot02 = t.d1x * v2_x + t.d1y * v2_y + t.d1z * v2_z;
					var dot12 = t.d2x * v2_x + t.d2y * v2_y + t.d2z * v2_z;
					var u = (t.dot11 * dot02 - t.dot01 * dot12) * t.invDenom;
					var v = (t.dot00 * dot12 - t.dot01 * dot02) * t.invDenom;
					d = !(u >= 0 && v >= 0 && u + v < 1) ? -1 : k;
				}
			}
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
			t = t.next;
		}
		return best;
	}
	,inFrustum: function(f,m) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,inSphere: function(s) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,__class__: h3d_col_Polygon
};
var h3d_col_PolygonBuffer = function() {
};
$hxClasses["h3d.col.PolygonBuffer"] = h3d_col_PolygonBuffer;
h3d_col_PolygonBuffer.__name__ = "h3d.col.PolygonBuffer";
h3d_col_PolygonBuffer.__interfaces__ = [h3d_col_Collider];
h3d_col_PolygonBuffer.prototype = {
	setData: function(buffer,indexes,startIndex,triCount) {
		if(triCount == null) {
			triCount = -1;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		this.buffer = buffer;
		this.indexes = indexes;
		this.startIndex = startIndex;
		this.triCount = triCount >= 0 ? triCount : (indexes.length - startIndex) / 3 | 0;
	}
	,contains: function(p) {
		var i = this.startIndex;
		var x = p.x;
		var y = p.y;
		var z = p.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _g = 0;
		var _g1 = this.triCount;
		while(_g < _g1) {
			var t = _g++;
			var i0 = this.indexes[i++] * 3;
			var x1 = this.buffer[i0++];
			var y1 = this.buffer[i0++];
			var z1 = this.buffer[i0];
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p0_x = x1;
			var p0_y = y1;
			var p0_z = z1;
			var i1 = this.indexes[i++] * 3;
			var x2 = this.buffer[i1++];
			var y2 = this.buffer[i1++];
			var z2 = this.buffer[i1];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p1_x = x2;
			var p1_y = y2;
			var p1_z = z2;
			var i2 = this.indexes[i++] * 3;
			var x3 = this.buffer[i2++];
			var y3 = this.buffer[i2++];
			var z3 = this.buffer[i2];
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var p2_x = x3;
			var p2_y = y3;
			var p2_z = z3;
			var x4 = p1_x - p0_x;
			var y4 = p1_y - p0_y;
			var z4 = p1_z - p0_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var d1_x = x4;
			var d1_y = y4;
			var d1_z = z4;
			var x5 = p2_x - p0_x;
			var y5 = p2_y - p0_y;
			var z5 = p2_z - p0_z;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var d2_x = x5;
			var d2_y = y5;
			var d2_z = z5;
			var x6 = d1_y * d2_z - d1_z * d2_y;
			var y6 = d1_z * d2_x - d1_x * d2_z;
			var z6 = d1_x * d2_y - d1_y * d2_x;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var n_x = x6;
			var n_y = y6;
			var n_z = z6;
			var d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			if(n_x * p_x + n_y * p_y + n_z * p_z >= d) {
				return false;
			}
		}
		return true;
	}
	,inFrustum: function(f,m) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,inSphere: function(s) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		var i = this.startIndex;
		var x = r.lx;
		var y = r.ly;
		var z = r.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var rdir_x = x;
		var rdir_y = y;
		var rdir_z = z;
		var x1 = r.px;
		var y1 = r.py;
		var z1 = r.pz;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var r0_x = x1;
		var r0_y = y1;
		var r0_z = z1;
		var best = -1.;
		var _g = 0;
		var _g1 = this.triCount;
		while(_g < _g1) {
			var t = _g++;
			var i0 = this.indexes[i++] * 3;
			var x2 = this.buffer[i0++];
			var y2 = this.buffer[i0++];
			var z2 = this.buffer[i0];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p0_x = x2;
			var p0_y = y2;
			var p0_z = z2;
			var i1 = this.indexes[i++] * 3;
			var x3 = this.buffer[i1++];
			var y3 = this.buffer[i1++];
			var z3 = this.buffer[i1];
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var p1_x = x3;
			var p1_y = y3;
			var p1_z = z3;
			var i2 = this.indexes[i++] * 3;
			var x4 = this.buffer[i2++];
			var y4 = this.buffer[i2++];
			var z4 = this.buffer[i2];
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var p2_x = x4;
			var p2_y = y4;
			var p2_z = z4;
			var x5 = p1_x - p0_x;
			var y5 = p1_y - p0_y;
			var z5 = p1_z - p0_z;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var e1_x = x5;
			var e1_y = y5;
			var e1_z = z5;
			var x6 = p2_x - p0_x;
			var y6 = p2_y - p0_y;
			var z6 = p2_z - p0_z;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var e2_x = x6;
			var e2_y = y6;
			var e2_z = z6;
			var x7 = rdir_y * e2_z - rdir_z * e2_y;
			var y7 = rdir_z * e2_x - rdir_x * e2_z;
			var z7 = rdir_x * e2_y - rdir_y * e2_x;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var p_x = x7;
			var p_y = y7;
			var p_z = z7;
			var det = e1_x * p_x + e1_y * p_y + e1_z * p_z;
			if(det < 1e-10) {
				continue;
			}
			var invDet = 1 / det;
			var x8 = r0_x - p0_x;
			var y8 = r0_y - p0_y;
			var z8 = r0_z - p0_z;
			if(z8 == null) {
				z8 = 0.;
			}
			if(y8 == null) {
				y8 = 0.;
			}
			if(x8 == null) {
				x8 = 0.;
			}
			var T_x = x8;
			var T_y = y8;
			var T_z = z8;
			var u = (T_x * p_x + T_y * p_y + T_z * p_z) * invDet;
			if(u < 0 || u > 1) {
				continue;
			}
			var x9 = T_y * e1_z - T_z * e1_y;
			var y9 = T_z * e1_x - T_x * e1_z;
			var z9 = T_x * e1_y - T_y * e1_x;
			if(z9 == null) {
				z9 = 0.;
			}
			if(y9 == null) {
				y9 = 0.;
			}
			if(x9 == null) {
				x9 = 0.;
			}
			var q_x = x9;
			var q_y = y9;
			var q_z = z9;
			var v = (rdir_x * q_x + rdir_y * q_y + rdir_z * q_z) * invDet;
			if(v < 0 || u + v > 1) {
				continue;
			}
			var t1 = (e2_x * q_x + e2_y * q_y + e2_z * q_z) * invDet;
			if(t1 < 1e-10) {
				continue;
			}
			if(!bestMatch) {
				return t1;
			}
			if(best < 0 || t1 < best) {
				best = t1;
			}
		}
		return best;
	}
	,__class__: h3d_col_PolygonBuffer
};
var h3d_col_SkinCollider = function(obj,col) {
	this.obj = obj;
	this.col = col;
	this.transform = new h3d_col_PolygonBuffer();
	var tmp = this.transform;
	var this1 = col.buffer;
	var this2 = new Array(this1.length);
	var r = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1,0,r,0,this1.length);
	tmp.setData(r,col.indexes,col.startIndex,col.triCount);
};
$hxClasses["h3d.col.SkinCollider"] = h3d_col_SkinCollider;
h3d_col_SkinCollider.__name__ = "h3d.col.SkinCollider";
h3d_col_SkinCollider.__interfaces__ = [h3d_col_Collider,hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_SkinCollider.prototype = {
	contains: function(p) {
		this.applyTransform();
		return this.transform.contains(p);
	}
	,inFrustum: function(p,m) {
		if(m != null) {
			throw new js__$Boot_HaxeError("Not implemented");
		}
		this.applyTransform();
		return this.transform.inFrustum(p);
	}
	,inSphere: function(s) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		this.applyTransform();
		return this.transform.rayIntersection(r,bestMatch);
	}
	,applyTransform: function() {
		if(!this.obj.jointsUpdated && this.lastFrame == this.obj.lastFrame) {
			return;
		}
		this.lastFrame = this.obj.lastFrame;
		this.obj.syncJoints();
		var j = 0;
		var v = 0;
		var nbones = this.obj.skinData.bonesPerVertex;
		var _g = 0;
		var _g1 = this.obj.skinData.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var px = 0.;
			var py = 0.;
			var pz = 0.;
			var x = this.col.buffer[v];
			var y = this.col.buffer[v + 1];
			var z = this.col.buffer[v + 2];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var _g2 = 0;
			var _g11 = nbones;
			while(_g2 < _g11) {
				var k = _g2++;
				var w = this.obj.skinData.vertexWeights[j];
				if(w == 0) {
					++j;
					continue;
				}
				var bid = this.obj.skinData.vertexJoints[j++];
				var x1 = p_x;
				var y1 = p_y;
				var z1 = p_z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p2_x = x1;
				var p2_y = y1;
				var p2_z = z1;
				var m = this.obj.currentPalette[bid];
				var px1 = p2_x * m._11 + p2_y * m._21 + p2_z * m._31 + m._41;
				var py1 = p2_x * m._12 + p2_y * m._22 + p2_z * m._32 + m._42;
				var pz1 = p2_x * m._13 + p2_y * m._23 + p2_z * m._33 + m._43;
				p2_x = px1;
				p2_y = py1;
				p2_z = pz1;
				px += p2_x * w;
				py += p2_y * w;
				pz += p2_z * w;
			}
			this.transform.buffer[v++] = px;
			this.transform.buffer[v++] = py;
			this.transform.buffer[v++] = pz;
		}
	}
	,__class__: h3d_col_SkinCollider
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__interfaces__ = [h3d_col_Collider];
h3d_col_Sphere.prototype = {
	load: function(sx,sy,sz,sr) {
		if(sr == null) {
			sr = 0.;
		}
		if(sz == null) {
			sz = 0.;
		}
		if(sy == null) {
			sy = 0.;
		}
		if(sx == null) {
			sx = 0.;
		}
		this.x = sx;
		this.y = sy;
		this.z = sz;
		this.r = sr;
	}
	,getCenter: function() {
		return new h3d_col_Point(this.x,this.y,this.z);
	}
	,contains: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz < this.r * this.r;
	}
	,rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,inFrustum: function(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	,inFrustumMatrix: function(f,m) {
		var oldX = this.x;
		var oldY = this.y;
		var oldZ = this.z;
		var oldR = this.r;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		var v = null;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(m._11 * m._11 + m._12 * m._12 + m._13 * m._13);
		v.y = Math.sqrt(m._21 * m._21 + m._22 * m._22 + m._23 * m._23);
		v.z = Math.sqrt(m._31 * m._31 + m._32 * m._32 + m._33 * m._33);
		if(m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var scale = v;
		this.r *= Math.max(Math.max(scale.x,scale.y),scale.z);
		var res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	,inSphere: function(s) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var x1 = s.x;
		var y1 = s.y;
		var z1 = s.z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var dx = p_x - _this_x;
		var dy = p_y - _this_y;
		var dz = p_z - _this_z;
		return dx * dx + dy * dy + dz * dz < (s.r + this.r) * (s.r + this.r);
	}
	,toString: function() {
		return "Sphere{" + Std.string(new h3d_col_Point(this.x,this.y,this.z)) + "," + hxd_Math.fmt(this.r) + "}";
	}
	,__class__: h3d_col_Sphere
};
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__ : true, __constructs__ : ["StandardDerivatives","FloatTextures","AllocDepthBuffer","HardwareAccelerated","MultipleRenderTargets","Queries","SRGBTextures","ShaderModel3","BottomLeftCoords","Wireframe","InstancedRendering"]
	,StandardDerivatives: {_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
var h3d_impl_QueryKind = $hxEnums["h3d.impl.QueryKind"] = { __ename__ : true, __constructs__ : ["TimeStamp","Samples"]
	,TimeStamp: {_hx_index:0,__enum__:"h3d.impl.QueryKind",toString:$estr}
	,Samples: {_hx_index:1,__enum__:"h3d.impl.QueryKind",toString:$estr}
};
h3d_impl_QueryKind.__empty_constructs__ = [h3d_impl_QueryKind.TimeStamp,h3d_impl_QueryKind.Samples];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__ : true, __constructs__ : ["CameraHandness"]
	,CameraHandness: {_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var h3d_impl_InputNames = function(names) {
	this.id = h3d_impl_InputNames.UID++;
	this.names = names;
};
$hxClasses["h3d.impl.InputNames"] = h3d_impl_InputNames;
h3d_impl_InputNames.__name__ = "h3d.impl.InputNames";
h3d_impl_InputNames.get = function(names) {
	var key = names.join("|");
	var _this = h3d_impl_InputNames.CACHE;
	var i = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(i == null) {
		i = new h3d_impl_InputNames(names.slice());
		var _this1 = h3d_impl_InputNames.CACHE;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,i);
		} else {
			_this1.h[key] = i;
		}
	}
	return i;
};
h3d_impl_InputNames.prototype = {
	__class__: h3d_impl_InputNames
};
var h3d_impl_Driver = function() { };
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,dispose: function() {
	}
	,begin: function(frame) {
	}
	,log: function(str) {
		if(this.logEnable) {
			this.logImpl(str);
		}
	}
	,generateMipMaps: function(texture) {
		throw new js__$Boot_HaxeError("Mipmaps auto generation is not supported on this platform");
	}
	,getNativeShaderCode: function(shader) {
		return null;
	}
	,logImpl: function(str) {
	}
	,clear: function(color,depth,stencil) {
	}
	,captureRenderBuffer: function(pixels) {
	}
	,capturePixels: function(tex,layer,mipLevel,region) {
		throw new js__$Boot_HaxeError("Can't capture pixels on this platform");
	}
	,getDriverName: function(details) {
		return "Not available";
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,getShaderInputNames: function() {
		return null;
	}
	,selectBuffer: function(buffer) {
	}
	,selectMultiBuffers: function(buffers) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,drawInstanced: function(ibuf,commands) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,setRenderTargets: function(textures) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,present: function() {
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocIndexes: function(count,is32) {
		return null;
	}
	,allocVertexes: function(m) {
		return null;
	}
	,allocInstanceBuffer: function(b,bytes) {
	}
	,disposeTexture: function(t) {
	}
	,disposeIndexes: function(i) {
	}
	,disposeVertexes: function(v) {
	}
	,disposeInstanceBuffer: function(b) {
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadIndexBytes: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadVertexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,readVertexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
		throw new js__$Boot_HaxeError("Driver does not allow to read vertex bytes");
	}
	,readIndexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
		throw new js__$Boot_HaxeError("Driver does not allow to read index bytes");
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,allocQuery: function(queryKind) {
		return null;
	}
	,deleteQuery: function(q) {
	}
	,beginQuery: function(q) {
	}
	,endQuery: function(q) {
	}
	,queryResultAvailable: function(q) {
		return true;
	}
	,queryResult: function(q) {
		return 0.;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,vertex,shader) {
	this.s = s;
	this.vertex = vertex;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.hasMultiIndirect = false;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw new js__$Boot_HaxeError("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg1 = new EReg("[0-9]+\\.[0-9]+","");
	var v1 = this.gl.getParameter(35724);
	if(reg1.match(v1)) {
		this.glES = parseFloat(reg1.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg1.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	if(this.hasFeature(h3d_impl_Feature.InstancedRendering) && this.glES < 3) {
		var extension = this.gl.getExtension("ANGLE_instanced_arrays");
		this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
		this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
	}
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,logImpl: function(str) {
		console.log(str);
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,getShaderInputNames: function() {
		return this.curShader.inputs;
	}
	,getNativeShaderCode: function(shader) {
		return "// vertex:\n" + hxsl_GlslOut.compile(shader.vertex.data) + "// fragment:\n" + hxsl_GlslOut.compile(shader.fragment.data);
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log1 = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log1,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw new js__$Boot_HaxeError("An error occurred compiling the shaders: " + log1 + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	,initShader: function(p,s,shader) {
		var prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var tmp;
			if(tt._hx_index == 17) {
				var _g = tt.size;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				tt = hxsl_Type.TSampler2D;
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			s.textures.push({ u : this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]"), t : curT, mode : mode});
			++index;
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			var _g1 = [];
			var _g11 = 0;
			var _g2 = shader.bufferCount;
			while(_g11 < _g2) {
				var i = _g11++;
				_g1.push(this.gl.getUniformBlockIndex(p.p,"uniform_buffer" + i));
			}
			s.buffers = _g1;
			var _g3 = 0;
			var _g4 = shader.bufferCount;
			while(_g3 < _g4) {
				var i1 = _g3++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i1],i1);
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = new hxsl_GlslOut();
			glout.glES = this.glES;
			glout.version = this.shaderVersion;
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( e ) {
				throw new js__$Boot_HaxeError("Shader linkage error: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw new js__$Boot_HaxeError("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex);
			this.initShader(p,p.fragment,shader.fragment);
			var attribNames = [];
			p.attribs = [];
			p.hasAttribIndex = [];
			p.stride = 0;
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = 5126;
					var size;
					var _g2 = v.type;
					switch(_g2._hx_index) {
					case 3:
						size = 1;
						break;
					case 5:
						var _g21 = _g2.t;
						var n = _g2.size;
						size = n;
						break;
					case 9:
						var n1 = _g2.size;
						t = 5120;
						size = n1;
						break;
					default:
						throw new js__$Boot_HaxeError("assert " + Std.string(v.type));
					}
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						p.stride += size;
						continue;
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g4 = 0;
						var _g5 = v.qualifiers;
						while(_g4 < _g5.length) {
							var q = _g5[_g4];
							++_g4;
							if(q._hx_index == 9) {
								var n2 = q.v;
								a.divisor = n2;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex[a.index] = true;
					attribNames.push(v.name);
					p.stride += size;
				}
			}
			p.inputs = h3d_impl_InputNames.get(attribNames);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.gl.useProgram(p.p);
		var _g3 = 0;
		var _g11 = p.attribs;
		while(_g3 < _g11.length) {
			var a1 = _g11[_g3];
			++_g3;
			if(!this.curAttribs[a1.index]) {
				this.gl.enableVertexAttribArray(a1.index);
				this.curAttribs[a1.index] = true;
				if(this.maxIdxCurAttribs < a1.index) {
					this.maxIdxCurAttribs = a1.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g22 = 0;
		var _g31 = this.maxIdxCurAttribs + 1;
		while(_g22 < _g31) {
			var i = _g22++;
			if(this.curAttribs[i] && !p.hasAttribIndex[i]) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g41 = 0;
		var _g51 = this.boundTextures.length;
		while(_g41 < _g51) {
			var i1 = _g41++;
			this.boundTextures[i1] = null;
		}
		return true;
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a1 = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a1);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || t.t == null && t.realloc == null) {
					switch(pt.t._hx_index) {
					case 10:
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d_mat_Texture.defaultCubeTexture();
						break;
					default:
						throw new js__$Boot_HaxeError("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					t.alloc();
					t.realloc();
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.vertex ? i : this.curShader.vertex.textures.length + i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					var mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw new js__$Boot_HaxeError("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					var mode1 = pt.mode;
					this.gl.texParameteri(mode1,10240,flags[0]);
					this.gl.texParameteri(mode1,10241,flags[1]);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode1,10242,w);
					this.gl.texParameteri(mode1,10243,w);
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var _g2 = 0;
				var _g11 = s.buffers.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					this.gl.bindBufferBase(35345,i1,buf.buffers[i1].buffer.vbuf.b);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			this.canvas.style.width = (width / window.devicePixelRatio | 0) + "px";
			this.canvas.style.height = (height / window.devicePixelRatio | 0) + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32856:
			return 32993;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33327:case 33328:
			return 33319;
		case 33777:case 33778:case 33779:
			return 6408;
		case 34837:case 34843:
			return 6407;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 34836:case 34842:case 35906:case 35907:
			return 6408;
		default:
			throw new js__$Boot_HaxeError("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 18:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		var isCube = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 15:
			tt1.internalFmt = 35907;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw new js__$Boot_HaxeError("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var _g2 = 0;
			while(_g2 < 6) {
				var i = _g2++;
				this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
				var tmp;
				if(!h3d_impl_GlDriver.outOfMemoryCheck) {
					tmp = false;
				} else {
					var err = _gthis.gl.getError();
					if(err == 1285) {
						outOfMem = true;
						tmp = true;
					} else {
						if(err != 0) {
							throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
						}
						tmp = false;
					}
				}
				if(tmp) {
					break;
				}
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.texImage3D(35866,0,tt1.internalFmt,tt1.width,tt1.height,t.get_layerCount(),0,this.getChannels(tt1),tt1.pixelFmt,null);
			if(!(!h3d_impl_GlDriver.outOfMemoryCheck)) {
				var err1 = _gthis.gl.getError();
				if(err1 == 1285) {
					outOfMem = true;
				} else if(err1 != 0) {
					throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err1 + ")");
				}
			}
		} else {
			var _g21 = t.format;
			var tmp1;
			if(_g21._hx_index == 18) {
				var _g3 = _g21.v;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				this.gl.texImage2D(bind,0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
			}
			if(!(!h3d_impl_GlDriver.outOfMemoryCheck)) {
				var err2 = _gthis.gl.getError();
				if(err2 == 1285) {
					outOfMem = true;
				} else if(err2 != 0) {
					throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err2 + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(b) {
		var r = this.gl.createRenderbuffer();
		if(b.format == null) {
			b.format = this.glES >= 3 ? h3d_mat_DepthFormat.Depth24Stencil8 : h3d_mat_DepthFormat.Depth16;
		}
		var format;
		switch(b.format._hx_index) {
		case 0:
			format = 33189;
			break;
		case 1:
			if(this.glES >= 3) {
				format = 33190;
			} else {
				throw new js__$Boot_HaxeError("Unsupported depth format " + Std.string(b.format));
			}
			break;
		case 2:
			format = 34041;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported depth format " + Std.string(b.format));
		}
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,format,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	,disposeDepthBuffer: function(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(0,0);
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,discardError: function() {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
	}
	,allocVertexes: function(m) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	,allocIndexes: function(count,is32) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		var size = is32 ? 4 : 2;
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * size,35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, is32 : is32};
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeIndexes: function(i) {
		this.gl.deleteBuffer(i.b);
	}
	,disposeVertexes: function(v) {
		this.gl.deleteBuffer(v.b);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texImage2D(3553,mipLevel,t.t.internalFmt,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,streamData: function(data,pos,length) {
		return data;
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var bind = this.getBindType(t);
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			throw new js__$Boot_HaxeError("TODO:texImage3D");
		}
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		pixels.setFlip(false);
		var bufLen = pixels.stride * pixels.height;
		var buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 1);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,bufLen);
		}
		var _g1 = t.format;
		var tmp;
		if(_g1._hx_index == 18) {
			var _g2 = _g1.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.gl.compressedTexImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,buffer);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadVertexBytes: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var sub = new Uint8Array(buf.b.bufferValue,bufPos * 4,vertexCount * stride * 4);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,uploadIndexBytes: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		var sub = new Uint8Array(buf.b.bufferValue,bufPos << bits,indiceCount << bits);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,updateDivisor: function(a) {
		if(this.currentDivisor[a.index] != a.divisor) {
			this.currentDivisor[a.index] = a.divisor;
			this.gl.vertexAttribDivisor(a.index,a.divisor);
		}
	}
	,selectBuffer: function(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0 == ((this.curBuffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw new js__$Boot_HaxeError("No shader selected");
		}
		this.curBuffer = v;
		var m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw new js__$Boot_HaxeError("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0) {
			var _g = 0;
			var _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		} else {
			var offset = 8;
			var _g2 = 0;
			var _g11 = this.curShader.attribs.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var a1 = this.curShader.attribs[i];
				var pos1;
				var _g3 = this.curShader.inputs.names[i];
				switch(_g3) {
				case "normal":
					if(m.stride < 6) {
						throw new js__$Boot_HaxeError("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos1 = 3;
					break;
				case "position":
					pos1 = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw new js__$Boot_HaxeError("Buffer is missing UV data, set it to RAW format ?");
					}
					pos1 = 6;
					break;
				default:
					var s = _g3;
					pos1 = offset;
					offset += a1.size;
					if(offset > m.stride) {
						throw new js__$Boot_HaxeError("Buffer is missing '" + s + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a1.index,a1.size,a1.type,false,m.stride * 4,pos1 * 4);
				if(this.currentDivisor[a1.index] != a1.divisor) {
					this.currentDivisor[a1.index] = a1.divisor;
					this.gl.vertexAttribDivisor(a1.index,a1.divisor);
				}
			}
		}
	}
	,selectMultiBuffers: function(buffers) {
		var _g = 0;
		var _g1 = this.curShader.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.gl.bindBuffer(34962,buffers.buffer.buffer.vbuf.b);
			this.gl.vertexAttribPointer(a.index,a.size,a.type,false,buffers.buffer.buffer.stride * 4,buffers.offset * 4);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
			buffers = buffers.next;
		}
		this.curBuffer = null;
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		if(ibuf.is32) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,allocInstanceBuffer: function(b,bytes) {
		var data = [];
		var _g = 0;
		var _g1 = b.commandCount;
		while(_g < _g1) {
			var i = _g++;
			var p = i * 5 * 4;
			var indexCount = bytes.getInt32(p);
			var instanceCount = bytes.getInt32(p + 4);
			var offIndex = bytes.getInt32(p + 8);
			var offVertex = bytes.getInt32(p + 12);
			var offInstance = bytes.getInt32(p + 16);
			if(offVertex != 0 || offInstance != 0) {
				throw new js__$Boot_HaxeError("baseVertex and baseInstance must be zero on this platform");
			}
			data.push(indexCount);
			data.push(offIndex);
			data.push(instanceCount);
		}
		b.data = data;
	}
	,disposeInstanceBuffer: function(b) {
		b.data = null;
	}
	,drawInstanced: function(ibuf,commands) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		var args = commands.data;
		if(args != null) {
			var p = 0;
			var _g = 0;
			var _g1 = args.length / 3 | 0;
			while(_g < _g1) {
				var i = _g++;
				var args1 = p++;
				var args2 = p++;
				this.gl.drawElementsInstanced(this.drawMode,args[args1],ibuf.is32 ? 5125 : 5123,args[args2],args[p++]);
			}
		} else {
			this.gl.drawElementsInstanced(this.drawMode,commands.indexCount,ibuf.is32 ? 5125 : 5123,0,commands.commandCount);
		}
	}
	,end: function() {
	}
	,present: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,capturePixels: function(tex,layer,mipLevel,region) {
		var pixels;
		var x;
		var y;
		if(region != null) {
			if(region.xMax > tex.width) {
				region.xMax = tex.width;
			}
			if(region.yMax > tex.height) {
				region.yMax = tex.height;
			}
			if(region.xMin < 0) {
				region.xMin = 0;
			}
			if(region.yMin < 0) {
				region.yMin = 0;
			}
			pixels = hxd_Pixels.alloc(region.xMax - region.xMin >> mipLevel,region.yMax - region.yMin >> mipLevel,tex.format);
			x = region.xMin;
			y = region.yMin;
		} else {
			pixels = hxd_Pixels.alloc(tex.width >> mipLevel,tex.height >> mipLevel,tex.format);
			x = 0;
			y = 0;
		}
		var old = this.curTarget;
		var oldCount = this.numTargets;
		var oldLayer = this.curTargetLayer;
		var oldMip = this.curTargetMip;
		if(oldCount > 1) {
			this.numTargets = 1;
			var _g = 1;
			var _g1 = oldCount;
			while(_g < _g1) {
				var i = _g++;
				if(this.curTargets[i] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i,3553,null,0);
				}
			}
		}
		this.setRenderTarget(tex,layer,mipLevel);
		this.captureSubRenderBuffer(pixels,x,y);
		this.setRenderTarget(old,oldLayer,oldMip);
		if(oldCount > 1) {
			var _g2 = 1;
			var _g11 = oldCount;
			while(_g2 < _g11) {
				var i1 = _g2++;
				if(this.curTargets[i1] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i1,3553,tex.t.t,0);
				}
			}
			this.setDrawBuffers(oldCount);
			this.numTargets = oldCount;
		}
		return pixels;
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw new js__$Boot_HaxeError("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw new js__$Boot_HaxeError("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null) {
			this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
			this.gl.framebufferRenderbuffer(36160,36128,36161,tex.depthBuffer.hasStencil() ? tex.depthBuffer.b.r : null);
		} else {
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
			this.gl.framebufferRenderbuffer(36160,36128,36161,null);
		}
		this.gl.viewport(0,0,tex.width >> mipLevel,tex.height >> mipLevel);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw new js__$Boot_HaxeError("Invalid frame buffer: " + code);
			}
		}
	}
	,setRenderTargets: function(textures) {
		this.unbindTargets();
		this.setRenderTarget(textures[0]);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var _g = 1;
		var _g1 = textures.length;
		while(_g < _g1) {
			var i = _g++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
		this.setDrawBuffers(textures.length);
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		var ready = false;
		if(window.document.readyState == "complete") {
			var f = onCreate;
			haxe_Timer.delay(function() {
				f(false);
			},1);
		} else {
			window.addEventListener("load",function(_) {
				if(!ready) {
					ready = true;
					onCreate(false);
				}
			});
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
		}
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
	,uploadTextureVideoElement: function(t,v,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var bind = this.getBindType(t);
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			throw new js__$Boot_HaxeError("TODO:texImage3D");
		}
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		if(this.glES >= 3) {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,v.videoWidth,v.videoHeight,0,this.getChannels(t.t),t.t.pixelFmt,v);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,t.t.internalFmt,t.t.pixelFmt,v);
		}
		this.restoreBind();
	}
	,captureRenderBuffer: function(pixels) {
		this.captureSubRenderBuffer(pixels,0,0);
	}
	,captureSubRenderBuffer: function(pixels,x,y) {
		if(this.curTarget == null) {
			throw new js__$Boot_HaxeError("Can't capture main render buffer in GL");
		}
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var buffer = pixels.bytes.b;
		switch(this.curTarget.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(buffer.buffer);
			break;
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(buffer.buffer);
			break;
		case 16:case 17:
			buffer = new Uint32Array(buffer.buffer);
			break;
		default:
		}
		this.gl.readPixels(x,y,pixels.width,pixels.height,this.getChannels(this.curTarget.t),this.curTarget.t.pixelFmt,buffer);
		var error = this.gl.getError();
		if(error != 0) {
			throw new js__$Boot_HaxeError("Failed to capture pixels (error " + error + ")");
		}
		pixels.set_innerFormat(this.curTarget.format);
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl_InstanceBuffer = function() {
	this.triCount = 0;
	this.indexCount = 0;
};
$hxClasses["h3d.impl.InstanceBuffer"] = h3d_impl_InstanceBuffer;
h3d_impl_InstanceBuffer.__name__ = "h3d.impl.InstanceBuffer";
h3d_impl_InstanceBuffer.prototype = {
	setCommand: function(commandCount,indexCount) {
		this.commandCount = commandCount;
		this.indexCount = indexCount;
		this.triCount = commandCount * indexCount / 3 | 0;
	}
	,setBuffer: function(commandCount,bytes) {
		this.dispose();
		var _g = 0;
		var _g1 = commandCount;
		while(_g < _g1) {
			var i = _g++;
			var idxCount = bytes.getInt32(i * 20);
			var instCount = bytes.getInt32(i * 20 + 4);
			var tri = idxCount * instCount / 3 | 0;
			this.triCount += tri;
		}
		this.commandCount = commandCount;
		this.indexCount = 0;
		this.driver = h3d_Engine.CURRENT.driver;
		this.driver.allocInstanceBuffer(this,bytes);
	}
	,dispose: function() {
		if(this.data != null) {
			this.driver.disposeInstanceBuffer(this);
		}
	}
	,__class__: h3d_impl_InstanceBuffer
};
var h3d_impl__$ManagedBuffer_FreeCell = function(pos,count,next) {
	this.pos = pos;
	this.count = count;
	this.next = next;
};
$hxClasses["h3d.impl._ManagedBuffer.FreeCell"] = h3d_impl__$ManagedBuffer_FreeCell;
h3d_impl__$ManagedBuffer_FreeCell.__name__ = "h3d.impl._ManagedBuffer.FreeCell";
h3d_impl__$ManagedBuffer_FreeCell.prototype = {
	__class__: h3d_impl__$ManagedBuffer_FreeCell
};
var h3d_impl_ManagedBuffer = function(stride,size,flags) {
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.size = size;
	this.stride = stride;
	this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
	this.mem = h3d_Engine.CURRENT.mem;
	this.mem.allocManaged(this);
};
$hxClasses["h3d.impl.ManagedBuffer"] = h3d_impl_ManagedBuffer;
h3d_impl_ManagedBuffer.__name__ = "h3d.impl.ManagedBuffer";
h3d_impl_ManagedBuffer.prototype = {
	uploadVertexBuffer: function(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	,uploadVertexBytes: function(start,vertices,data,dataPos) {
		if(dataPos == null) {
			dataPos = 0;
		}
		this.mem.driver.uploadVertexBytes(this.vbuf,start,vertices,data,dataPos);
	}
	,readVertexBytes: function(start,vertices,data,dataPos) {
		if(dataPos == null) {
			dataPos = 0;
		}
		this.mem.driver.readVertexBytes(this.vbuf,start,vertices,data,dataPos);
	}
	,alloc: function(vertices,align) {
		var p = this.allocPosition(vertices,align);
		if(p < 0) {
			return null;
		}
		var b = new h3d_Buffer(vertices,this.stride,[h3d_BufferFlag.NoAlloc]);
		b.position = p;
		b.buffer = this;
		return b;
	}
	,getFreeVertices: function() {
		var m = 0;
		var l = this.freeList;
		while(l != null) {
			m += l.count;
			l = l.next;
		}
		return m;
	}
	,allocPosition: function(nvert,align) {
		var free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				var d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		var pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	,allocBuffer: function(b) {
		var align = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : 1;
		var p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	,freeBuffer: function(b) {
		var prev = null;
		var f = this.freeList;
		var nvert = b.vertices;
		var end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					var n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			this.dispose();
		}
	}
	,dispose: function() {
		this.mem.freeManaged(this);
	}
	,isDisposed: function() {
		return this.vbuf == null;
	}
	,__class__: h3d_impl_ManagedBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.bufferCount = 0;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var this1 = new Array(0);
		var indices = this1;
		var _g = 0;
		while(_g < 65533) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		var this2 = new Array(0);
		var indices1 = this2;
		var p = 0;
		var _g1 = 0;
		var _g2 = 16383;
		while(_g1 < _g2) {
			var i1 = _g1++;
			var k = i1 << 2;
			indices1.push(k);
			indices1.push(k + 1);
			indices1.push(k + 2);
			indices1.push(k + 2);
			indices1.push(k + 1);
			indices1.push(k + 3);
		}
		indices1.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices1);
	}
	,garbage: function() {
	}
	,cleanManagedBuffers: function() {
		var _g = 1;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			var b = this.buffers[i];
			var prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	,allocManaged: function(m) {
		if(m.vbuf != null) {
			return;
		}
		var mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw new js__$Boot_HaxeError("Too many buffers");
				}
				throw new js__$Boot_HaxeError("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	,freeManaged: function(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
		if((m.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var c = this.buffers[0];
			var prev = null;
			while(c != null) {
				if(c == m) {
					if(prev == null) {
						this.buffers[0] = m.next;
					} else {
						prev.next = m.next;
					}
					break;
				}
				prev = c;
				c = c.next;
			}
		}
	}
	,allocBuffer: function(b,stride) {
		var max = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 65532 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 65533 : 65534;
		if(b.vertices > max) {
			if(max == 65534) {
				throw new js__$Boot_HaxeError("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			var rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			var n = b;
			while(n.next != null) n = n.next;
			var flags = [];
			var _g = 0;
			var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if((b.flags & 1 << f._hx_index) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var flags1 = null;
			if((b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0) {
				if(flags1 == null) {
					flags1 = [];
				}
				flags1.push(h3d_BufferFlag.Dynamic);
			}
			if((b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) != 0) {
				if(flags1 == null) {
					flags1 = [];
				}
				flags1.push(h3d_BufferFlag.UniformBuffer);
			}
			var m = new h3d_impl_ManagedBuffer(stride,b.vertices,flags1);
			m.next = this.buffers[0];
			this.buffers[0] = m;
			if(!m.allocBuffer(b)) {
				throw new js__$Boot_HaxeError("assert");
			}
			return;
		}
		var m1 = this.buffers[stride];
		var prev = null;
		while(m1 != null) {
			if(m1.allocBuffer(b)) {
				return;
			}
			prev = m1;
			m1 = m1.next;
		}
		var align = (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : 0;
		if(m1 == null && align > 0) {
			var total = b.vertices;
			var size = total;
			while(size > 2048) {
				m1 = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m1 != null) {
					if(m1.allocBuffer(b)) {
						var flags2 = [];
						var _g2 = 0;
						var _g11 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g2 < _g11.length) {
							var f1 = _g11[_g2];
							++_g2;
							if((b.flags & 1 << f1._hx_index) != 0) {
								flags2.push(f1);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags2);
						return;
					}
					m1 = m1.next;
				}
			}
			b.vertices = total;
		}
		m1 = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m1;
		} else {
			prev.next = m1;
		}
		if(!m1.allocBuffer(b)) {
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,deleteIndexes: function(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * (i.is32 ? 4 : 2);
	}
	,allocIndexes: function(i) {
		i.ibuf = this.driver.allocIndexes(i.count,i.is32);
		this.indexes.push(i);
		this.usedMemory += i.count * (i.is32 ? 4 : 2);
	}
	,bpp: function(t) {
		return 4;
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && t.realloc == null) {
				continue;
			}
			if(force || t.get_lastFrame() < hxd_Timer.frameCount - 3600) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1.get_lastFrame() - t2.get_lastFrame();
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= t.width * t.height * this.bpp(t);
	}
	,allocTexture: function(t) {
		var free = this.cleanTextures(false);
		t.t = this.driver.allocTexture(t);
		if(t.t == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocTexture(t);
			return;
		}
		this.textures.push(t);
		this.texMemory += t.width * t.height * this.bpp(t);
	}
	,allocDepth: function(b) {
		var free = this.cleanTextures(false);
		b.b = this.driver.allocDepthBuffer(b);
		if(b.b == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocDepth(b);
			return;
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	,deleteDepth: function(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes != null) {
			this.triIndexes.dispose();
		}
		if(this.quadIndexes != null) {
			this.quadIndexes.dispose();
		}
		this.triIndexes = null;
		this.quadIndexes = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g2 = 0;
		var _g3 = this.depths.slice();
		while(_g2 < _g3.length) {
			var b = _g3[_g2];
			++_g2;
			b.dispose();
		}
		var _g4 = 0;
		var _g5 = this.buffers.slice();
		while(_g4 < _g5.length) {
			var b1 = _g5[_g4];
			++_g4;
			var b2 = b1;
			while(b2 != null) {
				b2.dispose();
				b2 = b2.next;
			}
		}
		var _g6 = 0;
		var _g7 = this.indexes.slice();
		while(_g6 < _g7.length) {
			var i = _g7[_g6];
			++_g6;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,freeMemorySize: function() {
		var size = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				var free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
	,stats: function() {
		var total = 0;
		var free = 0;
		var count = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				total += b1.stride * b1.size * 4;
				var f = b1.freeList;
				while(f != null) {
					free += f.count * b1.stride * 4;
					f = f.next;
				}
				++count;
				b1 = b1.next;
			}
		}
		return { bufferCount : this.bufferCount, freeManagedMemory : free, managedMemory : total, totalMemory : this.usedMemory + this.texMemory, textureCount : this.textures.length, textureMemory : this.texMemory};
	}
	,allocStats: function() {
		return [];
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_Step = $hxEnums["h3d.impl.Step"] = { __ename__ : true, __constructs__ : ["BeforeLighting","BeforeTonemappingFX","BeforeTonemapping","AfterTonemapping","AfterUI"]
	,BeforeLighting: {_hx_index:0,__enum__:"h3d.impl.Step",toString:$estr}
	,BeforeTonemappingFX: {_hx_index:1,__enum__:"h3d.impl.Step",toString:$estr}
	,BeforeTonemapping: {_hx_index:2,__enum__:"h3d.impl.Step",toString:$estr}
	,AfterTonemapping: {_hx_index:3,__enum__:"h3d.impl.Step",toString:$estr}
	,AfterUI: {_hx_index:4,__enum__:"h3d.impl.Step",toString:$estr}
};
h3d_impl_Step.__empty_constructs__ = [h3d_impl_Step.BeforeLighting,h3d_impl_Step.BeforeTonemappingFX,h3d_impl_Step.BeforeTonemapping,h3d_impl_Step.AfterTonemapping,h3d_impl_Step.AfterUI];
var h3d_impl_RendererFX = function() { };
$hxClasses["h3d.impl.RendererFX"] = h3d_impl_RendererFX;
h3d_impl_RendererFX.__name__ = "h3d.impl.RendererFX";
h3d_impl_RendererFX.__isInterface__ = true;
h3d_impl_RendererFX.prototype = {
	__class__: h3d_impl_RendererFX
};
var h3d_impl_TextureCache = function(ctx) {
	this.position = 0;
	this.ctx = ctx;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	get: function(index) {
		if(index == null) {
			index = 0;
		}
		return this.cache[index];
	}
	,getNamed: function(name) {
		var _g = 0;
		var _g1 = this.position;
		while(_g < _g1) {
			var i = _g++;
			if(this.cache[i].name == name) {
				return this.cache[i];
			}
		}
		return null;
	}
	,set: function(t,index) {
		this.cache[index] = t;
	}
	,begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,isCube) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format && isCube == ((t2.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		var flags = [h3d_mat_TextureFlags.Target];
		if(isCube) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,isCube) {
		if(isCube == null) {
			isCube = false;
		}
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format || isCube != ((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
			t = this.lookupTarget(name,width,height,format,isCube);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,allocTargetScale: function(name,scale,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var e = h3d_Engine.CURRENT;
		return this.allocTarget(name,Math.ceil(e.width * scale),Math.ceil(e.height * scale),defaultDepth,format);
	}
	,allocTileTarget: function(name,tile,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = false;
		}
		return this.allocTarget(name,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y),defaultDepth,format);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.cache;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		this.cache = [];
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
$hxClasses["hxd.impl.AnyProps"] = hxd_impl_AnyProps;
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,setDefaultProps: function(kind) {
		this.set_props(this.getDefaultProps(kind));
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
	,__properties__: {set_props:"set_props"}
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,get_mainPass: function() {
		return this.passes;
	}
	,getPasses: function() {
		var p = this.passes;
		var out = [];
		while(p != null) {
			out.push(p);
			p = p.nextPass;
		}
		return out;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,allocPass: function(name,inheritMain) {
		if(inheritMain == null) {
			inheritMain = true;
		}
		var p = this.getPass(name);
		if(p != null) {
			return p;
		}
		var p1 = new h3d_mat_Pass(name,null,inheritMain ? this.passes : null);
		this.addPass(p1);
		return p1;
	}
	,clone: function(m) {
		if(m == null) {
			m = new h3d_mat_BaseMaterial();
		}
		m.passes.load(this.passes);
		m.name = this.name;
		m.set_props(this.props);
		return m;
	}
	,__class__: h3d_mat_BaseMaterial
	,__properties__: $extend(hxd_impl_AnyProps.prototype.__properties__,{get_mainPass:"get_mainPass"})
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__ : true, __constructs__ : ["None","Back","Front","Both"]
	,None: {_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__ : true, __constructs__ : ["One","Zero","SrcAlpha","SrcColor","DstAlpha","DstColor","OneMinusSrcAlpha","OneMinusSrcColor","OneMinusDstAlpha","OneMinusDstColor","ConstantColor","ConstantAlpha","OneMinusConstantColor","OneMinusConstantAlpha","SrcAlphaSaturate"]
	,One: {_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Greater","GreaterEqual","Less","LessEqual"]
	,Always: {_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"]
	,Keep: {_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__ : true, __constructs__ : ["None","Nearest","Linear"]
	,None: {_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__ : true, __constructs__ : ["Nearest","Linear"]
	,Nearest: {_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__ : true, __constructs__ : ["Clamp","Repeat"]
	,Clamp: {_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__ : true, __constructs__ : ["Add","Sub","ReverseSub","Min","Max"]
	,Add: {_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__ : true, __constructs__ : ["Target","Cube","MipMapped","ManualMipMapGen","IsNPOT","NoAlloc","Dynamic","AlphaPremultiplied","WasCleared","Loading","Serialize","IsArray"]
	,Target: {_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.__properties__ = {set_shadowShader:"set_shadowShader",get_shadowShader:"get_shadowShader"};
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
h3d_mat_Defaults.makeVolumeDecal = function(bounds) {
	return new h3d_shader_VolumeDecal(bounds.xMax - bounds.xMin,bounds.yMax - bounds.yMin);
};
var h3d_mat_DepthFormat = $hxEnums["h3d.mat.DepthFormat"] = { __ename__ : true, __constructs__ : ["Depth16","Depth24","Depth24Stencil8"]
	,Depth16: {_hx_index:0,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24: {_hx_index:1,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24Stencil8: {_hx_index:2,__enum__:"h3d.mat.DepthFormat",toString:$estr}
};
h3d_mat_DepthFormat.__empty_constructs__ = [h3d_mat_DepthFormat.Depth16,h3d_mat_DepthFormat.Depth24,h3d_mat_DepthFormat.Depth24Stencil8];
var h3d_mat_DepthBuffer = function(width,height,format) {
	this.width = width;
	this.height = height;
	this.format = format;
	if(width > 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.DepthBuffer"] = h3d_mat_DepthBuffer;
h3d_mat_DepthBuffer.__name__ = "h3d.mat.DepthBuffer";
h3d_mat_DepthBuffer.getDefault = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_DepthBuffer.prototype = {
	hasStencil: function() {
		switch(this.format._hx_index) {
		case 0:case 1:
			return false;
		case 2:
			return true;
		}
	}
	,alloc: function() {
		h3d_Engine.CURRENT.mem.allocDepth(this);
	}
	,dispose: function() {
		if(this.b != null) {
			h3d_Engine.CURRENT.mem.deleteDepth(this);
			this.b = null;
		}
	}
	,isDisposed: function() {
		return this.b == null;
	}
	,__class__: h3d_mat_DepthBuffer
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.create = function(tex) {
	var mat = h3d_mat_MaterialSetup.current.createMaterial();
	mat.set_texture(tex);
	mat.set_props(mat.getDefaultProps());
	return mat;
};
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	get_specularPower: function() {
		return this.mshader.specularPower__;
	}
	,set_specularPower: function(v) {
		return this.mshader.specularPower__ = v;
	}
	,get_specularAmount: function() {
		return this.mshader.specularAmount__;
	}
	,set_specularAmount: function(v) {
		return this.mshader.specularAmount__ = v;
	}
	,get_color: function() {
		return this.mshader.color__;
	}
	,set_color: function(v) {
		return this.mshader.color__ = v;
	}
	,get_shadows: function() {
		if(this.castShadows) {
			return this.receiveShadows;
		} else {
			return false;
		}
	}
	,set_shadows: function(v) {
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		return v;
	}
	,set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_staticShadows: function(v) {
		var p = this.getPass("shadow");
		if(p != null) {
			p.set_isStatic(v);
		}
		return this.staticShadows = v;
	}
	,clone: function(m) {
		var m1 = m == null ? new h3d_mat_Material() : m;
		h3d_mat_BaseMaterial.prototype.clone.call(this,m1);
		m1.set_castShadows(this.castShadows);
		m1.set_receiveShadows(this.receiveShadows);
		m1.set_texture(this.get_texture());
		m1.set_specularTexture(this.get_specularTexture());
		m1.set_normalMap(this.get_normalMap());
		if(this.textureShader != null) {
			var _this = m1.textureShader;
			_this.constModified = true;
			_this.additive__ = this.textureShader.additive__;
			var _this1 = m1.textureShader;
			_this1.constModified = true;
			_this1.killAlpha__ = this.textureShader.killAlpha__;
			m1.textureShader.killAlphaThreshold__ = this.textureShader.killAlphaThreshold__;
		}
		m1.mshader.color__ = this.mshader.color__;
		m1.set_blendMode(this.blendMode);
		return m1;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,get_specularTexture: function() {
		if(this.specularShader == null) {
			return null;
		} else {
			return this.specularShader.texture__;
		}
	}
	,get_texture: function() {
		if(this.textureShader == null) {
			return null;
		} else {
			return this.textureShader.texture__;
		}
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,get_normalMap: function() {
		if(this.normalShader == null) {
			return null;
		} else {
			return this.normalShader.texture__;
		}
	}
	,set_normalMap: function(t) {
		if(t == null) {
			if(this.normalShader != null) {
				this.passes.removeShader(this.normalShader);
				this.normalShader = null;
			}
		} else {
			if(this.normalShader == null) {
				this.normalShader = new h3d_shader_NormalMap();
				if(this.textureShader != null) {
					this.passes.addShaderAtIndex(this.normalShader,this.passes.getShaderIndex(this.textureShader) + 1);
				} else {
					this.passes.addShader(this.normalShader);
				}
			}
			this.normalShader.texture__ = t;
		}
		return t;
	}
	,set_specularTexture: function(t) {
		if(t == null) {
			if(this.specularShader != null) {
				this.passes.removeShader(this.specularShader);
				this.specularShader = null;
			}
		} else {
			if(this.specularShader == null) {
				this.specularShader = new h3d_shader_SpecularTexture();
				this.passes.addShader(this.specularShader);
			}
			this.specularShader.texture__ = t;
		}
		return t;
	}
	,getDefaultModelProps: function() {
		var props = this.getDefaultProps();
		switch(this.blendMode._hx_index) {
		case 0:
			break;
		case 1:
			props.kind = "Alpha";
			break;
		case 2:
			props.kind = "Add";
			props.culling = false;
			props.shadows = false;
			props.light = false;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported HMD material " + Std.string(this.blendMode));
		}
		return props;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d_mat_Face.Both : props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
	,__properties__: $extend(h3d_mat_BaseMaterial.prototype.__properties__,{set_blendMode:"set_blendMode",set_specularPower:"set_specularPower",get_specularPower:"get_specularPower",set_specularAmount:"set_specularAmount",get_specularAmount:"get_specularAmount",set_color:"set_color",get_color:"get_color",set_normalMap:"set_normalMap",get_normalMap:"get_normalMap",set_specularTexture:"set_specularTexture",get_specularTexture:"get_specularTexture",set_texture:"set_texture",get_texture:"get_texture",set_staticShadows:"set_staticShadows",set_receiveShadows:"set_receiveShadows",set_castShadows:"set_castShadows",set_shadows:"set_shadows",get_shadows:"get_shadows"})
});
var h3d_mat_MaterialDatabase = function() {
	this.db = new haxe_ds_StringMap();
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	getFilePath: function(model) {
		return model.entry.get_directory() + "/materials.props";
	}
	,getModelData: function(model) {
		if(model == null) {
			return null;
		}
		var this1 = this.db;
		var key = model.entry.get_directory();
		var _this = this1;
		var cached = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(cached != null) {
			return cached.v;
		}
		var file = this.getFilePath(model);
		var value;
		try {
			value = JSON.parse(hxd_res_Loader.currentInstance.load(file).toText());
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof hxd_fs_NotFound)) {
				var e2 = e1;
				value = { };
			} else {
				throw e;
			}
		}
		var this2 = this.db;
		var key1 = model.entry.get_directory();
		var _this1 = this2;
		var value1 = { v : value};
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,value1);
		} else {
			_this1.h[key1] = value1;
		}
		return value;
	}
	,saveData: function(model,data) {
		var file = this.getFilePath(model);
		throw new js__$Boot_HaxeError("Can't save material props database " + file);
	}
	,loadMatProps: function(material,setup) {
		var p = this.getModelData(material.model);
		if(p == null) {
			return p;
		}
		p = p.materials;
		if(p == null) {
			return p;
		}
		p = Reflect.field(p,setup.name);
		if(p == null) {
			return p;
		}
		return Reflect.field(p,material.name);
	}
	,saveMatProps: function(material,setup) {
		var path = ["materials",setup.name,material.name];
		var root = this.getModelData(material.model);
		if(root == null) {
			return;
		}
		var realRoot = root;
		var prevs = [];
		var _g = 0;
		var _g1 = path.length - 1;
		while(_g < _g1) {
			var i = _g++;
			var next = Reflect.field(root,path[i]);
			if(next == null) {
				next = { };
				root[path[i]] = next;
			}
			prevs.push(root);
			root = next;
		}
		var name = path.pop();
		Reflect.deleteField(root,name);
		var currentProps = material.props;
		var defaultProps = material.getDefaultProps();
		if(currentProps == null || Std.string(defaultProps) == Std.string(currentProps)) {
			while(path.length > 0) {
				var name1 = path.pop();
				var root1 = prevs.pop();
				if(Reflect.fields(Reflect.field(root1,name1)).length != 0) {
					break;
				}
				Reflect.deleteField(root1,name1);
			}
		} else {
			root[name] = currentProps;
		}
		var file = this.getFilePath(material.model);
		if(Reflect.fields(realRoot).length == 0) {
			realRoot = null;
		}
		this.saveData(material.model,realRoot);
	}
	,__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,getDefaults: function(kind) {
		if(this.emptyMat == null) {
			this.emptyMat = this.createMaterial();
		}
		return this.emptyMat.getDefaultProps(kind);
	}
	,loadMaterialProps: function(material) {
		return this.database.loadMatProps(material,this);
	}
	,saveMaterialProps: function(material) {
		this.database.saveMatProps(material,this);
	}
	,customMeshInit: function(mesh) {
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Pass.getEnableLights = function(v) {
	return v & 1;
};
h3d_mat_Pass.getDynamicParameters = function(v) {
	return v >> 1 & 1;
};
h3d_mat_Pass.getIsStatic = function(v) {
	return v >> 2 & 1;
};
h3d_mat_Pass.getBatchMode = function(v) {
	return v >> 3 & 1;
};
h3d_mat_Pass.getCulling = function(v) {
	return v & 3;
};
h3d_mat_Pass.getDepthWrite = function(v) {
	return v >> 2 & 1;
};
h3d_mat_Pass.getDepthTest = function(v) {
	return v >> 3 & 7;
};
h3d_mat_Pass.getBlendSrc = function(v) {
	return v >> 6 & 15;
};
h3d_mat_Pass.getBlendDst = function(v) {
	return v >> 10 & 15;
};
h3d_mat_Pass.getBlendAlphaSrc = function(v) {
	return v >> 14 & 15;
};
h3d_mat_Pass.getBlendAlphaDst = function(v) {
	return v >> 18 & 15;
};
h3d_mat_Pass.getBlendOp = function(v) {
	return v >> 22 & 7;
};
h3d_mat_Pass.getBlendAlphaOp = function(v) {
	return v >> 25 & 7;
};
h3d_mat_Pass.getWireframe = function(v) {
	return v >> 28 & 1;
};
h3d_mat_Pass.getReserved = function(v) {
	return v >> 29 & 1;
};
h3d_mat_Pass.prototype = {
	load: function(p) {
		this.name = p.name;
		this.passId = p.passId;
		this.bits = p.bits;
		this.set_enableLights(p.enableLights);
		this.set_dynamicParameters(p.dynamicParameters);
		this.set_culling(p.culling);
		this.set_depthWrite(p.depthWrite);
		this.set_depthTest(p.depthTest);
		this.set_blendSrc(p.blendSrc);
		this.set_blendDst(p.blendDst);
		this.set_blendOp(p.blendOp);
		this.set_blendAlphaSrc(p.blendAlphaSrc);
		this.set_blendAlphaDst(p.blendAlphaDst);
		this.set_blendAlphaOp(p.blendAlphaOp);
		this.colorMask = p.colorMask;
		if(p.stencil != null) {
			if(this.stencil == null) {
				this.stencil = new h3d_mat_Stencil();
			}
			this.stencil.load(p.stencil);
		}
	}
	,setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,blend: function(src,dst) {
		this.set_blendSrc(src);
		this.set_blendAlphaSrc(src);
		this.set_blendDst(dst);
		this.set_blendAlphaDst(dst);
	}
	,setBlendMode: function(b) {
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 1:
			var src1 = h3d_mat_Blend.SrcAlpha;
			var dst1 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src1);
			this.set_blendAlphaSrc(src1);
			this.set_blendDst(dst1);
			this.set_blendAlphaDst(dst1);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 2:
			var src2 = h3d_mat_Blend.SrcAlpha;
			var dst2 = h3d_mat_Blend.One;
			this.set_blendSrc(src2);
			this.set_blendAlphaSrc(src2);
			this.set_blendDst(dst2);
			this.set_blendAlphaDst(dst2);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 3:
			var src3 = h3d_mat_Blend.One;
			var dst3 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src3);
			this.set_blendAlphaSrc(src3);
			this.set_blendDst(dst3);
			this.set_blendAlphaDst(dst3);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 4:
			var src4 = h3d_mat_Blend.OneMinusDstColor;
			var dst4 = h3d_mat_Blend.One;
			this.set_blendSrc(src4);
			this.set_blendAlphaSrc(src4);
			this.set_blendDst(dst4);
			this.set_blendAlphaDst(dst4);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 5:
			var src5 = h3d_mat_Blend.DstColor;
			var dst5 = h3d_mat_Blend.Zero;
			this.set_blendSrc(src5);
			this.set_blendAlphaSrc(src5);
			this.set_blendDst(dst5);
			this.set_blendAlphaDst(dst5);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 6:
			var src6 = h3d_mat_Blend.DstColor;
			var dst6 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src6);
			this.set_blendAlphaSrc(src6);
			this.set_blendDst(dst6);
			this.set_blendAlphaDst(dst6);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 7:
			var src7 = h3d_mat_Blend.Zero;
			var dst7 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src7);
			this.set_blendAlphaSrc(src7);
			this.set_blendDst(dst7);
			this.set_blendAlphaDst(dst7);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 8:
			var src8 = h3d_mat_Blend.One;
			var dst8 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src8);
			this.set_blendAlphaSrc(src8);
			this.set_blendDst(dst8);
			this.set_blendAlphaDst(dst8);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 9:
			var src9 = h3d_mat_Blend.SrcAlpha;
			var dst9 = h3d_mat_Blend.One;
			this.set_blendSrc(src9);
			this.set_blendAlphaSrc(src9);
			this.set_blendDst(dst9);
			this.set_blendAlphaDst(dst9);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,setColorMask: function(r,g,b,a) {
		this.colorMask = (r ? 1 : 0) | (g ? 2 : 0) | (b ? 4 : 0) | (a ? 8 : 0);
	}
	,setColorChannel: function(c) {
		switch(c._hx_index) {
		case 1:
			this.setColorMask(true,false,false,false);
			break;
		case 2:
			this.setColorMask(false,true,false,false);
			break;
		case 3:
			this.setColorMask(false,false,true,false);
			break;
		case 4:
			this.setColorMask(false,false,false,true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported channel " + Std.string(c));
		}
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,addShaderAtIndex: function(s,index) {
		var prev = null;
		var cur = this.shaders;
		while(index > 0 && cur != this.parentShaders) {
			prev = cur;
			cur = cur.next;
			--index;
		}
		if(prev == null) {
			this.shaders = new hxsl_ShaderList(s,cur);
		} else {
			prev.next = new hxsl_ShaderList(s,cur);
		}
		return s;
	}
	,getShaderIndex: function(s) {
		var index = 0;
		var cur = this.shaders;
		while(cur != this.parentShaders) {
			if(cur.s == s) {
				return index;
			}
			cur = cur.next;
			++index;
		}
		return -1;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,getShader: function(t) {
		var s = this.shaders;
		while(s != this.parentShaders) {
			var value = s.s;
			var sh = js_Boot.__downcastCheck(value,t) ? value : null;
			if(sh != null) {
				return sh;
			}
			s = s.next;
		}
		return null;
	}
	,getShaderByName: function(name) {
		var s = this.shaders;
		while(s != this.parentShaders) {
			if(s.s.shader.data.name == name) {
				return s.s;
			}
			s = s.next;
		}
		return null;
	}
	,getShaders: function() {
		return new hxsl__$ShaderList_ShaderIterator(this.shaders,this.parentShaders);
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	,clone: function() {
		var p = new h3d_mat_Pass(this.name,this.shaders.clone());
		p.bits = this.bits;
		p.set_enableLights(this.enableLights);
		if(this.stencil != null) {
			p.stencil = this.stencil.clone();
		}
		return p;
	}
	,getDebugShaderCode: function(scene,toHxsl) {
		if(toHxsl == null) {
			toHxsl = true;
		}
		var shader = scene.renderer.debugCompileShader(this);
		if(toHxsl) {
			var toString = function(s) {
				return hxsl_Printer.shaderToString(s,true);
			};
			return "// vertex:\n" + toString(shader.vertex.data) + "\n\nfragment:\n" + toString(shader.fragment.data);
		} else {
			return h3d_Engine.CURRENT.driver.getNativeShaderCode(shader);
		}
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_dynamicParameters: function(v) {
		this.flags = this.flags & -3 | (v ? 1 : 0) << 1;
		return this.dynamicParameters = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_batchMode: function(v) {
		this.flags = this.flags & -9 | (v ? 1 : 0) << 3;
		return this.batchMode = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,set_wireframe: function(v) {
		this.bits = this.bits & -268435457 | (v ? 1 : 0) << 28;
		return this.wireframe = v;
	}
	,set_reserved: function(v) {
		this.bits = this.bits & -536870913 | (v ? 1 : 0) << 29;
		return this.reserved = v;
	}
	,loadFlags: function(bits) {
		this.flags = bits;
		this.set_enableLights((this.flags & 1) != 0);
		this.set_dynamicParameters((this.flags >> 1 & 1) != 0);
		this.set_isStatic((this.flags >> 2 & 1) != 0);
		this.set_batchMode((this.flags >> 3 & 1) != 0);
	}
	,loadBits: function(bits) {
		this.bits = bits;
		this.set_culling(Type.createEnumIndex(h3d_mat_Face,this.bits & 3));
		this.set_depthWrite((this.bits >> 2 & 1) != 0);
		this.set_depthTest(Type.createEnumIndex(h3d_mat_Compare,this.bits >> 3 & 7));
		this.set_blendSrc(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 6 & 15));
		this.set_blendDst(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 10 & 15));
		this.set_blendAlphaSrc(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 14 & 15));
		this.set_blendAlphaDst(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 18 & 15));
		this.set_blendOp(Type.createEnumIndex(h3d_mat_Operation,this.bits >> 22 & 7));
		this.set_blendAlphaOp(Type.createEnumIndex(h3d_mat_Operation,this.bits >> 25 & 7));
		this.set_wireframe((this.bits >> 28 & 1) != 0);
		this.set_reserved((this.bits >> 29 & 1) != 0);
	}
	,__class__: h3d_mat_Pass
	,__properties__: {set_reserved:"set_reserved",set_wireframe:"set_wireframe",set_blendAlphaOp:"set_blendAlphaOp",set_blendOp:"set_blendOp",set_blendAlphaDst:"set_blendAlphaDst",set_blendAlphaSrc:"set_blendAlphaSrc",set_blendDst:"set_blendDst",set_blendSrc:"set_blendSrc",set_depthTest:"set_depthTest",set_depthWrite:"set_depthWrite",set_culling:"set_culling",set_batchMode:"set_batchMode",set_isStatic:"set_isStatic",set_dynamicParameters:"set_dynamicParameters",set_enableLights:"set_enableLights"}
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Stencil.getReadMask = function(v) {
	return v & 255;
};
h3d_mat_Stencil.getWriteMask = function(v) {
	return v >> 8 & 255;
};
h3d_mat_Stencil.getReference = function(v) {
	return v >> 16 & 255;
};
h3d_mat_Stencil.getFrontTest = function(v) {
	return v & 7;
};
h3d_mat_Stencil.getFrontPass = function(v) {
	return v >> 3 & 7;
};
h3d_mat_Stencil.getFrontSTfail = function(v) {
	return v >> 6 & 7;
};
h3d_mat_Stencil.getFrontDPfail = function(v) {
	return v >> 9 & 7;
};
h3d_mat_Stencil.getBackTest = function(v) {
	return v >> 12 & 7;
};
h3d_mat_Stencil.getBackPass = function(v) {
	return v >> 15 & 7;
};
h3d_mat_Stencil.getBackSTfail = function(v) {
	return v >> 18 & 7;
};
h3d_mat_Stencil.getBackDPfail = function(v) {
	return v >> 21 & 7;
};
h3d_mat_Stencil.prototype = {
	setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,clone: function() {
		var s = new h3d_mat_Stencil();
		s.opBits = this.opBits;
		s.maskBits = this.maskBits;
		return s;
	}
	,load: function(s) {
		this.opBits = s.opBits;
		this.maskBits = s.maskBits;
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,loadOpBits: function(bits) {
		this.opBits = bits;
		this.set_frontTest(Type.createEnumIndex(h3d_mat_Compare,this.opBits & 7));
		this.set_frontPass(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 3 & 7));
		this.set_frontSTfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 6 & 7));
		this.set_frontDPfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 9 & 7));
		this.set_backTest(Type.createEnumIndex(h3d_mat_Compare,this.opBits >> 12 & 7));
		this.set_backPass(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 15 & 7));
		this.set_backSTfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 18 & 7));
		this.set_backDPfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 21 & 7));
	}
	,loadMaskBits: function(bits) {
		this.maskBits = bits;
		this.set_readMask(this.maskBits & 255);
		this.set_writeMask(this.maskBits >> 8 & 255);
		this.set_reference(this.maskBits >> 16 & 255);
	}
	,__class__: h3d_mat_Stencil
	,__properties__: {set_backDPfail:"set_backDPfail",set_backSTfail:"set_backSTfail",set_backPass:"set_backPass",set_backTest:"set_backTest",set_frontDPfail:"set_frontDPfail",set_frontSTfail:"set_frontSTfail",set_frontPass:"set_frontPass",set_frontTest:"set_frontTest",set_reference:"set_reference",set_writeMask:"set_writeMask",set_readMask:"set_readMask"}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__ : true, __constructs__ : ["ARGB","BGRA","RGBA","RGBA16F","RGBA32F","R8","R16F","R32F","RG8","RG16F","RG32F","RGB8","RGB16F","RGB32F","SRGB","SRGB_ALPHA","RGB10A2","RG11B10UF","S3TC"]
	,ARGB: {_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:18,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF];
var h3d_mat_Texture = function(w,h,flags,format) {
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) != 0) {
		this.realloc = function() {
		};
	}
	this.width = w;
	this.height = h;
	this.set_mipMap((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 ? h3d_mat_MipMap.Nearest : h3d_mat_MipMap.None);
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Wrap.Clamp);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.fromBitmap = function(bmp) {
	var t = new h3d_mat_Texture(bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	t.uploadBitmap(bmp);
	return t;
};
h3d_mat_Texture.fromPixels = function(pixels) {
	var t = new h3d_mat_Texture(pixels.width,pixels.height);
	t.uploadPixels(pixels);
	return t;
};
h3d_mat_Texture.fromColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t1 = new h3d_mat_Texture(1,1,null);
	t1.clear(color,alpha);
	t1.realloc = function() {
		t1.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t1;
	return t1;
};
h3d_mat_Texture.genDisc = function(size,color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	return h3d_mat_Texture.genTexture(0,size,color,alpha);
};
h3d_mat_Texture.genTexture = function(mode,size,color,alpha) {
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	color = color & 16777215 | aval << 24;
	var key = (size << 16 | mode) + "," + color;
	var _this = h3d_mat_Texture.genTextureKeys;
	var k = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null) {
		return t;
	}
	if(k == null) {
		k = { };
		var _this1 = h3d_mat_Texture.genTextureKeys;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,k);
		} else {
			_this1.h[key] = k;
		}
	}
	t = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.Target]);
	t.realloc = function() {
		h3d_mat_Texture.drawGenTexture(t,color,mode);
	};
	h3d_mat_Texture.drawGenTexture(t,color,mode);
	engine.resCache.set(k,t);
	return t;
};
h3d_mat_Texture.drawGenTexture = function(t,color,mode) {
	var s = new h3d_pass_ScreenFx(new h3d_shader_GenTexture());
	var engine = h3d_Engine.CURRENT;
	var _this = s.shader;
	_this.constModified = true;
	_this.mode__ = mode;
	var _this1 = s.shader.color__;
	_this1.x = (color >> 16 & 255) / 255;
	_this1.y = (color >> 8 & 255) / 255;
	_this1.z = (color & 255) / 255;
	_this1.w = (color >>> 24) / 255;
	engine.pushTarget(t);
	s.render();
	engine.popTarget();
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.genChecker = function(size) {
	var engine = h3d_Engine.CURRENT;
	var k = h3d_mat_Texture.checkerTextureKeys.h[size];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null && !(t.t == null && t.realloc == null)) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.checkerTextureKeys.h[size] = k;
	}
	var t1 = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.NoAlloc]);
	var t2 = t1;
	var size1 = size;
	t1.realloc = function() {
		h3d_mat_Texture.allocChecker(t2,size1);
	};
	engine.resCache.set(k,t1);
	return t1;
};
h3d_mat_Texture.genNoise = function(size) {
	var engine = h3d_Engine.CURRENT;
	var k = h3d_mat_Texture.noiseTextureKeys.h[size];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null && !(t.t == null && t.realloc == null)) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.noiseTextureKeys.h[size] = k;
	}
	var t1 = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.NoAlloc]);
	var t2 = t1;
	var size1 = size;
	t1.realloc = function() {
		h3d_mat_Texture.allocNoise(t2,size1);
	};
	engine.resCache.set(k,t1);
	return t1;
};
h3d_mat_Texture.allocNoise = function(t,size) {
	var b = new hxd_BitmapData(size,size);
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g11 = size;
		while(_g2 < _g11) {
			var y = _g2++;
			var n = Std.random(256);
			b.setPixel(x,y,-16777216 | n | n << 8 | n << 16);
		}
	}
	t.uploadBitmap(b);
	b.ctx = null;
	b.pixel = null;
};
h3d_mat_Texture.allocChecker = function(t,size) {
	var b = new hxd_BitmapData(size,size);
	b.clear(-1);
	var _g = 0;
	var _g1 = size >> 1;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g11 = size >> 1;
		while(_g2 < _g11) {
			var y = _g2++;
			b.setPixel(x,y,-16777216);
			b.setPixel(x + (size >> 1),y + (size >> 1),-16777216);
		}
	}
	t.uploadBitmap(b);
	b.ctx = null;
	b.pixel = null;
};
h3d_mat_Texture.prototype = {
	set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_lastFrame: function() {
		return this._lastFrame;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,isSRGB: function() {
		switch(this.format._hx_index) {
		case 14:case 15:
			return true;
		default:
			return false;
		}
	}
	,checkAlloc: function() {
		if(this.t == null && this.realloc != null) {
			this.alloc();
			this.realloc();
		}
	}
	,clone: function() {
		this.checkAlloc();
		if(this.t == null) {
			throw new js__$Boot_HaxeError("Can't clone disposed texture");
		}
		var old = this.get_lastFrame();
		this.preventAutoDispose();
		var flags = [];
		var f = h3d_mat_TextureFlags.Target;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		var f1 = h3d_mat_TextureFlags.Cube;
		if((this.flags & 1 << f1._hx_index) != 0) {
			flags.push(f1);
		}
		var f2 = h3d_mat_TextureFlags.MipMapped;
		if((this.flags & 1 << f2._hx_index) != 0) {
			flags.push(f2);
		}
		var f3 = h3d_mat_TextureFlags.IsArray;
		if((this.flags & 1 << f3._hx_index) != 0) {
			flags.push(f3);
		}
		var t = new h3d_mat_Texture(this.width,this.height,flags,this.format);
		t.name = this.name;
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			h3d_pass_CubeCopy.run(this,t);
		} else {
			h3d_pass_Copy.run(this,t);
		}
		this.set_lastFrame(old);
		return t;
	}
	,preventAutoDispose: function() {
		this.set_lastFrame(h3d_mat_Texture.PREVENT_AUTO_DISPOSE);
	}
	,waitLoad: function(f) {
		if((this.flags & 1 << h3d_mat_TextureFlags.Loading._hx_index) == 0) {
			f();
			return;
		}
		if(this.waitLoads == null) {
			this.waitLoads = [];
		}
		this.waitLoads.push(f);
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,isDisposed: function() {
		if(this.t == null) {
			return this.realloc == null;
		} else {
			return false;
		}
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clearF: function(r,g,b,a,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(a == null) {
			a = 0.;
		}
		if(b == null) {
			b = 0.;
		}
		if(g == null) {
			g = 0.;
		}
		if(r == null) {
			r = 0.;
		}
		this.alloc();
		if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) == 0) {
			throw new js__$Boot_HaxeError("Texture should be target");
		}
		var engine = h3d_Engine.CURRENT;
		var color = new h3d_Vector(r,g,b,a);
		if(layer < 0) {
			var _g = 0;
			var _g1 = this.get_layerCount();
			while(_g < _g1) {
				var i = _g++;
				engine.pushTarget(this,i);
				engine.clearF(color);
				engine.popTarget();
			}
		} else {
			engine.pushTarget(this,layer);
			engine.clearF(color);
			engine.popTarget();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width != 1 || this.height != 1) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw new js__$Boot_HaxeError("TODO");
			}
			var _g11 = 0;
			var _g2 = this.width * this.height;
			while(_g11 < _g2) {
				var i1 = _g11++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g3 = 0;
				var _g4 = this.get_layerCount();
				while(_g3 < _g4) {
					var i2 = _g3++;
					this.uploadPixels(p,0,i2);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkSize: function(width,height,mip) {
		if(width != this.width >> mip || height != this.height >> mip) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mip) + "x" + (this.height >> mip));
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && ((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) == 0 || layer == 5)) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = bmp.ctx.canvas.width;
		var height = bmp.ctx.canvas.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = pixels.width;
		var height = pixels.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,swapTexture: function(t) {
		this.checkAlloc();
		t.checkAlloc();
		if(this.t == null && this.realloc == null || t.t == null && t.realloc == null) {
			throw new js__$Boot_HaxeError("One of the two texture is disposed");
		}
		var tmp = this.t;
		this.t = t.t;
		t.t = tmp;
	}
	,capturePixels: function(face,mipLevel,region) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		var old = this.get_lastFrame();
		this.preventAutoDispose();
		var pix = this.mem.driver.capturePixels(this,face,mipLevel,region);
		this.set_lastFrame(old);
		return pix;
	}
	,__class__: h3d_mat_Texture
	,__properties__: {get_layerCount:"get_layerCount",set_wrap:"set_wrap",set_filter:"set_filter",set_mipMap:"set_mipMap",set_lastFrame:"set_lastFrame",get_lastFrame:"get_lastFrame"}
};
var h3d_mat_TextureArray = function(w,h,layers,flags,format) {
	this.layers = layers;
	if(flags == null) {
		flags = [];
	}
	flags.push(h3d_mat_TextureFlags.IsArray);
	h3d_mat_Texture.call(this,w,h,flags,format);
};
$hxClasses["h3d.mat.TextureArray"] = h3d_mat_TextureArray;
h3d_mat_TextureArray.__name__ = "h3d.mat.TextureArray";
h3d_mat_TextureArray.__super__ = h3d_mat_Texture;
h3d_mat_TextureArray.prototype = $extend(h3d_mat_Texture.prototype,{
	get_layerCount: function() {
		return this.layers;
	}
	,clone: function() {
		var old = this.get_lastFrame();
		this.preventAutoDispose();
		var t = new h3d_mat_TextureArray(this.width,this.height,this.layers,null,this.format);
		h3d_pass_Copy.run(this,t);
		this.set_lastFrame(old);
		return t;
	}
	,toString: function() {
		return h3d_mat_Texture.prototype.toString.call(this) + "[" + this.layers + "]";
	}
	,__class__: h3d_mat_TextureArray
});
var h3d_pass_Base = function(name) {
	this.name = name;
};
$hxClasses["h3d.pass.Base"] = h3d_pass_Base;
h3d_pass_Base.__name__ = "h3d.pass.Base";
h3d_pass_Base.prototype = {
	compileShader: function(p) {
		throw new js__$Boot_HaxeError("Not implemented for this pass");
	}
	,setContext: function(ctx) {
		this.ctx = ctx;
	}
	,dispose: function() {
	}
	,draw: function(passes,sort) {
	}
	,__class__: h3d_pass_Base
};
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.shaders = new hxsl_ShaderList(shader);
	this.manager = new h3d_pass_ShaderManager(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.run = function(shader,output,layer) {
	var engine = h3d_Engine.CURRENT;
	engine.pushTarget(output,layer);
	new h3d_pass_ScreenFx(shader).render();
	engine.popTarget();
};
h3d_pass_ScreenFx.prototype = {
	get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,copy: function(src,dst) {
		h3d_pass_Copy.run(src,dst);
	}
	,setGlobals: function(ctx) {
		var _g = 0;
		var _g1 = ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
	}
	,addShader: function(s) {
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return this.pass.addShader(s);
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,getShader: function(cl) {
		var _g_l = this.shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var si = js_Boot.__downcastCheck(s1,cl) ? s1 : null;
			if(si != null) {
				return si;
			}
		}
		return null;
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var rts = this.manager.compileShaders(this.shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,this.shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.primitive.render(this.get_engine());
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
	,__properties__: {get_engine:"get_engine"}
};
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,1,0,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g2 = 0;
		var _g3 = this.values.length;
		while(_g2 < _g3) {
			var i3 = _g2++;
			this.values[i3] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g4 = 0;
			var _g5 = this.values.length;
			while(_g4 < _g5) {
				var i4 = _g4++;
				var a1 = this.values[i4];
				this.values[i4] = a1 + this.linear * (m - a1);
				var a2 = this.offsets[i4];
				this.offsets[i4] = a2 + this.linear * ((i4 == 0 ? 0 : (i4 * 2 - 0.5) / (i4 * qadj)) - a2);
			}
		}
	}
	,getKernelSize: function() {
		if(this.values == null) {
			this.calcValues();
		}
		if(this.radius <= 0) {
			return 0;
		} else {
			return this.values.length * 2 - 1;
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this1 = this.shader;
			_this1.constModified = true;
			_this1.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this2 = this.shader;
			_this2.constModified = true;
			_this2.isCube__ = false;
		}
		var _this3 = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this3.x = x;
		_this3.y = y;
		_this3.z = 0.;
		_this3.w = 1.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this4 = this.shader.pixel__;
		var x1 = 0;
		var y1 = 1 / src.height;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this4.x = x1;
		_this4.y = y1;
		_this4.z = 0.;
		_this4.w = 1.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g2 = 0;
		var _g3 = faceCount;
		while(_g2 < _g3) {
			var i1 = _g2++;
			this.get_engine().pushTarget(output,i1);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i1];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
	,__properties__: $extend(h3d_pass_ScreenFx.prototype.__properties__,{set_quality:"set_quality",set_linear:"set_linear",set_gain:"set_gain",set_radius:"set_radius"})
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw new js__$Boot_HaxeError(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,getParamFloatValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstants: function(globals) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw new js__$Boot_HaxeError("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,clone: function() {
		return this;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	get_flipY: function() {
		return this.flipY__;
	}
	,set_flipY: function(_v) {
		return this.flipY__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ScreenShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		return s;
	}
	,__class__: h3d_shader_ScreenShader
	,__properties__: {set_flipY:"set_flipY",get_flipY:"get_flipY"}
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$Border_BorderShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_pass__$Border_BorderShader
	,__properties__: $extend(h3d_shader_ScreenShader.prototype.__properties__,{set_color:"set_color",get_color:"get_color"})
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
	var bbuf = this1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize1 = bbuf.array.length << 1;
		if(newSize1 < 128) {
			newSize1 = 128;
		}
		var newArray1 = new Float32Array(newSize1);
		newArray1.set(bbuf.array);
		bbuf.array = newArray1;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize2 = bbuf.array.length << 1;
		if(newSize2 < 128) {
			newSize2 = 128;
		}
		var newArray2 = new Float32Array(newSize2);
		newArray2.set(bbuf.array);
		bbuf.array = newArray2;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize3 = bbuf.array.length << 1;
		if(newSize3 < 128) {
			newSize3 = 128;
		}
		var newArray3 = new Float32Array(newSize3);
		newArray3.set(bbuf.array);
		bbuf.array = newArray3;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize4 = bbuf.array.length << 1;
		if(newSize4 < 128) {
			newSize4 = 128;
		}
		var newArray4 = new Float32Array(newSize4);
		newArray4.set(bbuf.array);
		bbuf.array = newArray4;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize5 = bbuf.array.length << 1;
		if(newSize5 < 128) {
			newSize5 = 128;
		}
		var newArray5 = new Float32Array(newSize5);
		newArray5.set(bbuf.array);
		bbuf.array = newArray5;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize6 = bbuf.array.length << 1;
		if(newSize6 < 128) {
			newSize6 = 128;
		}
		var newArray6 = new Float32Array(newSize6);
		newArray6.set(bbuf.array);
		bbuf.array = newArray6;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize7 = bbuf.array.length << 1;
		if(newSize7 < 128) {
			newSize7 = 128;
		}
		var newArray7 = new Float32Array(newSize7);
		newArray7.set(bbuf.array);
		bbuf.array = newArray7;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize8 = bbuf.array.length << 1;
		if(newSize8 < 128) {
			newSize8 = 128;
		}
		var newArray8 = new Float32Array(newSize8);
		newArray8.set(bbuf.array);
		bbuf.array = newArray8;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize9 = bbuf.array.length << 1;
		if(newSize9 < 128) {
			newSize9 = 128;
		}
		var newArray9 = new Float32Array(newSize9);
		newArray9.set(bbuf.array);
		bbuf.array = newArray9;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize10 = bbuf.array.length << 1;
		if(newSize10 < 128) {
			newSize10 = 128;
		}
		var newArray10 = new Float32Array(newSize10);
		newArray10.set(bbuf.array);
		bbuf.array = newArray10;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize11 = bbuf.array.length << 1;
		if(newSize11 < 128) {
			newSize11 = 128;
		}
		var newArray11 = new Float32Array(newSize11);
		newArray11.set(bbuf.array);
		bbuf.array = newArray11;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize12 = bbuf.array.length << 1;
		if(newSize12 < 128) {
			newSize12 = 128;
		}
		var newArray12 = new Float32Array(newSize12);
		newArray12.set(bbuf.array);
		bbuf.array = newArray12;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize13 = bbuf.array.length << 1;
		if(newSize13 < 128) {
			newSize13 = 128;
		}
		var newArray13 = new Float32Array(newSize13);
		newArray13.set(bbuf.array);
		bbuf.array = newArray13;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize14 = bbuf.array.length << 1;
		if(newSize14 < 128) {
			newSize14 = 128;
		}
		var newArray14 = new Float32Array(newSize14);
		newArray14.set(bbuf.array);
		bbuf.array = newArray14;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize15 = bbuf.array.length << 1;
		if(newSize15 < 128) {
			newSize15 = 128;
		}
		var newArray15 = new Float32Array(newSize15);
		newArray15.set(bbuf.array);
		bbuf.array = newArray15;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize16 = bbuf.array.length << 1;
		if(newSize16 < 128) {
			newSize16 = 128;
		}
		var newArray16 = new Float32Array(newSize16);
		newArray16.set(bbuf.array);
		bbuf.array = newArray16;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize17 = bbuf.array.length << 1;
		if(newSize17 < 128) {
			newSize17 = 128;
		}
		var newArray17 = new Float32Array(newSize17);
		newArray17.set(bbuf.array);
		bbuf.array = newArray17;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize18 = bbuf.array.length << 1;
		if(newSize18 < 128) {
			newSize18 = 128;
		}
		var newArray18 = new Float32Array(newSize18);
		newArray18.set(bbuf.array);
		bbuf.array = newArray18;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize19 = bbuf.array.length << 1;
		if(newSize19 < 128) {
			newSize19 = 128;
		}
		var newArray19 = new Float32Array(newSize19);
		newArray19.set(bbuf.array);
		bbuf.array = newArray19;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize20 = bbuf.array.length << 1;
		if(newSize20 < 128) {
			newSize20 = 128;
		}
		var newArray20 = new Float32Array(newSize20);
		newArray20.set(bbuf.array);
		bbuf.array = newArray20;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize21 = bbuf.array.length << 1;
		if(newSize21 < 128) {
			newSize21 = 128;
		}
		var newArray21 = new Float32Array(newSize21);
		newArray21.set(bbuf.array);
		bbuf.array = newArray21;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize22 = bbuf.array.length << 1;
		if(newSize22 < 128) {
			newSize22 = 128;
		}
		var newArray22 = new Float32Array(newSize22);
		newArray22.set(bbuf.array);
		bbuf.array = newArray22;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize23 = bbuf.array.length << 1;
		if(newSize23 < 128) {
			newSize23 = 128;
		}
		var newArray23 = new Float32Array(newSize23);
		newArray23.set(bbuf.array);
		bbuf.array = newArray23;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize24 = bbuf.array.length << 1;
		if(newSize24 < 128) {
			newSize24 = 128;
		}
		var newArray24 = new Float32Array(newSize24);
		newArray24.set(bbuf.array);
		bbuf.array = newArray24;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize25 = bbuf.array.length << 1;
		if(newSize25 < 128) {
			newSize25 = 128;
		}
		var newArray25 = new Float32Array(newSize25);
		newArray25.set(bbuf.array);
		bbuf.array = newArray25;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize26 = bbuf.array.length << 1;
		if(newSize26 < 128) {
			newSize26 = 128;
		}
		var newArray26 = new Float32Array(newSize26);
		newArray26.set(bbuf.array);
		bbuf.array = newArray26;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize27 = bbuf.array.length << 1;
		if(newSize27 < 128) {
			newSize27 = 128;
		}
		var newArray27 = new Float32Array(newSize27);
		newArray27.set(bbuf.array);
		bbuf.array = newArray27;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize28 = bbuf.array.length << 1;
		if(newSize28 < 128) {
			newSize28 = 128;
		}
		var newArray28 = new Float32Array(newSize28);
		newArray28.set(bbuf.array);
		bbuf.array = newArray28;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize29 = bbuf.array.length << 1;
		if(newSize29 < 128) {
			newSize29 = 128;
		}
		var newArray29 = new Float32Array(newSize29);
		newArray29.set(bbuf.array);
		bbuf.array = newArray29;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize30 = bbuf.array.length << 1;
		if(newSize30 < 128) {
			newSize30 = 128;
		}
		var newArray30 = new Float32Array(newSize30);
		newArray30.set(bbuf.array);
		bbuf.array = newArray30;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize31 = bbuf.array.length << 1;
		if(newSize31 < 128) {
			newSize31 = 128;
		}
		var newArray31 = new Float32Array(newSize31);
		newArray31.set(bbuf.array);
		bbuf.array = newArray31;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	dispose: function() {
		h3d_pass_ScreenFx.prototype.dispose.call(this);
		this.primitive.dispose();
	}
	,__class__: h3d_pass_Border
});
var h3d_pass__$Copy_ArrayCopyShader = function() {
	this.layer__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.ArrayCopyShader"] = h3d_pass__$Copy_ArrayCopyShader;
h3d_pass__$Copy_ArrayCopyShader.__name__ = "h3d.pass._Copy.ArrayCopyShader";
h3d_pass__$Copy_ArrayCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_ArrayCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_layer: function() {
		return this.layer__;
	}
	,set_layer: function(_v) {
		return this.layer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.layer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$Copy_ArrayCopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.layer__ = this.layer__;
		return s;
	}
	,__class__: h3d_pass__$Copy_ArrayCopyShader
	,__properties__: $extend(h3d_shader_ScreenShader.prototype.__properties__,{set_layer:"set_layer",get_layer:"get_layer",set_texture:"set_texture",get_texture:"get_texture"})
});
var h3d_pass_ArrayCopy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_ArrayCopyShader());
};
$hxClasses["h3d.pass.ArrayCopy"] = h3d_pass_ArrayCopy;
h3d_pass_ArrayCopy.__name__ = "h3d.pass.ArrayCopy";
h3d_pass_ArrayCopy.run = function(from,fromLayer,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_ArrayCopy.__id__];
	if(inst == null) {
		inst = new h3d_pass_ArrayCopy();
		engine.resCache.set(h3d_pass_ArrayCopy,inst);
	}
	inst.apply(from,fromLayer,to,blend,pass,layer);
	return;
};
h3d_pass_ArrayCopy.__super__ = h3d_pass_ScreenFx;
h3d_pass_ArrayCopy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,fromLayer,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		this.shader.layer__ = fromLayer;
		if(customPass != null) {
			var old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			var h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		this.shader.layer__ = 0;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_ArrayCopy
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$Copy_CopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_pass__$Copy_CopyShader
	,__properties__: $extend(h3d_shader_ScreenShader.prototype.__properties__,{set_texture:"set_texture",get_texture:"get_texture"})
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass,layer);
	return;
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			var old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			var h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d_pass__$CubeCopy_CubeCopyShader;
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$CubeCopy_CubeCopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.mat__ = this.mat__;
		return s;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
	,__properties__: $extend(h3d_shader_ScreenShader.prototype.__properties__,{set_mat:"set_mat",get_mat:"get_mat",set_texture:"set_texture",get_texture:"get_texture"})
});
var h3d_pass_CubeCopy = function() {
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,0,1,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_pass__$CubeCopy_CubeCopyShader());
};
$hxClasses["h3d.pass.CubeCopy"] = h3d_pass_CubeCopy;
h3d_pass_CubeCopy.__name__ = "h3d.pass.CubeCopy";
h3d_pass_CubeCopy.run = function(from,to,blend,pass) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_CubeCopy.__id__];
	if(inst == null) {
		inst = new h3d_pass_CubeCopy();
		engine.resCache.set(h3d_pass_CubeCopy,inst);
	}
	inst.apply(from,to,blend,pass);
	return;
};
h3d_pass_CubeCopy.__super__ = h3d_pass_ScreenFx;
h3d_pass_CubeCopy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass) {
		this.shader.texture__ = from;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(to != null) {
				this.get_engine().pushTarget(to,i);
			}
			this.shader.mat__ = this.cubeDir[i];
			if(customPass != null) {
				var old = this.pass;
				this.pass = customPass;
				if(blend != null) {
					this.pass.setBlendMode(blend);
				}
				var h = this.shaders;
				while(h.next != null) h = h.next;
				h.next = this.pass.shaders;
				this.render();
				this.pass = old;
				h.next = null;
			} else {
				this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
				this.render();
			}
			if(to != null) {
				this.get_engine().popTarget();
			}
		}
		this.shader.texture__ = null;
	}
	,__class__: h3d_pass_CubeCopy
});
var h3d_pass_Default = function(name) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	h3d_pass_Base.call(this,name);
	this.manager = new h3d_pass_ShaderManager(this.getOutputs());
	this.initGlobals();
};
$hxClasses["h3d.pass.Default"] = h3d_pass_Default;
h3d_pass_Default.__name__ = "h3d.pass.Default";
h3d_pass_Default.__super__ = h3d_pass_Base;
h3d_pass_Default.prototype = $extend(h3d_pass_Base.prototype,{
	get_globals: function() {
		return this.manager.globals;
	}
	,getOutputs: function() {
		return [hxsl_Output.Value("output.color")];
	}
	,compileShader: function(p) {
		var o = new h3d_pass_PassObject();
		o.pass = p;
		this.setupShaders(new h3d_pass_PassList(o));
		return this.manager.compileShaders(o.shaders,p.batchMode);
	}
	,processShaders: function(p,shaders) {
		var p1 = this.ctx.extraShaders;
		while(p1 != null) {
			shaders = this.ctx.allocShaderList(p1.s,shaders);
			p1 = p1.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.manager.compileShaders(shaders,p.pass.batchMode);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			if(t == null) {
				p.texture = 0;
			} else {
				var _this = this.manager;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw new js__$Boot_HaxeError("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					var _g = t.type;
					var t2;
					if(_g._hx_index == 17) {
						var _g1 = _g.size;
						t2 = true;
					} else {
						t2 = false;
					}
					t1 = t2 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw new js__$Boot_HaxeError("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,log: function(str) {
		var _this = this.ctx.engine.driver;
		if(_this.logEnable) {
			_this.logImpl(str);
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
		this.setGlobals();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		this.ctx.currentManager = this.manager;
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g2_o = passes.current;
		while(_g2_o != null) {
			var tmp = _g2_o;
			_g2_o = _g2_o.next;
			var p = tmp;
			var v = p.obj.absPos;
			this.manager.globals.map.h[this.globalModelView_id] = v;
			if(p.shader.globals.h.hasOwnProperty(this.globalModelViewInverse_id)) {
				var v1 = p.obj.getInvPos();
				this.manager.globals.map.h[this.globalModelViewInverse_id] = v1;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				this.ctx.engine.selectShader(p.shader);
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d_shader_Buffers(p.shader);
				} else {
					var s = p.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.manager.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,get_cameraView: function() {
		return this.manager.globals.map.h[this.cameraView_id];
	}
	,set_cameraView: function(v) {
		this.manager.globals.map.h[this.cameraView_id] = v;
		return v;
	}
	,get_cameraNear: function() {
		return this.manager.globals.map.h[this.cameraNear_id];
	}
	,set_cameraNear: function(v) {
		this.manager.globals.map.h[this.cameraNear_id] = v;
		return v;
	}
	,get_cameraFar: function() {
		return this.manager.globals.map.h[this.cameraFar_id];
	}
	,set_cameraFar: function(v) {
		this.manager.globals.map.h[this.cameraFar_id] = v;
		return v;
	}
	,get_cameraProj: function() {
		return this.manager.globals.map.h[this.cameraProj_id];
	}
	,set_cameraProj: function(v) {
		this.manager.globals.map.h[this.cameraProj_id] = v;
		return v;
	}
	,get_cameraPos: function() {
		return this.manager.globals.map.h[this.cameraPos_id];
	}
	,set_cameraPos: function(v) {
		this.manager.globals.map.h[this.cameraPos_id] = v;
		return v;
	}
	,get_cameraProjDiag: function() {
		return this.manager.globals.map.h[this.cameraProjDiag_id];
	}
	,set_cameraProjDiag: function(v) {
		this.manager.globals.map.h[this.cameraProjDiag_id] = v;
		return v;
	}
	,get_cameraProjFlip: function() {
		return this.manager.globals.map.h[this.cameraProjFlip_id];
	}
	,set_cameraProjFlip: function(v) {
		this.manager.globals.map.h[this.cameraProjFlip_id] = v;
		return v;
	}
	,get_cameraViewProj: function() {
		return this.manager.globals.map.h[this.cameraViewProj_id];
	}
	,set_cameraViewProj: function(v) {
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
		return v;
	}
	,get_cameraInverseViewProj: function() {
		return this.manager.globals.map.h[this.cameraInverseViewProj_id];
	}
	,set_cameraInverseViewProj: function(v) {
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v;
		return v;
	}
	,get_globalTime: function() {
		return this.manager.globals.map.h[this.globalTime_id];
	}
	,set_globalTime: function(v) {
		this.manager.globals.map.h[this.globalTime_id] = v;
		return v;
	}
	,get_pixelSize: function() {
		return this.manager.globals.map.h[this.pixelSize_id];
	}
	,set_pixelSize: function(v) {
		this.manager.globals.map.h[this.pixelSize_id] = v;
		return v;
	}
	,get_globalModelView: function() {
		return this.manager.globals.map.h[this.globalModelView_id];
	}
	,set_globalModelView: function(v) {
		this.manager.globals.map.h[this.globalModelView_id] = v;
		return v;
	}
	,get_globalModelViewInverse: function() {
		return this.manager.globals.map.h[this.globalModelViewInverse_id];
	}
	,set_globalModelViewInverse: function(v) {
		this.manager.globals.map.h[this.globalModelViewInverse_id] = v;
		return v;
	}
	,initGlobals: function() {
		var this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		var this2 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this2;
		var this3 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this3;
		var this4 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this4;
		var this5 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this5;
		var this6 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this6;
		var this7 = hxsl_Globals.allocID("camera.projFlip");
		this.cameraProjFlip_id = this7;
		var this8 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this8;
		var this9 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this9;
		var this10 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this10;
		var this11 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this11;
		var this12 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this12;
		var this13 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this13;
	}
	,setGlobals: function() {
		var v = this.ctx.camera.mcam;
		this.manager.globals.map.h[this.cameraView_id] = v;
		var v1 = this.ctx.camera.zNear;
		this.manager.globals.map.h[this.cameraNear_id] = v1;
		var v2 = this.ctx.camera.zFar;
		this.manager.globals.map.h[this.cameraFar_id] = v2;
		var v3 = this.ctx.camera.mproj;
		this.manager.globals.map.h[this.cameraProj_id] = v3;
		var v4 = this.ctx.camera.pos;
		this.manager.globals.map.h[this.cameraPos_id] = v4;
		var v5 = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.h[this.cameraProjDiag_id] = v5;
		var v6 = this.ctx.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.ctx.engine.getCurrentTarget() != null ? -1 : 1;
		this.manager.globals.map.h[this.cameraProjFlip_id] = v6;
		var v7 = this.ctx.camera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v7;
		var v8 = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v8;
		var v9 = this.ctx.time;
		this.manager.globals.map.h[this.globalTime_id] = v9;
		var v10 = new h3d_Vector(2 / this.ctx.engine.width,2 / this.ctx.engine.height);
		this.manager.globals.map.h[this.pixelSize_id] = v10;
	}
	,__class__: h3d_pass_Default
	,__properties__: {set_globalModelViewInverse:"set_globalModelViewInverse",get_globalModelViewInverse:"get_globalModelViewInverse",set_globalModelView:"set_globalModelView",get_globalModelView:"get_globalModelView",set_pixelSize:"set_pixelSize",get_pixelSize:"get_pixelSize",set_globalTime:"set_globalTime",get_globalTime:"get_globalTime",set_cameraInverseViewProj:"set_cameraInverseViewProj",get_cameraInverseViewProj:"get_cameraInverseViewProj",set_cameraViewProj:"set_cameraViewProj",get_cameraViewProj:"get_cameraViewProj",set_cameraProjFlip:"set_cameraProjFlip",get_cameraProjFlip:"get_cameraProjFlip",set_cameraProjDiag:"set_cameraProjDiag",get_cameraProjDiag:"get_cameraProjDiag",set_cameraPos:"set_cameraPos",get_cameraPos:"get_cameraPos",set_cameraProj:"set_cameraProj",get_cameraProj:"get_cameraProj",set_cameraFar:"set_cameraFar",get_cameraFar:"get_cameraFar",set_cameraNear:"set_cameraNear",get_cameraNear:"get_cameraNear",set_cameraView:"set_cameraView",get_cameraView:"get_cameraView",get_globals:"get_globals"}
});
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Default.call(this,"shadow");
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
$hxClasses["h3d.pass.Shadows"] = h3d_pass_Shadows;
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Default;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Default.prototype,{
	set_mode: function(m) {
		if(m != h3d_pass_RenderMode.None) {
			throw new js__$Boot_HaxeError("Shadow mode " + Std.string(m) + " not supported for " + Std.string(this.light));
		}
		return this.mode = m;
	}
	,set_enabled: function(b) {
		return this.enabled = b;
	}
	,set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,dispose: function() {
		h3d_pass_Default.prototype.dispose.call(this);
		this.blur.dispose();
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,getShadowTex: function() {
		return null;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,loadStaticData: function(bytes) {
		return false;
	}
	,saveStaticData: function() {
		return null;
	}
	,computeStatic: function(passes) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				return true;
			case 3:
				var tmp1;
				if(this.staticTexture != null) {
					var _this1 = this.staticTexture;
					tmp1 = _this1.t == null && _this1.realloc == null;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				return true;
			}
		} else {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			case 2:
				return false;
			case 3:
				var head1 = null;
				var prev1 = null;
				var disc1 = passes.discarded;
				var discQueue1 = passes.lastDisc;
				var cur1 = passes.current;
				while(cur1 != null) {
					if(cur1.pass.isStatic == true) {
						if(head1 == null) {
							prev1 = cur1;
							head1 = prev1;
						} else {
							prev1.next = cur1;
							prev1 = cur1;
						}
					} else if(disc1 == null) {
						discQueue1 = cur1;
						disc1 = discQueue1;
					} else {
						discQueue1.next = cur1;
						discQueue1 = cur1;
					}
					cur1 = cur1.next;
				}
				if(prev1 != null) {
					prev1.next = null;
				}
				if(discQueue1 != null) {
					discQueue1.next = null;
				}
				passes.current = head1;
				passes.discarded = disc1;
				passes.lastDisc = discQueue1;
				return true;
			}
		}
	}
	,cullPasses: function(passes,f) {
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
	}
	,__class__: h3d_pass_Shadows
	,__properties__: $extend(h3d_pass_Default.prototype.__properties__,{set_size:"set_size",set_mode:"set_mode",set_enabled:"set_enabled"})
});
var h3d_pass_DirShadowMap = function(light) {
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
	this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
	if(!this.customDepth) {
		this.depth = h3d_mat_DepthBuffer.getDefault();
	}
};
$hxClasses["h3d.pass.DirShadowMap"] = h3d_pass_DirShadowMap;
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_enabled: function(b) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = b && this.mode != h3d_pass_RenderMode.None;
		return this.enabled = b;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,dispose: function() {
		h3d_pass_Shadows.prototype.dispose.call(this);
		if(this.customDepth && this.depth != null) {
			this.depth.dispose();
		}
		this.border.dispose();
	}
	,getShadowTex: function() {
		return this.dshader.shadowMap__;
	}
	,calcShadowBounds: function(camera) {
		var bounds = camera.orthoBounds;
		var mtmp = new h3d_Matrix();
		this.ctx.scene.iterVisibleMeshes(function(m) {
			if(m.primitive == null || !m.material.castShadows) {
				return;
			}
			var b = m.primitive.getBounds();
			if(b.xMin > b.xMax) {
				return;
			}
			var tmp = m.getAbsPos();
			mtmp.multiply3x4(tmp,camera.mcam);
			var x = b.xMin;
			var y = b.yMin;
			var z = b.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x1 = b.xMin;
			var y1 = b.yMin;
			var z1 = b.zMax;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p_x1 = x1;
			var p_y1 = y1;
			var p_z1 = z1;
			var px1 = p_x1 * mtmp._11 + p_y1 * mtmp._21 + p_z1 * mtmp._31 + mtmp._41;
			var py1 = p_x1 * mtmp._12 + p_y1 * mtmp._22 + p_z1 * mtmp._32 + mtmp._42;
			var pz1 = p_x1 * mtmp._13 + p_y1 * mtmp._23 + p_z1 * mtmp._33 + mtmp._43;
			p_x1 = px1;
			p_y1 = py1;
			p_z1 = pz1;
			if(p_x1 < bounds.xMin) {
				bounds.xMin = p_x1;
			}
			if(p_x1 > bounds.xMax) {
				bounds.xMax = p_x1;
			}
			if(p_y1 < bounds.yMin) {
				bounds.yMin = p_y1;
			}
			if(p_y1 > bounds.yMax) {
				bounds.yMax = p_y1;
			}
			if(p_z1 < bounds.zMin) {
				bounds.zMin = p_z1;
			}
			if(p_z1 > bounds.zMax) {
				bounds.zMax = p_z1;
			}
			var x2 = b.xMin;
			var y2 = b.yMax;
			var z2 = b.zMin;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p_x2 = x2;
			var p_y2 = y2;
			var p_z2 = z2;
			var px2 = p_x2 * mtmp._11 + p_y2 * mtmp._21 + p_z2 * mtmp._31 + mtmp._41;
			var py2 = p_x2 * mtmp._12 + p_y2 * mtmp._22 + p_z2 * mtmp._32 + mtmp._42;
			var pz2 = p_x2 * mtmp._13 + p_y2 * mtmp._23 + p_z2 * mtmp._33 + mtmp._43;
			p_x2 = px2;
			p_y2 = py2;
			p_z2 = pz2;
			if(p_x2 < bounds.xMin) {
				bounds.xMin = p_x2;
			}
			if(p_x2 > bounds.xMax) {
				bounds.xMax = p_x2;
			}
			if(p_y2 < bounds.yMin) {
				bounds.yMin = p_y2;
			}
			if(p_y2 > bounds.yMax) {
				bounds.yMax = p_y2;
			}
			if(p_z2 < bounds.zMin) {
				bounds.zMin = p_z2;
			}
			if(p_z2 > bounds.zMax) {
				bounds.zMax = p_z2;
			}
			var x3 = b.xMin;
			var y3 = b.yMax;
			var z3 = b.zMax;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var p_x3 = x3;
			var p_y3 = y3;
			var p_z3 = z3;
			var px3 = p_x3 * mtmp._11 + p_y3 * mtmp._21 + p_z3 * mtmp._31 + mtmp._41;
			var py3 = p_x3 * mtmp._12 + p_y3 * mtmp._22 + p_z3 * mtmp._32 + mtmp._42;
			var pz3 = p_x3 * mtmp._13 + p_y3 * mtmp._23 + p_z3 * mtmp._33 + mtmp._43;
			p_x3 = px3;
			p_y3 = py3;
			p_z3 = pz3;
			if(p_x3 < bounds.xMin) {
				bounds.xMin = p_x3;
			}
			if(p_x3 > bounds.xMax) {
				bounds.xMax = p_x3;
			}
			if(p_y3 < bounds.yMin) {
				bounds.yMin = p_y3;
			}
			if(p_y3 > bounds.yMax) {
				bounds.yMax = p_y3;
			}
			if(p_z3 < bounds.zMin) {
				bounds.zMin = p_z3;
			}
			if(p_z3 > bounds.zMax) {
				bounds.zMax = p_z3;
			}
			var x4 = b.xMax;
			var y4 = b.yMin;
			var z4 = b.zMin;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var p_x4 = x4;
			var p_y4 = y4;
			var p_z4 = z4;
			var px4 = p_x4 * mtmp._11 + p_y4 * mtmp._21 + p_z4 * mtmp._31 + mtmp._41;
			var py4 = p_x4 * mtmp._12 + p_y4 * mtmp._22 + p_z4 * mtmp._32 + mtmp._42;
			var pz4 = p_x4 * mtmp._13 + p_y4 * mtmp._23 + p_z4 * mtmp._33 + mtmp._43;
			p_x4 = px4;
			p_y4 = py4;
			p_z4 = pz4;
			if(p_x4 < bounds.xMin) {
				bounds.xMin = p_x4;
			}
			if(p_x4 > bounds.xMax) {
				bounds.xMax = p_x4;
			}
			if(p_y4 < bounds.yMin) {
				bounds.yMin = p_y4;
			}
			if(p_y4 > bounds.yMax) {
				bounds.yMax = p_y4;
			}
			if(p_z4 < bounds.zMin) {
				bounds.zMin = p_z4;
			}
			if(p_z4 > bounds.zMax) {
				bounds.zMax = p_z4;
			}
			var x5 = b.xMax;
			var y5 = b.yMin;
			var z5 = b.zMax;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var p_x5 = x5;
			var p_y5 = y5;
			var p_z5 = z5;
			var px5 = p_x5 * mtmp._11 + p_y5 * mtmp._21 + p_z5 * mtmp._31 + mtmp._41;
			var py5 = p_x5 * mtmp._12 + p_y5 * mtmp._22 + p_z5 * mtmp._32 + mtmp._42;
			var pz5 = p_x5 * mtmp._13 + p_y5 * mtmp._23 + p_z5 * mtmp._33 + mtmp._43;
			p_x5 = px5;
			p_y5 = py5;
			p_z5 = pz5;
			if(p_x5 < bounds.xMin) {
				bounds.xMin = p_x5;
			}
			if(p_x5 > bounds.xMax) {
				bounds.xMax = p_x5;
			}
			if(p_y5 < bounds.yMin) {
				bounds.yMin = p_y5;
			}
			if(p_y5 > bounds.yMax) {
				bounds.yMax = p_y5;
			}
			if(p_z5 < bounds.zMin) {
				bounds.zMin = p_z5;
			}
			if(p_z5 > bounds.zMax) {
				bounds.zMax = p_z5;
			}
			var x6 = b.xMax;
			var y6 = b.yMax;
			var z6 = b.zMin;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var p_x6 = x6;
			var p_y6 = y6;
			var p_z6 = z6;
			var px6 = p_x6 * mtmp._11 + p_y6 * mtmp._21 + p_z6 * mtmp._31 + mtmp._41;
			var py6 = p_x6 * mtmp._12 + p_y6 * mtmp._22 + p_z6 * mtmp._32 + mtmp._42;
			var pz6 = p_x6 * mtmp._13 + p_y6 * mtmp._23 + p_z6 * mtmp._33 + mtmp._43;
			p_x6 = px6;
			p_y6 = py6;
			p_z6 = pz6;
			if(p_x6 < bounds.xMin) {
				bounds.xMin = p_x6;
			}
			if(p_x6 > bounds.xMax) {
				bounds.xMax = p_x6;
			}
			if(p_y6 < bounds.yMin) {
				bounds.yMin = p_y6;
			}
			if(p_y6 > bounds.yMax) {
				bounds.yMax = p_y6;
			}
			if(p_z6 < bounds.zMin) {
				bounds.zMin = p_z6;
			}
			if(p_z6 > bounds.zMax) {
				bounds.zMax = p_z6;
			}
			var x7 = b.xMax;
			var y7 = b.yMax;
			var z7 = b.zMax;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var p_x7 = x7;
			var p_y7 = y7;
			var p_z7 = z7;
			var px7 = p_x7 * mtmp._11 + p_y7 * mtmp._21 + p_z7 * mtmp._31 + mtmp._41;
			var py7 = p_x7 * mtmp._12 + p_y7 * mtmp._22 + p_z7 * mtmp._32 + mtmp._42;
			var pz7 = p_x7 * mtmp._13 + p_y7 * mtmp._23 + p_z7 * mtmp._33 + mtmp._43;
			p_x7 = px7;
			p_y7 = py7;
			p_z7 = pz7;
			if(p_x7 < bounds.xMin) {
				bounds.xMin = p_x7;
			}
			if(p_x7 > bounds.xMax) {
				bounds.xMax = p_x7;
			}
			if(p_y7 < bounds.yMin) {
				bounds.yMin = p_y7;
			}
			if(p_y7 > bounds.yMax) {
				bounds.yMax = p_y7;
			}
			if(p_z7 < bounds.zMin) {
				bounds.zMin = p_z7;
			}
			if(p_z7 > bounds.zMax) {
				bounds.zMax = p_z7;
			}
		});
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var _g = 0;
			var _g1 = this.ctx.camera.getFrustumCorners();
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				var m1 = camera.mcam;
				var px8 = pt.x * m1._11 + pt.y * m1._21 + pt.z * m1._31 + pt.w * m1._41;
				var py8 = pt.x * m1._12 + pt.y * m1._22 + pt.z * m1._32 + pt.w * m1._42;
				var pz8 = pt.x * m1._13 + pt.y * m1._23 + pt.z * m1._33 + pt.w * m1._43;
				var pw = pt.x * m1._14 + pt.y * m1._24 + pt.z * m1._34 + pt.w * m1._44;
				pt.x = px8;
				pt.y = py8;
				pt.z = pz8;
				pt.w = pw;
				var x8 = pt.x;
				var y8 = pt.y;
				var z8 = pt.z;
				if(x8 < cameraBounds.xMin) {
					cameraBounds.xMin = x8;
				}
				if(x8 > cameraBounds.xMax) {
					cameraBounds.xMax = x8;
				}
				if(y8 < cameraBounds.yMin) {
					cameraBounds.yMin = y8;
				}
				if(y8 > cameraBounds.yMax) {
					cameraBounds.yMax = y8;
				}
				if(z8 < cameraBounds.zMin) {
					cameraBounds.zMin = z8;
				}
				if(z8 > cameraBounds.zMax) {
					cameraBounds.zMax = z8;
				}
			}
			cameraBounds.zMin = bounds.zMin;
			bounds.intersection(bounds,cameraBounds);
		}
		bounds.scaleCenter(1.01);
	}
	,setGlobals: function() {
		h3d_pass_Shadows.prototype.setGlobals.call(this);
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			this.calcShadowBounds(this.lightCamera);
			this.lightCamera.update();
		}
		var v = this.getShadowProj();
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this1 = this.dshader;
		_this1.constModified = true;
		_this1.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this2 = this.dshader;
		_this2.constModified = true;
		_this2.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this3 = this.dshader;
		_this3.constModified = true;
		_this3.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this4 = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this4.x = x;
		_this4.y = y;
		_this4.z = 0.;
		_this4.w = 1.;
		this.dshader.pcfScale__ = this.pcfScale;
		var _this5 = this.dshader;
		_this5.constModified = true;
		_this5.pcfQuality__ = this.pcfQuality;
	}
	,saveStaticData: function() {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static) {
			return null;
		}
		if(this.staticTexture == null) {
			throw new js__$Boot_HaxeError("Data not computed");
		}
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels().bytes,9);
		var buffer = new haxe_io_BytesBuffer();
		buffer.addInt32(this.staticTexture.width);
		buffer.addFloat(this.lightCamera.pos.x);
		buffer.addFloat(this.lightCamera.pos.y);
		buffer.addFloat(this.lightCamera.pos.z);
		buffer.addFloat(this.lightCamera.target.x);
		buffer.addFloat(this.lightCamera.target.y);
		buffer.addFloat(this.lightCamera.target.z);
		buffer.addFloat(this.lightCamera.orthoBounds.xMin);
		buffer.addFloat(this.lightCamera.orthoBounds.yMin);
		buffer.addFloat(this.lightCamera.orthoBounds.zMin);
		buffer.addFloat(this.lightCamera.orthoBounds.xMax);
		buffer.addFloat(this.lightCamera.orthoBounds.yMax);
		buffer.addFloat(this.lightCamera.orthoBounds.zMax);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		return buffer.getBytes();
	}
	,loadStaticData: function(bytes) {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static || bytes == null) {
			return false;
		}
		var buffer = new haxe_io_BytesInput(bytes);
		var size = buffer.readInt32();
		if(size != this.size) {
			return false;
		}
		this.lightCamera.pos.x = buffer.readFloat();
		this.lightCamera.pos.y = buffer.readFloat();
		this.lightCamera.pos.z = buffer.readFloat();
		this.lightCamera.target.x = buffer.readFloat();
		this.lightCamera.target.y = buffer.readFloat();
		this.lightCamera.target.z = buffer.readFloat();
		this.lightCamera.orthoBounds.xMin = buffer.readFloat();
		this.lightCamera.orthoBounds.yMin = buffer.readFloat();
		this.lightCamera.orthoBounds.zMin = buffer.readFloat();
		this.lightCamera.orthoBounds.xMax = buffer.readFloat();
		this.lightCamera.orthoBounds.yMax = buffer.readFloat();
		this.lightCamera.orthoBounds.zMax = buffer.readFloat();
		this.lightCamera.update();
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
		this.staticTexture = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.Target],this.format);
		this.staticTexture.uploadPixels(pixels);
		this.staticTexture.name = "staticTexture";
		this.staticTexture.preventAutoDispose();
		this.syncShader(this.staticTexture);
		return true;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col1 = cur.obj.cullingCollider;
			var tmp;
			if(col1 == null) {
				tmp = true;
			} else {
				if(col1 != prevCollider) {
					prevCollider = col1;
					prevResult = f(col1);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
			} else {
				var _this1 = this.lightCamera.target;
				var x1 = ldir.x;
				var y1 = ldir.y;
				var z1 = ldir.z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				_this1.x = x1;
				_this1.y = y1;
				_this1.z = z1;
				_this1.w = 1.;
				this.lightCamera.target.normalize();
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this2 = this.lightCamera.pos;
			_this2.x = ct.x;
			_this2.y = ct.y;
			_this2.z = ct.z;
			_this2.w = ct.w;
			this.lightCamera.update();
		}
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = texture;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			texture = merge;
		}
		if(this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !this.ctx.computingStatic)) {
			this.blur.apply(this.ctx,texture);
		}
		this.syncShader(texture);
	}
	,computeStatic: function(passes) {
		if(this.mode != h3d_pass_RenderMode.Static && this.mode != h3d_pass_RenderMode.Mixed) {
			return;
		}
		this.draw(passes);
		var texture = this.dshader.shadowMap__;
		var old = this.staticTexture;
		this.staticTexture = texture.clone();
		this.staticTexture.name = "StaticDirShadowMap";
		this.staticTexture.preventAutoDispose();
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = this.staticTexture;
		if(old != null) {
			old.dispose();
		}
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_Vector();
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d_pass_DefaultShadowMap;
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.setGlobalID(this.shadowMapId,{ texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R});
		this.ctx.setGlobalID(this.shadowProjId,this.getShadowProj());
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass__$HardwarePick_FixedColor = function() {
	this.viewport__ = new h3d_Vector();
	this.colorID__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._HardwarePick.FixedColor"] = h3d_pass__$HardwarePick_FixedColor;
h3d_pass__$HardwarePick_FixedColor.__name__ = "h3d.pass._HardwarePick.FixedColor";
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
h3d_pass__$HardwarePick_FixedColor.prototype = $extend(hxsl_Shader.prototype,{
	get_colorID: function() {
		return this.colorID__;
	}
	,set_colorID: function(_v) {
		return this.colorID__ = _v;
	}
	,get_viewport: function() {
		return this.viewport__;
	}
	,set_viewport: function(_v) {
		return this.viewport__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$HardwarePick_FixedColor.prototype);
		s.shader = this.shader;
		s.colorID__ = this.colorID__;
		s.viewport__ = this.viewport__;
		return s;
	}
	,__class__: h3d_pass__$HardwarePick_FixedColor
	,__properties__: {set_viewport:"set_viewport",get_viewport:"get_viewport",set_colorID:"set_colorID",get_colorID:"get_colorID"}
});
var h3d_pass_HardwarePick = function() {
	this.pickedIndex = -1;
	this.fixedColor = new h3d_pass__$HardwarePick_FixedColor();
	h3d_pass_Default.call(this,"hwpick");
	this.material = new h3d_mat_Pass("");
	var _this = this.material;
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	_this.set_blendSrc(src);
	_this.set_blendAlphaSrc(src);
	_this.set_blendDst(dst);
	_this.set_blendAlphaDst(dst);
	this.texOut = new h3d_mat_Texture(3,3,[h3d_mat_TextureFlags.Target]);
	this.texOut.depthBuffer = new h3d_mat_DepthBuffer(3,3);
};
$hxClasses["h3d.pass.HardwarePick"] = h3d_pass_HardwarePick;
h3d_pass_HardwarePick.__name__ = "h3d.pass.HardwarePick";
h3d_pass_HardwarePick.__super__ = h3d_pass_Default;
h3d_pass_HardwarePick.prototype = $extend(h3d_pass_Default.prototype,{
	dispose: function() {
		h3d_pass_Default.prototype.dispose.call(this);
		this.texOut.dispose();
		this.texOut.depthBuffer.dispose();
	}
	,getOutputs: function() {
		return [hxsl_Output.Value("output.colorID")];
	}
	,drawObject: function(p) {
		h3d_pass_Default.prototype.drawObject.call(this,p);
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
	}
	,nextID: function() {
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
	}
	,draw: function(passes,sort) {
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var cur = tmp;
			var mask = 268435392;
			cur.pass.bits &= ~mask;
			cur.pass.bits |= this.material.bits & mask;
		}
		this.colorID = 0;
		var _this = this.fixedColor.colorID__;
		var c = -16777216 | ++this.colorID;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		var _this1 = this.fixedColor.viewport__;
		var x = -(this.pickX * 2 / this.ctx.engine.width - 1);
		var y = this.pickY * 2 / this.ctx.engine.height - 1;
		var z = this.ctx.engine.width / this.texOut.width;
		var w = this.ctx.engine.height / this.texOut.height;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = z;
		_this1.w = w;
		this.ctx.engine.pushTarget(this.texOut);
		this.ctx.engine.clear(-16777216,1);
		this.ctx.extraShaders = this.ctx.allocShaderList(this.fixedColor);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.extraShaders = null;
		this.ctx.engine.popTarget();
		var _g1_o = passes.current;
		while(_g1_o != null) {
			var tmp1 = _g1_o;
			_g1_o = _g1_o.next;
			var cur1 = tmp1;
			cur1.pass.set_blendSrc(cur1.pass.blendSrc);
			cur1.pass.set_blendDst(cur1.pass.blendDst);
			cur1.pass.set_blendOp(cur1.pass.blendOp);
			cur1.pass.set_blendAlphaSrc(cur1.pass.blendAlphaSrc);
			cur1.pass.set_blendAlphaDst(cur1.pass.blendAlphaDst);
			cur1.pass.set_blendAlphaOp(cur1.pass.blendAlphaOp);
			cur1.pass.colorMask = cur1.pass.colorMask;
		}
		this.ctx.engine.clear(null,null,0);
		var pix = this.texOut.capturePixels();
		this.pickedIndex = (pix.getPixel(pix.width >> 1,pix.height >> 1) & 16777215) - 1;
	}
	,__class__: h3d_pass_HardwarePick
});
var h3d_pass_PassListIterator = function(o) {
	this.o = o;
};
$hxClasses["h3d.pass.PassListIterator"] = h3d_pass_PassListIterator;
h3d_pass_PassListIterator.__name__ = "h3d.pass.PassListIterator";
h3d_pass_PassListIterator.prototype = {
	hasNext: function() {
		return this.o != null;
	}
	,next: function() {
		var tmp = this.o;
		this.o = this.o.next;
		return tmp;
	}
	,__class__: h3d_pass_PassListIterator
};
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
$hxClasses["h3d.pass.PassList"] = h3d_pass_PassList;
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	init: function(pass) {
		this.current = pass;
		this.discarded = this.lastDisc = null;
	}
	,reset: function() {
		if(this.discarded != null) {
			this.lastDisc.next = this.current;
			this.current = this.discarded;
			this.discarded = this.lastDisc = null;
		}
	}
	,save: function() {
		return this.lastDisc;
	}
	,load: function(p) {
		if(this.lastDisc != p) {
			this.lastDisc.next = this.current;
			if(p == null) {
				this.current = this.discarded;
				this.discarded = null;
			} else {
				this.current = p.next;
				p.next = null;
			}
			this.lastDisc = p;
		}
	}
	,isEmpty: function() {
		return this.current == null;
	}
	,clear: function() {
		if(this.current == null) {
			return;
		}
		if(this.discarded == null) {
			this.discarded = this.current;
		} else {
			this.lastDisc.next = this.current;
		}
		var p = this.current;
		while(p.next != null) p = p.next;
		this.lastDisc = p;
		this.current = null;
	}
	,sort: function(f) {
		var list = this.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || f(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.current = tmp;
	}
	,filter: function(f) {
		var head = null;
		var prev = null;
		var disc = this.discarded;
		var discQueue = this.lastDisc;
		var cur = this.current;
		while(cur != null) {
			if(f(cur)) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		this.current = head;
		this.discarded = disc;
		this.lastDisc = discQueue;
	}
	,iterator: function() {
		return new h3d_pass_PassListIterator(this.current);
	}
	,getFiltered: function() {
		return new h3d_pass_PassListIterator(this.discarded);
	}
	,__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.PassObject"] = h3d_pass_PassObject;
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	__class__: h3d_pass_PassObject
};
var h3d_pass_ShaderManager = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.globals = new hxsl_Globals();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.ShaderManager"] = h3d_pass_ShaderManager;
h3d_pass_ShaderManager.__name__ = "h3d.pass.ShaderManager";
h3d_pass_ShaderManager.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _g1 = type.t;
			var n = type.size;
			var v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(n) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return n;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m1 = v;
			out[pos++] = m1._11;
			out[pos++] = m1._21;
			out[pos++] = m1._31;
			out[pos++] = m1._41;
			out[pos++] = m1._12;
			out[pos++] = m1._22;
			out[pos++] = m1._32;
			out[pos++] = m1._42;
			out[pos++] = m1._13;
			out[pos++] = m1._23;
			out[pos++] = m1._33;
			out[pos++] = m1._43;
			out[pos++] = m1._14;
			out[pos++] = m1._24;
			out[pos++] = m1._34;
			out[pos++] = m1._44;
			return 16;
		case 8:
			var m2 = v;
			out[pos++] = m2._11;
			out[pos++] = m2._21;
			out[pos++] = m2._31;
			out[pos++] = m2._41;
			out[pos++] = m2._12;
			out[pos++] = m2._22;
			out[pos++] = m2._32;
			out[pos++] = m2._42;
			out[pos++] = m2._13;
			out[pos++] = m2._23;
			out[pos++] = m2._33;
			out[pos++] = m2._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _g4 = type.size;
			var _g3 = type.t;
			switch(_g3._hx_index) {
			case 3:
				if(_g4._hx_index == 0) {
					var len = _g4.v;
					var v2 = v;
					var size = 0;
					var count = v2.length < len ? v2.length : len;
					var _g2 = 0;
					var _g11 = count;
					while(_g2 < _g11) {
						var i = _g2++;
						out[pos++] = v2[i];
					}
					return len;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g3.size == 4) {
					if(_g3.t._hx_index == 1) {
						if(_g4._hx_index == 0) {
							var len1 = _g4.v;
							var v3 = v;
							var _g5 = 0;
							var _g12 = len1;
							while(_g5 < _g12) {
								var i1 = _g5++;
								var n1 = v3[i1];
								if(n1 == null) {
									break;
								}
								out[pos++] = n1.x;
								out[pos++] = n1.y;
								out[pos++] = n1.z;
								out[pos++] = n1.w;
							}
							return len1 * 4;
						} else {
							throw new js__$Boot_HaxeError("assert " + Std.string(type));
						}
					} else if(_g4._hx_index == 0) {
						var len2 = _g4.v;
						var t = _g3;
						var v4 = v;
						var size1 = 0;
						var _g6 = 0;
						var _g13 = len2;
						while(_g6 < _g13) {
							var i2 = _g6++;
							var n2 = v4[i2];
							if(n2 == null) {
								break;
							}
							size1 = this.fillRec(n2,t,out,pos);
							pos += size1;
						}
						return len2 * size1;
					} else {
						throw new js__$Boot_HaxeError("assert " + Std.string(type));
					}
				} else if(_g4._hx_index == 0) {
					var len3 = _g4.v;
					var t1 = _g3;
					var v5 = v;
					var size2 = 0;
					var _g7 = 0;
					var _g14 = len3;
					while(_g7 < _g14) {
						var i3 = _g7++;
						var n3 = v5[i3];
						if(n3 == null) {
							break;
						}
						size2 = this.fillRec(n3,t1,out,pos);
						pos += size2;
					}
					return len3 * size2;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g4._hx_index == 0) {
					var len4 = _g4.v;
					var v6 = v;
					var _g8 = 0;
					var _g15 = len4;
					while(_g8 < _g15) {
						var i4 = _g8++;
						var m3 = v6[i4];
						if(m3 == null) {
							break;
						}
						out[pos++] = m3._11;
						out[pos++] = m3._21;
						out[pos++] = m3._31;
						out[pos++] = m3._41;
						out[pos++] = m3._12;
						out[pos++] = m3._22;
						out[pos++] = m3._32;
						out[pos++] = m3._42;
						out[pos++] = m3._13;
						out[pos++] = m3._23;
						out[pos++] = m3._33;
						out[pos++] = m3._43;
					}
					return len4 * 12;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			default:
				if(_g4._hx_index == 0) {
					var len5 = _g4.v;
					var t2 = _g3;
					var v7 = v;
					var size3 = 0;
					var _g9 = 0;
					var _g16 = len5;
					while(_g9 < _g16) {
						var i5 = _g9++;
						var n4 = v7[i5];
						if(n4 == null) {
							break;
						}
						size3 = this.fillRec(n4,t2,out,pos);
						pos += size3;
					}
					return len5 * size3;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,getPtr: function(data) {
		return data;
	}
	,getParamValue: function(p,shaders,opt) {
		if(opt == null) {
			opt = false;
		}
		if(p.perObjectGlobal != null) {
			var v = this.globals.map.h[p.perObjectGlobal.gid];
			if(v == null) {
				throw new js__$Boot_HaxeError("Missing global value " + p.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p.perObjectGlobal.path));
			}
			var _g = p.type;
			var tmp;
			if(_g._hx_index == 17) {
				var _g1 = _g.size;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				return v.texture;
			}
			return v;
		}
		var si = shaders;
		var n = p.instance;
		while(--n > 0) si = si.next;
		var v1 = si.s.getParamValue(p.index);
		if(v1 == null && !opt) {
			throw new js__$Boot_HaxeError("Missing param value " + Std.string(si.s) + "." + p.name);
		}
		return v1;
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var s1 = s.vertex;
		var g = s1.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		var s2 = s.fragment;
		var g1 = s2.globals;
		var ptr1 = buf.fragment.globals;
		while(g1 != null) {
			var v1 = _gthis.globals.map.h[g1.gid];
			if(v1 == null) {
				if(g1.path == "__consts__") {
					_gthis.fillRec(s2.consts,g1.type,ptr1,g1.pos);
					g1 = g1.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g1.path);
			}
			_gthis.fillRec(v1,g1.type,ptr1,g1.pos);
			g1 = g1.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var si2 = shaders;
				var n = p.instance;
				while(--n > 0) si2 = si2.next;
				var v4 = si2.s.getParamValue(p.index);
				if(v4 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si2.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p1 = s1.textures;
		while(p1 != null) {
			var this1 = buf1.tex;
			var index2 = tid++;
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var val;
			if(p1.perObjectGlobal != null) {
				var v5 = _gthis.globals.map.h[p1.perObjectGlobal.gid];
				if(v5 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p1.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p1.perObjectGlobal.path));
				}
				var _g2 = p1.type;
				var val1;
				if(_g2._hx_index == 17) {
					var _g11 = _g2.size;
					val1 = true;
				} else {
					val1 = false;
				}
				val = val1 ? v5.texture : v5;
			} else {
				var si3 = shaders;
				var n1 = p1.instance;
				while(--n1 > 0) si3 = si3.next;
				var v6 = si3.s.getParamValue(p1.index);
				if(v6 == null && !opt) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si3.s) + "." + p1.name);
				}
				val = v6;
			}
			this1[index2] = val;
			p1 = p1.next;
		}
		var p2 = s1.buffers;
		var bid = 0;
		while(p2 != null) {
			var opt1 = !h3d_pass_ShaderManager.STRICT;
			if(opt1 == null) {
				opt1 = false;
			}
			var b;
			if(p2.perObjectGlobal != null) {
				var v7 = _gthis.globals.map.h[p2.perObjectGlobal.gid];
				if(v7 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p2.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p2.perObjectGlobal.path));
				}
				var _g3 = p2.type;
				var b1;
				if(_g3._hx_index == 17) {
					var _g12 = _g3.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v7.texture : v7;
			} else {
				var si4 = shaders;
				var n2 = p2.instance;
				while(--n2 > 0) si4 = si4.next;
				var v8 = si4.s.getParamValue(p2.index);
				if(v8 == null && !opt1) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si4.s) + "." + p2.name);
				}
				b = v8;
			}
			buf1.buffers[bid++] = b;
			p2 = p2.next;
		}
		var buf2 = buf.fragment;
		var s2 = s.fragment;
		var p3 = s2.params;
		var ptr1 = buf2.params;
		while(p3 != null) {
			var v9;
			if(p3.perObjectGlobal == null) {
				if(p3.type == hxsl_Type.TFloat) {
					var index3 = p3.instance;
					var i1;
					if(curInstance == index3) {
						i1 = curInstanceValue;
					} else {
						var si5 = shaders;
						curInstance = index3;
						while(--index3 > 0) si5 = si5.next;
						curInstanceValue = si5.s;
						i1 = curInstanceValue;
					}
					ptr1[p3.pos] = i1.getParamFloatValue(p3.index);
					p3 = p3.next;
					continue;
				}
				var index4 = p3.instance;
				var v10;
				if(curInstance == index4) {
					v10 = curInstanceValue;
				} else {
					var si6 = shaders;
					curInstance = index4;
					while(--index4 > 0) si6 = si6.next;
					curInstanceValue = si6.s;
					v10 = curInstanceValue;
				}
				v9 = v10.getParamValue(p3.index);
				if(v9 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(curInstanceValue) + "." + p3.name);
				}
			} else if(p3.perObjectGlobal != null) {
				var v11 = _gthis.globals.map.h[p3.perObjectGlobal.gid];
				if(v11 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p3.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p3.perObjectGlobal.path));
				}
				var _g4 = p3.type;
				var v12;
				if(_g4._hx_index == 17) {
					var _g13 = _g4.size;
					v12 = true;
				} else {
					v12 = false;
				}
				v9 = v12 ? v11.texture : v11;
			} else {
				var si7 = shaders;
				var n3 = p3.instance;
				while(--n3 > 0) si7 = si7.next;
				var v13 = si7.s.getParamValue(p3.index);
				if(v13 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si7.s) + "." + p3.name);
				}
				v9 = v13;
			}
			_gthis.fillRec(v9,p3.type,ptr1,p3.pos);
			p3 = p3.next;
		}
		var tid1 = 0;
		var p4 = s2.textures;
		while(p4 != null) {
			var this2 = buf2.tex;
			var index5 = tid1++;
			var opt2 = !h3d_pass_ShaderManager.STRICT;
			if(opt2 == null) {
				opt2 = false;
			}
			var val2;
			if(p4.perObjectGlobal != null) {
				var v14 = _gthis.globals.map.h[p4.perObjectGlobal.gid];
				if(v14 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p4.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p4.perObjectGlobal.path));
				}
				var _g5 = p4.type;
				var val3;
				if(_g5._hx_index == 17) {
					var _g14 = _g5.size;
					val3 = true;
				} else {
					val3 = false;
				}
				val2 = val3 ? v14.texture : v14;
			} else {
				var si8 = shaders;
				var n4 = p4.instance;
				while(--n4 > 0) si8 = si8.next;
				var v15 = si8.s.getParamValue(p4.index);
				if(v15 == null && !opt2) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si8.s) + "." + p4.name);
				}
				val2 = v15;
			}
			this2[index5] = val2;
			p4 = p4.next;
		}
		var p5 = s2.buffers;
		var bid1 = 0;
		while(p5 != null) {
			var opt3 = !h3d_pass_ShaderManager.STRICT;
			if(opt3 == null) {
				opt3 = false;
			}
			var b2;
			if(p5.perObjectGlobal != null) {
				var v16 = _gthis.globals.map.h[p5.perObjectGlobal.gid];
				if(v16 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p5.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p5.perObjectGlobal.path));
				}
				var _g6 = p5.type;
				var b3;
				if(_g6._hx_index == 17) {
					var _g15 = _g6.size;
					b3 = true;
				} else {
					b3 = false;
				}
				b2 = b3 ? v16.texture : v16;
			} else {
				var si9 = shaders;
				var n5 = p5.instance;
				while(--n5 > 0) si9 = si9.next;
				var v17 = si9.s.getParamValue(p5.index);
				if(v17 == null && !opt3) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si9.s) + "." + p5.name);
				}
				b2 = v17;
			}
			buf2.buffers[bid1++] = b2;
			p5 = p5.next;
		}
	}
	,compileShaders: function(shaders,batchMode) {
		if(batchMode == null) {
			batchMode = false;
		}
		this.globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		var s2 = this.shaderCache.link(this.currentOutput,batchMode);
		this.currentOutput.next = null;
		return s2;
	}
	,__class__: h3d_pass_ShaderManager
};
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__ : true, __constructs__ : ["None","Static","Dynamic","Mixed"]
	,None: {_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__ : true, __constructs__ : ["None","PCF","ESM"]
	,None: {_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
$hxClasses["h3d.pass.SortByMaterial"] = h3d_pass_SortByMaterial;
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp1;
		if(list == null) {
			tmp1 = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p1;
			var q;
			var e;
			var tail;
			while(true) {
				p1 = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p1 != null) {
					++nmerges;
					q = p1;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp2;
							if(!(qsize == 0 || q == null)) {
								var d = _gthis.shaderIdMap[p1.shader.id] - _gthis.shaderIdMap[q.shader.id];
								tmp2 = (d != 0 ? d : _gthis.textureIdMap[p1.texture] - _gthis.textureIdMap[q.texture]) <= 0;
							} else {
								tmp2 = true;
							}
							if(tmp2) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p1 = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp1 = list;
		}
		passes.current = tmp1;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_prim_BigPrimitive = function(stride,isRaw) {
	if(isRaw == null) {
		isRaw = false;
	}
	this.isStatic = true;
	this.hasTangents = false;
	this.startIndex = 0;
	this.idxPos = 0;
	this.bufPos = 0;
	h3d_prim_Primitive.call(this);
	this.isRaw = isRaw;
	this.buffers = [];
	this.allIndexes = [];
	this.bounds = new h3d_col_Bounds();
	this.stride = stride;
	if(stride < 3) {
		throw new js__$Boot_HaxeError("Minimum stride = 3");
	}
};
$hxClasses["h3d.prim.BigPrimitive"] = h3d_prim_BigPrimitive;
h3d_prim_BigPrimitive.__name__ = "h3d.prim.BigPrimitive";
h3d_prim_BigPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_BigPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	begin: function(vcount,icount) {
		this.startIndex = this.bufPos / this.stride | 0;
		if(this.startIndex + vcount >= 65535) {
			if(vcount >= 65535) {
				throw new js__$Boot_HaxeError("Too many vertices in begin()");
			}
			this.flush();
		}
		if(this.tmpBuf == null) {
			this.tmpBuf = h3d_prim_BigPrimitive.PREV_BUFFER;
			if(this.tmpBuf == null) {
				var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
				this.tmpBuf = this1;
			} else {
				h3d_prim_BigPrimitive.PREV_BUFFER = null;
			}
			if(this.isStatic) {
				var this2 = this.tmpBuf;
				var _g = this2.pos;
				var _g1 = 65535 * this.stride;
				while(_g < _g1) {
					var i = _g++;
					if(this2.pos == this2.array.length) {
						var newSize = this2.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						var newArray = new Float32Array(newSize);
						newArray.set(this2.array);
						this2.array = newArray;
					}
					this2.array[this2.pos++] = 0.;
				}
			}
		}
		if(!this.isStatic) {
			var this3 = this.tmpBuf;
			var _g2 = this3.pos;
			var _g11 = vcount * this.stride + this.bufPos;
			while(_g2 < _g11) {
				var i1 = _g2++;
				if(this3.pos == this3.array.length) {
					var newSize1 = this3.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this3.array);
					this3.array = newArray1;
				}
				this3.array[this3.pos++] = 0.;
			}
		}
		if(this.tmpIdx == null) {
			this.tmpIdx = h3d_prim_BigPrimitive.PREV_INDEX;
			if(this.tmpIdx == null) {
				var this4 = new Array(0);
				this.tmpIdx = this4;
			} else {
				h3d_prim_BigPrimitive.PREV_INDEX = null;
			}
		}
		if(this.idxPos + icount > this.tmpIdx.length) {
			var size = this.tmpIdx.length == 0 ? 1024 : this.tmpIdx.length;
			var req = this.idxPos + icount;
			while(size < req) size <<= 1;
			var this5 = this.tmpIdx;
			while(this5.length < size) this5.push(0);
		}
	}
	,addPoint: function(x,y,z) {
		this.tmpBuf.array[this.bufPos++] = x;
		this.tmpBuf.array[this.bufPos++] = y;
		this.tmpBuf.array[this.bufPos++] = z;
		var _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	,addBounds: function(x,y,z) {
		var _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	,addVertexValue: function(v) {
		this.tmpBuf.array[this.bufPos++] = v;
	}
	,addIndex: function(i) {
		this.tmpIdx[this.idxPos++] = i + this.startIndex;
	}
	,triCount: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.allIndexes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			count += i.count;
		}
		count += this.idxPos;
		return count / 3 | 0;
	}
	,vertexCount: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			count += b.vertices;
		}
		count += this.bufPos / this.stride | 0;
		return count;
	}
	,flush: function() {
		if(this.tmpBuf != null) {
			if(this.bufPos > 0 && this.idxPos > 0) {
				this.flushing = true;
				var b = h3d_Buffer.ofSubFloats(this.tmpBuf,this.stride,this.bufPos / this.stride | 0);
				if(this.isRaw) {
					b.flags |= 1 << h3d_BufferFlag.RawFormat._hx_index;
				}
				this.buffers.push(b);
				var idx = h3d_Indexes.alloc(this.tmpIdx,0,this.idxPos);
				this.allIndexes.push(idx);
				this.flushing = false;
			}
			if(h3d_prim_BigPrimitive.PREV_BUFFER == null || h3d_prim_BigPrimitive.PREV_BUFFER.pos < this.tmpBuf.pos) {
				h3d_prim_BigPrimitive.PREV_BUFFER = this.tmpBuf;
			}
			if(h3d_prim_BigPrimitive.PREV_INDEX == null || h3d_prim_BigPrimitive.PREV_INDEX.length < this.tmpIdx.length) {
				h3d_prim_BigPrimitive.PREV_INDEX = this.tmpIdx;
			}
			this.tmpBuf = null;
			this.tmpIdx = null;
			this.bufPos = 0;
			this.idxPos = 0;
			this.startIndex = 0;
		}
	}
	,render: function(engine) {
		if(this.tmpBuf != null) {
			this.flush();
		}
		var _g = 0;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			engine.renderIndexed(this.buffers[i],this.allIndexes[i]);
		}
	}
	,getBounds: function() {
		return this.bounds;
	}
	,dispose: function() {
		this.clear();
	}
	,clear: function() {
		if(this.flushing) {
			throw new js__$Boot_HaxeError("Cannot clear() BigPrimitive while it's flushing");
		}
		var _this = this.bounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		var _g2 = 0;
		var _g3 = this.allIndexes;
		while(_g2 < _g3.length) {
			var i = _g3[_g2];
			++_g2;
			i.dispose();
		}
		this.buffers = [];
		this.allIndexes = [];
		this.bufPos = 0;
		this.idxPos = 0;
		this.tmpBuf = null;
		this.tmpIdx = null;
	}
	,add: function(buf,idx,dx,dy,dz,rotation,scale,stride) {
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		this.addSub(buf,idx,0,0,buf.pos / (stride < 0 ? this.stride : stride) | 0,idx.length / 3 | 0,dx,dy,dz,rotation,scale,stride);
		return;
	}
	,addSub: function(buf,idx,startVert,startTri,nvert,triCount,dx,dy,dz,rotation,scale,stride,deltaU,deltaV,color,mat) {
		if(color == null) {
			color = 1.;
		}
		if(deltaV == null) {
			deltaV = 0.;
		}
		if(deltaU == null) {
			deltaU = 0.;
		}
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		if(stride < 0) {
			stride = this.stride;
		}
		if(stride < this.stride) {
			throw new js__$Boot_HaxeError("only stride >= " + this.stride + " allowed");
		}
		this.begin(nvert,triCount * 3);
		var start = this.startIndex;
		var cr = Math.cos(rotation);
		var sr = Math.sin(rotation);
		var pos = this.bufPos;
		var tmpBuf = this.tmpBuf;
		var _g = 0;
		var _g1 = nvert;
		while(_g < _g1) {
			var i = _g++;
			var p = (i + startVert) * stride;
			var x = buf.array[p++];
			var y = buf.array[p++];
			var z = buf.array[p++];
			if(mat != null) {
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var pt_x = x1;
				var pt_y = y1;
				var pt_z = z1;
				var px = pt_x * mat._11 + pt_y * mat._21 + pt_z * mat._31 + mat._41;
				var py = pt_x * mat._12 + pt_y * mat._22 + pt_z * mat._32 + mat._42;
				var pz = pt_x * mat._13 + pt_y * mat._23 + pt_z * mat._33 + mat._43;
				pt_x = px;
				pt_y = py;
				pt_z = pz;
				tmpBuf.array[pos++] = pt_x;
				tmpBuf.array[pos++] = pt_y;
				tmpBuf.array[pos++] = pt_z;
				var _this = this.bounds;
				if(pt_x < _this.xMin) {
					_this.xMin = pt_x;
				}
				if(pt_x > _this.xMax) {
					_this.xMax = pt_x;
				}
				if(pt_y < _this.yMin) {
					_this.yMin = pt_y;
				}
				if(pt_y > _this.yMax) {
					_this.yMax = pt_y;
				}
				if(pt_z < _this.zMin) {
					_this.zMin = pt_z;
				}
				if(pt_z > _this.zMax) {
					_this.zMax = pt_z;
				}
			} else {
				var tx = (x * cr - y * sr) * scale;
				var ty = (x * sr + y * cr) * scale;
				var vx = dx + tx;
				var vy = dy + ty;
				var vz = dz + z * scale;
				tmpBuf.array[pos++] = vx;
				tmpBuf.array[pos++] = vy;
				tmpBuf.array[pos++] = vz;
				var _this1 = this.bounds;
				if(vx < _this1.xMin) {
					_this1.xMin = vx;
				}
				if(vx > _this1.xMax) {
					_this1.xMax = vx;
				}
				if(vy < _this1.yMin) {
					_this1.yMin = vy;
				}
				if(vy > _this1.yMax) {
					_this1.yMax = vy;
				}
				if(vz < _this1.zMin) {
					_this1.zMin = vz;
				}
				if(vz > _this1.zMax) {
					_this1.zMax = vz;
				}
			}
			if(this.stride >= 6) {
				var nx = buf.array[p++];
				var ny = buf.array[p++];
				var nz = buf.array[p++];
				if(mat != null) {
					var x2 = nx;
					var y2 = ny;
					var z2 = nz;
					if(z2 == null) {
						z2 = 0.;
					}
					if(y2 == null) {
						y2 = 0.;
					}
					if(x2 == null) {
						x2 = 0.;
					}
					var pt_x1 = x2;
					var pt_y1 = y2;
					var pt_z1 = z2;
					var px1 = pt_x1 * mat._11 + pt_y1 * mat._21 + pt_z1 * mat._31;
					var py1 = pt_x1 * mat._12 + pt_y1 * mat._22 + pt_z1 * mat._32;
					var pz1 = pt_x1 * mat._13 + pt_y1 * mat._23 + pt_z1 * mat._33;
					pt_x1 = px1;
					pt_y1 = py1;
					pt_z1 = pz1;
					var k = pt_x1 * pt_x1 + pt_y1 * pt_y1 + pt_z1 * pt_z1;
					k = 1. / Math.sqrt(k);
					pt_x1 *= k;
					pt_y1 *= k;
					pt_z1 *= k;
					tmpBuf.array[pos++] = pt_x1;
					tmpBuf.array[pos++] = pt_y1;
					tmpBuf.array[pos++] = pt_z1;
				} else {
					var tnx = nx * cr - ny * sr;
					var tny = nx * sr + ny * cr;
					tmpBuf.array[pos++] = tnx;
					tmpBuf.array[pos++] = tny;
					tmpBuf.array[pos++] = nz;
				}
			}
			var stride1 = this.stride;
			if(this.hasTangents) {
				var tx1 = buf.array[p++];
				var ty1 = buf.array[p++];
				var tz = buf.array[p++];
				if(mat != null) {
					var x3 = tx1;
					var y3 = ty1;
					var z3 = tz;
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					var pt_x2 = x3;
					var pt_y2 = y3;
					var pt_z2 = z3;
					var len = pt_x2 * pt_x2 + pt_y2 * pt_y2 + pt_z2 * pt_z2;
					var px2 = pt_x2 * mat._11 + pt_y2 * mat._21 + pt_z2 * mat._31;
					var py2 = pt_x2 * mat._12 + pt_y2 * mat._22 + pt_z2 * mat._32;
					var pz2 = pt_x2 * mat._13 + pt_y2 * mat._23 + pt_z2 * mat._33;
					pt_x2 = px2;
					pt_y2 = py2;
					pt_z2 = pz2;
					var k1 = pt_x2 * pt_x2 + pt_y2 * pt_y2 + pt_z2 * pt_z2;
					k1 = 1. / Math.sqrt(k1);
					pt_x2 *= k1;
					pt_y2 *= k1;
					pt_z2 *= k1;
					if(len < 0.5) {
						pt_x2 *= 0.5;
						pt_y2 *= 0.5;
						pt_z2 *= 0.5;
					}
					tmpBuf.array[pos++] = pt_x2;
					tmpBuf.array[pos++] = pt_y2;
					tmpBuf.array[pos++] = pt_z2;
				} else {
					var tnx1 = tx1 * cr - ty1 * sr;
					var tny1 = tx1 * sr + ty1 * cr;
					tmpBuf.array[pos++] = tnx1;
					tmpBuf.array[pos++] = tny1;
					tmpBuf.array[pos++] = tz;
				}
				stride1 -= 3;
			}
			switch(stride1) {
			case 3:case 6:
				continue;
			case 4:case 7:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				break;
			case 5:case 8:case 9:case 10:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				var _g2 = 8;
				var _g11 = stride1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
				break;
			default:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				var _g3 = 11;
				var _g12 = stride1;
				while(_g3 < _g12) {
					var i2 = _g3++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
			}
		}
		this.bufPos = pos;
		start -= startVert;
		var _g21 = 0;
		var _g31 = triCount * 3;
		while(_g21 < _g31) {
			var i3 = _g21++;
			var tmp = idx[i3 + startTri * 3] + start;
			this.tmpIdx[this.idxPos++] = tmp;
		}
	}
	,__class__: h3d_prim_BigPrimitive
});
var h3d_prim_MeshPrimitive = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.MeshPrimitive"] = h3d_prim_MeshPrimitive;
h3d_prim_MeshPrimitive.__name__ = "h3d.prim.MeshPrimitive";
h3d_prim_MeshPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_MeshPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	allocBuffer: function(engine,name) {
		return null;
	}
	,hasBuffer: function(name) {
		if(this.bufferCache == null) {
			return false;
		}
		var this1 = this.bufferCache;
		var key = hxsl_Globals.allocID(name);
		return this1.h.hasOwnProperty(key);
	}
	,addBuffer: function(name,buf,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(this.bufferCache == null) {
			this.bufferCache = new haxe_ds_IntMap();
		}
		var id = hxsl_Globals.allocID(name);
		var old = this.bufferCache.h[id];
		if(old != null) {
			old.dispose();
		}
		var this1 = this.bufferCache;
		var value = new h3d_BufferOffset(buf,offset);
		this1.h[id] = value;
		this.layouts = null;
	}
	,dispose: function() {
		h3d_prim_Primitive.prototype.dispose.call(this);
		if(this.bufferCache != null) {
			var b = this.bufferCache.iterator();
			while(b.hasNext()) {
				var b1 = b.next();
				b1.dispose();
			}
		}
		this.bufferCache = null;
		this.layouts = null;
	}
	,getBuffers: function(engine) {
		if(this.bufferCache == null) {
			this.bufferCache = new haxe_ds_IntMap();
		}
		if(this.layouts == null) {
			this.layouts = new haxe_ds_IntMap();
		}
		var inputs = engine.driver.getShaderInputNames();
		var buffers = this.layouts.h[inputs.id];
		if(buffers != null) {
			return buffers;
		}
		var prev = null;
		var _g = 0;
		var _g1 = inputs.names;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			var id = hxsl_Globals.allocID(name);
			var b = this.bufferCache.h[id];
			if(b == null) {
				b = this.allocBuffer(engine,name);
				if(b == null) {
					throw new js__$Boot_HaxeError("Buffer " + name + " is not available");
				}
				this.bufferCache.h[id] = b;
			}
			var b1 = new h3d_BufferOffset(b.buffer,b.offset);
			b = b1;
			if(prev == null) {
				prev = b;
				buffers = prev;
			} else {
				prev.next = b;
				prev = b;
			}
		}
		this.layouts.h[inputs.id] = buffers;
		return buffers;
	}
	,render: function(engine) {
		if(this.indexes == null || this.indexes.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderMultiBuffers(this.getBuffers(engine),this.indexes);
	}
	,__class__: h3d_prim_MeshPrimitive
});
var h3d_prim_HMDModel = function(data,dataPos,lib) {
	this.bufferAliases = new haxe_ds_StringMap();
	h3d_prim_MeshPrimitive.call(this);
	this.data = data;
	this.dataPosition = dataPos;
	this.lib = lib;
};
$hxClasses["h3d.prim.HMDModel"] = h3d_prim_HMDModel;
h3d_prim_HMDModel.__name__ = "h3d.prim.HMDModel";
h3d_prim_HMDModel.__super__ = h3d_prim_MeshPrimitive;
h3d_prim_HMDModel.prototype = $extend(h3d_prim_MeshPrimitive.prototype,{
	triCount: function() {
		return this.data.get_indexCount() / 3 | 0;
	}
	,vertexCount: function() {
		return this.data.vertexCount;
	}
	,getBounds: function() {
		return this.data.bounds;
	}
	,selectMaterial: function(i) {
		this.curMaterial = i;
	}
	,getDataBuffers: function(fmt,defaults,material) {
		return this.lib.getBuffers(this.data,fmt,defaults,material);
	}
	,loadSkin: function(skin) {
		this.lib.loadSkin(this.data,skin);
	}
	,addAlias: function(name,realName,offset) {
		if(offset == null) {
			offset = 0;
		}
		var _this = this.bufferAliases;
		var value = { realName : realName, offset : offset};
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	,alloc: function(engine) {
		this.dispose();
		this.buffer = new h3d_Buffer(this.data.vertexCount,this.data.vertexStride);
		var entry = this.lib.resource.entry;
		entry.open();
		entry.skip(this.dataPosition + this.data.vertexPosition);
		var size = this.data.vertexCount * this.data.vertexStride * 4;
		var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
		entry.read(bytes,0,size);
		this.buffer.uploadBytes(bytes,0,this.data.vertexCount);
		this.indexCount = 0;
		this.indexesTriPos = [];
		var _g = 0;
		var _g1 = this.data.indexCounts;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			this.indexesTriPos.push(this.indexCount / 3 | 0);
			this.indexCount += n;
		}
		this.indexes = new h3d_Indexes(this.indexCount);
		entry.skip(this.data.indexPosition - (this.data.vertexPosition + size));
		var bytes1 = new haxe_io_Bytes(new ArrayBuffer(this.indexCount * 2));
		entry.read(bytes1,0,this.indexCount * 2);
		this.indexes.uploadBytes(bytes1,0,this.indexCount);
		entry.close();
		var pos = 0;
		var _g2 = 0;
		var _g3 = this.data.vertexFormat;
		while(_g2 < _g3.length) {
			var f = _g3[_g2];
			++_g2;
			this.addBuffer(f.name,this.buffer,pos);
			pos += f.format & 7;
		}
		if(this.normalsRecomputed != null) {
			this.recomputeNormals(this.normalsRecomputed);
		}
		var name = this.bufferAliases.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var _this = this.bufferAliases;
			var alias = __map_reserved[name1] != null ? _this.getReserved(name1) : _this.h[name1];
			var this1 = this.bufferCache;
			var key = hxsl_Globals.allocID(alias.realName);
			var buffer = this1.h[key];
			if(buffer == null) {
				throw new js__$Boot_HaxeError("Buffer " + alias.realName + " not found for alias " + name1);
			}
			if(buffer.offset + alias.offset > buffer.buffer.buffer.stride) {
				throw new js__$Boot_HaxeError("Alias " + name1 + " for buffer " + alias.realName + " outside stride");
			}
			this.addBuffer(name1,buffer.buffer,buffer.offset + alias.offset);
		}
	}
	,recomputeNormals: function(name) {
		if(name == null) {
			name = "normal";
		}
		var pos = this.lib.getBuffers(this.data,[new hxd_fmt_hmd_GeometryFormat("position",3)]);
		var ids = [];
		var pts = [];
		var _g = 0;
		var _g1 = this.data.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var added = false;
			var px = pos.vertexes[i * 3];
			var py = pos.vertexes[i * 3 + 1];
			var pz = pos.vertexes[i * 3 + 2];
			var _g2 = 0;
			var _g11 = pts.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var p = pts[i1];
				if(p.x == px && p.y == py && p.z == pz) {
					ids.push(i1);
					added = true;
					break;
				}
			}
			if(!added) {
				ids.push(pts.length);
				pts.push(new h3d_col_Point(px,py,pz));
			}
		}
		var this1 = new Array(0);
		var idx = this1;
		var _g21 = 0;
		var _g3 = pos.indexes;
		while(_g21 < _g3.length) {
			var i2 = _g3[_g21];
			++_g21;
			idx.push(ids[i2]);
		}
		var pol = new h3d_prim_Polygon(pts,idx);
		pol.addNormals();
		var this2 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var v = this2;
		var _g4 = v.pos;
		var _g12 = this.data.vertexCount * 3;
		while(_g4 < _g12) {
			var i3 = _g4++;
			if(v.pos == v.array.length) {
				var newSize = v.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(v.array);
				v.array = newArray;
			}
			v.array[v.pos++] = 0.;
		}
		var k = 0;
		var _g41 = 0;
		var _g5 = this.data.vertexCount;
		while(_g41 < _g5) {
			var i4 = _g41++;
			var n = pol.normals[ids[i4]];
			v.array[k++] = n.x;
			v.array[k++] = n.y;
			v.array[k++] = n.z;
		}
		var buf = h3d_Buffer.ofFloats(v,3);
		this.addBuffer(name,buf,0);
		this.normalsRecomputed = name;
	}
	,render: function(engine) {
		if(this.curMaterial < 0) {
			h3d_prim_MeshPrimitive.prototype.render.call(this,engine);
			return;
		}
		if(this.indexes == null || this.indexes.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderMultiBuffers(this.getBuffers(engine),this.indexes,this.indexesTriPos[this.curMaterial],this.data.indexCounts[this.curMaterial] / 3 | 0);
		this.curMaterial = -1;
	}
	,initCollider: function(poly) {
		var buf = this.lib.getBuffers(this.data,[new hxd_fmt_hmd_GeometryFormat("position",3)]);
		poly.setData(buf.vertexes,buf.indexes);
		if(this.collider == null) {
			var _this = this.data.bounds;
			var dx = _this.xMax - _this.xMin;
			var dy = _this.yMax - _this.yMin;
			var dz = _this.zMax - _this.zMin;
			var sphere = new h3d_col_Sphere((_this.xMin + _this.xMax) * 0.5,(_this.yMin + _this.yMax) * 0.5,(_this.zMin + _this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
			this.collider = new h3d_col_OptimizedCollider(sphere,poly);
		}
	}
	,getCollider: function() {
		if(this.collider != null) {
			return this.collider;
		}
		var poly = new h3d_col_PolygonBuffer();
		poly.source = { entry : this.lib.resource.entry, geometryName : null};
		var _g = 0;
		var _g1 = this.lib.header.models;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			if(this.lib.header.geometries[h.geometry] == this.data) {
				poly.source.geometryName = h.name;
				break;
			}
		}
		this.initCollider(poly);
		return this.collider;
	}
	,__class__: h3d_prim_HMDModel
});
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plane2D"] = h3d_prim_Plane2D;
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	triCount: function() {
		return 2;
	}
	,vertexCount: function() {
		return 4;
	}
	,alloc: function(engine) {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var v = this1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize1 = v.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(v.array);
			v.array = newArray1;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize2 = v.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(v.array);
			v.array = newArray2;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize3 = v.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(v.array);
			v.array = newArray3;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize4 = v.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(v.array);
			v.array = newArray4;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize5 = v.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(v.array);
			v.array = newArray5;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize6 = v.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(v.array);
			v.array = newArray6;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize7 = v.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(v.array);
			v.array = newArray7;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize8 = v.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(v.array);
			v.array = newArray8;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize9 = v.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(v.array);
			v.array = newArray9;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize10 = v.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(v.array);
			v.array = newArray10;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize11 = v.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(v.array);
			v.array = newArray11;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize12 = v.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(v.array);
			v.array = newArray12;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize13 = v.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(v.array);
			v.array = newArray13;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize14 = v.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(v.array);
			v.array = newArray14;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize15 = v.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(v.array);
			v.array = newArray15;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_Polygon = function(points,idx) {
	this.translatedZ = 0.;
	this.translatedY = 0.;
	this.translatedX = 0.;
	this.scaled = 1.;
	h3d_prim_MeshPrimitive.call(this);
	this.points = points;
	this.idx = idx;
};
$hxClasses["h3d.prim.Polygon"] = h3d_prim_Polygon;
h3d_prim_Polygon.__name__ = "h3d.prim.Polygon";
h3d_prim_Polygon.__super__ = h3d_prim_MeshPrimitive;
h3d_prim_Polygon.prototype = $extend(h3d_prim_MeshPrimitive.prototype,{
	getBounds: function() {
		var b = new h3d_col_Bounds();
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.x < b.xMin) {
				b.xMin = p.x;
			}
			if(p.x > b.xMax) {
				b.xMax = p.x;
			}
			if(p.y < b.yMin) {
				b.yMin = p.y;
			}
			if(p.y > b.yMax) {
				b.yMax = p.y;
			}
			if(p.z < b.zMin) {
				b.zMin = p.z;
			}
			if(p.z > b.zMax) {
				b.zMax = p.z;
			}
		}
		return b;
	}
	,alloc: function(engine) {
		this.dispose();
		var size = 3;
		var names = ["position"];
		var positions = [0];
		if(this.normals != null) {
			names.push("normal");
			positions.push(size);
			size += 3;
		}
		if(this.tangents != null) {
			names.push("tangent");
			positions.push(size);
			size += 3;
		}
		if(this.uvs != null) {
			names.push("uv");
			positions.push(size);
			size += 2;
		}
		if(this.colors != null) {
			names.push("color");
			positions.push(size);
			size += 3;
		}
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var buf = this1;
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var k = _g++;
			var p = this.points[k];
			var v = p.x;
			if(buf.pos == buf.array.length) {
				var newSize = buf.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(buf.array);
				buf.array = newArray;
			}
			buf.array[buf.pos++] = v;
			var v1 = p.y;
			if(buf.pos == buf.array.length) {
				var newSize1 = buf.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(buf.array);
				buf.array = newArray1;
			}
			buf.array[buf.pos++] = v1;
			var v2 = p.z;
			if(buf.pos == buf.array.length) {
				var newSize2 = buf.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(buf.array);
				buf.array = newArray2;
			}
			buf.array[buf.pos++] = v2;
			if(this.normals != null) {
				var n = this.normals[k];
				var v3 = n.x;
				if(buf.pos == buf.array.length) {
					var newSize3 = buf.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(buf.array);
					buf.array = newArray3;
				}
				buf.array[buf.pos++] = v3;
				var v4 = n.y;
				if(buf.pos == buf.array.length) {
					var newSize4 = buf.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(buf.array);
					buf.array = newArray4;
				}
				buf.array[buf.pos++] = v4;
				var v5 = n.z;
				if(buf.pos == buf.array.length) {
					var newSize5 = buf.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(buf.array);
					buf.array = newArray5;
				}
				buf.array[buf.pos++] = v5;
			}
			if(this.tangents != null) {
				var t = this.tangents[k];
				var v6 = t.x;
				if(buf.pos == buf.array.length) {
					var newSize6 = buf.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(buf.array);
					buf.array = newArray6;
				}
				buf.array[buf.pos++] = v6;
				var v7 = t.y;
				if(buf.pos == buf.array.length) {
					var newSize7 = buf.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(buf.array);
					buf.array = newArray7;
				}
				buf.array[buf.pos++] = v7;
				var v8 = t.z;
				if(buf.pos == buf.array.length) {
					var newSize8 = buf.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(buf.array);
					buf.array = newArray8;
				}
				buf.array[buf.pos++] = v8;
			}
			if(this.uvs != null) {
				var t1 = this.uvs[k];
				var v9 = t1.u;
				if(buf.pos == buf.array.length) {
					var newSize9 = buf.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(buf.array);
					buf.array = newArray9;
				}
				buf.array[buf.pos++] = v9;
				var v10 = t1.v;
				if(buf.pos == buf.array.length) {
					var newSize10 = buf.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(buf.array);
					buf.array = newArray10;
				}
				buf.array[buf.pos++] = v10;
			}
			if(this.colors != null) {
				var c = this.colors[k];
				var v11 = c.x;
				if(buf.pos == buf.array.length) {
					var newSize11 = buf.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(buf.array);
					buf.array = newArray11;
				}
				buf.array[buf.pos++] = v11;
				var v12 = c.y;
				if(buf.pos == buf.array.length) {
					var newSize12 = buf.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(buf.array);
					buf.array = newArray12;
				}
				buf.array[buf.pos++] = v12;
				var v13 = c.z;
				if(buf.pos == buf.array.length) {
					var newSize13 = buf.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(buf.array);
					buf.array = newArray13;
				}
				buf.array[buf.pos++] = v13;
			}
		}
		var flags = [];
		if(this.idx == null) {
			flags.push(h3d_BufferFlag.Triangles);
		}
		if(this.normals == null || this.tangents != null) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(buf,size,flags);
		var _g2 = 0;
		var _g3 = names.length;
		while(_g2 < _g3) {
			var i = _g2++;
			this.addBuffer(names[i],this.buffer,positions[i]);
		}
		if(this.idx != null) {
			this.indexes = h3d_Indexes.alloc(this.idx);
		}
	}
	,unindex: function() {
		if(this.idx != null && this.points.length != this.idx.length) {
			var p = [];
			var _g = 0;
			var _g1 = this.idx.length;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.points[this.idx[i]];
				p.push(new h3d_col_Point(_this.x,_this.y,_this.z));
			}
			if(this.normals != null) {
				var n = [];
				var _g2 = 0;
				var _g3 = this.idx.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var _this1 = this.normals[this.idx[i1]];
					n.push(new h3d_col_Point(_this1.x,_this1.y,_this1.z));
				}
				this.normals = n;
			}
			if(this.tangents != null) {
				var t = [];
				var _g21 = 0;
				var _g31 = this.idx.length;
				while(_g21 < _g31) {
					var i2 = _g21++;
					var _this2 = this.tangents[this.idx[i2]];
					t.push(new h3d_col_Point(_this2.x,_this2.y,_this2.z));
				}
				this.tangents = t;
			}
			if(this.colors != null) {
				var n1 = [];
				var _g22 = 0;
				var _g32 = this.idx.length;
				while(_g22 < _g32) {
					var i3 = _g22++;
					var _this3 = this.colors[this.idx[i3]];
					n1.push(new h3d_col_Point(_this3.x,_this3.y,_this3.z));
				}
				this.colors = n1;
			}
			if(this.uvs != null) {
				var t1 = [];
				var _g23 = 0;
				var _g33 = this.idx.length;
				while(_g23 < _g33) {
					var i4 = _g23++;
					t1.push(this.uvs[this.idx[i4]].clone());
				}
				this.uvs = t1;
			}
			this.points = p;
			this.idx = null;
		}
	}
	,translate: function(dx,dy,dz) {
		this.translatedX += dx;
		this.translatedY += dy;
		this.translatedZ += dz;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x += dx;
			p.y += dy;
			p.z += dz;
		}
	}
	,scale: function(s) {
		this.scaled *= s;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x *= s;
			p.y *= s;
			p.z *= s;
		}
	}
	,addNormals: function() {
		this.normals = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			this.normals[i] = new h3d_col_Point();
		}
		var pos = 0;
		var _g2 = 0;
		var _g3 = this.triCount();
		while(_g2 < _g3) {
			var i1 = _g2++;
			var i0;
			var i11;
			var i2;
			if(this.idx == null) {
				++pos;
				i0 = pos - 1;
				++pos;
				i11 = pos - 1;
				++pos;
				i2 = pos - 1;
			} else {
				i0 = this.idx[pos++];
				i11 = this.idx[pos++];
				i2 = this.idx[pos++];
			}
			var p0 = this.points[i0];
			var p1 = this.points[i11];
			var p2 = this.points[i2];
			var x = p1.x - p0.x;
			var y = p1.y - p0.y;
			var z = p1.z - p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var _this_x = x;
			var _this_y = y;
			var _this_z = z;
			var x1 = p2.x - p0.x;
			var y1 = p2.y - p0.y;
			var z1 = p2.z - p0.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p_x = x1;
			var p_y = y1;
			var p_z = z1;
			var x2 = _this_y * p_z - _this_z * p_y;
			var y2 = _this_z * p_x - _this_x * p_z;
			var z2 = _this_x * p_y - _this_y * p_x;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var n_x = x2;
			var n_y = y2;
			var n_z = z2;
			this.normals[i0].x += n_x;
			this.normals[i0].y += n_y;
			this.normals[i0].z += n_z;
			this.normals[i11].x += n_x;
			this.normals[i11].y += n_y;
			this.normals[i11].z += n_z;
			this.normals[i2].x += n_x;
			this.normals[i2].y += n_y;
			this.normals[i2].z += n_z;
		}
		var _g4 = 0;
		var _g5 = this.normals;
		while(_g4 < _g5.length) {
			var n = _g5[_g4];
			++_g4;
			n.normalize();
		}
	}
	,addTangents: function() {
		if(this.normals == null) {
			this.addNormals();
		}
		if(this.uvs == null) {
			this.addUVs();
		}
		this.tangents = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			this.tangents[i] = new h3d_col_Point();
		}
		var pos = 0;
		var _g2 = 0;
		var _g3 = this.triCount();
		while(_g2 < _g3) {
			var i1 = _g2++;
			var i0;
			var i11;
			var i2;
			if(this.idx == null) {
				++pos;
				i0 = pos - 1;
				++pos;
				i11 = pos - 1;
				++pos;
				i2 = pos - 1;
			} else {
				i0 = this.idx[pos++];
				i11 = this.idx[pos++];
				i2 = this.idx[pos++];
			}
			var p0 = this.points[i0];
			var p1 = this.points[i11];
			var p2 = this.points[i2];
			var uv0 = this.uvs[i0];
			var uv1 = this.uvs[i11];
			var uv2 = this.uvs[i2];
			var n = this.normals[i0];
			var x = p1.x - p0.x;
			var y = p1.y - p0.y;
			var z = p1.z - p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var k0_x = x;
			var k0_y = y;
			var k0_z = z;
			var x1 = p2.x - p0.x;
			var y1 = p2.y - p0.y;
			var z1 = p2.z - p0.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var k1_x = x1;
			var k1_y = y1;
			var k1_z = z1;
			var v = uv2.v - uv0.v;
			k0_x *= v;
			k0_y *= v;
			k0_z *= v;
			var v1 = uv1.v - uv0.v;
			k1_x *= v1;
			k1_y *= v1;
			k1_z *= v1;
			var t = new h3d_col_Point(k0_x - k1_x,k0_y - k1_y,k0_z - k1_z);
			var b = new h3d_col_Point(n.y * t.z - n.z * t.y,n.z * t.x - n.x * t.z,n.x * t.y - n.y * t.x);
			b.normalize();
			t = new h3d_col_Point(b.y * n.z - b.z * n.y,b.z * n.x - b.x * n.z,b.x * n.y - b.y * n.x);
			t.normalize();
			this.tangents[i0].x += t.x;
			this.tangents[i0].y += t.y;
			this.tangents[i0].z += t.z;
			this.tangents[i11].x += t.x;
			this.tangents[i11].y += t.y;
			this.tangents[i11].z += t.z;
			this.tangents[i2].x += t.x;
			this.tangents[i2].y += t.y;
			this.tangents[i2].z += t.z;
		}
		var _g4 = 0;
		var _g5 = this.tangents;
		while(_g4 < _g5.length) {
			var t1 = _g5[_g4];
			++_g4;
			t1.normalize();
		}
	}
	,addUVs: function() {
		this.uvs = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			this.uvs[i] = new h3d_prim_UV(this.points[i].x,this.points[i].y);
		}
	}
	,uvScale: function(su,sv) {
		if(this.uvs == null) {
			throw new js__$Boot_HaxeError("Missing UVs");
		}
		var m = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = this.uvs;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(m.h.__keys__[t.__id__] != null) {
				continue;
			}
			m.set(t,true);
			t.u *= su;
			t.v *= sv;
		}
	}
	,triCount: function() {
		var n = h3d_prim_MeshPrimitive.prototype.triCount.call(this);
		if(n != 0) {
			return n;
		}
		return (this.idx == null ? this.points.length : this.idx.length) / 3 | 0;
	}
	,vertexCount: function() {
		return this.points.length;
	}
	,getCollider: function() {
		var this1 = new Array(this.points.length * 3);
		var vertexes = this1;
		var this2 = new Array(this.idx.length);
		var indexes = this2;
		var vid = 0;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			vertexes[vid++] = p.x;
			vertexes[vid++] = p.y;
			vertexes[vid++] = p.z;
		}
		var _g2 = 0;
		var _g3 = this.idx.length;
		while(_g2 < _g3) {
			var i = _g2++;
			indexes[i] = this.idx[i];
		}
		var poly = new h3d_col_Polygon();
		poly.addBuffers(vertexes,indexes);
		return poly;
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		var bufs = this.getBuffers(engine);
		if(this.indexes != null) {
			engine.renderMultiBuffers(bufs,this.indexes);
		} else if((this.buffer.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0) {
			engine.renderMultiBuffers(bufs,engine.mem.quadIndexes,0,this.triCount());
		} else {
			engine.renderMultiBuffers(bufs,engine.mem.triIndexes,0,this.triCount());
		}
	}
	,__class__: h3d_prim_Polygon
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw new js__$Boot_HaxeError("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		var flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw new js__$Boot_HaxeError("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,triCount: function() {
		return this.tcount;
	}
	,vertexCount: function() {
		return this.vcount;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_prim_UV = function(u,v) {
	this.u = u;
	this.v = v;
};
$hxClasses["h3d.prim.UV"] = h3d_prim_UV;
h3d_prim_UV.__name__ = "h3d.prim.UV";
h3d_prim_UV.prototype = {
	clone: function() {
		return new h3d_prim_UV(this.u,this.v);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.u) + "," + hxd_Math.fmt(this.v) + "}";
	}
	,__class__: h3d_prim_UV
};
var h3d_scene__$Graphics_GPoint = function(x,y,z,r,g,b,a) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["h3d.scene._Graphics.GPoint"] = h3d_scene__$Graphics_GPoint;
h3d_scene__$Graphics_GPoint.__name__ = "h3d.scene._Graphics.GPoint";
h3d_scene__$Graphics_GPoint.prototype = {
	__class__: h3d_scene__$Graphics_GPoint
};
var h3d_scene_Object = function(parent) {
	var this1 = 0;
	this.flags = this1;
	this.absPos = new h3d_Matrix();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f1 = 1;
	var b1 = true;
	if(b1) {
		this.flags |= f1;
	} else {
		this.flags &= ~f1;
	}
	this.z = 0;
	var f2 = 1;
	var b2 = true;
	if(b2) {
		this.flags |= f2;
	} else {
		this.flags &= ~f2;
	}
	this.scaleX = 1;
	var f3 = 1;
	var b3 = true;
	if(b3) {
		this.flags |= f3;
	} else {
		this.flags &= ~f3;
	}
	this.scaleY = 1;
	var f4 = 1;
	var b4 = true;
	if(b4) {
		this.flags |= f4;
	} else {
		this.flags &= ~f4;
	}
	this.scaleZ = 1;
	var f5 = 1;
	var b5 = true;
	if(b5) {
		this.flags |= f5;
	} else {
		this.flags &= ~f5;
	}
	this.qRot = new h3d_Quat();
	var f6 = 1;
	var b6 = this.follow != null;
	if(b6) {
		this.flags |= f6;
	} else {
		this.flags &= ~f6;
	}
	var f7 = 2;
	this.flags |= f7;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_scene_Object.prototype = {
	set_cullingCollider: function(c) {
		this.cullingCollider = c;
		var f = 4096;
		this.flags &= ~f;
		return c;
	}
	,get_visible: function() {
		return (this.flags & 2) != 0;
	}
	,get_allocated: function() {
		return (this.flags & 32) != 0;
	}
	,get_posChanged: function() {
		return (this.flags & 1) != 0;
	}
	,get_culled: function() {
		return (this.flags & 4) != 0;
	}
	,get_followPositionOnly: function() {
		return (this.flags & 8) != 0;
	}
	,get_lightCameraCenter: function() {
		return (this.flags & 16) != 0;
	}
	,get_alwaysSync: function() {
		return (this.flags & 64) != 0;
	}
	,get_inheritCulled: function() {
		return (this.flags & 128) != 0;
	}
	,get_ignoreBounds: function() {
		return (this.flags & 512) != 0;
	}
	,get_ignoreCollide: function() {
		return (this.flags & 1024) != 0;
	}
	,get_allowSerialize: function() {
		return (this.flags & 256) == 0;
	}
	,get_ignoreParentTransform: function() {
		return (this.flags & 2048) != 0;
	}
	,get_cullingColliderInherited: function() {
		return (this.flags & 4096) != 0;
	}
	,set_posChanged: function(b) {
		var f = 1;
		var b1 = b || this.follow != null;
		if(b1) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b1;
	}
	,set_culled: function(b) {
		var f = 4;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_visible: function(b) {
		var f = 2;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_allocated: function(b) {
		var f = 32;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_followPositionOnly: function(b) {
		var f = 8;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_lightCameraCenter: function(b) {
		var f = 16;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_alwaysSync: function(b) {
		var f = 64;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_ignoreBounds: function(b) {
		var f = 512;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_inheritCulled: function(b) {
		var f = 128;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_ignoreCollide: function(b) {
		var f = 1024;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_allowSerialize: function(b) {
		var f = 256;
		var b1 = !b;
		if(b1) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return !b1;
	}
	,set_ignoreParentTransform: function(b) {
		var f = 2048;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_cullingColliderInherited: function(b) {
		var f = 4096;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,playAnimation: function(a) {
		return this.currentAnimation = a.createInstance(this);
	}
	,switchToAnimation: function(a) {
		return this.currentAnimation = a;
	}
	,stopAnimation: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		this.currentAnimation = null;
		if(recursive) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.stopAnimation(true);
			}
		}
	}
	,applyAnimationTransform: function(recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(this.defaultTransform != null) {
			var _this = this.defaultTransform;
			var v = null;
			if(v == null) {
				v = new h3d_Vector();
			}
			v.x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
			v.y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
			v.z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
			if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
				v.x *= -1;
				v.y *= -1;
				v.z *= -1;
			}
			var s = v;
			var v1 = s.x;
			this.scaleX = v1;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v2 = s.y;
			this.scaleY = v2;
			var f1 = 1;
			var b1 = true;
			if(b1) {
				this.flags |= f1;
			} else {
				this.flags &= ~f1;
			}
			var v3 = s.z;
			this.scaleZ = v3;
			var f2 = 1;
			var b2 = true;
			if(b2) {
				this.flags |= f2;
			} else {
				this.flags &= ~f2;
			}
			this.qRot.initRotateMatrix(this.defaultTransform);
			var v4 = this.defaultTransform._41;
			this.x = v4;
			var f3 = 1;
			var b3 = true;
			if(b3) {
				this.flags |= f3;
			} else {
				this.flags &= ~f3;
			}
			var v5 = this.defaultTransform._42;
			this.y = v5;
			var f4 = 1;
			var b4 = true;
			if(b4) {
				this.flags |= f4;
			} else {
				this.flags &= ~f4;
			}
			var v6 = this.defaultTransform._43;
			this.z = v6;
			var f5 = 1;
			var b5 = true;
			if(b5) {
				this.flags |= f5;
			} else {
				this.flags &= ~f5;
			}
			var v7 = null;
			this.defaultTransform = v7;
			var f6 = 1;
			var b6 = true;
			if(b6) {
				this.flags |= f6;
			} else {
				this.flags &= ~f6;
			}
		}
		if(recursive) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.applyAnimationTransform();
			}
		}
	}
	,getObjectsCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			k += c.getObjectsCount() + 1;
		}
		return k;
	}
	,getMaterialByName: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var m = o.getMaterialByName(name);
			if(m != null) {
				return m;
			}
		}
		return null;
	}
	,find: function(f) {
		var v = f(this);
		if(v != null) {
			return v;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var v1 = o.find(f);
			if(v1 != null) {
				return v1;
			}
		}
		return null;
	}
	,findAll: function(f,arr) {
		if(arr == null) {
			arr = [];
		}
		var v = f(this);
		if(v != null) {
			arr.push(v);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	,getMaterials: function(a) {
		if(a == null) {
			a = [];
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.getMaterials(a);
		}
		return a;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_Vector();
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,globalToLocal: function(pt) {
		var m = this.getInvPos();
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,getBounds: function(b) {
		if(b == null) {
			b = new h3d_col_Bounds();
		}
		if(this.parent != null) {
			this.parent.syncPos();
		}
		return this.getBoundsRec(b);
	}
	,getBoundsRec: function(b) {
		if((this.flags & 1) != 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
			var f1 = 1;
			var b2 = this.follow != null;
			if(b2) {
				this.flags |= f1;
			} else {
				this.flags &= ~f1;
			}
			this.calcAbsPos();
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			c1.getBoundsRec(b);
		}
		return b;
	}
	,getMeshes: function(out) {
		if(out == null) {
			out = [];
		}
		var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
		if(m != null) {
			out.push(m);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.getMeshes(out);
		}
		return out;
	}
	,getMeshByName: function(name) {
		var value = this.getObjectByName(name);
		return ((value) instanceof h3d_scene_Mesh) ? value : null;
	}
	,getObjectByName: function(name) {
		if(this.name == name) {
			return this;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var o = c.getObjectByName(name);
			if(o != null) {
				return o;
			}
		}
		return null;
	}
	,clone: function(o) {
		if(o == null) {
			o = new h3d_scene_Object();
		}
		if(js_Boot.getClass(o) != js_Boot.getClass(this)) {
			throw new js__$Boot_HaxeError(Std.string(this) + " is missing clone()");
		}
		var v = this.x;
		o.x = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v1 = this.y;
		o.y = v1;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			o.flags |= f1;
		} else {
			o.flags &= ~f1;
		}
		var v2 = this.z;
		o.z = v2;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			o.flags |= f2;
		} else {
			o.flags &= ~f2;
		}
		var v3 = this.scaleX;
		o.scaleX = v3;
		var f3 = 1;
		var b3 = true;
		if(b3) {
			o.flags |= f3;
		} else {
			o.flags &= ~f3;
		}
		var v4 = this.scaleY;
		o.scaleY = v4;
		var f4 = 1;
		var b4 = true;
		if(b4) {
			o.flags |= f4;
		} else {
			o.flags &= ~f4;
		}
		var v5 = this.scaleZ;
		o.scaleZ = v5;
		var f5 = 1;
		var b5 = true;
		if(b5) {
			o.flags |= f5;
		} else {
			o.flags &= ~f5;
		}
		var _this = o.qRot;
		var q = this.qRot;
		_this.x = q.x;
		_this.y = q.y;
		_this.z = q.z;
		_this.w = q.w;
		o.name = this.name;
		o.set_follow(this.follow);
		var b6 = (this.flags & 8) != 0;
		var f6 = 8;
		if(b6) {
			o.flags |= f6;
		} else {
			o.flags &= ~f6;
		}
		var b7 = (this.flags & 2) != 0;
		var f7 = 2;
		if(b7) {
			o.flags |= f7;
		} else {
			o.flags &= ~f7;
		}
		if(this.defaultTransform != null) {
			var v6 = this.defaultTransform.clone();
			o.defaultTransform = v6;
			var f8 = 1;
			var b8 = true;
			if(b8) {
				o.flags |= f8;
			} else {
				o.flags &= ~f8;
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var c1 = c.clone();
			c1.parent = o;
			o.children.push(c1);
		}
		return o;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f1 = 32;
			if(old) {
				o.flags |= f1;
			} else {
				o.flags &= ~f1;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f2 = 1;
		var b = true;
		if(b) {
			o.flags |= f2;
		} else {
			o.flags &= ~f2;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return ((p) instanceof h3d_scene_Scene) ? p : null;
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,isMesh: function() {
		return (((this) instanceof h3d_scene_Mesh) ? this : null) != null;
	}
	,toMesh: function() {
		var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
		if(m != null) {
			return m;
		}
		throw new js__$Boot_HaxeError(Std.string(this) + " is not a Mesh");
	}
	,getCollider: function() {
		if((this.flags & 1024) != 0) {
			return null;
		}
		var colliders = [];
		var col = this.getGlobalCollider();
		if(col != null) {
			colliders.push(col);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			var c = obj.getCollider();
			if(c == null) {
				continue;
			}
			var cgrp = ((c) instanceof h3d_col_GroupCollider) ? c : null;
			if(cgrp != null) {
				var _g2 = 0;
				var _g11 = cgrp.colliders;
				while(_g2 < _g11.length) {
					var c1 = _g11[_g2];
					++_g2;
					colliders.push(c1);
				}
			} else {
				colliders.push(c);
			}
		}
		if(colliders.length == 0) {
			return null;
		}
		if(colliders.length == 1) {
			return colliders[0];
		}
		return new h3d_col_GroupCollider(colliders);
	}
	,getGlobalCollider: function() {
		if((this.flags & 1024) != 0) {
			return null;
		}
		var col = this.getLocalCollider();
		if(col == null) {
			return null;
		} else {
			return new h3d_col_ObjectCollider(this,col);
		}
	}
	,getLocalCollider: function() {
		return null;
	}
	,draw: function(ctx) {
	}
	,set_follow: function(v) {
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return this.follow = v;
	}
	,calcAbsPos: function() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this1 = this.absPos;
			var a1 = this.absPos;
			var b1 = this.parent.absPos;
			var m111 = a1._11;
			var m121 = a1._12;
			var m131 = a1._13;
			var m211 = a1._21;
			var m221 = a1._22;
			var m231 = a1._23;
			var a311 = a1._31;
			var a321 = a1._32;
			var a331 = a1._33;
			var a411 = a1._41;
			var a421 = a1._42;
			var a431 = a1._43;
			var b111 = b1._11;
			var b121 = b1._12;
			var b131 = b1._13;
			var b211 = b1._21;
			var b221 = b1._22;
			var b231 = b1._23;
			var b311 = b1._31;
			var b321 = b1._32;
			var b331 = b1._33;
			var b411 = b1._41;
			var b421 = b1._42;
			var b431 = b1._43;
			_this1._11 = m111 * b111 + m121 * b211 + m131 * b311;
			_this1._12 = m111 * b121 + m121 * b221 + m131 * b321;
			_this1._13 = m111 * b131 + m121 * b231 + m131 * b331;
			_this1._14 = 0;
			_this1._21 = m211 * b111 + m221 * b211 + m231 * b311;
			_this1._22 = m211 * b121 + m221 * b221 + m231 * b321;
			_this1._23 = m211 * b131 + m221 * b231 + m231 * b331;
			_this1._24 = 0;
			_this1._31 = a311 * b111 + a321 * b211 + a331 * b311;
			_this1._32 = a311 * b121 + a321 * b221 + a331 * b321;
			_this1._33 = a311 * b131 + a321 * b231 + a331 * b331;
			_this1._34 = 0;
			_this1._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
			_this1._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
			_this1._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
			_this1._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this2 = this.absPos;
			var a2 = this.defaultTransform;
			var b2 = this.absPos;
			var m112 = a2._11;
			var m122 = a2._12;
			var m132 = a2._13;
			var m212 = a2._21;
			var m222 = a2._22;
			var m232 = a2._23;
			var a312 = a2._31;
			var a322 = a2._32;
			var a332 = a2._33;
			var a412 = a2._41;
			var a422 = a2._42;
			var a432 = a2._43;
			var b112 = b2._11;
			var b122 = b2._12;
			var b132 = b2._13;
			var b212 = b2._21;
			var b222 = b2._22;
			var b232 = b2._23;
			var b312 = b2._31;
			var b322 = b2._32;
			var b332 = b2._33;
			var b412 = b2._41;
			var b422 = b2._42;
			var b432 = b2._43;
			_this2._11 = m112 * b112 + m122 * b212 + m132 * b312;
			_this2._12 = m112 * b122 + m122 * b222 + m132 * b322;
			_this2._13 = m112 * b132 + m122 * b232 + m132 * b332;
			_this2._14 = 0;
			_this2._21 = m212 * b112 + m222 * b212 + m232 * b312;
			_this2._22 = m212 * b122 + m222 * b222 + m232 * b322;
			_this2._23 = m212 * b132 + m222 * b232 + m232 * b332;
			_this2._24 = 0;
			_this2._31 = a312 * b112 + a322 * b212 + a332 * b312;
			_this2._32 = a312 * b122 + a322 * b222 + a332 * b322;
			_this2._33 = a312 * b132 + a322 * b232 + a332 * b332;
			_this2._34 = 0;
			_this2._41 = a412 * b112 + a422 * b212 + a432 * b312 + b412;
			_this2._42 = a412 * b122 + a422 * b222 + a432 * b322 + b422;
			_this2._43 = a412 * b132 + a422 * b232 + a432 * b332 + b432;
			_this2._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		var old1 = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		if(ctx.cullingCollider != null && (this.cullingCollider == null || (this.flags & 4096) != 0)) {
			this.set_cullingCollider(ctx.cullingCollider);
			var f = 4096;
			this.flags |= f;
		} else if((this.flags & 4096) != 0) {
			this.set_cullingCollider(null);
		}
		var prevCollider = ctx.cullingCollider;
		if((this.flags & 128) != 0) {
			ctx.cullingCollider = this.cullingCollider;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		this.sync(ctx);
		var f1 = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f2 = 1;
					var b1 = true;
					if(b1) {
						c.flags |= f2;
					} else {
						c.flags &= ~f2;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old1;
		ctx.cullingCollider = prevCollider;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			c1.emitRec(ctx);
		}
	}
	,set_x: function(v) {
		this.x = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_y: function(v) {
		this.y = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_z: function(v) {
		this.z = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleX: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleY: function(v) {
		this.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleZ: function(v) {
		this.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_defaultTransform: function(v) {
		this.defaultTransform = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,setPosition: function(x,y,z) {
		this.x = x;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.y = y;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.z = z;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		var f3 = 1;
		var b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
	}
	,setTransform: function(mat) {
		var v = h3d_scene_Object.tmpVec;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(mat._11 * mat._11 + mat._12 * mat._12 + mat._13 * mat._13);
		v.y = Math.sqrt(mat._21 * mat._21 + mat._22 * mat._22 + mat._23 * mat._23);
		v.z = Math.sqrt(mat._31 * mat._31 + mat._32 * mat._32 + mat._33 * mat._33);
		if(mat._11 * (mat._22 * mat._33 - mat._23 * mat._32) + mat._12 * (mat._23 * mat._31 - mat._21 * mat._33) + mat._13 * (mat._21 * mat._32 - mat._22 * mat._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var s = v;
		var v1 = mat._41;
		this.x = v1;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v2 = mat._42;
		this.y = v2;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		var v3 = mat._43;
		this.z = v3;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		var v4 = s.x;
		this.scaleX = v4;
		var f3 = 1;
		var b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
		var v5 = s.y;
		this.scaleY = v5;
		var f4 = 1;
		var b4 = true;
		if(b4) {
			this.flags |= f4;
		} else {
			this.flags &= ~f4;
		}
		var v6 = s.z;
		this.scaleZ = v6;
		var f5 = 1;
		var b5 = true;
		if(b5) {
			this.flags |= f5;
		} else {
			this.flags &= ~f5;
		}
		h3d_scene_Object.tmpMat.load(mat);
		h3d_scene_Object.tmpMat.prependScale(1.0 / s.x,1.0 / s.y,1.0 / s.z);
		this.qRot.initRotateMatrix(h3d_scene_Object.tmpMat);
		var f6 = 1;
		var b6 = true;
		if(b6) {
			this.flags |= f6;
		} else {
			this.flags &= ~f6;
		}
	}
	,rotate: function(rx,ry,rz) {
		var qTmp = new h3d_Quat();
		qTmp.initRotation(rx,ry,rz);
		this.qRot.multiply(qTmp,this.qRot);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setRotation: function(rx,ry,rz) {
		this.qRot.initRotation(rx,ry,rz);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setRotationAxis: function(ax,ay,az,angle) {
		this.qRot.initRotateAxis(ax,ay,az,angle);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setDirection: function(v) {
		this.qRot.initDirection(v);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,getDirection: function() {
		var _this = this.qRot;
		return new h3d_Vector(1 - 2 * (_this.y * _this.y + _this.z * _this.z),2 * (_this.x * _this.y - _this.z * _this.w),2 * (_this.x * _this.z + _this.y * _this.w));
	}
	,getRotationQuat: function() {
		return this.qRot;
	}
	,setRotationQuat: function(q) {
		this.qRot = q;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,scale: function(v) {
		var _g = this;
		var v1 = _g.scaleX * v;
		_g.scaleX = v1;
		var f = 1;
		var b = true;
		if(b) {
			_g.flags |= f;
		} else {
			_g.flags &= ~f;
		}
		var _g1 = this;
		var v2 = _g1.scaleY * v;
		_g1.scaleY = v2;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			_g1.flags |= f1;
		} else {
			_g1.flags &= ~f1;
		}
		var _g2 = this;
		var v3 = _g2.scaleZ * v;
		_g2.scaleZ = v3;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			_g2.flags |= f2;
		} else {
			_g2.flags &= ~f2;
		}
		var f3 = 1;
		var b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
	}
	,setScale: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.scaleY = v;
		var f1 = 1;
		var b1 = true;
		if(b1) {
			this.flags |= f1;
		} else {
			this.flags &= ~f1;
		}
		this.scaleZ = v;
		var f2 = 1;
		var b2 = true;
		if(b2) {
			this.flags |= f2;
		} else {
			this.flags &= ~f2;
		}
		var f3 = 1;
		var b3 = true;
		if(b3) {
			this.flags |= f3;
		} else {
			this.flags &= ~f3;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop() + (this.name == null ? "" : "(" + this.name + ")");
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,getChildIndex: function(o) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	,get_numChildren: function() {
		return this.children.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$h3d_$scene_$Object(this.children);
	}
	,__class__: h3d_scene_Object
	,__properties__: {set_posChanged:"set_posChanged",get_posChanged:"get_posChanged",set_cullingColliderInherited:"set_cullingColliderInherited",get_cullingColliderInherited:"get_cullingColliderInherited",set_cullingCollider:"set_cullingCollider",set_lightCameraCenter:"set_lightCameraCenter",get_lightCameraCenter:"get_lightCameraCenter",set_ignoreParentTransform:"set_ignoreParentTransform",get_ignoreParentTransform:"get_ignoreParentTransform",set_allowSerialize:"set_allowSerialize",get_allowSerialize:"get_allowSerialize",set_ignoreCollide:"set_ignoreCollide",get_ignoreCollide:"get_ignoreCollide",set_ignoreBounds:"set_ignoreBounds",get_ignoreBounds:"get_ignoreBounds",set_inheritCulled:"set_inheritCulled",get_inheritCulled:"get_inheritCulled",set_alwaysSync:"set_alwaysSync",get_alwaysSync:"get_alwaysSync",set_culled:"set_culled",get_culled:"get_culled",set_defaultTransform:"set_defaultTransform",set_followPositionOnly:"set_followPositionOnly",get_followPositionOnly:"get_followPositionOnly",set_follow:"set_follow",set_allocated:"set_allocated",get_allocated:"get_allocated",set_visible:"set_visible",get_visible:"get_visible",set_scaleZ:"set_scaleZ",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_z:"set_z",set_y:"set_y",set_x:"set_x",get_numChildren:"get_numChildren"}
};
var h3d_scene_Mesh = function(primitive,material,parent) {
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	getMeshMaterials: function() {
		return [this.material];
	}
	,getBoundsRec: function(b) {
		b = h3d_scene_Object.prototype.getBoundsRec.call(this,b);
		if(this.primitive == null || (this.flags & 512) != 0) {
			return b;
		}
		var _this = this.primitive.getBounds();
		var b1 = new h3d_col_Bounds();
		b1.xMin = _this.xMin;
		b1.xMax = _this.xMax;
		b1.yMin = _this.yMin;
		b1.yMax = _this.yMax;
		b1.zMin = _this.zMin;
		b1.zMax = _this.zMax;
		var tmp = b1;
		tmp.transform(this.absPos);
		if(tmp.xMin < b.xMin) {
			b.xMin = tmp.xMin;
		}
		if(tmp.xMax > b.xMax) {
			b.xMax = tmp.xMax;
		}
		if(tmp.yMin < b.yMin) {
			b.yMin = tmp.yMin;
		}
		if(tmp.yMax > b.yMax) {
			b.yMax = tmp.yMax;
		}
		if(tmp.zMin < b.zMin) {
			b.zMin = tmp.zMin;
		}
		if(tmp.zMax > b.zMax) {
			b.zMax = tmp.zMax;
		}
		return b;
	}
	,clone: function(o) {
		var m = o == null ? new h3d_scene_Mesh(null,this.material) : o;
		m.set_primitive(this.primitive);
		m.material = this.material.clone();
		h3d_scene_Object.prototype.clone.call(this,m);
		return m;
	}
	,getLocalCollider: function() {
		return this.primitive.getCollider();
	}
	,draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	,getMaterialByName: function(name) {
		if(this.material != null && this.material.name == name) {
			return this.material;
		}
		return h3d_scene_Object.prototype.getMaterialByName.call(this,name);
	}
	,getMaterials: function(a) {
		if(a == null) {
			a = [];
		}
		if(this.material != null && a.indexOf(this.material) < 0) {
			a.push(this.material);
		}
		return h3d_scene_Object.prototype.getMaterials.call(this,a);
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
	,__properties__: $extend(h3d_scene_Object.prototype.__properties__,{set_primitive:"set_primitive"})
});
var h3d_scene_Graphics = function(parent) {
	this.lineSize = 0.;
	this.curR = 0.;
	this.curZ = 0.;
	this.curY = 0.;
	this.curX = 0.;
	this.bprim = new h3d_prim_BigPrimitive(12);
	this.bprim.isStatic = false;
	h3d_scene_Mesh.call(this,this.bprim,null,parent);
	this.tmpPoints = [];
	this.lineShader = new h3d_shader_LineShader();
	this.lineShader.setPriority(-100);
	var _this = this.material;
	_this.set_castShadows(false);
	_this.set_receiveShadows(false);
	this.material.passes.set_enableLights(false);
	this.material.passes.addShader(this.lineShader);
	var vcolor = new h3d_shader_VertexColorAlpha();
	vcolor.setPriority(-100);
	this.material.passes.addShader(vcolor);
	this.material.passes.set_culling(h3d_mat_Face.None);
};
$hxClasses["h3d.scene.Graphics"] = h3d_scene_Graphics;
h3d_scene_Graphics.__name__ = "h3d.scene.Graphics";
h3d_scene_Graphics.__super__ = h3d_scene_Mesh;
h3d_scene_Graphics.prototype = $extend(h3d_scene_Mesh.prototype,{
	onRemove: function() {
		h3d_scene_Mesh.prototype.onRemove.call(this);
		this.bprim.clear();
	}
	,set_is3D: function(v) {
		if(this.is3D == v) {
			return v;
		}
		if(v) {
			this.material.passes.removeShader(this.lineShader);
		} else {
			this.material.passes.addShader(this.lineShader);
		}
		this.bprim.clear();
		this.tmpPoints = [];
		return this.is3D = v;
	}
	,flushLine: function() {
		var _gthis = this;
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y && p.z == prev.z;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			pts.push(new h3d_scene__$Graphics_GPoint(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,prev.z * 2 - prevLast.z,0,0,0,0));
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			prev = new h3d_scene__$Graphics_GPoint(p.x * 2 - pNext.x,p.y * 2 - pNext.y,p.z * 2 - pNext.z,0,0,0,0);
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var start = this.bprim.vertexCount();
		var pindex = start;
		var v = 0.;
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			var hasIndex = i < count - 1 || closed;
			this.bprim.begin(2,hasIndex ? 6 : 0);
			var _this = _gthis.bprim;
			_this.tmpBuf.array[_this.bufPos++] = p.x + nx;
			var _this1 = _gthis.bprim;
			_this1.tmpBuf.array[_this1.bufPos++] = p.y + ny;
			var _this2 = _gthis.bprim;
			_this2.tmpBuf.array[_this2.bufPos++] = p.z;
			var _this3 = _gthis.bprim;
			_this3.tmpBuf.array[_this3.bufPos++] = 0;
			var _this4 = _gthis.bprim;
			_this4.tmpBuf.array[_this4.bufPos++] = 0;
			var _this5 = _gthis.bprim;
			_this5.tmpBuf.array[_this5.bufPos++] = 1;
			var _this6 = _gthis.bprim;
			_this6.tmpBuf.array[_this6.bufPos++] = 0;
			var _this7 = _gthis.bprim;
			_this7.tmpBuf.array[_this7.bufPos++] = v;
			var _this8 = _gthis.bprim;
			_this8.tmpBuf.array[_this8.bufPos++] = p.r;
			var _this9 = _gthis.bprim;
			_this9.tmpBuf.array[_this9.bufPos++] = p.g;
			var _this10 = _gthis.bprim;
			_this10.tmpBuf.array[_this10.bufPos++] = p.b;
			var _this11 = _gthis.bprim;
			_this11.tmpBuf.array[_this11.bufPos++] = p.a;
			var _this12 = _gthis.bprim;
			_this12.tmpBuf.array[_this12.bufPos++] = p.x - nx;
			var _this13 = _gthis.bprim;
			_this13.tmpBuf.array[_this13.bufPos++] = p.y - ny;
			var _this14 = _gthis.bprim;
			_this14.tmpBuf.array[_this14.bufPos++] = p.z;
			var _this15 = _gthis.bprim;
			_this15.tmpBuf.array[_this15.bufPos++] = 0;
			var _this16 = _gthis.bprim;
			_this16.tmpBuf.array[_this16.bufPos++] = 0;
			var _this17 = _gthis.bprim;
			_this17.tmpBuf.array[_this17.bufPos++] = 1;
			var _this18 = _gthis.bprim;
			_this18.tmpBuf.array[_this18.bufPos++] = 1;
			var _this19 = _gthis.bprim;
			_this19.tmpBuf.array[_this19.bufPos++] = v;
			var _this20 = _gthis.bprim;
			_this20.tmpBuf.array[_this20.bufPos++] = p.r;
			var _this21 = _gthis.bprim;
			_this21.tmpBuf.array[_this21.bufPos++] = p.g;
			var _this22 = _gthis.bprim;
			_this22.tmpBuf.array[_this22.bufPos++] = p.b;
			var _this23 = _gthis.bprim;
			_this23.tmpBuf.array[_this23.bufPos++] = p.a;
			v = 1 - v;
			if(hasIndex) {
				var pnext = i == last ? start - pindex : 2;
				var _this24 = this.bprim;
				_this24.tmpIdx[_this24.idxPos++] = _this24.startIndex;
				var _this25 = this.bprim;
				_this25.tmpIdx[_this25.idxPos++] = 1 + _this25.startIndex;
				var _this26 = this.bprim;
				_this26.tmpIdx[_this26.idxPos++] = pnext + _this26.startIndex;
				var _this27 = this.bprim;
				_this27.tmpIdx[_this27.idxPos++] = pnext + _this27.startIndex;
				var _this28 = this.bprim;
				_this28.tmpIdx[_this28.idxPos++] = 1 + _this28.startIndex;
				var _this29 = this.bprim;
				_this29.tmpIdx[_this29.idxPos++] = pnext + 1 + _this29.startIndex;
			}
			pindex += 2;
			prev = p;
			p = next;
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.is3D) {
			this.flushLine();
			this.tmpPoints = [];
		}
	}
	,sync: function(ctx) {
		h3d_scene_Mesh.prototype.sync.call(this,ctx);
		this.flush();
		this.bprim.flush();
	}
	,draw: function(ctx) {
		this.flush();
		this.bprim.flush();
		h3d_scene_Mesh.prototype.draw.call(this,ctx);
	}
	,clear: function() {
		this.flush();
		this.bprim.clear();
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0.;
		}
		this.flush();
		if(size > 0 && this.lineSize != size) {
			this.lineSize = size;
			if(!this.is3D) {
				this.lineShader.width__ = this.lineSize;
			}
		}
		this.setColor(color,alpha);
	}
	,setColor: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
	}
	,drawLine: function(p1,p2) {
		this.moveTo(p1.x,p1.y,p1.z);
		this.lineTo(p2.x,p2.y,p2.z);
	}
	,moveTo: function(x,y,z) {
		if(this.is3D) {
			this.flush();
			this.lineTo(x,y,z);
		} else {
			this.curX = x;
			this.curY = y;
			this.curZ = z;
		}
	}
	,addVertex: function(x,y,z,r,g,b,a) {
		this.tmpPoints.push(new h3d_scene__$Graphics_GPoint(x,y,z,r,g,b,a));
	}
	,lineTo: function(x,y,z) {
		var _gthis = this;
		if(this.is3D) {
			this.tmpPoints.push(new h3d_scene__$Graphics_GPoint(x,y,z,this.curR,this.curG,this.curB,this.curA));
			return;
		}
		this.bprim.begin(4,6);
		var nx = x - this.curX;
		var ny = y - this.curY;
		var nz = z - this.curZ;
		var x1 = this.curX;
		var y1 = this.curY;
		var z1 = this.curZ;
		var _this = this.bprim.bounds;
		if(x1 < _this.xMin) {
			_this.xMin = x1;
		}
		if(x1 > _this.xMax) {
			_this.xMax = x1;
		}
		if(y1 < _this.yMin) {
			_this.yMin = y1;
		}
		if(y1 > _this.yMax) {
			_this.yMax = y1;
		}
		if(z1 < _this.zMin) {
			_this.zMin = z1;
		}
		if(z1 > _this.zMax) {
			_this.zMax = z1;
		}
		var _this1 = this.bprim.bounds;
		if(x < _this1.xMin) {
			_this1.xMin = x;
		}
		if(x > _this1.xMax) {
			_this1.xMax = x;
		}
		if(y < _this1.yMin) {
			_this1.yMin = y;
		}
		if(y > _this1.yMax) {
			_this1.yMax = y;
		}
		if(z < _this1.zMin) {
			_this1.zMin = z;
		}
		if(z > _this1.zMax) {
			_this1.zMax = z;
		}
		var _this2 = _gthis.bprim;
		_this2.tmpBuf.array[_this2.bufPos++] = _gthis.curX;
		var _this3 = _gthis.bprim;
		_this3.tmpBuf.array[_this3.bufPos++] = _gthis.curY;
		var _this4 = _gthis.bprim;
		_this4.tmpBuf.array[_this4.bufPos++] = _gthis.curZ;
		var _this5 = _gthis.bprim;
		_this5.tmpBuf.array[_this5.bufPos++] = nx;
		var _this6 = _gthis.bprim;
		_this6.tmpBuf.array[_this6.bufPos++] = ny;
		var _this7 = _gthis.bprim;
		_this7.tmpBuf.array[_this7.bufPos++] = nz;
		var _this8 = _gthis.bprim;
		_this8.tmpBuf.array[_this8.bufPos++] = 0;
		var _this9 = _gthis.bprim;
		_this9.tmpBuf.array[_this9.bufPos++] = 0;
		var _this10 = _gthis.bprim;
		_this10.tmpBuf.array[_this10.bufPos++] = _gthis.curR;
		var _this11 = _gthis.bprim;
		_this11.tmpBuf.array[_this11.bufPos++] = _gthis.curG;
		var _this12 = _gthis.bprim;
		_this12.tmpBuf.array[_this12.bufPos++] = _gthis.curB;
		var _this13 = _gthis.bprim;
		_this13.tmpBuf.array[_this13.bufPos++] = _gthis.curA;
		var _this14 = _gthis.bprim;
		_this14.tmpBuf.array[_this14.bufPos++] = _gthis.curX;
		var _this15 = _gthis.bprim;
		_this15.tmpBuf.array[_this15.bufPos++] = _gthis.curY;
		var _this16 = _gthis.bprim;
		_this16.tmpBuf.array[_this16.bufPos++] = _gthis.curZ;
		var _this17 = _gthis.bprim;
		_this17.tmpBuf.array[_this17.bufPos++] = nx;
		var _this18 = _gthis.bprim;
		_this18.tmpBuf.array[_this18.bufPos++] = ny;
		var _this19 = _gthis.bprim;
		_this19.tmpBuf.array[_this19.bufPos++] = nz;
		var _this20 = _gthis.bprim;
		_this20.tmpBuf.array[_this20.bufPos++] = 0;
		var _this21 = _gthis.bprim;
		_this21.tmpBuf.array[_this21.bufPos++] = 1;
		var _this22 = _gthis.bprim;
		_this22.tmpBuf.array[_this22.bufPos++] = _gthis.curR;
		var _this23 = _gthis.bprim;
		_this23.tmpBuf.array[_this23.bufPos++] = _gthis.curG;
		var _this24 = _gthis.bprim;
		_this24.tmpBuf.array[_this24.bufPos++] = _gthis.curB;
		var _this25 = _gthis.bprim;
		_this25.tmpBuf.array[_this25.bufPos++] = _gthis.curA;
		var _this26 = _gthis.bprim;
		_this26.tmpBuf.array[_this26.bufPos++] = _gthis.curX;
		var _this27 = _gthis.bprim;
		_this27.tmpBuf.array[_this27.bufPos++] = _gthis.curY;
		var _this28 = _gthis.bprim;
		_this28.tmpBuf.array[_this28.bufPos++] = _gthis.curZ;
		var _this29 = _gthis.bprim;
		_this29.tmpBuf.array[_this29.bufPos++] = nx;
		var _this30 = _gthis.bprim;
		_this30.tmpBuf.array[_this30.bufPos++] = ny;
		var _this31 = _gthis.bprim;
		_this31.tmpBuf.array[_this31.bufPos++] = nz;
		var _this32 = _gthis.bprim;
		_this32.tmpBuf.array[_this32.bufPos++] = 1;
		var _this33 = _gthis.bprim;
		_this33.tmpBuf.array[_this33.bufPos++] = 0;
		var _this34 = _gthis.bprim;
		_this34.tmpBuf.array[_this34.bufPos++] = _gthis.curR;
		var _this35 = _gthis.bprim;
		_this35.tmpBuf.array[_this35.bufPos++] = _gthis.curG;
		var _this36 = _gthis.bprim;
		_this36.tmpBuf.array[_this36.bufPos++] = _gthis.curB;
		var _this37 = _gthis.bprim;
		_this37.tmpBuf.array[_this37.bufPos++] = _gthis.curA;
		var _this38 = _gthis.bprim;
		_this38.tmpBuf.array[_this38.bufPos++] = _gthis.curX;
		var _this39 = _gthis.bprim;
		_this39.tmpBuf.array[_this39.bufPos++] = _gthis.curY;
		var _this40 = _gthis.bprim;
		_this40.tmpBuf.array[_this40.bufPos++] = _gthis.curZ;
		var _this41 = _gthis.bprim;
		_this41.tmpBuf.array[_this41.bufPos++] = nx;
		var _this42 = _gthis.bprim;
		_this42.tmpBuf.array[_this42.bufPos++] = ny;
		var _this43 = _gthis.bprim;
		_this43.tmpBuf.array[_this43.bufPos++] = nz;
		var _this44 = _gthis.bprim;
		_this44.tmpBuf.array[_this44.bufPos++] = 1;
		var _this45 = _gthis.bprim;
		_this45.tmpBuf.array[_this45.bufPos++] = 1;
		var _this46 = _gthis.bprim;
		_this46.tmpBuf.array[_this46.bufPos++] = _gthis.curR;
		var _this47 = _gthis.bprim;
		_this47.tmpBuf.array[_this47.bufPos++] = _gthis.curG;
		var _this48 = _gthis.bprim;
		_this48.tmpBuf.array[_this48.bufPos++] = _gthis.curB;
		var _this49 = _gthis.bprim;
		_this49.tmpBuf.array[_this49.bufPos++] = _gthis.curA;
		var _this50 = this.bprim;
		_this50.tmpIdx[_this50.idxPos++] = _this50.startIndex;
		var _this51 = this.bprim;
		_this51.tmpIdx[_this51.idxPos++] = 1 + _this51.startIndex;
		var _this52 = this.bprim;
		_this52.tmpIdx[_this52.idxPos++] = 2 + _this52.startIndex;
		var _this53 = this.bprim;
		_this53.tmpIdx[_this53.idxPos++] = 2 + _this53.startIndex;
		var _this54 = this.bprim;
		_this54.tmpIdx[_this54.idxPos++] = 3 + _this54.startIndex;
		var _this55 = this.bprim;
		_this55.tmpIdx[_this55.idxPos++] = 1 + _this55.startIndex;
		this.curX = x;
		this.curY = y;
		this.curZ = z;
	}
	,__class__: h3d_scene_Graphics
	,__properties__: $extend(h3d_scene_Mesh.prototype.__properties__,{set_is3D:"set_is3D"})
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector();
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,preventClick: function() {
		this.mouseDownButton = -1;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.overList.indexOf(this) != -1;
		} else {
			return false;
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
	,__properties__: $extend(h3d_scene_Object.prototype.__properties__,{set_cursor:"set_cursor"})
});
var h3d_scene_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	get_color: function() {
		return new h3d_Vector();
	}
	,set_color: function(v) {
		return v;
	}
	,get_enableSpecular: function() {
		return false;
	}
	,set_enableSpecular: function(b) {
		if(b) {
			throw new js__$Boot_HaxeError("Not implemented for this light");
		}
		return false;
	}
	,emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
	,__properties__: $extend(h3d_scene_Object.prototype.__properties__,{set_enableSpecular:"set_enableSpecular",get_enableSpecular:"get_enableSpecular",set_color:"set_color",get_color:"get_color"})
});
var h3d_scene_LightSystem = function() {
	this.drawPasses = 0;
	this.ambientLight = new h3d_Vector(1,1,1);
};
$hxClasses["h3d.scene.LightSystem"] = h3d_scene_LightSystem;
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	initGlobals: function(globals) {
	}
	,cullLights: function() {
		var l = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(l != null) {
			s.x = l.absPos._41;
			s.y = l.absPos._42;
			s.z = l.absPos._43;
			s.r = l.cullingDistance;
			if(l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = l.next;
				} else {
					prev.next = l.next;
				}
				l = l.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = l;
			l = l.next;
		}
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene_MultiMaterial = function(prim,mats,parent) {
	h3d_scene_Mesh.call(this,prim,mats == null ? null : mats[0],parent);
	this.materials = mats == null ? [this.material] : mats;
};
$hxClasses["h3d.scene.MultiMaterial"] = h3d_scene_MultiMaterial;
h3d_scene_MultiMaterial.__name__ = "h3d.scene.MultiMaterial";
h3d_scene_MultiMaterial.__super__ = h3d_scene_Mesh;
h3d_scene_MultiMaterial.prototype = $extend(h3d_scene_Mesh.prototype,{
	getMeshMaterials: function() {
		return this.materials.slice();
	}
	,clone: function(o) {
		var m = o == null ? new h3d_scene_MultiMaterial(null,this.materials) : o;
		m.materials = [];
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var mat = _g1[_g];
			++_g;
			m.materials.push(mat == null ? null : mat.clone());
		}
		h3d_scene_Mesh.prototype.clone.call(this,m);
		m.material = m.materials[0];
		return m;
	}
	,emit: function(ctx) {
		var _g = 0;
		var _g1 = this.materials.length;
		while(_g < _g1) {
			var i = _g++;
			var m = this.materials[i];
			if(m != null) {
				var index = i;
				if(index == null) {
					index = 0;
				}
				var p = m.passes;
				while(p != null) {
					ctx.emitPass(p,this).index = index;
					p = p.nextPass;
				}
			}
		}
	}
	,getMaterialByName: function(name) {
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m != null && m.name == name) {
				return m;
			}
		}
		return h3d_scene_Mesh.prototype.getMaterialByName.call(this,name);
	}
	,getMaterials: function(a) {
		if(a == null) {
			a = [];
		}
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m != null && a.indexOf(m) < 0) {
				a.push(m);
			}
		}
		var _g2 = 0;
		var _g3 = this.children;
		while(_g2 < _g3.length) {
			var o = _g3[_g2];
			++_g2;
			o.getMaterials(a);
		}
		return a;
	}
	,draw: function(ctx) {
		if(this.materials.length > 1) {
			this.primitive.selectMaterial(ctx.drawPass.index);
		}
		h3d_scene_Mesh.prototype.draw.call(this,ctx);
	}
	,__class__: h3d_scene_MultiMaterial
});
var h3d_scene__$Object_ObjectFlags_$Impl_$ = {};
$hxClasses["h3d.scene._Object.ObjectFlags_Impl_"] = h3d_scene__$Object_ObjectFlags_$Impl_$;
h3d_scene__$Object_ObjectFlags_$Impl_$.__name__ = "h3d.scene._Object.ObjectFlags_Impl_";
h3d_scene__$Object_ObjectFlags_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
h3d_scene__$Object_ObjectFlags_$Impl_$.toInt = function(this1) {
	return this1;
};
h3d_scene__$Object_ObjectFlags_$Impl_$.has = function(this1,f) {
	return (this1 & f) != 0;
};
h3d_scene__$Object_ObjectFlags_$Impl_$.set = function(this1,f,b) {
	if(b) {
		this1 |= f;
	} else {
		this1 &= ~f;
	}
	return b;
};
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d_scene__$RenderContext_SharedGlobal;
h3d_scene__$RenderContext_SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	emit: function(mat,obj,index) {
		if(index == null) {
			index = 0;
		}
		var p = mat.passes;
		while(p != null) {
			this.emitPass(p,obj).index = index;
			p = p.nextPass;
		}
	}
	,start: function() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = null;
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	,nextPass: function() {
		this.cachedPos = 0;
		this.drawPass = null;
	}
	,getGlobal: function(name) {
		var id = hxsl_Globals.allocID(name);
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == id) {
				return g.value;
			}
		}
		return null;
	}
	,setGlobal: function(name,value) {
		this.setGlobalID(hxsl_Globals.allocID(name),value);
	}
	,setGlobalID: function(gid,value) {
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	,emitPass: function(pass,obj) {
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		o.next = this.passes;
		this.passes = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,uploadParams: function() {
		this.currentManager.fillParams(this.shaderBuffers,this.drawPass.shader,this.drawPass.shaders);
		this.engine.uploadShaderBuffers(this.shaderBuffers,1);
		this.engine.uploadShaderBuffers(this.shaderBuffers,2);
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = null;
		this.lights = null;
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_RenderMode = $hxEnums["h3d.scene.RenderMode"] = { __ename__ : true, __constructs__ : ["Default","LightProbe"]
	,Default: {_hx_index:0,__enum__:"h3d.scene.RenderMode",toString:$estr}
	,LightProbe: {_hx_index:1,__enum__:"h3d.scene.RenderMode",toString:$estr}
};
h3d_scene_RenderMode.__empty_constructs__ = [h3d_scene_RenderMode.Default,h3d_scene_RenderMode.LightProbe];
var h3d_scene_Renderer = function() {
	this.renderMode = h3d_scene_RenderMode.Default;
	this.effects = [];
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var f = $bind(this,this.depthSort);
	this.frontToBack = function(passes) {
		f(true,passes);
	};
	var f1 = $bind(this,this.depthSort);
	this.backToFront = function(passes1) {
		f1(false,passes1);
	};
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	dispose: function() {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.dispose();
		}
		var _g2 = 0;
		var _g3 = this.effects;
		while(_g2 < _g3.length) {
			var f = _g3[_g2];
			++_g2;
			f.dispose();
		}
		this.passObjects = new haxe_ds_StringMap();
	}
	,mark: function(id) {
	}
	,getPass: function(c) {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(p,c)) {
				return p;
			}
		}
		return null;
	}
	,getPassByName: function(name) {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.name == name) {
				return p;
			}
		}
		return null;
	}
	,debugCompileShader: function(pass) {
		var p = this.getPassByName(pass.name);
		if(p == null) {
			p = this.defaultPass;
		}
		p.setContext(this.ctx);
		return p.compileShader(pass);
	}
	,hasFeature: function(f) {
		return h3d_Engine.CURRENT.driver.hasFeature(f);
	}
	,getDefaultLight: function(l) {
		return l;
	}
	,getLightSystem: function() {
		return this.ctx.scene.lightSystem;
	}
	,time: function(name) {
	}
	,depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp1;
			if(list == null) {
				tmp1 = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p1;
				var q;
				var e;
				var tail;
				while(true) {
					p1 = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p1 != null) {
						++nmerges;
						q = p1;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p1.pass.layer == q.pass.layer ? p1.depth > q.depth ? 1 : -1 : p1.pass.layer - q.pass.layer) <= 0) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p1 = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp1 = list;
			}
			passes.current = tmp1;
		} else {
			var list1 = passes.current;
			var tmp2;
			if(list1 == null) {
				tmp2 = null;
			} else {
				var insize1 = 1;
				var nmerges1;
				var psize1 = 0;
				var qsize1 = 0;
				var p2;
				var q1;
				var e1;
				var tail1;
				while(true) {
					p2 = list1;
					list1 = null;
					tail1 = null;
					nmerges1 = 0;
					while(p2 != null) {
						++nmerges1;
						q1 = p2;
						psize1 = 0;
						var _g2 = 0;
						var _g11 = insize1;
						while(_g2 < _g11) {
							var i1 = _g2++;
							++psize1;
							q1 = q1.next;
							if(q1 == null) {
								break;
							}
						}
						qsize1 = insize1;
						while(psize1 > 0 || qsize1 > 0 && q1 != null) {
							if(psize1 == 0) {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							} else if(qsize1 == 0 || q1 == null || (p2.pass.layer == q1.pass.layer ? p2.depth > q1.depth ? -1 : 1 : p2.pass.layer - q1.pass.layer) <= 0) {
								e1 = p2;
								p2 = p2.next;
								--psize1;
							} else {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							}
							if(tail1 != null) {
								tail1.next = e1;
							} else {
								list1 = e1;
							}
							tail1 = e1;
						}
						p2 = q1;
					}
					tail1.next = null;
					if(nmerges1 <= 1) {
						break;
					}
					insize1 *= 2;
				}
				tmp2 = list1;
			}
			passes.current = tmp2;
		}
	}
	,clear: function(color,depth,stencil) {
		this.ctx.engine.clear(color,depth,stencil);
	}
	,allocTarget: function(name,depth,size,format) {
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		return this.ctx.textures.allocTarget(name,Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,format);
	}
	,copy: function(from,to,blend) {
		h3d_pass_Copy.run(from,to,blend);
	}
	,setTarget: function(tex) {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushTarget(tex);
		this.hasSetTarget = true;
	}
	,setTargets: function(textures) {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushTargets(textures);
		this.hasSetTarget = true;
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		var _this = this.passObjects;
		return (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null;
	}
	,get: function(name) {
		var _this = this.passObjects;
		var p = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,draw: function(name) {
		this.defaultPass.draw(this.get(name));
	}
	,render: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,computeStatic: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,start: function() {
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g2 = 0;
		while(_g2 < passes.length) {
			var p1 = passes[_g2];
			++_g2;
			var key = p1.name;
			var _this = this.passObjects;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,p1);
			} else {
				_this.h[key] = p1;
			}
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g3 = 0;
		while(_g3 < passes.length) {
			var p2 = passes[_g3];
			++_g3;
			var key1 = p2.name;
			var value = null;
			var _this1 = this.passObjects;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	this.checkPasses = true;
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,removeEventListener: function(f) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(Reflect.compareMethods(e,f)) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p1_x = x;
			var p1_y = y;
			var p1_z = z;
			var x1 = p1.x;
			var y1 = p1.y;
			var z1 = p1.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p2_x = x1;
			var p2_y = y1;
			var p2_z = z1;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				var minv = i.getInvPos();
				var x2 = r1.px;
				var y2 = r1.py;
				var z2 = r1.pz;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var p_x = x2;
				var p_y = y2;
				var p_z = z2;
				var p_w = 1.;
				var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + p_w * minv._41;
				var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + p_w * minv._42;
				var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + p_w * minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r1.px = p_x;
				r1.py = p_y;
				r1.pz = p_z;
				var x3 = r1.lx;
				var y3 = r1.ly;
				var z3 = r1.lz;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var l_x = x3;
				var l_y = y3;
				var l_z = z3;
				var l_w = 1.;
				var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r1.lx = l_x;
				r1.ly = l_y;
				r1.lz = l_z;
				r1.normalize();
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x4 = r1.px + hit * r1.lx;
				var y4 = r1.py + hit * r1.ly;
				var z4 = r1.pz + hit * r1.lz;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var hitPoint_x = x4;
				var hitPoint_y = y4;
				var hitPoint_z = z4;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g2 = 0;
				var _g3 = this.hitInteractives;
				while(_g2 < _g3.length) {
					var i1 = _g3[_g2];
					++_g2;
					var m = i1.invPos;
					var wfactor = 0.;
					if(i1.preciseShape != null) {
						var x5 = r1.px;
						var y5 = r1.py;
						var z5 = r1.pz;
						if(z5 == null) {
							z5 = 0.;
						}
						if(y5 == null) {
							y5 = 0.;
						}
						if(x5 == null) {
							x5 = 0.;
						}
						var p_x1 = x5;
						var p_y1 = y5;
						var p_z1 = z5;
						var p_w1 = 1.;
						var px2 = p_x1 * m._11 + p_y1 * m._21 + p_z1 * m._31 + p_w1 * m._41;
						var py2 = p_x1 * m._12 + p_y1 * m._22 + p_z1 * m._32 + p_w1 * m._42;
						var pz2 = p_x1 * m._13 + p_y1 * m._23 + p_z1 * m._33 + p_w1 * m._43;
						p_x1 = px2;
						p_y1 = py2;
						p_z1 = pz2;
						r1.px = p_x1;
						r1.py = p_y1;
						r1.pz = p_z1;
						var x6 = r1.lx;
						var y6 = r1.ly;
						var z6 = r1.lz;
						if(z6 == null) {
							z6 = 0.;
						}
						if(y6 == null) {
							y6 = 0.;
						}
						if(x6 == null) {
							x6 = 0.;
						}
						var l_x1 = x6;
						var l_y1 = y6;
						var l_z1 = z6;
						var l_w1 = 1.;
						var px3 = l_x1 * m._11 + l_y1 * m._21 + l_z1 * m._31;
						var py3 = l_x1 * m._12 + l_y1 * m._22 + l_z1 * m._32;
						var pz3 = l_x1 * m._13 + l_y1 * m._23 + l_z1 * m._33;
						l_x1 = px3;
						l_y1 = py3;
						l_z1 = pz3;
						r1.lx = l_x1;
						r1.ly = l_y1;
						r1.lz = l_z1;
						r1.normalize();
						var hit1 = i1.preciseShape.rayIntersection(r1,i1.bestMatch);
						if(hit1 > 0) {
							var x7 = r1.px + hit1 * r1.lx;
							var y7 = r1.py + hit1 * r1.ly;
							var z7 = r1.pz + hit1 * r1.lz;
							if(z7 == null) {
								z7 = 0.;
							}
							if(y7 == null) {
								y7 = 0.;
							}
							if(x7 == null) {
								x7 = 0.;
							}
							var hitPoint_x1 = x7;
							var hitPoint_y1 = y7;
							var hitPoint_z1 = z7;
							i1.hitPoint.x = hitPoint_x1;
							i1.hitPoint.y = hitPoint_y1;
							i1.hitPoint.z = hitPoint_z1;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i1.hitPoint;
					var x8 = _this.x;
					var y8 = _this.y;
					var z8 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z8 == null) {
						z8 = 0.;
					}
					if(y8 == null) {
						y8 = 0.;
					}
					if(x8 == null) {
						x8 = 0.;
					}
					var p_x2 = x8;
					var p_y2 = y8;
					var p_z2 = z8;
					var p_w2 = w;
					p_w2 = 1;
					var m1 = i1.absPos;
					var px4 = p_x2 * m1._11 + p_y2 * m1._21 + p_z2 * m1._31 + p_w2 * m1._41;
					var py4 = p_x2 * m1._12 + p_y2 * m1._22 + p_z2 * m1._32 + p_w2 * m1._42;
					var pz4 = p_x2 * m1._13 + p_y2 * m1._23 + p_z2 * m1._33 + p_w2 * m1._43;
					p_x2 = px4;
					p_y2 = py4;
					p_z2 = pz4;
					var m2 = this.camera.m;
					var px5 = p_x2 * m2._11 + p_y2 * m2._21 + p_z2 * m2._31 + p_w2 * m2._41;
					var py5 = p_x2 * m2._12 + p_y2 * m2._22 + p_z2 * m2._32 + p_w2 * m2._42;
					var pz5 = p_x2 * m2._13 + p_y2 * m2._23 + p_z2 * m2._33 + p_w2 * m2._43;
					var iw = 1 / (p_x2 * m2._14 + p_y2 * m2._24 + p_z2 * m2._34 + p_w2 * m2._44);
					p_x2 = px5 * iw;
					p_y2 = py5 * iw;
					p_z2 = pz5 * iw;
					p_w2 = 1;
					i1.hitPoint.w = p_z2 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i2 = this.hitInteractives.pop();
			if(i2 == null) {
				return null;
			}
			event.relX = i2.hitPoint.x;
			event.relY = i2.hitPoint.y;
			event.relZ = i2.hitPoint.z;
			i2.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i2;
		}
		return null;
	}
	,clone: function(o) {
		var s = o == null ? new h3d_scene_Scene() : o;
		s.camera = this.camera.clone();
		h3d_scene_Object.prototype.clone.call(this,s);
		return s;
	}
	,dispose: function() {
		if((this.flags & 32) != 0) {
			this.onRemove();
		}
		if(this.hardwarePass != null) {
			this.hardwarePass.dispose();
			this.hardwarePass = null;
		}
		this.ctx.dispose();
		if(this.renderer != null) {
			this.renderer.dispose();
			this.set_renderer(new h3d_scene_Renderer());
		}
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,hardwarePick: function(pixelX,pixelY) {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		this.camera.screenRatio = engine.width / engine.height;
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		var ray = this.camera.rayFromScreen(pixelX,pixelY);
		var savedRay_pz;
		var savedRay_py;
		var savedRay_px;
		var savedRay_lz;
		var savedRay_ly;
		var savedRay_lx;
		savedRay_px = ray.px;
		savedRay_py = ray.py;
		savedRay_pz = ray.pz;
		savedRay_lx = ray.lx;
		savedRay_ly = ray.ly;
		savedRay_lz = ray.lz;
		this.iterVisibleMeshes(function(m) {
			if(m.primitive == null) {
				return;
			}
			var m1 = m.getInvPos();
			var x = ray.px;
			var y = ray.py;
			var z = ray.pz;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var p_w = 1.;
			var px = p_x * m1._11 + p_y * m1._21 + p_z * m1._31 + p_w * m1._41;
			var py = p_x * m1._12 + p_y * m1._22 + p_z * m1._32 + p_w * m1._42;
			var pz = p_x * m1._13 + p_y * m1._23 + p_z * m1._33 + p_w * m1._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			ray.px = p_x;
			ray.py = p_y;
			ray.pz = p_z;
			var x1 = ray.lx;
			var y1 = ray.ly;
			var z1 = ray.lz;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var l_x = x1;
			var l_y = y1;
			var l_z = z1;
			var l_w = 1.;
			var px1 = l_x * m1._11 + l_y * m1._21 + l_z * m1._31;
			var py1 = l_x * m1._12 + l_y * m1._22 + l_z * m1._32;
			var pz1 = l_x * m1._13 + l_y * m1._23 + l_z * m1._33;
			l_x = px1;
			l_y = py1;
			l_z = pz1;
			ray.lx = l_x;
			ray.ly = l_y;
			ray.lz = l_z;
			ray.normalize();
			if(m.primitive.getBounds().rayIntersection(ray,false) >= 0) {
				_gthis.ctx.emitPass(m.material.passes,m);
			}
			ray.px = savedRay_px;
			ray.py = savedRay_py;
			ray.pz = savedRay_pz;
			ray.lx = savedRay_lx;
			ray.ly = savedRay_ly;
			ray.lz = savedRay_lz;
		});
		this.ctx.lightSystem = null;
		var found = null;
		var passes = new h3d_pass_PassList(this.ctx.passes);
		if(passes.current != null) {
			var p = this.hardwarePass;
			if(p == null) {
				p = new h3d_pass_HardwarePick();
				this.hardwarePass = p;
			}
			var _this = this.ctx;
			var value = { texture : h3d_mat_Texture.fromColor(267386880,0)};
			_this.setGlobalID(hxsl_Globals.allocID("depthMap"),value);
			p.pickX = pixelX;
			p.pickY = pixelY;
			p.setContext(this.ctx);
			p.draw(passes);
			if(p.pickedIndex >= 0) {
				var _g_o = passes.current;
				while(_g_o != null) {
					var tmp = _g_o;
					_g_o = _g_o.next;
					var po = tmp;
					if(p.pickedIndex-- == 0) {
						found = po.obj;
						break;
					}
				}
			}
		}
		this.ctx.done();
		this.ctx.camera = null;
		this.ctx.engine = null;
		this.ctx.scene = null;
		return found;
	}
	,syncOnly: function(et) {
		var engine = h3d_Engine.CURRENT;
		this.setElapsedTime(et);
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.syncRec(this.ctx);
		this.ctx.camera = null;
		this.ctx.engine = null;
		this.ctx.scene = null;
	}
	,computeStatic: function() {
		var old = this.ctx.elapsedTime;
		this.ctx.elapsedTime = 0;
		this.ctx.computingStatic = true;
		this.render(h3d_Engine.CURRENT);
		this.ctx.computingStatic = false;
		this.ctx.elapsedTime = old;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var list = this.ctx.passes;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || p.pass.passId - q.pass.passId <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.ctx.passes = tmp;
		var curPass = this.ctx.passes;
		var passes = [];
		var passIndex = -1;
		while(curPass != null) {
			var passId = curPass.pass.passId;
			var p1 = curPass;
			var prev = null;
			while(p1 != null && p1.pass.passId == passId) {
				prev = p1;
				p1 = p1.next;
			}
			prev.next = null;
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
			curPass = p1;
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(!this.ctx.computingStatic && this.checkPasses) {
			var _g2 = 0;
			while(_g2 < passes.length) {
				var p2 = passes[_g2];
				++_g2;
				if(!p2.rendered) {
					haxe_Log.trace("Pass " + p2.name + " has not been rendered : don't know how to handle.",{ fileName : "h3d/scene/Scene.hx", lineNumber : 438, className : "h3d.scene.Scene", methodName : "render"});
				}
			}
		}
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		var _g3 = 0;
		var _g11 = passIndex;
		while(_g3 < _g11) {
			var i1 = _g3++;
			var p3 = this.ctx.cachedPassObjects[i1];
			p3.name = null;
			var _this1 = p3.passes;
			_this1.current = null;
			_this1.discarded = _this1.lastDisc = null;
		}
	}
	,serializeScene: function() {
		throw new js__$Boot_HaxeError("You need -lib hxbit to serialize the scene data");
	}
	,__class__: h3d_scene_Scene
	,__properties__: $extend(h3d_scene_Object.prototype.__properties__,{set_renderer:"set_renderer"})
});
var h3d_scene_Joint = function(skin,j) {
	h3d_scene_Object.call(this,null);
	this.name = j.name;
	this.skin = skin;
	this.parent = skin;
	this.index = j.index;
};
$hxClasses["h3d.scene.Joint"] = h3d_scene_Joint;
h3d_scene_Joint.__name__ = "h3d.scene.Joint";
h3d_scene_Joint.__super__ = h3d_scene_Object;
h3d_scene_Joint.prototype = $extend(h3d_scene_Object.prototype,{
	getObjectByName: function(name) {
		var sk = this.skin.getSkinData();
		var _this = sk.namedJoints;
		var j = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(j == null) {
			return null;
		}
		var cur = sk.allJoints[this.index];
		if(cur.index != this.index) {
			throw new js__$Boot_HaxeError("assert");
		}
		var jp = j.parent;
		while(jp != null) {
			if(jp == cur) {
				var jo = new h3d_scene_Joint(this.skin,j);
				jo.parent = this;
				return jo;
			}
			jp = jp.parent;
		}
		return null;
	}
	,syncPos: function() {
		var p = this.parent;
		while(p != null) {
			if((p.flags & 1) != 0) {
				if(this.skin.jointsAbsPosInv == null) {
					this.skin.jointsAbsPosInv = new h3d_Matrix();
					this.skin.jointsAbsPosInv.zero();
				}
				if(this.skin.jointsAbsPosInv._44 == 0) {
					this.skin.jointsAbsPosInv.inverse3x4(this.parent.absPos);
				}
				this.parent.syncPos();
				this.lastFrame = -1;
				break;
			}
			p = p.parent;
		}
		if(this.lastFrame != this.skin.lastFrame) {
			this.lastFrame = this.skin.lastFrame;
			this.absPos.load(this.skin.currentAbsPose[this.index]);
			if(this.skin.jointsAbsPosInv != null && this.skin.jointsAbsPosInv._44 != 0) {
				this.absPos.multiply3x4(this.absPos,this.skin.jointsAbsPosInv);
				this.absPos.multiply3x4(this.absPos,this.parent.absPos);
			}
		}
	}
	,__class__: h3d_scene_Joint
});
var h3d_scene_Skin = function(s,mat,parent) {
	h3d_scene_MultiMaterial.call(this,null,mat,parent);
	if(s != null) {
		this.setSkinData(s);
	}
};
$hxClasses["h3d.scene.Skin"] = h3d_scene_Skin;
h3d_scene_Skin.__name__ = "h3d.scene.Skin";
h3d_scene_Skin.__super__ = h3d_scene_MultiMaterial;
h3d_scene_Skin.prototype = $extend(h3d_scene_MultiMaterial.prototype,{
	clone: function(o) {
		var s = o == null ? new h3d_scene_Skin(null,this.materials.slice()) : o;
		h3d_scene_MultiMaterial.prototype.clone.call(this,s);
		s.setSkinData(this.skinData);
		s.currentRelPose = this.currentRelPose.slice();
		return s;
	}
	,getBoundsRec: function(b) {
		b = h3d_scene_MultiMaterial.prototype.getBoundsRec.call(this,b);
		var _this = this.primitive.getBounds();
		var b1 = new h3d_col_Bounds();
		b1.xMin = _this.xMin;
		b1.xMax = _this.xMax;
		b1.yMin = _this.yMin;
		b1.yMax = _this.yMax;
		b1.zMin = _this.zMin;
		b1.zMax = _this.zMax;
		var tmp = b1;
		var b0 = this.skinData.allJoints[0];
		if(b0 != null && b0.parent == null) {
			var mtmp = this.absPos.clone();
			var r = this.currentRelPose[b0.index];
			if(r != null) {
				mtmp.multiply3x4(r,mtmp);
			} else {
				mtmp.multiply3x4(b0.defMat,mtmp);
			}
			if(b0.transPos != null) {
				mtmp.multiply3x4(b0.transPos,mtmp);
			}
			tmp.transform(mtmp);
		} else {
			tmp.transform(this.absPos);
		}
		if(tmp.xMin < b.xMin) {
			b.xMin = tmp.xMin;
		}
		if(tmp.xMax > b.xMax) {
			b.xMax = tmp.xMax;
		}
		if(tmp.yMin < b.yMin) {
			b.yMin = tmp.yMin;
		}
		if(tmp.yMax > b.yMax) {
			b.yMax = tmp.yMax;
		}
		if(tmp.zMin < b.zMin) {
			b.zMin = tmp.zMin;
		}
		if(tmp.zMax > b.zMax) {
			b.zMax = tmp.zMax;
		}
		return b;
	}
	,getObjectByName: function(name) {
		if(this.skinData != null && this.skinData.name == name) {
			return this;
		}
		var o = h3d_scene_MultiMaterial.prototype.getObjectByName.call(this,name);
		if(o != null) {
			return o;
		}
		if(this.skinData != null) {
			var _this = this.skinData.namedJoints;
			var j = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
			if(j != null) {
				return new h3d_scene_Joint(this,j);
			}
		}
		return null;
	}
	,getLocalCollider: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,getGlobalCollider: function() {
		var col = js_Boot.__cast(this.primitive.getCollider() , h3d_col_OptimizedCollider);
		(js_Boot.__cast(this.primitive , h3d_prim_HMDModel)).loadSkin(this.skinData);
		return new h3d_col_SkinCollider(this,js_Boot.__cast(col.b , h3d_col_PolygonBuffer));
	}
	,calcAbsPos: function() {
		h3d_scene_MultiMaterial.prototype.calcAbsPos.call(this);
		this.jointsUpdated = true;
	}
	,getSkinData: function() {
		return this.skinData;
	}
	,setSkinData: function(s,shaderInit) {
		if(shaderInit == null) {
			shaderInit = true;
		}
		this.skinData = s;
		this.jointsUpdated = true;
		this.set_primitive(s.primitive);
		if(shaderInit) {
			var hasNormalMap = false;
			var _g = 0;
			var _g1 = this.materials;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				if(m != null && m.get_normalMap() != null) {
					hasNormalMap = true;
					break;
				}
			}
			this.skinShader = hasNormalMap ? new h3d_shader_SkinTangent() : new h3d_shader_Skin();
			var maxBones = 0;
			if(this.skinData.splitJoints != null) {
				var _g2 = 0;
				var _g3 = this.skinData.splitJoints;
				while(_g2 < _g3.length) {
					var s1 = _g3[_g2];
					++_g2;
					if(s1.joints.length > maxBones) {
						maxBones = s1.joints.length;
					}
				}
			} else {
				maxBones = this.skinData.boundJoints.length;
			}
			if(this.skinShader.MaxBones__ < maxBones) {
				var _this = this.skinShader;
				_this.constModified = true;
				_this.MaxBones__ = maxBones;
			}
			var _g21 = 0;
			var _g31 = this.materials;
			while(_g21 < _g31.length) {
				var m1 = _g31[_g21];
				++_g21;
				if(m1 != null) {
					if(m1.get_normalMap() != null) {
						m1.passes.addShaderAtIndex(this.skinShader,m1.passes.getShaderIndex(m1.normalShader) + 1);
					} else {
						m1.passes.addShader(this.skinShader);
					}
					if(this.skinData.splitJoints != null) {
						m1.passes.set_dynamicParameters(true);
					}
				}
			}
		}
		this.currentRelPose = [];
		this.currentAbsPose = [];
		this.currentPalette = [];
		this.paletteChanged = true;
		var _g4 = 0;
		var _g11 = this.skinData.allJoints;
		while(_g4 < _g11.length) {
			var j = _g11[_g4];
			++_g4;
			this.currentAbsPose.push(h3d_Matrix.I());
		}
		var _g22 = 0;
		var _g32 = this.skinData.boundJoints.length;
		while(_g22 < _g32) {
			var i = _g22++;
			this.currentPalette.push(h3d_Matrix.I());
		}
		if(this.skinData.splitJoints != null) {
			this.splitPalette = [];
			var _g41 = 0;
			var _g5 = this.skinData.splitJoints;
			while(_g41 < _g5.length) {
				var a = _g5[_g41];
				++_g41;
				var tmp = this.splitPalette;
				var _g42 = [];
				var _g51 = 0;
				var _g6 = a.joints;
				while(_g51 < _g6.length) {
					var j1 = _g6[_g51];
					++_g51;
					_g42.push(this.currentPalette[j1.bindIndex]);
				}
				tmp.push(_g42);
			}
		} else {
			this.splitPalette = null;
		}
	}
	,sync: function(ctx) {
		if(!ctx.visibleFlag && (this.flags & 64) == 0) {
			return;
		}
		this.syncJoints();
	}
	,syncJoints: function() {
		if(!this.jointsUpdated) {
			return;
		}
		var _g = 0;
		var _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			var id = j.index;
			var m = this.currentAbsPose[id];
			var r = this.currentRelPose[id];
			var bid = j.bindIndex;
			if(r == null) {
				r = j.defMat;
			} else if(j.retargetAnim) {
				r._41 = j.defMat._41;
				r._42 = j.defMat._42;
				r._43 = j.defMat._43;
			}
			if(j.parent == null) {
				var b = this.absPos;
				var m11 = r._11;
				var m12 = r._12;
				var m13 = r._13;
				var m21 = r._21;
				var m22 = r._22;
				var m23 = r._23;
				var a31 = r._31;
				var a32 = r._32;
				var a33 = r._33;
				var a41 = r._41;
				var a42 = r._42;
				var a43 = r._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				m._11 = m11 * b11 + m12 * b21 + m13 * b31;
				m._12 = m11 * b12 + m12 * b22 + m13 * b32;
				m._13 = m11 * b13 + m12 * b23 + m13 * b33;
				m._14 = 0;
				m._21 = m21 * b11 + m22 * b21 + m23 * b31;
				m._22 = m21 * b12 + m22 * b22 + m23 * b32;
				m._23 = m21 * b13 + m22 * b23 + m23 * b33;
				m._24 = 0;
				m._31 = a31 * b11 + a32 * b21 + a33 * b31;
				m._32 = a31 * b12 + a32 * b22 + a33 * b32;
				m._33 = a31 * b13 + a32 * b23 + a33 * b33;
				m._34 = 0;
				m._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				m._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				m._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				m._44 = 1;
			} else {
				var b1 = this.currentAbsPose[j.parent.index];
				var m111 = r._11;
				var m121 = r._12;
				var m131 = r._13;
				var m211 = r._21;
				var m221 = r._22;
				var m231 = r._23;
				var a311 = r._31;
				var a321 = r._32;
				var a331 = r._33;
				var a411 = r._41;
				var a421 = r._42;
				var a431 = r._43;
				var b111 = b1._11;
				var b121 = b1._12;
				var b131 = b1._13;
				var b211 = b1._21;
				var b221 = b1._22;
				var b231 = b1._23;
				var b311 = b1._31;
				var b321 = b1._32;
				var b331 = b1._33;
				var b411 = b1._41;
				var b421 = b1._42;
				var b431 = b1._43;
				m._11 = m111 * b111 + m121 * b211 + m131 * b311;
				m._12 = m111 * b121 + m121 * b221 + m131 * b321;
				m._13 = m111 * b131 + m121 * b231 + m131 * b331;
				m._14 = 0;
				m._21 = m211 * b111 + m221 * b211 + m231 * b311;
				m._22 = m211 * b121 + m221 * b221 + m231 * b321;
				m._23 = m211 * b131 + m221 * b231 + m231 * b331;
				m._24 = 0;
				m._31 = a311 * b111 + a321 * b211 + a331 * b311;
				m._32 = a311 * b121 + a321 * b221 + a331 * b321;
				m._33 = a311 * b131 + a321 * b231 + a331 * b331;
				m._34 = 0;
				m._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
				m._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
				m._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
				m._44 = 1;
			}
			if(bid >= 0) {
				var _this = this.currentPalette[bid];
				var a = j.transPos;
				var m112 = a._11;
				var m122 = a._12;
				var m132 = a._13;
				var m212 = a._21;
				var m222 = a._22;
				var m232 = a._23;
				var a312 = a._31;
				var a322 = a._32;
				var a332 = a._33;
				var a412 = a._41;
				var a422 = a._42;
				var a432 = a._43;
				var b112 = m._11;
				var b122 = m._12;
				var b132 = m._13;
				var b212 = m._21;
				var b222 = m._22;
				var b232 = m._23;
				var b312 = m._31;
				var b322 = m._32;
				var b332 = m._33;
				var b412 = m._41;
				var b422 = m._42;
				var b432 = m._43;
				_this._11 = m112 * b112 + m122 * b212 + m132 * b312;
				_this._12 = m112 * b122 + m122 * b222 + m132 * b322;
				_this._13 = m112 * b132 + m122 * b232 + m132 * b332;
				_this._14 = 0;
				_this._21 = m212 * b112 + m222 * b212 + m232 * b312;
				_this._22 = m212 * b122 + m222 * b222 + m232 * b322;
				_this._23 = m212 * b132 + m222 * b232 + m232 * b332;
				_this._24 = 0;
				_this._31 = a312 * b112 + a322 * b212 + a332 * b312;
				_this._32 = a312 * b122 + a322 * b222 + a332 * b322;
				_this._33 = a312 * b132 + a322 * b232 + a332 * b332;
				_this._34 = 0;
				_this._41 = a412 * b112 + a422 * b212 + a432 * b312 + b412;
				_this._42 = a412 * b122 + a422 * b222 + a432 * b322 + b422;
				_this._43 = a412 * b132 + a422 * b232 + a432 * b332 + b432;
				_this._44 = 1;
			}
		}
		this.skinShader.bonesMatrixes__ = this.currentPalette;
		if(this.jointsAbsPosInv != null) {
			this.jointsAbsPosInv._44 = 0;
		}
		this.jointsUpdated = false;
	}
	,emit: function(ctx) {
		if(this.splitPalette == null) {
			h3d_scene_MultiMaterial.prototype.emit.call(this,ctx);
		} else {
			var _g = 0;
			var _g1 = this.splitPalette.length;
			while(_g < _g1) {
				var i = _g++;
				var m = this.materials[this.skinData.splitJoints[i].material];
				if(m != null) {
					var index = i;
					if(index == null) {
						index = 0;
					}
					var p = m.passes;
					while(p != null) {
						ctx.emitPass(p,this).index = index;
						p = p.nextPass;
					}
				}
			}
		}
		if(this.showJoints) {
			if(this.jointsGraphics == null) {
				this.jointsGraphics = new h3d_scene_Graphics(this);
				this.jointsGraphics.material.passes.depth(false,h3d_mat_Compare.Always);
				this.jointsGraphics.material.passes.setPassName("add");
			}
			var topParent = this;
			while(topParent.parent != null) topParent = topParent.parent;
			this.jointsGraphics.set_follow(topParent);
			var g = this.jointsGraphics;
			g.clear();
			var _g2 = 0;
			var _g11 = this.skinData.allJoints;
			while(_g2 < _g11.length) {
				var j = _g11[_g2];
				++_g2;
				var m1 = this.currentAbsPose[j.index];
				var mp = j.parent == null ? this.absPos : this.currentAbsPose[j.parent.index];
				g.lineStyle(1,j.parent == null ? -16776961 : -256);
				g.moveTo(mp._41,mp._42,mp._43);
				g.lineTo(m1._41,m1._42,m1._43);
			}
		} else if(this.jointsGraphics != null) {
			var _this = this.jointsGraphics;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.jointsGraphics = null;
		}
	}
	,draw: function(ctx) {
		if(this.splitPalette == null) {
			h3d_scene_MultiMaterial.prototype.draw.call(this,ctx);
		} else {
			var i = ctx.drawPass.index;
			this.skinShader.bonesMatrixes__ = this.splitPalette[i];
			this.primitive.selectMaterial(i);
			ctx.uploadParams();
			this.primitive.render(ctx.engine);
		}
	}
	,__class__: h3d_scene_Skin
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	var _this = this.ambientLight;
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d_scene_fwd_LightSystem;
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	get_additiveLighting: function() {
		var value = this.ambientShader;
		return (((value) instanceof h3d_shader_AmbientLight) ? value : null).additive__;
	}
	,set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var l = this.ctx.lights;
			while(l != null) {
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				l = l.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l1 = this.ctx.lights;
		var i1 = 0;
		while(l1 != null) {
			if(i1++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l1.shader,shaders);
			l1 = l1.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
	,__properties__: {set_additiveLighting:"set_additiveLighting",get_additiveLighting:"get_additiveLighting"}
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Default.call(this,"depth");
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d_scene_fwd_DepthPass;
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Default.call(this,"normal");
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d_scene_fwd_NormalPass;
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Default("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.fwd.Renderer"] = h3d_scene_fwd_Renderer;
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	get_def: function() {
		return this.defaultPass;
	}
	,renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,getPassByName: function(name) {
		if(name == "alpha" || name == "additive") {
			return this.defaultPass;
		}
		return h3d_scene_Renderer.prototype.getPassByName.call(this,name);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
	,__properties__: $extend(h3d_scene_Renderer.prototype.__properties__,{get_def:"get_def"})
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_AmbientLight.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
	,__class__: h3d_shader_AmbientLight
	,__properties__: {set_additive:"set_additive",get_additive:"get_additive"}
});
var h3d_shader_Base2d = function() {
	this.viewport__ = new h3d_Vector();
	this.halfPixelInverse__ = new h3d_Vector();
	this.uvPos__ = new h3d_Vector();
	this.filterMatrixB__ = new h3d_Vector();
	this.filterMatrixA__ = new h3d_Vector();
	this.absoluteMatrixB__ = new h3d_Vector();
	this.absoluteMatrixA__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	get_zValue: function() {
		return this.zValue__;
	}
	,set_zValue: function(_v) {
		return this.zValue__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_isRelative: function() {
		return this.isRelative__;
	}
	,set_isRelative: function(_v) {
		this.constModified = true;
		return this.isRelative__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_absoluteMatrixA: function() {
		return this.absoluteMatrixA__;
	}
	,set_absoluteMatrixA: function(_v) {
		return this.absoluteMatrixA__ = _v;
	}
	,get_absoluteMatrixB: function() {
		return this.absoluteMatrixB__;
	}
	,set_absoluteMatrixB: function(_v) {
		return this.absoluteMatrixB__ = _v;
	}
	,get_filterMatrixA: function() {
		return this.filterMatrixA__;
	}
	,set_filterMatrixA: function(_v) {
		return this.filterMatrixA__ = _v;
	}
	,get_filterMatrixB: function() {
		return this.filterMatrixB__;
	}
	,set_filterMatrixB: function(_v) {
		return this.filterMatrixB__ = _v;
	}
	,get_hasUVPos: function() {
		return this.hasUVPos__;
	}
	,set_hasUVPos: function(_v) {
		this.constModified = true;
		return this.hasUVPos__ = _v;
	}
	,get_uvPos: function() {
		return this.uvPos__;
	}
	,set_uvPos: function(_v) {
		return this.uvPos__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_pixelAlign: function() {
		return this.pixelAlign__;
	}
	,set_pixelAlign: function(_v) {
		this.constModified = true;
		return this.pixelAlign__ = _v;
	}
	,get_halfPixelInverse: function() {
		return this.halfPixelInverse__;
	}
	,set_halfPixelInverse: function(_v) {
		return this.halfPixelInverse__ = _v;
	}
	,get_viewport: function() {
		return this.viewport__;
	}
	,set_viewport: function(_v) {
		return this.viewport__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Base2d.prototype);
		s.shader = this.shader;
		s.zValue__ = this.zValue__;
		s.texture__ = this.texture__;
		s.isRelative__ = this.isRelative__;
		s.color__ = this.color__;
		s.absoluteMatrixA__ = this.absoluteMatrixA__;
		s.absoluteMatrixB__ = this.absoluteMatrixB__;
		s.filterMatrixA__ = this.filterMatrixA__;
		s.filterMatrixB__ = this.filterMatrixB__;
		s.hasUVPos__ = this.hasUVPos__;
		s.uvPos__ = this.uvPos__;
		s.killAlpha__ = this.killAlpha__;
		s.pixelAlign__ = this.pixelAlign__;
		s.halfPixelInverse__ = this.halfPixelInverse__;
		s.viewport__ = this.viewport__;
		return s;
	}
	,__class__: h3d_shader_Base2d
	,__properties__: {set_viewport:"set_viewport",get_viewport:"get_viewport",set_halfPixelInverse:"set_halfPixelInverse",get_halfPixelInverse:"get_halfPixelInverse",set_pixelAlign:"set_pixelAlign",get_pixelAlign:"get_pixelAlign",set_killAlpha:"set_killAlpha",get_killAlpha:"get_killAlpha",set_uvPos:"set_uvPos",get_uvPos:"get_uvPos",set_hasUVPos:"set_hasUVPos",get_hasUVPos:"get_hasUVPos",set_filterMatrixB:"set_filterMatrixB",get_filterMatrixB:"get_filterMatrixB",set_filterMatrixA:"set_filterMatrixA",get_filterMatrixA:"get_filterMatrixA",set_absoluteMatrixB:"set_absoluteMatrixB",get_absoluteMatrixB:"get_absoluteMatrixB",set_absoluteMatrixA:"set_absoluteMatrixA",get_absoluteMatrixA:"get_absoluteMatrixA",set_color:"set_color",get_color:"get_color",set_isRelative:"set_isRelative",get_isRelative:"get_isRelative",set_texture:"set_texture",get_texture:"get_texture",set_zValue:"set_zValue",get_zValue:"get_zValue"}
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_Vector();
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this1 = this.specularColor__;
	var x1 = 1;
	var y1 = 1;
	var z1 = 1;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = z1;
	_this1.w = 1.;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_specularPower: function() {
		return this.specularPower__;
	}
	,set_specularPower: function(_v) {
		return this.specularPower__ = _v;
	}
	,get_specularAmount: function() {
		return this.specularAmount__;
	}
	,set_specularAmount: function(_v) {
		return this.specularAmount__ = _v;
	}
	,get_specularColor: function() {
		return this.specularColor__;
	}
	,set_specularColor: function(_v) {
		return this.specularColor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_BaseMesh.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.specularPower__ = this.specularPower__;
		s.specularAmount__ = this.specularAmount__;
		s.specularColor__ = this.specularColor__;
		return s;
	}
	,__class__: h3d_shader_BaseMesh
	,__properties__: {set_specularColor:"set_specularColor",get_specularColor:"get_specularColor",set_specularAmount:"set_specularAmount",get_specularAmount:"get_specularAmount",set_specularPower:"set_specularPower",get_specularPower:"get_specularPower",set_color:"set_color",get_color:"get_color"}
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_Matrix();
	this.fixedColor__ = new h3d_Vector();
	this.pixel__ = new h3d_Vector();
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_cameraInverseViewProj: function() {
		return this.cameraInverseViewProj__;
	}
	,set_cameraInverseViewProj: function(_v) {
		return this.cameraInverseViewProj__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_depthTexture: function() {
		return this.depthTexture__;
	}
	,set_depthTexture: function(_v) {
		return this.depthTexture__ = _v;
	}
	,get_Quality: function() {
		return this.Quality__;
	}
	,set_Quality: function(_v) {
		this.constModified = true;
		return this.Quality__ = _v;
	}
	,get_isDepth: function() {
		return this.isDepth__;
	}
	,set_isDepth: function(_v) {
		this.constModified = true;
		return this.isDepth__ = _v;
	}
	,get_values: function() {
		return this.values__;
	}
	,set_values: function(_v) {
		return this.values__ = _v;
	}
	,get_offsets: function() {
		return this.offsets__;
	}
	,set_offsets: function(_v) {
		return this.offsets__ = _v;
	}
	,get_pixel: function() {
		return this.pixel__;
	}
	,set_pixel: function(_v) {
		return this.pixel__ = _v;
	}
	,get_hasFixedColor: function() {
		return this.hasFixedColor__;
	}
	,set_hasFixedColor: function(_v) {
		this.constModified = true;
		return this.hasFixedColor__ = _v;
	}
	,get_smoothFixedColor: function() {
		return this.smoothFixedColor__;
	}
	,set_smoothFixedColor: function(_v) {
		this.constModified = true;
		return this.smoothFixedColor__ = _v;
	}
	,get_fixedColor: function() {
		return this.fixedColor__;
	}
	,set_fixedColor: function(_v) {
		return this.fixedColor__ = _v;
	}
	,get_isDepthDependant: function() {
		return this.isDepthDependant__;
	}
	,set_isDepthDependant: function(_v) {
		this.constModified = true;
		return this.isDepthDependant__ = _v;
	}
	,get_hasNormal: function() {
		return this.hasNormal__;
	}
	,set_hasNormal: function(_v) {
		this.constModified = true;
		return this.hasNormal__ = _v;
	}
	,get_normalTexture: function() {
		return this.normalTexture__;
	}
	,set_normalTexture: function(_v) {
		return this.normalTexture__ = _v;
	}
	,get_isCube: function() {
		return this.isCube__;
	}
	,set_isCube: function(_v) {
		this.constModified = true;
		return this.isCube__ = _v;
	}
	,get_cubeTexture: function() {
		return this.cubeTexture__;
	}
	,set_cubeTexture: function(_v) {
		return this.cubeTexture__ = _v;
	}
	,get_cubeDir: function() {
		return this.cubeDir__;
	}
	,set_cubeDir: function(_v) {
		return this.cubeDir__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Blur.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.cameraInverseViewProj__ = this.cameraInverseViewProj__;
		s.texture__ = this.texture__;
		s.depthTexture__ = this.depthTexture__;
		s.Quality__ = this.Quality__;
		s.isDepth__ = this.isDepth__;
		s.values__ = this.values__;
		s.offsets__ = this.offsets__;
		s.pixel__ = this.pixel__;
		s.hasFixedColor__ = this.hasFixedColor__;
		s.smoothFixedColor__ = this.smoothFixedColor__;
		s.fixedColor__ = this.fixedColor__;
		s.isDepthDependant__ = this.isDepthDependant__;
		s.hasNormal__ = this.hasNormal__;
		s.normalTexture__ = this.normalTexture__;
		s.isCube__ = this.isCube__;
		s.cubeTexture__ = this.cubeTexture__;
		s.cubeDir__ = this.cubeDir__;
		return s;
	}
	,__class__: h3d_shader_Blur
	,__properties__: $extend(h3d_shader_ScreenShader.prototype.__properties__,{set_cubeDir:"set_cubeDir",get_cubeDir:"get_cubeDir",set_cubeTexture:"set_cubeTexture",get_cubeTexture:"get_cubeTexture",set_isCube:"set_isCube",get_isCube:"get_isCube",set_normalTexture:"set_normalTexture",get_normalTexture:"get_normalTexture",set_hasNormal:"set_hasNormal",get_hasNormal:"get_hasNormal",set_isDepthDependant:"set_isDepthDependant",get_isDepthDependant:"get_isDepthDependant",set_fixedColor:"set_fixedColor",get_fixedColor:"get_fixedColor",set_smoothFixedColor:"set_smoothFixedColor",get_smoothFixedColor:"get_smoothFixedColor",set_hasFixedColor:"set_hasFixedColor",get_hasFixedColor:"get_hasFixedColor",set_pixel:"set_pixel",get_pixel:"get_pixel",set_offsets:"set_offsets",get_offsets:"get_offsets",set_values:"set_values",get_values:"get_values",set_isDepth:"set_isDepth",get_isDepth:"get_isDepth",set_Quality:"set_Quality",get_Quality:"get_Quality",set_depthTexture:"set_depthTexture",get_depthTexture:"get_depthTexture",set_texture:"set_texture",get_texture:"get_texture",set_cameraInverseViewProj:"set_cameraInverseViewProj",get_cameraInverseViewProj:"get_cameraInverseViewProj"})
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	var this1 = new Array(s.texturesCount);
	this.tex = this1;
	var tmp;
	if(s.bufferCount > 0) {
		var this2 = new Array(s.bufferCount);
		tmp = this2;
	} else {
		tmp = null;
	}
	this.buffers = tmp;
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			var this1 = new Array(nt);
			this.tex = this1;
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			var this2 = new Array(nb);
			this.buffers = this2;
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	grow: function(s) {
		this.vertex.grow(s.vertex);
		this.fragment.grow(s.fragment);
	}
	,__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ColorAdd.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_shader_ColorAdd
	,__properties__: {set_color:"set_color",get_color:"get_color"}
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	get_colorKey: function() {
		return this.colorKey__;
	}
	,set_colorKey: function(_v) {
		return this.colorKey__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ColorKey.prototype);
		s.shader = this.shader;
		s.colorKey__ = this.colorKey__;
		return s;
	}
	,__class__: h3d_shader_ColorKey
	,__properties__: {set_colorKey:"set_colorKey",get_colorKey:"get_colorKey"}
});
var h3d_shader_ColorMatrix = function(m) {
	this.matrix__ = new h3d_Matrix();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	get_matrix: function() {
		return this.matrix__;
	}
	,set_matrix: function(_v) {
		return this.matrix__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ColorMatrix.prototype);
		s.shader = this.shader;
		s.matrix__ = this.matrix__;
		return s;
	}
	,__class__: h3d_shader_ColorMatrix
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix"}
});
var h3d_shader_DirShadow = function() {
	this.poissonDiskVeryHigh__ = [];
	this.poissonDiskHigh__ = [];
	this.poissonDiskLow__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_Matrix();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_Vector();
	this.pcfScale__ = 0;
	this.pcfQuality__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.poissonDiskLow__ = [new h3d_Vector(-0.942,-0.399),new h3d_Vector(0.945,-0.768),new h3d_Vector(-0.094,-0.929),new h3d_Vector(0.344,0.293)];
	this.poissonDiskHigh__ = [new h3d_Vector(-0.326,-0.406),new h3d_Vector(-0.840,-0.074),new h3d_Vector(-0.696,0.457),new h3d_Vector(-0.203,0.621),new h3d_Vector(0.962,-0.195),new h3d_Vector(0.473,-0.480),new h3d_Vector(0.519,0.767),new h3d_Vector(0.185,-0.893),new h3d_Vector(0.507,0.064),new h3d_Vector(0.896,0.412),new h3d_Vector(-0.322,-0.933),new h3d_Vector(-0.792,-0.598)];
	this.poissonDiskVeryHigh__ = [new h3d_Vector(-0.613392,0.617481),new h3d_Vector(0.170019,-0.040254),new h3d_Vector(-0.299417,0.791925),new h3d_Vector(0.645680,0.493210),new h3d_Vector(-0.651784,0.717887),new h3d_Vector(0.421003,0.027070),new h3d_Vector(-0.817194,-0.271096),new h3d_Vector(-0.705374,-0.668203),new h3d_Vector(0.977050,-0.108615),new h3d_Vector(0.063326,0.142369),new h3d_Vector(0.203528,0.214331),new h3d_Vector(-0.667531,0.326090),new h3d_Vector(-0.098422,-0.295755),new h3d_Vector(-0.885922,0.215369),new h3d_Vector(0.566637,0.605213),new h3d_Vector(0.039766,-0.396100),new h3d_Vector(0.751946,0.453352),new h3d_Vector(0.078707,-0.715323),new h3d_Vector(-0.075838,-0.529344),new h3d_Vector(0.724479,-0.580798),new h3d_Vector(0.222999,-0.215125),new h3d_Vector(-0.467574,-0.405438),new h3d_Vector(-0.248268,-0.814753),new h3d_Vector(0.354411,-0.887570),new h3d_Vector(0.175817,0.382366),new h3d_Vector(0.487472,-0.063082),new h3d_Vector(-0.084078,0.898312),new h3d_Vector(0.488876,-0.783441),new h3d_Vector(0.470016,0.217933),new h3d_Vector(-0.696890,-0.549791),new h3d_Vector(-0.149693,0.605762),new h3d_Vector(0.034211,0.979980),new h3d_Vector(0.503098,-0.308878),new h3d_Vector(-0.016205,-0.872921),new h3d_Vector(0.385784,-0.393902),new h3d_Vector(-0.146886,-0.859249),new h3d_Vector(0.643361,0.164098),new h3d_Vector(0.634388,-0.049471),new h3d_Vector(-0.688894,0.007843),new h3d_Vector(0.464034,-0.188818),new h3d_Vector(-0.440840,0.137486),new h3d_Vector(0.364483,0.511704),new h3d_Vector(0.034028,0.325968),new h3d_Vector(0.099094,-0.308023),new h3d_Vector(0.693960,-0.366253),new h3d_Vector(0.678884,-0.204688),new h3d_Vector(0.001801,0.780328),new h3d_Vector(0.145177,-0.898984),new h3d_Vector(0.062655,-0.611866),new h3d_Vector(0.315226,-0.604297),new h3d_Vector(-0.780145,0.486251),new h3d_Vector(-0.371868,0.882138),new h3d_Vector(0.200476,0.494430),new h3d_Vector(-0.494552,-0.711051),new h3d_Vector(0.612476,0.705252),new h3d_Vector(-0.578845,-0.768792),new h3d_Vector(-0.772454,-0.090976),new h3d_Vector(0.504440,0.372295),new h3d_Vector(0.155736,0.065157),new h3d_Vector(0.391522,0.849605),new h3d_Vector(-0.620106,-0.328104),new h3d_Vector(0.789239,-0.419965),new h3d_Vector(-0.545396,0.538133),new h3d_Vector(-0.178564,-0.596057)];
};
$hxClasses["h3d.shader.DirShadow"] = h3d_shader_DirShadow;
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	get_enable: function() {
		return this.enable__;
	}
	,set_enable: function(_v) {
		this.constModified = true;
		return this.enable__ = _v;
	}
	,get_USE_ESM: function() {
		return this.USE_ESM__;
	}
	,set_USE_ESM: function(_v) {
		this.constModified = true;
		return this.USE_ESM__ = _v;
	}
	,get_shadowPower: function() {
		return this.shadowPower__;
	}
	,set_shadowPower: function(_v) {
		return this.shadowPower__ = _v;
	}
	,get_USE_PCF: function() {
		return this.USE_PCF__;
	}
	,set_USE_PCF: function(_v) {
		this.constModified = true;
		return this.USE_PCF__ = _v;
	}
	,get_pcfQuality: function() {
		return this.pcfQuality__;
	}
	,set_pcfQuality: function(_v) {
		this.constModified = true;
		return this.pcfQuality__ = _v;
	}
	,get_pcfScale: function() {
		return this.pcfScale__;
	}
	,set_pcfScale: function(_v) {
		return this.pcfScale__ = _v;
	}
	,get_shadowRes: function() {
		return this.shadowRes__;
	}
	,set_shadowRes: function(_v) {
		return this.shadowRes__ = _v;
	}
	,get_shadowMap: function() {
		return this.shadowMap__;
	}
	,set_shadowMap: function(_v) {
		this.constModified = true;
		return this.shadowMap__ = _v;
	}
	,get_shadowMapChannel: function() {
		return this.shadowMapChannel__;
	}
	,set_shadowMapChannel: function(v) {
		this.constModified = true;
		return this.shadowMapChannel__ = v;
	}
	,get_shadowProj: function() {
		return this.shadowProj__;
	}
	,set_shadowProj: function(_v) {
		return this.shadowProj__ = _v;
	}
	,get_shadowBias: function() {
		return this.shadowBias__;
	}
	,set_shadowBias: function(_v) {
		return this.shadowBias__ = _v;
	}
	,get_poissonDiskLow: function() {
		return this.poissonDiskLow__;
	}
	,set_poissonDiskLow: function(_v) {
		return this.poissonDiskLow__ = _v;
	}
	,get_poissonDiskHigh: function() {
		return this.poissonDiskHigh__;
	}
	,set_poissonDiskHigh: function(_v) {
		return this.poissonDiskHigh__ = _v;
	}
	,get_poissonDiskVeryHigh: function() {
		return this.poissonDiskVeryHigh__;
	}
	,set_poissonDiskVeryHigh: function(_v) {
		return this.poissonDiskVeryHigh__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.pcfQuality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("pcfQuality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw new js__$Boot_HaxeError("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.pcfQuality__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDiskLow__;
		case 11:
			return this.poissonDiskHigh__;
		case 12:
			return this.poissonDiskVeryHigh__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_DirShadow.prototype);
		s.shader = this.shader;
		s.enable__ = this.enable__;
		s.USE_ESM__ = this.USE_ESM__;
		s.shadowPower__ = this.shadowPower__;
		s.USE_PCF__ = this.USE_PCF__;
		s.pcfQuality__ = this.pcfQuality__;
		s.pcfScale__ = this.pcfScale__;
		s.shadowRes__ = this.shadowRes__;
		s.shadowMap__ = this.shadowMap__;
		s.shadowProj__ = this.shadowProj__;
		s.shadowBias__ = this.shadowBias__;
		s.poissonDiskLow__ = this.poissonDiskLow__;
		s.poissonDiskHigh__ = this.poissonDiskHigh__;
		s.poissonDiskVeryHigh__ = this.poissonDiskVeryHigh__;
		return s;
	}
	,__class__: h3d_shader_DirShadow
	,__properties__: {set_poissonDiskVeryHigh:"set_poissonDiskVeryHigh",get_poissonDiskVeryHigh:"get_poissonDiskVeryHigh",set_poissonDiskHigh:"set_poissonDiskHigh",get_poissonDiskHigh:"get_poissonDiskHigh",set_poissonDiskLow:"set_poissonDiskLow",get_poissonDiskLow:"get_poissonDiskLow",set_shadowBias:"set_shadowBias",get_shadowBias:"get_shadowBias",set_shadowProj:"set_shadowProj",get_shadowProj:"get_shadowProj",set_shadowMapChannel:"set_shadowMapChannel",get_shadowMapChannel:"get_shadowMapChannel",set_shadowMap:"set_shadowMap",get_shadowMap:"get_shadowMap",set_shadowRes:"set_shadowRes",get_shadowRes:"get_shadowRes",set_pcfScale:"set_pcfScale",get_pcfScale:"get_pcfScale",set_pcfQuality:"set_pcfQuality",get_pcfQuality:"get_pcfQuality",set_USE_PCF:"set_USE_PCF",get_USE_PCF:"get_USE_PCF",set_shadowPower:"set_shadowPower",get_shadowPower:"get_shadowPower",set_USE_ESM:"set_USE_ESM",get_USE_ESM:"get_USE_ESM",set_enable:"set_enable",get_enable:"get_enable"}
});
var h3d_shader_GenTexture = function() {
	this.color__ = new h3d_Vector();
	this.mode__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.GenTexture"] = h3d_shader_GenTexture;
h3d_shader_GenTexture.__name__ = "h3d.shader.GenTexture";
h3d_shader_GenTexture.__super__ = h3d_shader_ScreenShader;
h3d_shader_GenTexture.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_mode: function() {
		return this.mode__;
	}
	,set_mode: function(_v) {
		this.constModified = true;
		return this.mode__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.mode__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("mode" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		case 2:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_GenTexture.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.mode__ = this.mode__;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_shader_GenTexture
	,__properties__: $extend(h3d_shader_ScreenShader.prototype.__properties__,{set_color:"set_color",get_color:"get_color",set_mode:"set_mode",get_mode:"get_mode"})
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	get_lengthScale: function() {
		return this.lengthScale__;
	}
	,set_lengthScale: function(_v) {
		return this.lengthScale__ = _v;
	}
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_LineShader.prototype);
		s.shader = this.shader;
		s.lengthScale__ = this.lengthScale__;
		s.width__ = this.width__;
		return s;
	}
	,__class__: h3d_shader_LineShader
	,__properties__: {set_width:"set_width",get_width:"get_width",set_lengthScale:"set_lengthScale",get_lengthScale:"get_lengthScale"}
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.MinMaxShader"] = h3d_shader_MinMaxShader;
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_MinMaxShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texA__ = this.texA__;
		s.texB__ = this.texB__;
		s.isMax__ = this.isMax__;
		return s;
	}
	,__class__: h3d_shader_MinMaxShader
	,__properties__: $extend(h3d_shader_ScreenShader.prototype.__properties__,{set_isMax:"set_isMax",get_isMax:"get_isMax",set_texB:"set_texB",get_texB:"get_texB",set_texA:"set_texA",get_texA:"get_texA"})
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d_shader_CubeMinMaxShader;
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_CubeMinMaxShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texA__ = this.texA__;
		s.texB__ = this.texB__;
		s.isMax__ = this.isMax__;
		s.mat__ = this.mat__;
		return s;
	}
	,__class__: h3d_shader_CubeMinMaxShader
	,__properties__: $extend(h3d_shader_ScreenShader.prototype.__properties__,{set_mat:"set_mat",get_mat:"get_mat",set_isMax:"set_isMax",get_isMax:"get_isMax",set_texB:"set_texB",get_texB:"get_texB",set_texA:"set_texA",get_texA:"get_texA"})
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_NormalMap.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_NormalMap
	,__properties__: {set_texture:"set_texture",get_texture:"get_texture"}
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SignedDistanceField = function() {
	this.smoothing__ = 0.041666666666666664;
	this.alphaCutoff__ = 0.5;
	this.channel__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.SignedDistanceField"] = h3d_shader_SignedDistanceField;
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
h3d_shader_SignedDistanceField.prototype = $extend(hxsl_Shader.prototype,{
	get_channel: function() {
		return this.channel__;
	}
	,set_channel: function(_v) {
		this.constModified = true;
		return this.channel__ = _v;
	}
	,get_alphaCutoff: function() {
		return this.alphaCutoff__;
	}
	,set_alphaCutoff: function(_v) {
		return this.alphaCutoff__ = _v;
	}
	,get_smoothing: function() {
		return this.smoothing__;
	}
	,set_smoothing: function(_v) {
		return this.smoothing__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.channel__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("channel" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SignedDistanceField.prototype);
		s.shader = this.shader;
		s.channel__ = this.channel__;
		s.alphaCutoff__ = this.alphaCutoff__;
		s.smoothing__ = this.smoothing__;
		return s;
	}
	,__class__: h3d_shader_SignedDistanceField
	,__properties__: {set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_alphaCutoff:"set_alphaCutoff",get_alphaCutoff:"get_alphaCutoff",set_channel:"set_channel",get_channel:"get_channel"}
});
var h3d_shader_SkinBase = function() {
	this.bonesMatrixes__ = [];
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.SkinBase"] = h3d_shader_SkinBase;
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	get_MaxBones: function() {
		return this.MaxBones__;
	}
	,set_MaxBones: function(_v) {
		this.constModified = true;
		return this.MaxBones__ = _v;
	}
	,get_bonesMatrixes: function() {
		return this.bonesMatrixes__;
	}
	,set_bonesMatrixes: function(_v) {
		return this.bonesMatrixes__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SkinBase.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_SkinBase
	,__properties__: {set_bonesMatrixes:"set_bonesMatrixes",get_bonesMatrixes:"get_bonesMatrixes",set_MaxBones:"set_MaxBones",get_MaxBones:"get_MaxBones"}
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Skin.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.SkinTangent"] = h3d_shader_SkinTangent;
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SkinTangent.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SpecularTexture.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_SpecularTexture
	,__properties__: {set_texture:"set_texture",get_texture:"get_texture"}
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_specularAlpha: function() {
		return this.specularAlpha__;
	}
	,set_specularAlpha: function(_v) {
		this.constModified = true;
		return this.specularAlpha__ = _v;
	}
	,get_killAlphaThreshold: function() {
		return this.killAlphaThreshold__;
	}
	,set_killAlphaThreshold: function(_v) {
		return this.killAlphaThreshold__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Texture.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		s.killAlpha__ = this.killAlpha__;
		s.specularAlpha__ = this.specularAlpha__;
		s.killAlphaThreshold__ = this.killAlphaThreshold__;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_Texture
	,__properties__: {set_texture:"set_texture",get_texture:"get_texture",set_killAlphaThreshold:"set_killAlphaThreshold",get_killAlphaThreshold:"get_killAlphaThreshold",set_specularAlpha:"set_specularAlpha",get_specularAlpha:"get_specularAlpha",set_killAlpha:"set_killAlpha",get_killAlpha:"get_killAlpha",set_additive:"set_additive",get_additive:"get_additive"}
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_Vector();
	this.uvDelta__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
	var _this1 = this.uvScale__;
	var x1 = sx;
	var y1 = sy;
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = 0.;
	_this1.w = 1.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	get_uvDelta: function() {
		return this.uvDelta__;
	}
	,set_uvDelta: function(_v) {
		return this.uvDelta__ = _v;
	}
	,get_uvScale: function() {
		return this.uvScale__;
	}
	,set_uvScale: function(_v) {
		return this.uvScale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_UVDelta.prototype);
		s.shader = this.shader;
		s.uvDelta__ = this.uvDelta__;
		s.uvScale__ = this.uvScale__;
		return s;
	}
	,__class__: h3d_shader_UVDelta
	,__properties__: {set_uvScale:"set_uvScale",get_uvScale:"get_uvScale",set_uvDelta:"set_uvDelta",get_uvDelta:"get_uvDelta"}
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_VertexColorAlpha.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
	,__class__: h3d_shader_VertexColorAlpha
	,__properties__: {set_additive:"set_additive",get_additive:"get_additive"}
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_Vector();
	this.normal__ = new h3d_Vector();
	this.scale__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this1 = this.tangent__;
	var x1 = 1;
	var y1 = 0;
	var z1 = 0;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = z1;
	_this1.w = 1.;
	var _this2 = this.scale__;
	var x2 = 1 / objectWidth;
	var y2 = 1 / objectHeight;
	if(y2 == null) {
		y2 = 0.;
	}
	if(x2 == null) {
		x2 = 0.;
	}
	_this2.x = x2;
	_this2.y = y2;
	_this2.z = 0.;
	_this2.w = 1.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,get_normal: function() {
		return this.normal__;
	}
	,set_normal: function(_v) {
		return this.normal__ = _v;
	}
	,get_tangent: function() {
		return this.tangent__;
	}
	,set_tangent: function(_v) {
		return this.tangent__ = _v;
	}
	,get_isCentered: function() {
		return this.isCentered__;
	}
	,set_isCentered: function(_v) {
		this.constModified = true;
		return this.isCentered__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_VolumeDecal.prototype);
		s.shader = this.shader;
		s.scale__ = this.scale__;
		s.normal__ = this.normal__;
		s.tangent__ = this.tangent__;
		s.isCentered__ = this.isCentered__;
		return s;
	}
	,__class__: h3d_shader_VolumeDecal
	,__properties__: {set_isCentered:"set_isCentered",get_isCentered:"get_isCentered",set_tangent:"set_tangent",get_tangent:"get_tangent",set_normal:"set_normal",get_normal:"get_normal",set_scale:"set_scale",get_scale:"get_scale"}
});
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(haxe_EntryPoint.run);
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	stop: function() {
		if(this.f == null) {
			return;
		}
		this.f = null;
		this.nextRun = -Infinity;
		if(this.prev == null) {
			haxe_MainLoop.pending = this.next;
		} else {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
	}
	,__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw new js__$Boot_HaxeError("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = Date.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.b[i1] << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = "haxe.ds._Vector.Vector_Impl_";
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g2 = 0;
			var _g11 = len;
			while(_g2 < _g11) {
				var k1 = _g2++;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g3 = 0;
		var _g12 = len;
		while(_g3 < _g12) {
			var i2 = _g3++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addInt32: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	,addFloat: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	,addDouble: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
	,__properties__: $extend(haxe_io_Input.prototype.__properties__,{set_position:"set_position"})
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,flush: function() {
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths1 = _g;
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g3 = 1;
	var _g11 = paths1.length;
	while(_g3 < _g11) {
		var i = _g3++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_xml__$Access_NodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.NodeAccess_Impl_"] = haxe_xml__$Access_NodeAccess_$Impl_$;
haxe_xml__$Access_NodeAccess_$Impl_$.__name__ = "haxe.xml._Access.NodeAccess_Impl_";
haxe_xml__$Access_NodeAccess_$Impl_$.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this1.nodeType));
			}
			xname = this1.nodeName;
		}
		throw new js__$Boot_HaxeError(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x.nodeType));
	}
	var this2 = x;
	return this2;
};
var haxe_xml__$Access_AttribAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.AttribAccess_Impl_"] = haxe_xml__$Access_AttribAccess_$Impl_$;
haxe_xml__$Access_AttribAccess_$Impl_$.__name__ = "haxe.xml._Access.AttribAccess_Impl_";
haxe_xml__$Access_AttribAccess_$Impl_$.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this1.nodeType));
		}
		throw new js__$Boot_HaxeError(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.HasNodeAccess_Impl_"] = haxe_xml__$Access_HasNodeAccess_$Impl_$;
haxe_xml__$Access_HasNodeAccess_$Impl_$.__name__ = "haxe.xml._Access.HasNodeAccess_Impl_";
haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Compress = function() { };
$hxClasses["haxe.zip.Compress"] = haxe_zip_Compress;
haxe_zip_Compress.__name__ = "haxe.zip.Compress";
haxe_zip_Compress.run = function(s,level) {
	throw new js__$Boot_HaxeError("Not implemented for this platform");
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g2 = t.table;
			var _g1 = t.n;
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g2 = 0;
		var _g3 = nlengths;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g4 = 1;
		var _g5 = maxbits - 1;
		while(_g4 < _g5) {
			var i2 = _g4++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g6 = 0;
		var _g7 = nlengths;
		while(_g6 < _g7) {
			var i3 = _g6++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n1 = h.n;
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g2 = hclen;
				var _g3 = 19;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g4 = 0;
				var _g5 = hlit + hdist;
				while(_g4 < _g5) {
					var i2 = _g4++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.notImplemented = function() {
	throw new js__$Boot_HaxeError("Not implemented");
};
hxd_BitmapData.fromNative = function(data) {
	var b = new hxd_BitmapData(-101,-102);
	b.ctx = data;
	return b;
};
hxd_BitmapData.prototype = {
	clear: function(color) {
		this.fill(0,0,this.ctx.canvas.width,this.ctx.canvas.height,color);
	}
	,fill: function(x,y,width,height,color) {
		this.ctx.fillStyle = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + (color >>> 24) / 255 + ")";
		this.ctx.fillRect(x,y,width,height);
	}
	,draw: function(x,y,src,srcX,srcY,width,height,blendMode) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,drawScaled: function(x,y,width,height,src,srcX,srcY,srcWidth,srcHeight,blendMode,smooth) {
		if(smooth == null) {
			smooth = true;
		}
		if(blendMode == null) {
			blendMode = h2d_BlendMode.Alpha;
		}
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,line: function(x0,y0,x1,y1,color) {
		var dx = x1 - x0;
		var dy = y1 - y0;
		if(dx == 0) {
			if(y1 < y0) {
				var tmp = y0;
				y0 = y1;
				y1 = tmp;
			}
			if(y0 < 0) {
				y0 = 0;
			}
			if(y1 > this.ctx.canvas.height - 1) {
				y1 = this.ctx.canvas.height - 1;
			}
			var _g = y0;
			var _g1 = y1 + 1;
			while(_g < _g1) {
				var y = _g++;
				this.setPixel(x0,y,color);
			}
		} else if(dy == 0) {
			if(x1 < x0) {
				var tmp1 = x0;
				x0 = x1;
				x1 = tmp1;
			}
			if(x0 < 0) {
				x0 = 0;
			}
			if(x1 > this.ctx.canvas.width - 1) {
				x1 = this.ctx.canvas.width - 1;
			}
			var _g2 = x0;
			var _g11 = x1 + 1;
			while(_g2 < _g11) {
				var x = _g2++;
				this.setPixel(x,y0,color);
			}
		} else {
			var sx;
			var sy;
			var clip_x0;
			var clip_y0;
			var clip_x1;
			var clip_y1;
			if(x0 < x1) {
				if(x0 >= this.ctx.canvas.width || x1 < 0) {
					return;
				}
				sx = 1;
				clip_x0 = 0;
				clip_x1 = this.ctx.canvas.width - 1;
			} else {
				if(x1 >= this.ctx.canvas.width || x0 < 0) {
					return;
				}
				sx = -1;
				x1 = -x1;
				x0 = -x0;
				clip_x0 = 1 - this.ctx.canvas.width;
				clip_x1 = 0;
			}
			if(y0 < y1) {
				if(y0 >= this.ctx.canvas.height || y1 < 0) {
					return;
				}
				sy = 1;
				clip_y0 = 0;
				clip_y1 = this.ctx.canvas.height - 1;
			} else {
				if(y1 >= this.ctx.canvas.width || y0 < 0) {
					return;
				}
				sy = -1;
				y1 = -y1;
				y0 = -y0;
				clip_y0 = 1 - this.ctx.canvas.height;
				clip_y1 = 0;
			}
			dx = x1 - x0;
			dy = y1 - y0;
			var d2x = dx << 1;
			var d2y = dy << 1;
			var x2 = x0;
			var y2 = y0;
			if(dx >= dy) {
				var delta = d2y - dx;
				var tracing_can_start = false;
				if(y0 < clip_y0) {
					var temp = d2x;
					temp = temp * (clip_y0 - y0) - dx;
					var xinc = temp / d2y;
					x2 += xinc | 0;
					if(x2 > clip_x1) {
						return;
					}
					if(x2 >= clip_x0) {
						temp -= xinc * d2y;
						delta -= (temp | 0) + dx;
						y2 = clip_y0;
						if(temp > 0) {
							++x2;
							delta += d2y;
						}
						tracing_can_start = true;
					}
				}
				if(!tracing_can_start && x0 < clip_x0) {
					var temp1 = d2y;
					temp1 *= clip_x0 - x0;
					var yinc = temp1 / d2x;
					y2 += yinc | 0;
					temp1 %= d2x;
					if(y2 > clip_y1 || y2 == clip_y1 && temp1 > dx) {
						return;
					}
					x2 = clip_x0;
					delta += temp1 | 0;
					if(temp1 >= dx) {
						++y2;
						delta -= d2x;
					}
				}
				var xend = x1;
				if(y1 > clip_y1) {
					var temp2 = d2x;
					temp2 = temp2 * (clip_y1 - y1) + dx;
					var xinc1 = temp2 / d2y;
					xend += xinc1 | 0;
					if(temp2 - xinc1 * d2y == 0) {
						--xend;
					}
				}
				if(xend > clip_x1) {
					xend = clip_x1 + 1;
				} else {
					++xend;
				}
				if(sx == -1) {
					x2 = -x2;
					xend = -xend;
				}
				if(sy == -1) {
					y2 = -y2;
				}
				d2x -= d2y;
				while(x2 != xend) {
					this.setPixel(x2,y2,color);
					if(delta >= 0) {
						y2 += sy;
						delta -= d2x;
					} else {
						delta += d2y;
					}
					x2 += sx;
				}
			} else {
				var delta1 = d2x - dy;
				var tracing_can_start1 = false;
				if(x0 < clip_x0) {
					var temp3 = d2y;
					temp3 = temp3 * (clip_x0 - x0) - dy;
					var yinc1 = temp3 / d2x;
					y2 += yinc1 | 0;
					if(y2 > clip_y1) {
						return;
					}
					if(y2 >= clip_y0) {
						temp3 -= yinc1 * d2x;
						delta1 -= (temp3 | 0) + dy;
						x2 = clip_x0;
						if(temp3 > 0) {
							++y2;
							delta1 += d2x;
						}
						tracing_can_start1 = true;
					}
				}
				if(!tracing_can_start1 && y0 < clip_y0) {
					var temp4 = d2x;
					temp4 *= clip_y0 - y0;
					var xinc2 = temp4 / d2y;
					x2 += xinc2 | 0;
					temp4 %= d2y;
					if(x2 > clip_x1 || x2 == clip_x1 && temp4 > dy) {
						return;
					}
					y2 = clip_y0;
					delta1 += temp4 | 0;
					if(temp4 >= dy) {
						++x2;
						delta1 -= d2y;
					}
				}
				var yend = y1;
				if(x1 > clip_x1) {
					var temp5 = d2y;
					temp5 = temp5 * (clip_x1 - x1) + dy;
					var yinc2 = temp5 / d2x;
					yend += yinc2 | 0;
					if(temp5 - yinc2 * d2x == 0) {
						--yend;
					}
				}
				if(yend > clip_y1) {
					yend = clip_y1 + 1;
				} else {
					++yend;
				}
				if(sx == -1) {
					x2 = -x2;
				}
				if(sy == -1) {
					y2 = -y2;
					yend = -yend;
				}
				d2y -= d2x;
				while(y2 != yend) {
					this.setPixel(x2,y2,color);
					if(delta1 >= 0) {
						x2 += sx;
						delta1 -= d2y;
					} else {
						delta1 += d2x;
					}
					y2 += sy;
				}
			}
		}
	}
	,dispose: function() {
		this.ctx = null;
		this.pixel = null;
	}
	,clone: function() {
		return this.sub(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
	}
	,sub: function(x,y,w,h) {
		var canvas = window.document.createElement("canvas");
		canvas.width = w;
		canvas.height = h;
		var ctx = canvas.getContext("2d",null);
		ctx.drawImage(this.ctx.canvas,x,y,w,h,0,0,w,h);
		return hxd_BitmapData.fromNative(ctx);
	}
	,lock: function() {
		if(this.lockImage == null) {
			this.lockImage = this.ctx.getImageData(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
		}
	}
	,unlock: function() {
		if(this.lockImage != null) {
			this.ctx.putImageData(this.lockImage,0,0);
			this.lockImage = null;
		}
	}
	,getPixel: function(x,y) {
		var i = this.lockImage;
		var a;
		if(i != null) {
			a = x + y * i.width << 2;
		} else {
			a = 0;
			i = this.ctx.getImageData(x,y,1,1);
		}
		return i.data[a] << 16 | i.data[a | 1] << 8 | i.data[a | 2] | i.data[a | 3] << 24;
	}
	,setPixel: function(x,y,c) {
		var i = this.lockImage;
		if(i != null) {
			var a = x + y * i.width << 2;
			i.data[a] = c >> 16 & 255;
			i.data[a | 1] = c >> 8 & 255;
			i.data[a | 2] = c & 255;
			i.data[a | 3] = c >>> 24 & 255;
			return;
		}
		var i1 = this.pixel;
		if(i1 == null) {
			i1 = this.ctx.createImageData(1,1);
			this.pixel = i1;
		}
		i1.data[0] = c >> 16 & 255;
		i1.data[1] = c >> 8 & 255;
		i1.data[2] = c & 255;
		i1.data[3] = c >>> 24 & 255;
		this.ctx.putImageData(i1,x,y);
	}
	,get_width: function() {
		return this.ctx.canvas.width;
	}
	,get_height: function() {
		return this.ctx.canvas.height;
	}
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,setPixels: function(pixels) {
		if(pixels.width != this.ctx.canvas.width || pixels.height != this.ctx.canvas.height) {
			throw new js__$Boot_HaxeError("Invalid pixels size");
		}
		pixels.setFlip(false);
		var img = this.ctx.createImageData(pixels.width,pixels.height);
		pixels.convert(hxd_PixelFormat.RGBA);
		var _g = 0;
		var _g1 = pixels.width * pixels.height * 4;
		while(_g < _g1) {
			var i = _g++;
			img.data[i] = pixels.bytes.b[i];
		}
		this.ctx.putImageData(img,0,0);
	}
	,toNative: function() {
		return this.ctx;
	}
	,toPNG: function() {
		var pixels = this.getPixels();
		var png = pixels.toPNG();
		pixels.dispose();
		return png;
	}
	,__class__: hxd_BitmapData
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g1 = 192;
	var _g2 = 199;
	while(_g1 < _g2) {
		var i1 = _g1++;
		_gthis.map.h[i1] = 65;
	}
	var _g3 = 224;
	var _g4 = 231;
	while(_g3 < _g4) {
		var i2 = _g3++;
		_gthis.map.h[i2] = 97;
	}
	var _g5 = 200;
	var _g6 = 204;
	while(_g5 < _g6) {
		var i3 = _g5++;
		_gthis.map.h[i3] = 69;
	}
	var _g7 = 232;
	var _g8 = 236;
	while(_g7 < _g8) {
		var i4 = _g7++;
		_gthis.map.h[i4] = 101;
	}
	var _g9 = 204;
	var _g10 = 208;
	while(_g9 < _g10) {
		var i5 = _g9++;
		_gthis.map.h[i5] = 73;
	}
	var _g11 = 236;
	var _g12 = 240;
	while(_g11 < _g12) {
		var i6 = _g11++;
		_gthis.map.h[i6] = 105;
	}
	var _g13 = 210;
	var _g14 = 215;
	while(_g13 < _g14) {
		var i7 = _g13++;
		_gthis.map.h[i7] = 79;
	}
	var _g15 = 242;
	var _g16 = 247;
	while(_g15 < _g16) {
		var i8 = _g15++;
		_gthis.map.h[i8] = 111;
	}
	var _g17 = 217;
	var _g18 = 221;
	while(_g17 < _g18) {
		var i9 = _g17++;
		_gthis.map.h[i9] = 85;
	}
	var _g19 = 249;
	var _g20 = 253;
	while(_g19 < _g20) {
		var i10 = _g19++;
		_gthis.map.h[i10] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = "hxd.Charset";
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(!(code >= 11904 && code <= 42191 || code >= 63744 && code <= 64255)) {
			if(code >= 131072) {
				return code <= 262141;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__ : true, __constructs__ : ["Default","Button","Move","TextInput","Hide","Custom","Callback"]
	,Default: {_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["f"],$_)
};
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.getNativeCursor = function(name) {
	var c = new hxd_CustomCursor([],0,0,0);
	c.alloc = [name];
	return hxd_Cursor.Custom(c);
};
hxd_CustomCursor.prototype = {
	reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.ctx = null;
			f.pixel = null;
		}
		this.frames = [];
		if(this.alloc != null) {
			this.alloc = null;
		}
	}
	,__class__: hxd_CustomCursor
};
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"]
	,EPush: {_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	toString: function() {
		var tmp = Std.string(this.kind) + "[" + (this.relX | 0) + "," + (this.relY | 0) + "]";
		var tmp1;
		switch(this.kind._hx_index) {
		case 0:case 1:case 10:
			tmp1 = ",button=" + this.button;
			break;
		case 2:case 3:case 4:case 6:case 7:case 12:
			tmp1 = "";
			break;
		case 5:
			tmp1 = ",wheelDelta=" + this.wheelDelta;
			break;
		case 8:case 9:
			tmp1 = ",keyCode=" + this.keyCode;
			break;
		case 11:
			tmp1 = ",charCode=" + this.charCode;
			break;
		}
		return tmp + tmp1;
	}
	,__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand_$Impl_$ = {};
$hxClasses["hxd._FloatBuffer.Float32Expand_Impl_"] = hxd__$FloatBuffer_Float32Expand_$Impl_$;
hxd__$FloatBuffer_Float32Expand_$Impl_$.__name__ = "hxd._FloatBuffer.Float32Expand_Impl_";
hxd__$FloatBuffer_Float32Expand_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"};
hxd__$FloatBuffer_Float32Expand_$Impl_$._new = function(length) {
	var this1 = { pos : 0, array : new Float32Array(new ArrayBuffer(length << 2))};
	return this1;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.get_length = function(this1) {
	return this1.pos;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.set_length = function(this1,v) {
	if(this1.pos != v) {
		var newArray = new Float32Array(v);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.pos = v;
	return v;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.push = function(this1,v) {
	if(this1.pos == this1.array.length) {
		var newSize = this1.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.array[this1.pos++] = v;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.get = function(this1,index) {
	return this1.array[index];
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.set = function(this1,index,v) {
	return this1.array[index] = v;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.toF32Array = function(this1) {
	return this1.array;
};
hxd__$FloatBuffer_Float32Expand_$Impl_$.toArray = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.pos;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(this1.array[i]);
	}
	return _g;
};
var hxd__$FloatBuffer_InnerIterator = function(b) {
	this.b = b;
	this.len = this.b.pos;
	this.pos = 0;
};
$hxClasses["hxd._FloatBuffer.InnerIterator"] = hxd__$FloatBuffer_InnerIterator;
hxd__$FloatBuffer_InnerIterator.__name__ = "hxd._FloatBuffer.InnerIterator";
hxd__$FloatBuffer_InnerIterator.prototype = {
	hasNext: function() {
		return this.pos < this.len;
	}
	,next: function() {
		return this.b.array[this.pos++];
	}
	,__class__: hxd__$FloatBuffer_InnerIterator
};
var hxd__$FloatBuffer_FloatBuffer_$Impl_$ = {};
$hxClasses["hxd._FloatBuffer.FloatBuffer_Impl_"] = hxd__$FloatBuffer_FloatBuffer_$Impl_$;
hxd__$FloatBuffer_FloatBuffer_$Impl_$.__name__ = "hxd._FloatBuffer.FloatBuffer_Impl_";
hxd__$FloatBuffer_FloatBuffer_$Impl_$.__properties__ = {get_length:"get_length"};
hxd__$FloatBuffer_FloatBuffer_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(length);
	return this1;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.push = function(this1,v) {
	if(this1.pos == this1.array.length) {
		var newSize = this1.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.array[this1.pos++] = v;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.grow = function(this1,v) {
	var _g = this1.pos;
	var _g1 = v;
	while(_g < _g1) {
		var i = _g++;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0.;
	}
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.resize = function(this1,v) {
	if(this1.pos != v) {
		var newArray = new Float32Array(v);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.pos = v;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.arrayRead = function(this1,key) {
	return this1.array[key];
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.arrayWrite = function(this1,key,value) {
	return this1.array[key] = value;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.getNative = function(this1) {
	return this1;
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.iterator = function(this1) {
	return new hxd__$FloatBuffer_InnerIterator(this1);
};
hxd__$FloatBuffer_FloatBuffer_$Impl_$.get_length = function(this1) {
	return this1.pos;
};
var hxd__$IndexBuffer_InnerIterator = function(b) {
	this.b = b;
	this.len = this.b.length;
	this.pos = 0;
};
$hxClasses["hxd._IndexBuffer.InnerIterator"] = hxd__$IndexBuffer_InnerIterator;
hxd__$IndexBuffer_InnerIterator.__name__ = "hxd._IndexBuffer.InnerIterator";
hxd__$IndexBuffer_InnerIterator.prototype = {
	hasNext: function() {
		return this.pos < this.len;
	}
	,next: function() {
		return this.b[this.pos++];
	}
	,__class__: hxd__$IndexBuffer_InnerIterator
};
var hxd__$IndexBuffer_IndexBuffer_$Impl_$ = {};
$hxClasses["hxd._IndexBuffer.IndexBuffer_Impl_"] = hxd__$IndexBuffer_IndexBuffer_$Impl_$;
hxd__$IndexBuffer_IndexBuffer_$Impl_$.__name__ = "hxd._IndexBuffer.IndexBuffer_Impl_";
hxd__$IndexBuffer_IndexBuffer_$Impl_$.__properties__ = {get_length:"get_length"};
hxd__$IndexBuffer_IndexBuffer_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new Array(length);
	return this1;
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.push = function(this1,v) {
	this1.push(v);
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.grow = function(this1,v) {
	while(this1.length < v) this1.push(0);
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.arrayRead = function(this1,key) {
	return this1[key];
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.arrayWrite = function(this1,key,value) {
	return this1[key] = value;
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.getNative = function(this1) {
	return this1;
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.iterator = function(this1) {
	return new hxd__$IndexBuffer_InnerIterator(this1);
};
hxd__$IndexBuffer_IndexBuffer_$Impl_$.get_length = function(this1) {
	return this1.length;
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = "hxd.Key";
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.getFrame = function() {
	return hxd_Timer.frameCount + 1;
};
hxd_Key.isPressed = function(code) {
	return hxd_Key.keyPressed[code] == hxd_Timer.frameCount + 1 - 1;
};
hxd_Key.isReleased = function(code) {
	return hxd_Key.keyPressed[code] == -(hxd_Timer.frameCount + 1) + 1;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 1;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 1);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 1;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 1;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 1);
		break;
	default:
	}
};
hxd_Key.getKeyName = function(keyCode) {
	var c = keyCode;
	switch(c) {
	case 0:
		return "MouseLeft";
	case 1:
		return "MouseRight";
	case 2:
		return "MouseMiddle";
	case 3:
		return "Mouse3";
	case 4:
		return "Mouse4";
	case 8:
		return "Backspace";
	case 9:
		return "Tab";
	case 13:
		return "Enter";
	case 16:
		return "Shift";
	case 17:
		return "Ctrl";
	case 18:
		return "Alt";
	case 19:
		return "PauseBreak";
	case 20:
		return "CapsLock";
	case 27:
		return "Escape";
	case 32:
		return "Space";
	case 33:
		return "PageUp";
	case 34:
		return "PageDown";
	case 35:
		return "End";
	case 36:
		return "Home";
	case 37:
		return "Left";
	case 38:
		return "Up";
	case 39:
		return "Right";
	case 40:
		return "Down";
	case 45:
		return "Insert";
	case 46:
		return "Delete";
	case 91:
		return "LeftWindowKey";
	case 92:
		return "RightWindowKey";
	case 93:
		return "ContextMenu";
	case 106:
		return "NumPad*";
	case 107:
		return "NumPad+";
	case 108:
		return "NumPadEnter";
	case 109:
		return "NumPad-";
	case 110:
		return "NumPad.";
	case 111:
		return "NumPad/";
	case 144:
		return "NumLock";
	case 145:
		return "ScrollLock";
	case 186:
		return "Semicolon";
	case 187:
		return "Equals";
	case 188:
		return "Comma";
	case 189:
		return "Minus";
	case 190:
		return "Period";
	case 191:
		return "Slash";
	case 192:
		return "Tilde";
	case 219:
		return "BracketLeft";
	case 220:
		return "Backslash";
	case 221:
		return "BacketRight";
	case 222:
		return "Quote";
	case 226:
		return "IntlBackslash";
	case 272:
		return "LShift";
	case 273:
		return "LCtrl";
	case 274:
		return "LAlt";
	case 528:
		return "RShift";
	case 529:
		return "RCtrl";
	case 530:
		return "RAlt";
	default:
		if(c >= 48 && c <= 57) {
			return "" + (c - 48);
		} else if(c >= 96 && c <= 105) {
			return "NumPad" + (c - 96);
		} else if(c >= 65 && c <= 90) {
			return String.fromCodePoint((65 + c - 65));
		} else if(c >= 112 && c <= 135) {
			return "F" + (c - 112 + 1);
		} else {
			return null;
		}
	}
};
var hxd_Math = function() { };
$hxClasses["hxd.Math"] = hxd_Math;
hxd_Math.__name__ = "hxd.Math";
hxd_Math.__properties__ = {get_NaN:"get_NaN",get_NEGATIVE_INFINITY:"get_NEGATIVE_INFINITY",get_POSITIVE_INFINITY:"get_POSITIVE_INFINITY"};
hxd_Math.get_POSITIVE_INFINITY = function() {
	return Infinity;
};
hxd_Math.get_NEGATIVE_INFINITY = function() {
	return -Infinity;
};
hxd_Math.get_NaN = function() {
	return NaN;
};
hxd_Math.isNaN = function(v) {
	return isNaN(v);
};
hxd_Math.fmt = function(v) {
	var neg;
	if(v < 0) {
		neg = -1.0;
		v = -v;
	} else {
		neg = 1.0;
	}
	if(isNaN(v) || !isFinite(v)) {
		return v;
	}
	var digits = 4 - Math.log(v) / Math.log(10) | 0;
	if(digits < 1) {
		digits = 1;
	} else if(digits >= 10) {
		return 0.;
	}
	var exp = Math.pow(10,digits);
	return Math.floor(v * exp + .49999) * neg / exp;
};
hxd_Math.floor = function(f) {
	return Math.floor(f);
};
hxd_Math.ceil = function(f) {
	return Math.ceil(f);
};
hxd_Math.round = function(f) {
	return Math.round(f);
};
hxd_Math.clamp = function(f,min,max) {
	if(max == null) {
		max = 1.;
	}
	if(min == null) {
		min = 0.;
	}
	if(f < min) {
		return min;
	} else if(f > max) {
		return max;
	} else {
		return f;
	}
};
hxd_Math.pow = function(v,p) {
	return Math.pow(v,p);
};
hxd_Math.scaleTime = function(v,et) {
	return Math.pow(v,et * hxd_Timer.wantedFPS);
};
hxd_Math.cos = function(f) {
	return Math.cos(f);
};
hxd_Math.sin = function(f) {
	return Math.sin(f);
};
hxd_Math.tan = function(f) {
	return Math.tan(f);
};
hxd_Math.acos = function(f) {
	return Math.acos(f);
};
hxd_Math.asin = function(f) {
	return Math.asin(f);
};
hxd_Math.atan = function(f) {
	return Math.atan(f);
};
hxd_Math.sqrt = function(f) {
	return Math.sqrt(f);
};
hxd_Math.invSqrt = function(f) {
	return 1. / Math.sqrt(f);
};
hxd_Math.atan2 = function(dy,dx) {
	return Math.atan2(dy,dx);
};
hxd_Math.abs = function(f) {
	if(f < 0) {
		return -f;
	} else {
		return f;
	}
};
hxd_Math.max = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.min = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.iabs = function(i) {
	if(i < 0) {
		return -i;
	} else {
		return i;
	}
};
hxd_Math.imax = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.imin = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.iclamp = function(v,min,max) {
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
hxd_Math.lerp = function(a,b,k) {
	return a + k * (b - a);
};
hxd_Math.bitCount = function(v) {
	v -= v >> 1 & 1431655765;
	v = (v & 858993459) + (v >> 2 & 858993459);
	return (v + (v >> 4) & 252645135) * 16843009 >> 24;
};
hxd_Math.isPOT = function(v) {
	return (v & v - 1) == 0;
};
hxd_Math.nextPOT = function(v) {
	--v;
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	return ++v;
};
hxd_Math.distanceSq = function(dx,dy,dz) {
	if(dz == null) {
		dz = 0.;
	}
	return dx * dx + dy * dy + dz * dz;
};
hxd_Math.distance = function(dx,dy,dz) {
	if(dz == null) {
		dz = 0.;
	}
	var dz1 = dz;
	if(dz1 == null) {
		dz1 = 0.;
	}
	return Math.sqrt(dx * dx + dy * dy + dz1 * dz1);
};
hxd_Math.colorLerp = function(c1,c2,k) {
	var a1 = c1 >>> 24;
	var r1 = c1 >> 16 & 255;
	var g1 = c1 >> 8 & 255;
	var b1 = c1 & 255;
	var a2 = c2 >>> 24;
	var r2 = c2 >> 16 & 255;
	var g2 = c2 >> 8 & 255;
	var b2 = c2 & 255;
	var a = a1 * (1 - k) + a2 * k | 0;
	var r = r1 * (1 - k) + r2 * k | 0;
	var g = g1 * (1 - k) + g2 * k | 0;
	var b = b1 * (1 - k) + b2 * k | 0;
	return a << 24 | r << 16 | g << 8 | b;
};
hxd_Math.angle = function(da) {
	da %= 6.2831853071795862;
	if(da > 3.14159265358979323) {
		da -= 6.2831853071795862;
	} else if(da <= -3.1415926535897931) {
		da += 6.2831853071795862;
	}
	return da;
};
hxd_Math.angleLerp = function(a,b,k) {
	var da = b - a;
	da %= 6.2831853071795862;
	if(da > 3.14159265358979323) {
		da -= 6.2831853071795862;
	} else if(da <= -3.1415926535897931) {
		da += 6.2831853071795862;
	}
	return a + da * k;
};
hxd_Math.angleMove = function(a,b,max) {
	var da = b - a;
	da %= 6.2831853071795862;
	if(da > 3.14159265358979323) {
		da -= 6.2831853071795862;
	} else if(da <= -3.1415926535897931) {
		da += 6.2831853071795862;
	}
	var da1 = da;
	if(da1 > -max && da1 < max) {
		return b;
	} else {
		return a + (da1 < 0 ? -max : max);
	}
};
hxd_Math.shuffle = function(a) {
	var len = a.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var x = Std.random(len);
		var y = Std.random(len);
		var tmp = a[x];
		a[x] = a[y];
		a[y] = tmp;
	}
};
hxd_Math.random = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return Math.random() * max;
};
hxd_Math.srand = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return (Math.random() - 0.5) * (max * 2);
};
hxd_Math.b2f = function(v) {
	return (v & 255) * 0.0039215686274509803921568627451;
};
hxd_Math.f2b = function(v) {
	return (v < 0. ? 0. : v > 1. ? 1. : v) * 255.0 | 0;
};
hxd_Math.umod = function(value,modulo) {
	var r = value % modulo;
	if(r >= 0) {
		return r;
	} else {
		return r + modulo;
	}
};
hxd_Math.ufmod = function(value,modulo) {
	var r = value % modulo;
	if(r >= 0) {
		return r;
	} else {
		return r + modulo;
	}
};
hxd_Math.degToRad = function(deg) {
	return deg * 3.14159265358979323 / 180.0;
};
hxd_Math.radToDeg = function(rad) {
	return rad * 180.0 / 3.14159265358979323;
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__ : true, __constructs__ : ["ReadOnly","AlphaPremultiplied","FlipY"]
	,ReadOnly: {_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
	,FlipY: {_hx_index:2,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
var hxd__$Pixels_PixelsARGB_$Impl_$ = {};
$hxClasses["hxd._Pixels.PixelsARGB_Impl_"] = hxd__$Pixels_PixelsARGB_$Impl_$;
hxd__$Pixels_PixelsARGB_$Impl_$.__name__ = "hxd._Pixels.PixelsARGB_Impl_";
hxd__$Pixels_PixelsARGB_$Impl_$.getPixel = function(this1,x,y) {
	var v = this1.bytes.getInt32((x + y * this1.width << 2) + this1.offset);
	return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
};
hxd__$Pixels_PixelsARGB_$Impl_$.setPixel = function(this1,x,y,v) {
	this1.bytes.setInt32((x + y * this1.width << 2) + this1.offset,v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24);
};
hxd__$Pixels_PixelsARGB_$Impl_$.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	p.setFlip(false);
	return p;
};
var hxd__$Pixels_PixelsFloat_$Impl_$ = {};
$hxClasses["hxd._Pixels.PixelsFloat_Impl_"] = hxd__$Pixels_PixelsFloat_$Impl_$;
hxd__$Pixels_PixelsFloat_$Impl_$.__name__ = "hxd._Pixels.PixelsFloat_Impl_";
hxd__$Pixels_PixelsFloat_$Impl_$.getPixelF = function(this1,x,y) {
	switch(this1.innerFormat._hx_index) {
	case 4:
		var pix = (x + y * this1.width << 4) + this1.offset;
		return new h3d_Vector(this1.bytes.getFloat(pix),this1.bytes.getFloat(pix + 4),this1.bytes.getFloat(pix + 8),this1.bytes.getFloat(pix + 12));
	case 7:
		var pix1 = (x + y * this1.width << 1) + this1.offset;
		return new h3d_Vector(this1.bytes.getFloat(pix1));
	default:
		hxd__$Pixels_PixelsFloat_$Impl_$.invalidFormat(this1);
		return null;
	}
};
hxd__$Pixels_PixelsFloat_$Impl_$.setPixelF = function(this1,x,y,v) {
	switch(this1.innerFormat._hx_index) {
	case 4:
		var pix = (x + y * this1.width << 4) + this1.offset;
		this1.bytes.setFloat(pix,v.x);
		this1.bytes.setFloat(pix + 4,v.y);
		this1.bytes.setFloat(pix + 8,v.z);
		this1.bytes.setFloat(pix + 12,v.w);
		break;
	case 7:
		var pix1 = (x + y * this1.width << 1) + this1.offset;
		this1.bytes.setFloat(pix1,v.x);
		break;
	default:
		hxd__$Pixels_PixelsFloat_$Impl_$.invalidFormat(this1);
	}
};
hxd__$Pixels_PixelsFloat_$Impl_$.fromPixels = function(p) {
	p.setFlip(false);
	return p;
};
hxd__$Pixels_PixelsFloat_$Impl_$.invalidFormat = function(this1) {
	throw new js__$Boot_HaxeError("Unsupported format for this operation : " + Std.string(this1.innerFormat));
};
var hxd__$Pixels_Channel_$Impl_$ = {};
$hxClasses["hxd._Pixels.Channel_Impl_"] = hxd__$Pixels_Channel_$Impl_$;
hxd__$Pixels_Channel_$Impl_$.__name__ = "hxd._Pixels.Channel_Impl_";
hxd__$Pixels_Channel_$Impl_$.toInt = function(this1) {
	return this1;
};
hxd__$Pixels_Channel_$Impl_$.fromInt = function(v) {
	return v;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	var this1 = i;
	this.flags = this1;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.switchEndian = function(v) {
	return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
};
hxd_Pixels.switchBR = function(v) {
	return v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
};
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 6:
		tmp = 2;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 12:
		tmp = 6;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 18:
		var n = format.v;
		if(n == 1 || n == 4) {
			return width >> 1;
		}
		tmp = 1;
		break;
	}
	return width * tmp;
};
hxd_Pixels.getChannelOffset = function(format,channel) {
	switch(format._hx_index) {
	case 0:
		return [1,2,3,0][channel];
	case 1:
		return [2,1,0,3][channel];
	case 3:
		return channel * 2;
	case 4:
		return channel * 4;
	case 5:case 6:case 7:
		if(channel == 0) {
			return 0;
		} else {
			return -1;
		}
		break;
	case 8:case 9:case 10:
		var p = hxd_Pixels.calcStride(1,format);
		return [0,p,-1,-1][channel];
	case 11:case 12:case 13:
		var p1 = hxd_Pixels.calcStride(1,format);
		return [0,p1,p1 << 1,-1][channel];
	case 2:case 14:case 15:
		return channel;
	case 16:case 17:
		throw new js__$Boot_HaxeError("Bit packed format");
	case 18:
		var _g = format.v;
		throw new js__$Boot_HaxeError("Not supported");
	}
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(height * hxd_Pixels.calcStride(width,format))),format);
};
hxd_Pixels.prototype = {
	get_format: function() {
		return this.innerFormat;
	}
	,set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw new js__$Boot_HaxeError("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,sub: function(x,y,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw new js__$Boot_HaxeError("Pixels.sub() outside bounds");
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(height * this.stride));
		var stride = hxd_Pixels.calcStride(width,this.innerFormat);
		var outP = 0;
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var dy = _g++;
			var y1 = y + dy;
			var p = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y1 : y1) * this.width) * this.bytesPerPixel + this.offset;
			out.blit(outP,this.bytes,p,stride);
			outP += stride;
		}
		return new hxd_Pixels(width,height,out,this.innerFormat);
	}
	,yflip: function(y) {
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0) {
			return this.height - 1 - y;
		} else {
			return y;
		}
	}
	,blit: function(x,y,src,srcX,srcY,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw new js__$Boot_HaxeError("Pixels.blit() outside bounds");
		}
		if(srcX < 0 || srcX < 0 || srcX + width > src.width || srcY + height > src.height) {
			throw new js__$Boot_HaxeError("Pixels.blit() outside src bounds");
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		src.convert(this.innerFormat);
		var bpp = this.bytesPerPixel;
		if(bpp == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		var stride = hxd_Pixels.calcStride(width,this.innerFormat);
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var dy = _g++;
			var y1 = dy + srcY;
			var srcP = (srcX + ((src.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? src.height - 1 - y1 : y1) * src.width) * bpp + src.offset;
			var y2 = dy + y;
			var dstP = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y2 : y2) * this.width) * bpp + this.offset;
			this.bytes.blit(dstP,src.bytes,srcP,stride);
		}
	}
	,clear: function(color,preserveMask) {
		if(preserveMask == null) {
			preserveMask = 0;
		}
		var mask = preserveMask;
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if((color & 255) == (color >> 8 & 255) && (color & 65535) == color >>> 16 && mask == 0) {
			this.bytes.fill(this.offset,this.width * this.height * this.bytesPerPixel,color & 255);
			return;
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			color = color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24;
			mask = mask >>> 24 | mask >> 8 & 65280 | mask << 8 & 16711680 | mask << 24;
			break;
		case 1:
			break;
		case 2:
			color = color & -16711936 | color << 16 & 16711680 | color >> 16 & 255;
			mask = mask & -16711936 | mask << 16 & 16711680 | mask >> 16 & 255;
			break;
		default:
			this.invalidFormat();
		}
		var p = this.offset;
		if(mask == 0) {
			var _g1 = 0;
			var _g2 = this.width * this.height;
			while(_g1 < _g2) {
				var i = _g1++;
				this.bytes.setInt32(p,color);
				p += 4;
			}
		} else {
			var _g11 = 0;
			var _g21 = this.width * this.height;
			while(_g11 < _g21) {
				var i1 = _g11++;
				this.bytes.setInt32(p,color | this.bytes.getInt32(p) & mask);
				p += 4;
			}
		}
	}
	,toVector: function() {
		var this1 = new Array(this.width * this.height);
		var vec = this1;
		var idx = 0;
		var p = this.offset;
		var dl = 0;
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0) {
			p += (this.height - 1) * this.width * this.bytesPerPixel;
			dl = -this.width * 2 * this.bytesPerPixel;
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g11 = this.width;
				while(_g2 < _g11) {
					var x = _g2++;
					var v = this.bytes.getInt32(p);
					vec[idx++] = v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
					p += 4;
				}
				p += dl;
			}
			break;
		case 1:
			var _g3 = 0;
			var _g12 = this.height;
			while(_g3 < _g12) {
				var y1 = _g3++;
				var _g4 = 0;
				var _g13 = this.width;
				while(_g4 < _g13) {
					var x1 = _g4++;
					vec[idx++] = this.bytes.getInt32(p);
					p += 4;
				}
				p += dl;
			}
			break;
		case 2:
			var _g5 = 0;
			var _g14 = this.height;
			while(_g5 < _g14) {
				var y2 = _g5++;
				var _g6 = 0;
				var _g15 = this.width;
				while(_g6 < _g15) {
					var x2 = _g6++;
					var v1 = this.bytes.getInt32(p);
					vec[idx++] = v1 & -16711936 | v1 << 16 & 16711680 | v1 >> 16 & 255;
					p += 4;
				}
				p += dl;
			}
			break;
		default:
			this.invalidFormat();
		}
		return vec;
	}
	,makeSquare: function(copy) {
		var w = this.width;
		var h = this.height;
		var tw = w == 0 ? 0 : 1;
		var th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		var bpp = this.bytesPerPixel;
		var out = new haxe_io_Bytes(new ArrayBuffer(tw * th * bpp));
		var p = 0;
		var b = this.offset;
		var _g = 0;
		var _g1 = h;
		while(_g < _g1) {
			var y = _g++;
			out.blit(p,this.bytes,b,w * bpp);
			p += w * bpp;
			b += w * bpp;
			var _g2 = 0;
			var _g11 = (tw - w) * bpp >> 2;
			while(_g2 < _g11) {
				var i = _g2++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		var _g21 = 0;
		var _g3 = (th - h) * tw * bpp >> 2;
		while(_g21 < _g3) {
			var i1 = _g21++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd_Pixels(tw,th,out,this.innerFormat);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.stride));
		this.bytes.blit(0,old,this.offset,this.height * this.stride);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,willChange: function() {
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
	}
	,setFlip: function(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 == b) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 1 << hxd_Flags.FlipY._hx_index;
		} else {
			this.flags &= -1 - (1 << hxd_Flags.FlipY._hx_index);
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g11 = this.stride >> 2;
			while(_g2 < _g11) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b1 = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b1);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var this1 = this.bytes.b;
		var bytes = this1;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g11 = this.width * this.height;
				while(_g1 < _g11) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g2 = 0;
				var _g12 = this.width * this.height;
				while(_g2 < _g12) {
					var i1 = _g2++;
					var p1 = (i1 << 2) + this.offset;
					var a1 = bytes[p1];
					var v = bytes[p1 + 1];
					bytes[p1] = v;
					var v1 = bytes[p1 + 2];
					bytes[p1 + 1] = v1;
					var v2 = bytes[p1 + 3];
					bytes[p1 + 2] = v2;
					bytes[p1 + 3] = a1;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g3 = 0;
				var _g13 = this.width * this.height;
				while(_g3 < _g13) {
					var i2 = _g3++;
					var p2 = (i2 << 2) + this.offset;
					var a2 = bytes[p2];
					var r1 = bytes[p2 + 1];
					var g1 = bytes[p2 + 2];
					var b1 = bytes[p2 + 3];
					bytes[p2++] = b1;
					bytes[p2++] = g1;
					bytes[p2++] = r1;
					bytes[p2] = a2;
				}
				break;
			case 2:
				var _g4 = 0;
				var _g14 = this.width * this.height;
				while(_g4 < _g14) {
					var i3 = _g4++;
					var p3 = (i3 << 2) + this.offset;
					var b2 = bytes[p3];
					var r2 = bytes[p3 + 2];
					bytes[p3] = r2;
					bytes[p3 + 2] = b2;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g5 = 0;
				var _g15 = this.width * this.height;
				while(_g5 < _g15) {
					var i4 = _g5++;
					var p4 = (i4 << 2) + this.offset;
					var a3 = bytes[p4 + 3];
					var v3 = bytes[p4 + 2];
					bytes[p4 + 3] = v3;
					var v4 = bytes[p4 + 1];
					bytes[p4 + 2] = v4;
					var v5 = bytes[p4];
					bytes[p4 + 1] = v5;
					bytes[p4] = a3;
				}
				break;
			case 1:
				var _g6 = 0;
				var _g16 = this.width * this.height;
				while(_g6 < _g16) {
					var i5 = _g6++;
					var p5 = (i5 << 2) + this.offset;
					var b3 = bytes[p5];
					var r3 = bytes[p5 + 2];
					bytes[p5] = r3;
					bytes[p5 + 2] = b3;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 18) {
				var a4 = _g.v;
				var b4 = target.v;
				if(a4 != b4) {
					throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,getPixel: function(x,y) {
		var p = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y : y) * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 0:
			var v = this.bytes.getInt32(p);
			return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
		case 1:
			return this.bytes.getInt32(p);
		case 2:
			var v1 = this.bytes.getInt32(p);
			return v1 & -16711936 | v1 << 16 & 16711680 | v1 >> 16 & 255;
		default:
			this.invalidFormat();
			return 0;
		}
	}
	,setPixel: function(x,y,color) {
		var p = (x + ((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 ? this.height - 1 - y : y) * this.width) * this.bytesPerPixel + this.offset;
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			this.bytes.setInt32(p,color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24);
			break;
		case 1:
			this.bytes.setInt32(p,color);
			break;
		case 2:
			this.bytes.setInt32(p,color & -16711936 | color << 16 & 16711680 | color >> 16 & 255);
			break;
		default:
			this.invalidFormat();
		}
	}
	,dispose: function() {
		this.bytes = null;
	}
	,toPNG: function(level) {
		if(level == null) {
			level = 9;
		}
		var png;
		this.setFlip(false);
		if(this.innerFormat._hx_index == 0) {
			png = format_png_Tools.build32ARGB(this.width,this.height,this.bytes,level);
		} else {
			this.convert(hxd_PixelFormat.BGRA);
			png = format_png_Tools.build32BGRA(this.width,this.height,this.bytes,level);
		}
		var o = new haxe_io_BytesOutput();
		new format_png_Writer(o).write(png);
		return o.getBytes();
	}
	,clone: function() {
		var p = new hxd_Pixels(this.width,this.height,null,this.innerFormat);
		p.flags = this.flags;
		p.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
		if(this.bytes != null) {
			var size = this.height * this.stride;
			p.bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			p.bytes.blit(0,this.bytes,this.offset,size);
		}
		return p;
	}
	,__class__: hxd_Pixels
	,__properties__: {set_innerFormat:"set_innerFormat",get_format:"get_format"}
};
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = "hxd.Res";
hxd_Res.__properties__ = {set_loader:"set_loader",get_loader:"get_loader"};
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	var l = hxd_res_Loader.currentInstance;
	if(l == null) {
		throw new js__$Boot_HaxeError("Resource loader not initialized: call to hxd.Res.initXXX() required");
	}
	return l;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	setMousePos: function(xPos,yPos) {
		this.mouseX = xPos;
		this.mouseY = yPos;
	}
	,onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,removeScene: function(s) {
		if(HxOverrides.remove(this.scenes,s)) {
			s.setEvents(null);
		}
	}
	,dispose: function() {
		this.window.removeEventTarget($bind(this,this.onEvent));
	}
	,focus: function(i) {
		if(this.currentFocus == i) {
			return;
		}
		if(i == null) {
			this.blur();
			return;
		}
		if(this.currentFocus != null) {
			this.blur();
			if(this.currentFocus != null) {
				return;
			}
		}
		var e = new hxd_Event(hxd_EventKind.EFocus);
		i.handleEvent(e);
		if(!e.cancel) {
			this.currentFocus = i;
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		var _g1 = 0;
		var _g2 = this.scenes;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
									if(!(idx < this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
									if(!(idx > this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					var e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i1 = 0;
				var ev = this.onOver;
				while(true) {
					var info1 = this.overCandidates[i1++];
					ev.relX = info1.x;
					ev.relY = info1.y;
					ev.relZ = info1.z;
					if(info1.s.isInteractiveVisible(info1.i)) {
						info1.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info1.i);
					}
					info1.i = null;
					info1.s = null;
					if(!(i1 < overCandidateCount)) {
						break;
					}
				}
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g3 = 0;
			var _g4 = this.pushList;
			while(_g3 < _g4.length) {
				var i2 = _g4[_g3];
				++_g3;
				if(i2 == null) {
					event.kind = hxd_EventKind.EReleaseOutside;
					this.dispatchListeners(event);
					event.kind = hxd_EventKind.ERelease;
				} else {
					var s1 = i2.getInteractiveScene();
					if(s1 == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s1.dispatchEvent(event,i2);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,startDrag: function(f,onCancel,refEvent) {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = { f : f, ref : refEvent == null ? null : refEvent.touchId, onCancel : onCancel};
	}
	,stopDrag: function() {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = null;
	}
	,getFocus: function() {
		return this.currentFocus;
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,set_defaultCursor: function(c) {
		if(Type.enumEq(c,this.defaultCursor)) {
			return c;
		}
		this.defaultCursor = c;
		this.selectCursor();
		return c;
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
	,__properties__: {set_defaultCursor:"set_defaultCursor"}
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__ : true, __constructs__ : ["IOS","Android","WebGL","PC","Console","FlashPlayer"]
	,IOS: {_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__ : true, __constructs__ : ["IsTouch","IsWindowed","IsMobile"]
	,IsTouch: {_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.__properties__ = {set_tmod:"set_tmod",get_tmod:"get_tmod"};
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = Date.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.get_tmod = function() {
	return hxd_Timer.dt * hxd_Timer.wantedFPS;
};
hxd_Timer.set_tmod = function(v) {
	hxd_Timer.dt = v / hxd_Timer.wantedFPS;
	return v;
};
hxd_Timer.fps = function() {
	return 1. / hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = Date.now() / 1000;
};
hxd_Timer.reset = function() {
	hxd_Timer.lastTimeStamp = Date.now() / 1000;
	hxd_Timer.dt = hxd_Timer.currentDT = 1. / hxd_Timer.wantedFPS;
};
var hxd_Window = function(canvas,globalEvents) {
	this.useScreenPixels = true;
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw new js__$Boot_HaxeError("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var f = $bind(this,this.onFocus);
	var tmp = function() {
		f(false);
	};
	this.element.addEventListener("blur",tmp);
	var f1 = $bind(this,this.onFocus);
	var tmp1 = function() {
		f1(true);
	};
	this.element.addEventListener("focus",tmp1);
	canvas.oncontextmenu = function(e) {
		e.stopPropagation();
		e.preventDefault();
		return false;
	};
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e1) {
			_gthis.onMouseDown(e1);
			e1.stopPropagation();
			e1.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e2) {
			e2.stopPropagation();
			e2.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
$hxClasses["hxd.Window"] = hxd_Window;
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,dispose: function() {
		this.timer.stop();
	}
	,onClose: function() {
		return true;
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,et)) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,f)) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,resize: function(width,height) {
	}
	,setFullScreen: function(v) {
		var doc = window.document;
		var elt = doc.documentElement;
		if(doc.fullscreenElement == elt == v) {
			return;
		}
		if(v) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
	}
	,setCurrent: function() {
		hxd_Window.inst = this;
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,get_mouseLock: function() {
		return false;
	}
	,set_mouseLock: function(v) {
		if(v) {
			throw new js__$Boot_HaxeError("Not implemented");
		}
		return false;
	}
	,get_vsync: function() {
		return true;
	}
	,set_vsync: function(b) {
		if(!b) {
			throw new js__$Boot_HaxeError("Can't disable vsync on this platform");
		}
		return true;
	}
	,onMouseDown: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,get_isFocused: function() {
		return this.focused;
	}
	,get_displayMode: function() {
		var doc = window.document;
		if(doc.fullscreenElement != null) {
			return hxd_DisplayMode.Borderless;
		}
		return hxd_DisplayMode.Windowed;
	}
	,set_displayMode: function(m) {
		var doc = window.document;
		var elt = doc.documentElement;
		var fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	,get_title: function() {
		return window.document.title;
	}
	,set_title: function(t) {
		return window.document.title = t;
	}
	,__class__: hxd_Window
	,__properties__: {set_displayMode:"set_displayMode",get_displayMode:"get_displayMode",set_title:"set_title",get_title:"get_title",get_isFocused:"get_isFocused",set_vsync:"set_vsync",get_vsync:"get_vsync",set_mouseLock:"set_mouseLock",get_mouseLock:"get_mouseLock",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",get_height:"get_height",get_width:"get_width"}
};
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = "hxd.System";
hxd_System.__properties__ = {set_allowTimeout:"set_allowTimeout",get_allowTimeout:"get_allowTimeout",get_screenDPI:"get_screenDPI",get_platform:"get_platform",get_lang:"get_lang",get_height:"get_height",get_width:"get_width"};
hxd_System.timeoutTick = function() {
};
hxd_System.getCurrentLoop = function() {
	return hxd_System.loopFunc;
};
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(hxd_System.browserLoop);
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			var _g11 = c.f;
			throw new js__$Boot_HaxeError("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDeviceName = function() {
	return "Unknown";
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.exit = function() {
};
hxd_System.openURL = function(url) {
	window.open(url,"_blank");
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.get_width = function() {
	return Math.round(window.document.body.clientWidth * window.devicePixelRatio);
};
hxd_System.get_height = function() {
	return Math.round(window.document.body.clientHeight * window.devicePixelRatio);
};
hxd_System.get_lang = function() {
	return "en";
};
hxd_System.get_platform = function() {
	var ua = window.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
hxd_System.get_screenDPI = function() {
	return 72;
};
hxd_System.get_allowTimeout = function() {
	return false;
};
hxd_System.set_allowTimeout = function(b) {
	return false;
};
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__ : true, __constructs__ : ["Windowed","Borderless","Fullscreen","FullscreenResize"]
	,Windowed: {_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = "hxd.earcut.EarNode";
hxd_earcut_EarNode.prototype = {
	__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = "hxd.earcut.Earcut";
hxd_earcut_Earcut.prototype = {
	triangulate_h2d_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g = 0;
		var _g1 = holes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g2 = 0;
		while(_g2 < queue.length) {
			var q = queue[_g2];
			++_g2;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g2 = start;
			var _g3 = end;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g2 = start;
			var _g3 = end;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX = root.x;
			this.minX = maxX;
			var maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		while(true) {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
			if(!(p != root)) {
				break;
			}
		}
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		while(true) {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
			if(!(p != node)) {
				break;
			}
		}
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,equals: function(p1,p2) {
		if(p1.x == p2.x) {
			return p1.y == p2.y;
		} else {
			return false;
		}
	}
	,area: function(p,q,r) {
		return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
	}
	,intersects: function(p1,q1,p2,q2) {
		if((q1.y - p1.y) * (p2.x - q1.x) - (q1.x - p1.x) * (p2.y - q1.y) > 0 != (q1.y - p1.y) * (q2.x - q1.x) - (q1.x - p1.x) * (q2.y - q1.y) > 0) {
			return (q2.y - p2.y) * (p1.x - q2.x) - (q2.x - p2.x) * (p1.y - q2.y) > 0 != (q2.y - p2.y) * (q1.x - q2.x) - (q2.x - p2.x) * (q1.y - q2.y) > 0;
		} else {
			return false;
		}
	}
	,locallyInside: function(a,b) {
		var p = a.prev;
		var r = a.next;
		if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
			var r1 = a.next;
			if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
				var q = a.prev;
				return (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
			} else {
				return false;
			}
		} else {
			var r2 = a.prev;
			if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
				var q1 = a.next;
				return (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
			} else {
				return true;
			}
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		while(true) {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
			if(!(again || p != end)) {
				break;
			}
		}
		return end;
	}
	,removeNode: function(p) {
		p.next.prev = p.prev;
		p.prev.next = p.next;
		if(p.prevZ != null) {
			p.prevZ.nextZ = p.nextZ;
		}
		if(p.nextZ != null) {
			p.nextZ.prevZ = p.prevZ;
		}
	}
	,allocNode: function(i,x,y,last) {
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		return n;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x1 = 32767 * (maxTX - this.minX) / this.size | 0;
		var y1 = 32767 * (maxTY - this.minY) / this.size | 0;
		x1 = (x1 | x1 << 8) & 16711935;
		x1 = (x1 | x1 << 4) & 252645135;
		x1 = (x1 | x1 << 2) & 858993459;
		x1 = (x1 | x1 << 1) & 1431655765;
		y1 = (y1 | y1 << 8) & 16711935;
		y1 = (y1 | y1 << 4) & 252645135;
		y1 = (y1 | y1 << 2) & 858993459;
		y1 = (y1 | y1 << 1) & 1431655765;
		var maxZ = x1 | y1 << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp2;
			var tmp3;
			if(p != ear.prev && p != ear.next) {
				var ax1 = a.x;
				var ay1 = a.y;
				var bx1 = b.x;
				var by1 = b.y;
				var cx1 = c.x;
				var cy1 = c.y;
				var px1 = p.x;
				var py1 = p.y;
				tmp3 = (cx1 - px1) * (ay1 - py1) - (ax1 - px1) * (cy1 - py1) >= 0 && (ax1 - px1) * (by1 - py1) - (bx1 - px1) * (ay1 - py1) >= 0 && (bx1 - px1) * (cy1 - py1) - (cx1 - px1) * (by1 - py1) >= 0;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				var p2 = p.prev;
				var r1 = p.next;
				tmp2 = (p.y - p2.y) * (r1.x - p.x) - (p.x - p2.x) * (r1.y - p.y) >= 0;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		while(true) {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		while(true) {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
			if(!(a != start)) {
				break;
			}
		}
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var a2 = n;
		var i1 = b.i;
		var x1 = b.x;
		var y1 = b.y;
		var last1 = null;
		var n1 = this.cache;
		if(n1 == null) {
			n1 = new hxd_earcut_EarNode();
			n1.allocNext = this.allocated;
			this.allocated = n1;
		} else {
			this.cache = n1.next;
		}
		n1.i = i1;
		n1.z = -1;
		n1.x = x1;
		n1.y = y1;
		n1.next = null;
		n1.prev = last1;
		n1.steiner = false;
		n1.prevZ = null;
		n1.nextZ = null;
		if(last1 != null) {
			last1.next = n1;
		}
		var b2 = n1;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,pointInTriangle: function(ax,ay,bx,by,cx,cy,px,py) {
		if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0) {
			return (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
		} else {
			return false;
		}
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = b.prev;
				var r3 = b.next;
				if((b.y - p1.y) * (r3.x - b.x) - (b.x - p1.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		while(true) {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		while(true) {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return false;
	}
	,zOrder: function(px,py) {
		var x = 32767 * (px - this.minX) / this.size | 0;
		var y = 32767 * (py - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		return x | y << 1;
	}
	,indexCurve: function(start) {
		var p = start;
		while(true) {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		while(true) {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g = 0;
				var _g1 = inSize;
				while(_g < _g1) {
					var i = _g++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
			if(!(numMerges > 1)) {
				break;
			}
		}
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fmt_bfnt_FontParser = function() { };
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd_fmt_bfnt_FontParser;
hxd_fmt_bfnt_FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd_fmt_bfnt_FontParser.parse = function(bytes,path,resolveTile) {
	var tile = null;
	var font = new h2d_Font(null,0);
	var glyphs = font.glyphs;
	font.baseLine = 0;
	var _g = bytes.getInt32(0);
	switch(_g) {
	case 54938946:
		var bytes1 = new haxe_io_BytesInput(bytes);
		var _g1 = bytes1;
		_g1.set_position(_g1.pos + 4);
		var pageCount = 0;
		while(bytes1.pos < bytes1.totlen) {
			var id = bytes1.readByte();
			var length = bytes1.readInt32();
			var pos = bytes1.pos;
			switch(id) {
			case 1:
				font.size = font.initSize = bytes1.readInt16();
				var _g2 = bytes1;
				_g2.set_position(_g2.pos + 12);
				font.name = bytes1.readUntil(0);
				break;
			case 2:
				font.lineHeight = bytes1.readUInt16();
				font.baseLine = bytes1.readUInt16();
				var _g3 = bytes1;
				_g3.set_position(_g3.pos + 4);
				pageCount = bytes1.readUInt16();
				if(pageCount != 1) {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 224, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
				break;
			case 3:
				var name = bytes1.readUntil(0);
				try {
					font.tilePath = name;
					var tile1 = haxe_io_Path.join([haxe_io_Path.directory(path),name]);
					tile = resolveTile(tile1);
				} catch( e ) {
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					haxe_Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe_io_Path(path).file + ".png";
					var tile2 = haxe_io_Path.withExtension(path,"png");
					tile = resolveTile(tile2);
				}
				break;
			case 4:
				var count = length / 20 | 0;
				while(count > 0) {
					var cid = bytes1.readInt32();
					var t = bytes1.readUInt16();
					var t1 = bytes1.readUInt16();
					var t2 = bytes1.readUInt16();
					var t3 = bytes1.readUInt16();
					var t4 = bytes1.readInt16();
					var t5 = bytes1.readInt16();
					var t6 = tile.sub(t,t1,t2,t3,t4,t5);
					var fc = new h2d_FontChar(t6,bytes1.readInt16());
					glyphs.h[cid] = fc;
					var _g4 = bytes1;
					_g4.set_position(_g4.pos + 2);
					--count;
				}
				break;
			case 5:
				var count1 = length / 10 | 0;
				while(count1 > 0) {
					var first = bytes1.readInt32();
					var key = bytes1.readInt32();
					var fc1 = glyphs.h[key];
					if(fc1 != null) {
						fc1.addKerning(first,bytes1.readInt16());
					} else {
						var _g5 = bytes1;
						_g5.set_position(_g5.pos + 2);
					}
					--count1;
				}
				break;
			}
			bytes1.set_position(pos + length);
		}
		break;
	case 1414415938:
		return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(function(tp) {
			try {
				font.tilePath = tp;
				var tile3 = haxe_io_Path.join([haxe_io_Path.directory(path),tp]);
				tile = resolveTile(tile3);
			} catch( e2 ) {
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				font.tilePath = new haxe_io_Path(path).file + ".png";
				var tile4 = haxe_io_Path.withExtension(path,"png");
				tile = resolveTile(tile4);
			}
			return tile;
		});
	case 1836597052:case 1852794428:
		var xml = Xml.parse(bytes.toString());
		var x = xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x.nodeType));
		}
		var this1 = x;
		var xml1 = this1;
		if(haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve(xml1,"info")) {
			var tmp = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"info");
			font.name = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(tmp,"face");
			var tmp1 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"info"),"size");
			font.size = font.initSize = Std.parseInt(tmp1);
			var tmp2 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"common"),"lineHeight");
			font.lineHeight = Std.parseInt(tmp2);
			var tmp3 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"common"),"base");
			font.baseLine = Std.parseInt(tmp3);
			var p = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"pages").elements();
			while(p.hasNext()) {
				var p1 = p.next();
				if(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(p1,"id") == "0") {
					var tilePath = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(p1,"file");
					try {
						font.tilePath = tilePath;
						var tile5 = haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]);
						tile = resolveTile(tile5);
					} catch( e4 ) {
						var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
						haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe_io_Path(path).file + ".png";
						var tile6 = haxe_io_Path.withExtension(path,"png");
						tile = resolveTile(tile6);
					}
				} else {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 66, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
			}
			var chars = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"chars").elements();
			var c = chars;
			while(c.hasNext()) {
				var c1 = c.next();
				var t7 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"x"));
				var t8 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"y"));
				var t9 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"width"));
				var t10 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"height"));
				var t11 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"xoffset"));
				var t12 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"yoffset"));
				var t13 = tile.sub(t7,t8,t9,t10,t11,t12);
				var fc2 = new h2d_FontChar(t13,Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"xadvance")));
				var kerns = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"kernings").elements();
				var k = kerns;
				while(k.hasNext()) {
					var k1 = k.next();
					if(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"second") == haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"id")) {
						fc2.addKerning(Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"first")),Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"amount")));
					}
				}
				var key1 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"id"));
				glyphs.h[key1] = fc2;
			}
		} else {
			font.tilePath = new haxe_io_Path(path).file + ".png";
			var tile7 = haxe_io_Path.withExtension(path,"png");
			tile = resolveTile(tile7);
			font.name = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"family");
			var tmp4 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"size");
			font.size = font.initSize = Std.parseInt(tmp4);
			var tmp5 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"height");
			font.lineHeight = Std.parseInt(tmp5);
			var kernings = [];
			var c2 = xml1.elements();
			while(c2.hasNext()) {
				var c3 = c2.next();
				var r = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"rect").split(" ");
				var o = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"offset").split(" ");
				var t14 = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc3 = new h2d_FontChar(t14,Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"width")) - 1);
				var code = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"code");
				var code1 = StringTools.startsWith(code,"&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
				var k2 = c3.elements();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var code2 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k3,"id");
					var next = StringTools.startsWith(code2,"&#") ? Std.parseInt(HxOverrides.substr(code2,2,code2.length - 3)) : HxOverrides.cca(code2,0);
					var adv = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k3,"advance"));
					if(glyphs.h.hasOwnProperty(next)) {
						glyphs.h[next].addKerning(code1,adv);
					} else {
						kernings.push({ prev : code1, next : next, adv : adv});
					}
				}
				glyphs.h[code1] = fc3;
			}
			var _g6 = 0;
			while(_g6 < kernings.length) {
				var k4 = kernings[_g6];
				++_g6;
				var g = glyphs.h[k4.next];
				if(g == null) {
					continue;
				}
				g.addKerning(k4.prev,k4.adv);
			}
		}
		break;
	case 1868983913:
		var lines = bytes.toString().split("\n");
		var reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
		var idx;
		var pageCount1 = 0;
		var _g7 = 0;
		while(_g7 < lines.length) {
			var line = lines[_g7];
			++_g7;
			idx = line.indexOf(" ");
			switch(HxOverrides.substr(line,0,idx)) {
			case "char":
				var id1 = 0;
				var x1 = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var xoffset = 0;
				var yoffset = 0;
				var xadvance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "height":
						var v = reg.matched(2);
						height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
						break;
					case "id":
						var v1 = reg.matched(2);
						id1 = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
						break;
					case "width":
						var v2 = reg.matched(2);
						width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
						break;
					case "x":
						var v3 = reg.matched(2);
						x1 = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
						break;
					case "xadvance":
						var v4 = reg.matched(2);
						xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
						break;
					case "xoffset":
						var v5 = reg.matched(2);
						xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
						break;
					case "y":
						var v6 = reg.matched(2);
						y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
						break;
					case "yoffset":
						var v7 = reg.matched(2);
						yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
						break;
					}
					var pos1 = reg.matchedPos();
					idx = pos1.pos + pos1.len;
				}
				var t15 = tile.sub(x1,y,width,height,xoffset,yoffset);
				var fc4 = new h2d_FontChar(t15,xadvance);
				glyphs.h[id1] = fc4;
				break;
			case "common":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "base":
						var v8 = reg.matched(2);
						font.baseLine = Std.parseInt(HxOverrides.cca(v8,0) == 34 ? v8.substring(1,v8.length - 1) : v8);
						break;
					case "lineHeight":
						var v9 = reg.matched(2);
						font.lineHeight = Std.parseInt(HxOverrides.cca(v9,0) == 34 ? v9.substring(1,v9.length - 1) : v9);
						break;
					case "pages":
						var v10 = reg.matched(2);
						pageCount1 = Std.parseInt(HxOverrides.cca(v10,0) == 34 ? v10.substring(1,v10.length - 1) : v10);
						if(pageCount1 != 1) {
							haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 157, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						}
						break;
					}
					var pos2 = reg.matchedPos();
					idx = pos2.pos + pos2.len;
				}
				break;
			case "info":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "face":
						var v11 = reg.matched(2);
						font.name = HxOverrides.cca(v11,0) == 34 ? v11.substring(1,v11.length - 1) : v11;
						break;
					case "size":
						var v12 = reg.matched(2);
						font.size = font.initSize = Std.parseInt(HxOverrides.cca(v12,0) == 34 ? v12.substring(1,v12.length - 1) : v12);
						break;
					}
					var pos3 = reg.matchedPos();
					idx = pos3.pos + pos3.len;
				}
				break;
			case "kerning":
				var first1 = 0;
				var second = 0;
				var advance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "amount":
						var v13 = reg.matched(2);
						advance = Std.parseInt(HxOverrides.cca(v13,0) == 34 ? v13.substring(1,v13.length - 1) : v13);
						break;
					case "first":
						var v14 = reg.matched(2);
						first1 = Std.parseInt(HxOverrides.cca(v14,0) == 34 ? v14.substring(1,v14.length - 1) : v14);
						break;
					case "second":
						var v15 = reg.matched(2);
						second = Std.parseInt(HxOverrides.cca(v15,0) == 34 ? v15.substring(1,v15.length - 1) : v15);
						break;
					}
					var pos4 = reg.matchedPos();
					idx = pos4.pos + pos4.len;
				}
				var fc5 = glyphs.h[second];
				if(fc5 != null) {
					fc5.addKerning(first1,advance);
				}
				break;
			case "page":
				while(idx < line.length && reg.matchSub(line,idx)) {
					if(reg.matched(1) == "file") {
						var v16 = reg.matched(2);
						var tilePath1 = HxOverrides.cca(v16,0) == 34 ? v16.substring(1,v16.length - 1) : v16;
						try {
							font.tilePath = tilePath1;
							var tile8 = haxe_io_Path.join([haxe_io_Path.directory(path),tilePath1]);
							tile = resolveTile(tile8);
						} catch( e6 ) {
							var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
							haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath1 + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe_io_Path(path).file + ".png";
							var tile9 = haxe_io_Path.withExtension(path,"png");
							tile = resolveTile(tile9);
						}
					}
					var pos5 = reg.matchedPos();
					idx = pos5.pos + pos5.len;
				}
				break;
			}
		}
		break;
	default:
		var sign = _g;
		throw new js__$Boot_HaxeError("Unknown font signature " + StringTools.hex(sign,8));
	}
	if(glyphs.h[32] == null) {
		var value = new h2d_FontChar(tile.sub(0,0,0,0),font.size >> 1);
		glyphs.h[32] = value;
	}
	font.tile = tile;
	if(font.baseLine == 0) {
		var padding = 0;
		var space = glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		var a = glyphs.h[65];
		if(a == null) {
			a = glyphs.h[97];
		}
		if(a == null) {
			a = glyphs.h[48];
		}
		if(a == null) {
			font.baseLine = font.lineHeight - 2 - padding;
		} else {
			font.baseLine = a.t.dy + a.t.height - padding;
		}
	}
	var fallback = glyphs.h[65533];
	if(fallback == null) {
		fallback = glyphs.h[9633];
	}
	if(fallback == null) {
		fallback = glyphs.h[63];
	}
	if(fallback != null) {
		font.defaultChar = fallback;
	}
	return font;
};
var hxd_fmt_bfnt_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd_fmt_bfnt_Reader;
hxd_fmt_bfnt_Reader.__name__ = "hxd.fmt.bfnt.Reader";
hxd_fmt_bfnt_Reader.parse = function(bytes,resolveTile) {
	return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(resolveTile);
};
hxd_fmt_bfnt_Reader.prototype = {
	read: function(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw new js__$Boot_HaxeError("Not a BFNT file!");
		}
		var font = null;
		var _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d_Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			var tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			var defaultChar = this.i.readInt32();
			var id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				var t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				var glyph = new h2d_FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				var prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			var ver = _g;
			throw new js__$Boot_HaxeError("Unknown BFNT version: " + ver);
		}
		return font;
	}
	,__class__: hxd_fmt_bfnt_Reader
};
var hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$ = {};
$hxClasses["hxd.fmt.hmd._Data.GeometryDataFormat_Impl_"] = hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.__name__ = "hxd.fmt.hmd._Data.GeometryDataFormat_Impl_";
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.getSize = function(this1) {
	return this1 & 7;
};
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.toInt = function(this1) {
	return this1;
};
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.toString = function(this1) {
	var this2 = this1;
	switch(this2) {
	case 1:
		return "DFloat";
	case 2:
		return "DVec2";
	case 3:
		return "DVec3";
	case 4:
		return "DVec4";
	case 9:
		return "DBytes4";
	}
};
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.fromInt = function(v) {
	var this1 = v;
	return this1;
};
var hxd_fmt_hmd_Property = $hxEnums["hxd.fmt.hmd.Property"] = { __ename__ : true, __constructs__ : ["CameraFOVY","Unused_HasMaterialFlags","HasExtraTextures"]
	,CameraFOVY: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxd.fmt.hmd.Property",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Unused_HasMaterialFlags: {_hx_index:1,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
	,HasExtraTextures: {_hx_index:2,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
};
hxd_fmt_hmd_Property.__empty_constructs__ = [hxd_fmt_hmd_Property.Unused_HasMaterialFlags,hxd_fmt_hmd_Property.HasExtraTextures];
var hxd_fmt_hmd_Position = function() {
};
$hxClasses["hxd.fmt.hmd.Position"] = hxd_fmt_hmd_Position;
hxd_fmt_hmd_Position.__name__ = "hxd.fmt.hmd.Position";
hxd_fmt_hmd_Position.prototype = {
	loadQuaternion: function(q) {
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
	}
	,get_qw: function() {
		var qw = 1 - (this.qx * this.qx + this.qy * this.qy + this.qz * this.qz);
		if(qw < 0) {
			return -Math.sqrt(-qw);
		} else {
			return Math.sqrt(qw);
		}
	}
	,toMatrix: function(postScale) {
		if(postScale == null) {
			postScale = false;
		}
		var m = new h3d_Matrix();
		var q = hxd_fmt_hmd_Position.QTMP;
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
		q.toMatrix(m);
		if(postScale) {
			m.translate(this.x,this.y,this.z);
			m.scale(this.sx,this.sy,this.sz);
		} else {
			m._11 *= this.sx;
			m._12 *= this.sx;
			m._13 *= this.sx;
			m._21 *= this.sy;
			m._22 *= this.sy;
			m._23 *= this.sy;
			m._31 *= this.sz;
			m._32 *= this.sz;
			m._33 *= this.sz;
			m.translate(this.x,this.y,this.z);
		}
		return m;
	}
	,__class__: hxd_fmt_hmd_Position
	,__properties__: {get_qw:"get_qw"}
};
var hxd_fmt_hmd_GeometryFormat = function(name,format) {
	this.name = name;
	this.format = format;
};
$hxClasses["hxd.fmt.hmd.GeometryFormat"] = hxd_fmt_hmd_GeometryFormat;
hxd_fmt_hmd_GeometryFormat.__name__ = "hxd.fmt.hmd.GeometryFormat";
hxd_fmt_hmd_GeometryFormat.prototype = {
	__class__: hxd_fmt_hmd_GeometryFormat
};
var hxd_fmt_hmd_Geometry = function() {
};
$hxClasses["hxd.fmt.hmd.Geometry"] = hxd_fmt_hmd_Geometry;
hxd_fmt_hmd_Geometry.__name__ = "hxd.fmt.hmd.Geometry";
hxd_fmt_hmd_Geometry.prototype = {
	get_indexCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.indexCounts;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			k += i;
		}
		return k;
	}
	,__class__: hxd_fmt_hmd_Geometry
	,__properties__: {get_indexCount:"get_indexCount"}
};
var hxd_fmt_hmd_Material = function() {
};
$hxClasses["hxd.fmt.hmd.Material"] = hxd_fmt_hmd_Material;
hxd_fmt_hmd_Material.__name__ = "hxd.fmt.hmd.Material";
hxd_fmt_hmd_Material.prototype = {
	__class__: hxd_fmt_hmd_Material
};
var hxd_fmt_hmd_SkinJoint = function() {
};
$hxClasses["hxd.fmt.hmd.SkinJoint"] = hxd_fmt_hmd_SkinJoint;
hxd_fmt_hmd_SkinJoint.__name__ = "hxd.fmt.hmd.SkinJoint";
hxd_fmt_hmd_SkinJoint.prototype = {
	__class__: hxd_fmt_hmd_SkinJoint
};
var hxd_fmt_hmd_SkinSplit = function() {
};
$hxClasses["hxd.fmt.hmd.SkinSplit"] = hxd_fmt_hmd_SkinSplit;
hxd_fmt_hmd_SkinSplit.__name__ = "hxd.fmt.hmd.SkinSplit";
hxd_fmt_hmd_SkinSplit.prototype = {
	__class__: hxd_fmt_hmd_SkinSplit
};
var hxd_fmt_hmd_Skin = function() {
};
$hxClasses["hxd.fmt.hmd.Skin"] = hxd_fmt_hmd_Skin;
hxd_fmt_hmd_Skin.__name__ = "hxd.fmt.hmd.Skin";
hxd_fmt_hmd_Skin.prototype = {
	__class__: hxd_fmt_hmd_Skin
};
var hxd_fmt_hmd_Model = function() {
};
$hxClasses["hxd.fmt.hmd.Model"] = hxd_fmt_hmd_Model;
hxd_fmt_hmd_Model.__name__ = "hxd.fmt.hmd.Model";
hxd_fmt_hmd_Model.prototype = {
	__class__: hxd_fmt_hmd_Model
};
var hxd_fmt_hmd_AnimationFlag = $hxEnums["hxd.fmt.hmd.AnimationFlag"] = { __ename__ : true, __constructs__ : ["HasPosition","HasRotation","HasScale","HasUV","HasAlpha","SingleFrame","HasProps","Reserved"]
	,HasPosition: {_hx_index:0,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasRotation: {_hx_index:1,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasScale: {_hx_index:2,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasUV: {_hx_index:3,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasAlpha: {_hx_index:4,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,SingleFrame: {_hx_index:5,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasProps: {_hx_index:6,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,Reserved: {_hx_index:7,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
};
hxd_fmt_hmd_AnimationFlag.__empty_constructs__ = [hxd_fmt_hmd_AnimationFlag.HasPosition,hxd_fmt_hmd_AnimationFlag.HasRotation,hxd_fmt_hmd_AnimationFlag.HasScale,hxd_fmt_hmd_AnimationFlag.HasUV,hxd_fmt_hmd_AnimationFlag.HasAlpha,hxd_fmt_hmd_AnimationFlag.SingleFrame,hxd_fmt_hmd_AnimationFlag.HasProps,hxd_fmt_hmd_AnimationFlag.Reserved];
var hxd_fmt_hmd_AnimationObject = function() {
};
$hxClasses["hxd.fmt.hmd.AnimationObject"] = hxd_fmt_hmd_AnimationObject;
hxd_fmt_hmd_AnimationObject.__name__ = "hxd.fmt.hmd.AnimationObject";
hxd_fmt_hmd_AnimationObject.prototype = {
	getStride: function() {
		var stride = 0;
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV._hx_index) != 0) {
			stride += 2;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha._hx_index) != 0) {
			++stride;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
			stride += this.props.length;
		}
		return stride;
	}
	,__class__: hxd_fmt_hmd_AnimationObject
};
var hxd_fmt_hmd_AnimationEvent = function() {
};
$hxClasses["hxd.fmt.hmd.AnimationEvent"] = hxd_fmt_hmd_AnimationEvent;
hxd_fmt_hmd_AnimationEvent.__name__ = "hxd.fmt.hmd.AnimationEvent";
hxd_fmt_hmd_AnimationEvent.prototype = {
	__class__: hxd_fmt_hmd_AnimationEvent
};
var hxd_fmt_hmd_Animation = function() {
};
$hxClasses["hxd.fmt.hmd.Animation"] = hxd_fmt_hmd_Animation;
hxd_fmt_hmd_Animation.__name__ = "hxd.fmt.hmd.Animation";
hxd_fmt_hmd_Animation.prototype = {
	__class__: hxd_fmt_hmd_Animation
};
var hxd_fmt_hmd_Data = function() {
};
$hxClasses["hxd.fmt.hmd.Data"] = hxd_fmt_hmd_Data;
hxd_fmt_hmd_Data.__name__ = "hxd.fmt.hmd.Data";
hxd_fmt_hmd_Data.prototype = {
	__class__: hxd_fmt_hmd_Data
};
var hxd_fmt_hmd__$Library_FormatMap = function(size,offset,def,next) {
	this.size = size;
	this.offset = offset;
	this.def = def;
	this.next = next;
};
$hxClasses["hxd.fmt.hmd._Library.FormatMap"] = hxd_fmt_hmd__$Library_FormatMap;
hxd_fmt_hmd__$Library_FormatMap.__name__ = "hxd.fmt.hmd._Library.FormatMap";
hxd_fmt_hmd__$Library_FormatMap.prototype = {
	__class__: hxd_fmt_hmd__$Library_FormatMap
};
var hxd_fmt_hmd_GeometryBuffer = function() {
};
$hxClasses["hxd.fmt.hmd.GeometryBuffer"] = hxd_fmt_hmd_GeometryBuffer;
hxd_fmt_hmd_GeometryBuffer.__name__ = "hxd.fmt.hmd.GeometryBuffer";
hxd_fmt_hmd_GeometryBuffer.prototype = {
	__class__: hxd_fmt_hmd_GeometryBuffer
};
var hxd_fmt_hmd_Library = function(res,header) {
	this.tmp = new haxe_io_Bytes(new ArrayBuffer(4));
	this.resource = res;
	this.header = header;
	this.cachedPrimitives = [];
	this.cachedAnimations = new haxe_ds_StringMap();
	this.cachedSkin = new haxe_ds_StringMap();
};
$hxClasses["hxd.fmt.hmd.Library"] = hxd_fmt_hmd_Library;
hxd_fmt_hmd_Library.__name__ = "hxd.fmt.hmd.Library";
hxd_fmt_hmd_Library.prototype = {
	getData: function() {
		var entry = this.resource.entry;
		var b = new haxe_io_Bytes(new ArrayBuffer(entry.get_size() - this.header.dataPosition));
		entry.open();
		entry.skip(this.header.dataPosition);
		entry.read(b,0,b.length);
		entry.close();
		return b;
	}
	,getDefaultFormat: function(stride) {
		var format = [new hxd_fmt_hmd_GeometryFormat("position",3)];
		var defs = [null];
		if(stride > 3) {
			format.push(new hxd_fmt_hmd_GeometryFormat("normal",3));
			defs.push(null);
		}
		if(stride > 6) {
			format.push(new hxd_fmt_hmd_GeometryFormat("uv",2));
			defs.push(null);
		}
		if(stride > 8) {
			format.push(new hxd_fmt_hmd_GeometryFormat("color",3));
			defs.push(new h3d_Vector(1,1,1));
		}
		if(stride > 11) {
			throw new js__$Boot_HaxeError("Unsupported stride");
		}
		return { format : format, defs : defs};
	}
	,load: function(format,defaults,modelIndex) {
		if(modelIndex == null) {
			modelIndex = -1;
		}
		var vtmp_x = 0.;
		var vtmp_y = 0.;
		var vtmp_z = 0.;
		var vtmp_w = 1.;
		var models = modelIndex < 0 ? this.header.models : [this.header.models[modelIndex]];
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var outVertex = this1;
		var this2 = new Array(0);
		var outIndex = this2;
		var stride = 0;
		var mid = -1;
		var _g = 0;
		while(_g < format.length) {
			var f = format[_g];
			++_g;
			stride += f.format & 7;
		}
		var _g1 = 0;
		while(_g1 < models.length) {
			var m = models[_g1];
			++_g1;
			var geom = this.header.geometries[m.geometry];
			if(geom == null) {
				continue;
			}
			var _g11 = 0;
			var _g2 = m.materials;
			while(_g11 < _g2.length) {
				var mat = _g2[_g11];
				++_g11;
				if(mid < 0) {
					mid = mat;
				}
				if(mid != mat) {
					throw new js__$Boot_HaxeError("Models have several materials");
				}
			}
			var pos = m.position.toMatrix();
			var data = this.getBuffers(geom,format,defaults);
			var start = outVertex.pos / stride | 0;
			var _g3 = 0;
			var _g4 = data.vertexes.length / stride | 0;
			while(_g3 < _g4) {
				var i = _g3++;
				var p = i * stride;
				vtmp_x = data.vertexes[p++];
				vtmp_y = data.vertexes[p++];
				vtmp_z = data.vertexes[p++];
				var px = vtmp_x * pos._11 + vtmp_y * pos._21 + vtmp_z * pos._31 + vtmp_w * pos._41;
				var py = vtmp_x * pos._12 + vtmp_y * pos._22 + vtmp_z * pos._32 + vtmp_w * pos._42;
				var pz = vtmp_x * pos._13 + vtmp_y * pos._23 + vtmp_z * pos._33 + vtmp_w * pos._43;
				vtmp_x = px;
				vtmp_y = py;
				vtmp_z = pz;
				if(outVertex.pos == outVertex.array.length) {
					var newSize = outVertex.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(outVertex.array);
					outVertex.array = newArray;
				}
				outVertex.array[outVertex.pos++] = vtmp_x;
				if(outVertex.pos == outVertex.array.length) {
					var newSize1 = outVertex.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(outVertex.array);
					outVertex.array = newArray1;
				}
				outVertex.array[outVertex.pos++] = vtmp_y;
				if(outVertex.pos == outVertex.array.length) {
					var newSize2 = outVertex.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(outVertex.array);
					outVertex.array = newArray2;
				}
				outVertex.array[outVertex.pos++] = vtmp_z;
				var _g31 = 0;
				var _g41 = stride - 3;
				while(_g31 < _g41) {
					var j = _g31++;
					var v = data.vertexes[p++];
					if(outVertex.pos == outVertex.array.length) {
						var newSize3 = outVertex.array.length << 1;
						if(newSize3 < 128) {
							newSize3 = 128;
						}
						var newArray3 = new Float32Array(newSize3);
						newArray3.set(outVertex.array);
						outVertex.array = newArray3;
					}
					outVertex.array[outVertex.pos++] = v;
				}
			}
			var _g5 = 0;
			var _g6 = data.indexes;
			while(_g5 < _g6.length) {
				var idx = _g6[_g5];
				++_g5;
				outIndex.push(idx + start);
			}
		}
		return { vertex : outVertex, index : outIndex};
	}
	,getBuffers: function(geom,format,defaults,material) {
		if(material == 0 && geom.indexCounts.length == 1) {
			material = null;
		}
		var map = null;
		var stride = 0;
		var _g = 0;
		var _g1 = format.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = format.length - 1 - i;
			var f = format[i1];
			var size = f.format & 7;
			var offset = 0;
			var found = false;
			var _g2 = 0;
			var _g11 = geom.vertexFormat;
			while(_g2 < _g11.length) {
				var f2 = _g11[_g2];
				++_g2;
				if(f2.name == f.name) {
					if((f2.format & 7) < size) {
						throw new js__$Boot_HaxeError("Requested " + f.name + " data has only " + (f2.format & 7) + " regs instead of " + size);
					}
					found = true;
					break;
				}
				offset += f2.format & 7;
			}
			if(found) {
				map = new hxd_fmt_hmd__$Library_FormatMap(size,offset,null,map);
			} else {
				var def = defaults == null ? null : defaults[i1];
				if(def == null) {
					throw new js__$Boot_HaxeError("Missing required " + f.name);
				}
				map = new hxd_fmt_hmd__$Library_FormatMap(size,0,def,map);
			}
			stride += size;
		}
		var vsize = geom.vertexCount * geom.vertexStride * 4;
		var vbuf = new haxe_io_Bytes(new ArrayBuffer(vsize));
		var entry = this.resource.entry;
		entry.open();
		entry.skip(this.header.dataPosition + geom.vertexPosition);
		entry.read(vbuf,0,vsize);
		entry.skip(geom.indexPosition - (geom.vertexPosition + vsize));
		var isize;
		if(material == null) {
			isize = geom.get_indexCount() * 2;
		} else {
			var ipos = 0;
			var _g21 = 0;
			var _g3 = material;
			while(_g21 < _g3) {
				var i2 = _g21++;
				ipos += geom.indexCounts[i2];
			}
			entry.skip(ipos * 2);
			isize = geom.indexCounts[material] * 2;
		}
		var ibuf = new haxe_io_Bytes(new ArrayBuffer(isize));
		entry.read(ibuf,0,isize);
		var buf = new hxd_fmt_hmd_GeometryBuffer();
		if(material == null) {
			var this1 = new Array(stride * geom.vertexCount);
			buf.vertexes = this1;
			var this2 = new Array(geom.get_indexCount());
			buf.indexes = this2;
			var w = 0;
			var _g22 = 0;
			var _g31 = geom.vertexCount;
			while(_g22 < _g31) {
				var vid = _g22++;
				var m = map;
				while(m != null) {
					if(m.def == null) {
						var r = vid * geom.vertexStride;
						var _g23 = 0;
						var _g32 = m.size;
						while(_g23 < _g32) {
							var i3 = _g23++;
							buf.vertexes[w++] = vbuf.getFloat(r + m.offset + i3 << 2);
						}
					} else {
						switch(m.size) {
						case 1:
							buf.vertexes[w++] = m.def.x;
							break;
						case 2:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							break;
						case 3:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							break;
						default:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							buf.vertexes[w++] = m.def.w;
						}
					}
					m = m.next;
				}
			}
			var r1 = 0;
			var _g4 = 0;
			var _g5 = buf.indexes.length;
			while(_g4 < _g5) {
				var i4 = _g4++;
				buf.indexes[i4] = ibuf.b[r1++] | ibuf.b[r1++] << 8;
			}
		} else {
			var icount = geom.indexCounts[material];
			var this3 = new Array(geom.vertexCount);
			var vmap = this3;
			var this4 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			var vertexes = this4;
			var this5 = new Array(icount);
			buf.indexes = this5;
			var r2 = 0;
			var vcount = 0;
			var _g24 = 0;
			var _g33 = buf.indexes.length;
			while(_g24 < _g33) {
				var i5 = _g24++;
				var vid1 = ibuf.b[r2++] | ibuf.b[r2++] << 8;
				var rid = vmap[vid1];
				if(rid == 0) {
					++vcount;
					rid = vcount;
					vmap[vid1] = rid;
					var m1 = map;
					while(m1 != null) {
						if(m1.def == null) {
							var r3 = vid1 * geom.vertexStride;
							var _g25 = 0;
							var _g34 = m1.size;
							while(_g25 < _g34) {
								var i6 = _g25++;
								var v = vbuf.getFloat(r3 + m1.offset + i6 << 2);
								if(vertexes.pos == vertexes.array.length) {
									var newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									var newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v;
							}
						} else {
							switch(m1.size) {
							case 1:
								var v1 = m1.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize1 = vertexes.array.length << 1;
									if(newSize1 < 128) {
										newSize1 = 128;
									}
									var newArray1 = new Float32Array(newSize1);
									newArray1.set(vertexes.array);
									vertexes.array = newArray1;
								}
								vertexes.array[vertexes.pos++] = v1;
								break;
							case 2:
								var v2 = m1.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize2 = vertexes.array.length << 1;
									if(newSize2 < 128) {
										newSize2 = 128;
									}
									var newArray2 = new Float32Array(newSize2);
									newArray2.set(vertexes.array);
									vertexes.array = newArray2;
								}
								vertexes.array[vertexes.pos++] = v2;
								var v3 = m1.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize3 = vertexes.array.length << 1;
									if(newSize3 < 128) {
										newSize3 = 128;
									}
									var newArray3 = new Float32Array(newSize3);
									newArray3.set(vertexes.array);
									vertexes.array = newArray3;
								}
								vertexes.array[vertexes.pos++] = v3;
								break;
							case 3:
								var v4 = m1.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize4 = vertexes.array.length << 1;
									if(newSize4 < 128) {
										newSize4 = 128;
									}
									var newArray4 = new Float32Array(newSize4);
									newArray4.set(vertexes.array);
									vertexes.array = newArray4;
								}
								vertexes.array[vertexes.pos++] = v4;
								var v5 = m1.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize5 = vertexes.array.length << 1;
									if(newSize5 < 128) {
										newSize5 = 128;
									}
									var newArray5 = new Float32Array(newSize5);
									newArray5.set(vertexes.array);
									vertexes.array = newArray5;
								}
								vertexes.array[vertexes.pos++] = v5;
								var v6 = m1.def.z;
								if(vertexes.pos == vertexes.array.length) {
									var newSize6 = vertexes.array.length << 1;
									if(newSize6 < 128) {
										newSize6 = 128;
									}
									var newArray6 = new Float32Array(newSize6);
									newArray6.set(vertexes.array);
									vertexes.array = newArray6;
								}
								vertexes.array[vertexes.pos++] = v6;
								break;
							default:
								var v7 = m1.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize7 = vertexes.array.length << 1;
									if(newSize7 < 128) {
										newSize7 = 128;
									}
									var newArray7 = new Float32Array(newSize7);
									newArray7.set(vertexes.array);
									vertexes.array = newArray7;
								}
								vertexes.array[vertexes.pos++] = v7;
								var v8 = m1.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize8 = vertexes.array.length << 1;
									if(newSize8 < 128) {
										newSize8 = 128;
									}
									var newArray8 = new Float32Array(newSize8);
									newArray8.set(vertexes.array);
									vertexes.array = newArray8;
								}
								vertexes.array[vertexes.pos++] = v8;
								var v9 = m1.def.z;
								if(vertexes.pos == vertexes.array.length) {
									var newSize9 = vertexes.array.length << 1;
									if(newSize9 < 128) {
										newSize9 = 128;
									}
									var newArray9 = new Float32Array(newSize9);
									newArray9.set(vertexes.array);
									vertexes.array = newArray9;
								}
								vertexes.array[vertexes.pos++] = v9;
								var v10 = m1.def.w;
								if(vertexes.pos == vertexes.array.length) {
									var newSize10 = vertexes.array.length << 1;
									if(newSize10 < 128) {
										newSize10 = 128;
									}
									var newArray10 = new Float32Array(newSize10);
									newArray10.set(vertexes.array);
									vertexes.array = newArray10;
								}
								vertexes.array[vertexes.pos++] = v10;
							}
						}
						m1 = m1.next;
					}
				}
				buf.indexes[i5] = rid - 1;
			}
			var this6 = vertexes;
			var _g6 = [];
			var _g12 = 0;
			var _g26 = this6.pos;
			while(_g12 < _g26) {
				var i7 = _g12++;
				_g6.push(this6.array[i7]);
			}
			buf.vertexes = _g6;
		}
		entry.close();
		return buf;
	}
	,makePrimitive: function(id) {
		var p = this.cachedPrimitives[id];
		if(p != null) {
			return p;
		}
		p = new h3d_prim_HMDModel(this.header.geometries[id],this.header.dataPosition,this);
		p.incref();
		this.cachedPrimitives[id] = p;
		return p;
	}
	,makeMaterial: function(model,mid,loadTexture) {
		var m = this.header.materials[mid];
		var mat = h3d_mat_MaterialSetup.current.createMaterial();
		mat.name = m.name;
		if(m.diffuseTexture != null) {
			mat.set_texture(loadTexture(m.diffuseTexture));
			if(mat.get_texture() == null) {
				mat.set_texture(h3d_mat_Texture.fromColor(16711935));
			}
		}
		if(m.specularTexture != null) {
			mat.set_specularTexture(loadTexture(m.specularTexture));
		}
		if(m.normalMap != null) {
			mat.set_normalMap(loadTexture(m.normalMap));
		}
		mat.set_blendMode(m.blendMode);
		mat.model = this.resource;
		var props = h3d_mat_MaterialSetup.current.loadMaterialProps(mat);
		if(props == null) {
			props = mat.getDefaultModelProps();
		}
		mat.set_props(props);
		return mat;
	}
	,makeSkin: function(skin) {
		var key = skin.name;
		var _this = this.cachedSkin;
		var s = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(s != null) {
			return s;
		}
		s = new h3d_anim_Skin(skin.name,0,3);
		s.namedJoints = new haxe_ds_StringMap();
		s.allJoints = [];
		s.boundJoints = [];
		s.rootJoints = [];
		var _g = 0;
		var _g1 = skin.joints;
		while(_g < _g1.length) {
			var joint = _g1[_g];
			++_g;
			var j = new h3d_anim_Joint();
			j.name = joint.name;
			j.index = s.allJoints.length;
			j.defMat = joint.position.toMatrix();
			if(joint.bind >= 0) {
				j.bindIndex = joint.bind;
				j.transPos = joint.transpos.toMatrix(true);
				s.boundJoints[j.bindIndex] = j;
			}
			if(joint.parent >= 0) {
				var p = s.allJoints[joint.parent];
				p.subs.push(j);
				j.parent = p;
			} else {
				s.rootJoints.push(j);
			}
			s.allJoints.push(j);
			var key1 = j.name;
			var _this1 = s.namedJoints;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,j);
			} else {
				_this1.h[key1] = j;
			}
		}
		if(skin.split != null) {
			s.splitJoints = [];
			var _g2 = 0;
			var _g3 = skin.split;
			while(_g2 < _g3.length) {
				var ss = _g3[_g2];
				++_g2;
				var s1 = s.splitJoints;
				var ss1 = ss.materialIndex;
				var _g21 = [];
				var _g31 = 0;
				var _g4 = ss.joints;
				while(_g31 < _g4.length) {
					var j1 = _g4[_g31];
					++_g31;
					_g21.push(s.allJoints[j1]);
				}
				s1.push({ material : ss1, joints : _g21});
			}
		}
		var key2 = skin.name;
		var _this2 = this.cachedSkin;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,s);
		} else {
			_this2.h[key2] = s;
		}
		return s;
	}
	,getModelProperty: function(objName,p,def) {
		var _g = 0;
		var _g1 = this.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == objName) {
				if(m.props != null) {
					var _g2 = 0;
					var _g11 = m.props;
					while(_g2 < _g11.length) {
						var pr = _g11[_g2];
						++_g2;
						if(pr._hx_index == p._hx_index) {
							return Type.enumParameters(pr)[0];
						}
					}
				}
				return def;
			}
		}
		if(def == null) {
			throw new js__$Boot_HaxeError("Model " + objName + " not found");
		}
		return def;
	}
	,makeObject: function(loadTexture) {
		if(loadTexture == null) {
			loadTexture = function(_) {
				return h3d_mat_Texture.fromColor(16711935);
			};
		}
		if(this.header.models.length == 0) {
			throw new js__$Boot_HaxeError("This file does not contain any model");
		}
		var objs = [];
		var _g = 0;
		var _g1 = this.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var obj;
			if(m.geometry < 0) {
				obj = new h3d_scene_Object();
			} else {
				var prim = this.makePrimitive(m.geometry);
				if(m.skin != null) {
					var skinData = this.makeSkin(m.skin);
					skinData.primitive = prim;
					var _g2 = [];
					var _g11 = 0;
					var _g21 = m.materials;
					while(_g11 < _g21.length) {
						var mat = _g21[_g11];
						++_g11;
						_g2.push(this.makeMaterial(m,mat,loadTexture));
					}
					obj = new h3d_scene_Skin(skinData,_g2);
				} else if(m.materials.length == 1) {
					obj = new h3d_scene_Mesh(prim,this.makeMaterial(m,m.materials[0],loadTexture));
				} else {
					var _g3 = [];
					var _g12 = 0;
					var _g22 = m.materials;
					while(_g12 < _g22.length) {
						var mat1 = _g22[_g12];
						++_g12;
						_g3.push(this.makeMaterial(m,mat1,loadTexture));
					}
					obj = new h3d_scene_MultiMaterial(prim,_g3);
				}
			}
			obj.name = m.name;
			var v = m.position.toMatrix();
			obj.defaultTransform = v;
			var f = 1;
			var b = true;
			if(b) {
				obj.flags |= f;
			} else {
				obj.flags &= ~f;
			}
			objs.push(obj);
			var p = objs[m.parent];
			if(p != null) {
				p.addChild(obj);
			}
		}
		return objs[0];
	}
	,loadAnimation: function(name) {
		var _this = this.cachedAnimations;
		var key = name == null ? "" : name;
		var a = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(a != null) {
			return a;
		}
		var a1 = null;
		if(name == null) {
			if(this.header.animations.length == 0) {
				return null;
			}
			a1 = this.header.animations[0];
		} else {
			var _g = 0;
			var _g1 = this.header.animations;
			while(_g < _g1.length) {
				var a2 = _g1[_g];
				++_g;
				if(a2.name == name) {
					a1 = a2;
					break;
				}
			}
			if(a1 == null) {
				throw new js__$Boot_HaxeError("Animation " + name + " not found !");
			}
		}
		var l = this.header.version <= 2 ? this.makeLinearAnimation(a1) : this.makeAnimation(a1);
		l.speed = a1.speed;
		l.loop = a1.loop;
		if(a1.events != null) {
			l.setEvents(a1.events);
		}
		l.resourcePath = this.resource.entry.get_path();
		var key1 = a1.name;
		var _this1 = this.cachedAnimations;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,l);
		} else {
			_this1.h[key1] = l;
		}
		if(name == null) {
			var _this2 = this.cachedAnimations;
			if(__map_reserved[""] != null) {
				_this2.setReserved("",l);
			} else {
				_this2.h[""] = l;
			}
		}
		return l;
	}
	,makeAnimation: function(a) {
		var b = new h3d_anim_BufferAnimation(a.name,a.frames,a.sampling);
		var stride = 0;
		var singleFrames = [];
		var otherFrames = [];
		var _g = 0;
		var _g1 = a.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var c = b.addObject(o.name,0);
			var sm = 1;
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.SingleFrame._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.SingleFrame._hx_index;
				singleFrames.push(c);
				sm = 0;
			} else {
				otherFrames.push(c);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Position._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Rotation._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Scale._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.UV._hx_index;
				stride += 2 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Alpha._hx_index;
				stride += sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
				var _g2 = 0;
				var _g11 = o.props.length;
				while(_g2 < _g11) {
					var i = _g2++;
					var c1 = c;
					if(i > 0) {
						c1 = b.addObject(o.name,0);
						if(sm == 0) {
							singleFrames.push(c1);
						} else {
							otherFrames.push(c1);
						}
					}
					c1.layout |= 1 << h3d_anim_DataLayout.Property._hx_index;
					c1.propName = o.props[i];
					stride += sm;
				}
			}
		}
		var pos = 0;
		var _g21 = 0;
		while(_g21 < singleFrames.length) {
			var b1 = singleFrames[_g21];
			++_g21;
			b1.dataOffset = pos;
			pos += b1.getStride();
		}
		var singleStride = pos;
		var _g3 = 0;
		while(_g3 < otherFrames.length) {
			var b2 = otherFrames[_g3];
			++_g3;
			b2.dataOffset = pos;
			pos += b2.getStride();
		}
		var entry = this.resource.entry;
		entry.open();
		entry.skip(this.header.dataPosition + a.dataPosition);
		var count = stride * a.frames + singleStride;
		var data = new haxe_io_Bytes(new ArrayBuffer(count * 4));
		entry.read(data,0,data.length);
		entry.close();
		b.setData(new Float32Array(data.b.buffer),stride);
		return b;
	}
	,makeLinearAnimation: function(a) {
		var l = new h3d_anim_LinearAnimation(a.name,a.frames,a.sampling);
		var entry = this.resource.entry;
		entry.open();
		entry.skip(this.header.dataPosition + a.dataPosition);
		var _g = 0;
		var _g1 = a.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var pos = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition._hx_index) != 0;
			var rot = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation._hx_index) != 0;
			var scale = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale._hx_index) != 0;
			if(pos || rot || scale) {
				var frameCount = a.frames;
				if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.SingleFrame._hx_index) != 0) {
					frameCount = 1;
				}
				var this1 = new Array(frameCount);
				var fl = this1;
				var size = ((pos ? 3 : 0) + (rot ? 3 : 0) + (scale ? 3 : 0)) * 4 * frameCount;
				var data = new haxe_io_Bytes(new ArrayBuffer(size));
				entry.read(data,0,size);
				var p = 0;
				var _g2 = 0;
				var _g11 = frameCount;
				while(_g2 < _g11) {
					var i = _g2++;
					var f = new h3d_anim_LinearFrame();
					if(pos) {
						f.tx = data.getFloat(p);
						p += 4;
						f.ty = data.getFloat(p);
						p += 4;
						f.tz = data.getFloat(p);
						p += 4;
					} else {
						f.tx = 0;
						f.ty = 0;
						f.tz = 0;
					}
					if(rot) {
						f.qx = data.getFloat(p);
						p += 4;
						f.qy = data.getFloat(p);
						p += 4;
						f.qz = data.getFloat(p);
						p += 4;
						var qw = 1 - (f.qx * f.qx + f.qy * f.qy + f.qz * f.qz);
						f.qw = qw < 0 ? -Math.sqrt(-qw) : Math.sqrt(qw);
					} else {
						f.qx = 0;
						f.qy = 0;
						f.qz = 0;
						f.qw = 1;
					}
					if(scale) {
						f.sx = data.getFloat(p);
						p += 4;
						f.sy = data.getFloat(p);
						p += 4;
						f.sz = data.getFloat(p);
						p += 4;
					} else {
						f.sx = 1;
						f.sy = 1;
						f.sz = 1;
					}
					fl[i] = f;
				}
				l.addCurve(o.name,fl,true,rot,scale);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV._hx_index) != 0) {
				var this2 = new Array(a.frames * 2);
				var fl1 = this2;
				var size1 = 8 * a.frames;
				var data1 = new haxe_io_Bytes(new ArrayBuffer(size1));
				entry.read(data1,0,size1);
				var _g3 = 0;
				var _g12 = fl1.length;
				while(_g3 < _g12) {
					var i1 = _g3++;
					fl1[i1] = data1.getFloat(i1 * 4);
				}
				l.addUVCurve(o.name,fl1);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha._hx_index) != 0) {
				var this3 = new Array(a.frames);
				var fl2 = this3;
				var size2 = 4 * a.frames;
				var data2 = new haxe_io_Bytes(new ArrayBuffer(size2));
				entry.read(data2,0,size2);
				var _g4 = 0;
				var _g13 = fl2.length;
				while(_g4 < _g13) {
					var i2 = _g4++;
					fl2[i2] = data2.getFloat(i2 * 4);
				}
				l.addAlphaCurve(o.name,fl2);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
				var _g5 = 0;
				var _g14 = o.props;
				while(_g5 < _g14.length) {
					var p1 = _g14[_g5];
					++_g5;
					var this4 = new Array(a.frames);
					var fl3 = this4;
					var size3 = 4 * a.frames;
					var data3 = new haxe_io_Bytes(new ArrayBuffer(size3));
					entry.read(data3,0,size3);
					var _g6 = 0;
					var _g15 = fl3.length;
					while(_g6 < _g15) {
						var i3 = _g6++;
						fl3[i3] = data3.getFloat(i3 * 4);
					}
					l.addPropCurve(o.name,p1,fl3);
				}
			}
		}
		entry.close();
		return l;
	}
	,loadSkin: function(geom,skin) {
		if(skin.vertexWeights != null) {
			return;
		}
		skin.vertexCount = geom.vertexCount;
		var w = this.getBuffers(geom,[new hxd_fmt_hmd_GeometryFormat("weights",3)]).vertexes;
		var this1 = new Array(skin.vertexCount * skin.bonesPerVertex);
		skin.vertexWeights = this1;
		var this2 = new Array(skin.vertexCount * skin.bonesPerVertex);
		skin.vertexJoints = this2;
		var _g = 0;
		var _g1 = skin.vertexWeights.length;
		while(_g < _g1) {
			var i = _g++;
			skin.vertexWeights[i] = w[i];
		}
		var vidx = this.getBuffers(geom,[new hxd_fmt_hmd_GeometryFormat("indexes",9)]).vertexes;
		var j = 0;
		var _g2 = 0;
		var _g3 = skin.vertexCount;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var v = this.ftoint32(vidx[i1]);
			skin.vertexJoints[j++] = v & 255;
			skin.vertexJoints[j++] = v >> 8 & 255;
			skin.vertexJoints[j++] = v >> 16 & 255;
		}
	}
	,ftoint32: function(v) {
		this.tmp.setFloat(0,v);
		return this.tmp.getInt32(0);
	}
	,__class__: hxd_fmt_hmd_Library
};
var hxd_fmt_hmd_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.hmd.Reader"] = hxd_fmt_hmd_Reader;
hxd_fmt_hmd_Reader.__name__ = "hxd.fmt.hmd.Reader";
hxd_fmt_hmd_Reader.prototype = {
	readProperty: function() {
		var _g = this.i.readByte();
		switch(_g) {
		case 0:
			return hxd_fmt_hmd_Property.CameraFOVY(this.i.readFloat());
		case 1:
			throw new js__$Boot_HaxeError("Obsolete HasMaterialFlags");
		case 2:
			return hxd_fmt_hmd_Property.HasExtraTextures;
		default:
			var unk = _g;
			throw new js__$Boot_HaxeError("Unknown property #" + unk);
		}
	}
	,readProps: function() {
		if(this.version == 1) {
			return null;
		}
		var n = this.i.readByte();
		if(n == 0) {
			return null;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = n;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.readProperty());
		}
		return _g;
	}
	,readName: function() {
		var b = this.i.readByte();
		if(b == 255) {
			return null;
		}
		return this.i.readString(b);
	}
	,readCachedName: function() {
		var name = this.readName();
		if(name == null) {
			return null;
		}
		if(hxd_fmt_hmd_Reader.HMD_STRINGS == null) {
			hxd_fmt_hmd_Reader.HMD_STRINGS = new haxe_ds_StringMap();
		}
		var _this = hxd_fmt_hmd_Reader.HMD_STRINGS;
		var n = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(n != null) {
			return n;
		}
		var _this1 = hxd_fmt_hmd_Reader.HMD_STRINGS;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,name);
		} else {
			_this1.h[name] = name;
		}
		return name;
	}
	,readPosition: function(hasScale) {
		if(hasScale == null) {
			hasScale = true;
		}
		var p = new hxd_fmt_hmd_Position();
		p.x = this.i.readFloat();
		p.y = this.i.readFloat();
		p.z = this.i.readFloat();
		p.qx = this.i.readFloat();
		p.qy = this.i.readFloat();
		p.qz = this.i.readFloat();
		if(hasScale) {
			p.sx = this.i.readFloat();
			p.sy = this.i.readFloat();
			p.sz = this.i.readFloat();
		} else {
			p.sx = 1;
			p.sy = 1;
			p.sz = 1;
		}
		return p;
	}
	,readBounds: function() {
		var b = new h3d_col_Bounds();
		b.xMin = this.i.readFloat();
		b.yMin = this.i.readFloat();
		b.zMin = this.i.readFloat();
		b.xMax = this.i.readFloat();
		b.yMax = this.i.readFloat();
		b.zMax = this.i.readFloat();
		return b;
	}
	,readSkin: function() {
		var name = this.readCachedName();
		if(name == null) {
			return null;
		}
		var s = new hxd_fmt_hmd_Skin();
		s.props = this.readProps();
		s.name = name;
		s.joints = [];
		var _g = 0;
		var _g1 = this.i.readUInt16();
		while(_g < _g1) {
			var k = _g++;
			var j = new hxd_fmt_hmd_SkinJoint();
			j.props = this.readProps();
			j.name = this.readCachedName();
			var pid = this.i.readUInt16();
			var hasScale = (pid & 32768) != 0;
			if(hasScale) {
				pid &= 32767;
			}
			j.parent = pid - 1;
			j.position = this.readPosition(hasScale);
			j.bind = this.i.readUInt16() - 1;
			if(j.bind >= 0) {
				j.transpos = this.readPosition(hasScale);
			}
			s.joints.push(j);
		}
		var count = this.i.readByte();
		if(count > 0) {
			s.split = [];
			var _g2 = 0;
			var _g3 = count;
			while(_g2 < _g3) {
				var k1 = _g2++;
				var ss = new hxd_fmt_hmd_SkinSplit();
				ss.materialIndex = this.i.readByte();
				var _g21 = [];
				var _g31 = 0;
				var _g4 = this.i.readByte();
				while(_g31 < _g4) {
					var k2 = _g31++;
					_g21.push(this.i.readUInt16());
				}
				ss.joints = _g21;
				s.split.push(ss);
			}
		}
		return s;
	}
	,readHeader: function() {
		var d = new hxd_fmt_hmd_Data();
		var h = this.i.readString(3);
		if(h != "HMD") {
			if(HxOverrides.cca(h,0) == 59) {
				throw new js__$Boot_HaxeError("FBX was not converted to HMD");
			}
			throw new js__$Boot_HaxeError("Invalid HMD header " + encodeURIComponent(h));
		}
		this.version = this.i.readByte();
		if(this.version > 3) {
			throw new js__$Boot_HaxeError("Can't read HMD v" + this.version);
		}
		d.version = this.version;
		d.geometries = [];
		d.dataPosition = this.i.readInt32();
		d.props = this.readProps();
		var _g = 0;
		var _g1 = this.i.readInt32();
		while(_g < _g1) {
			var k = _g++;
			var g = new hxd_fmt_hmd_Geometry();
			g.props = this.readProps();
			g.vertexCount = this.i.readInt32();
			g.vertexStride = this.i.readByte();
			var _g2 = [];
			var _g11 = 0;
			var _g21 = this.i.readByte();
			while(_g11 < _g21) {
				var k1 = _g11++;
				var tmp = this.readCachedName();
				var this1 = this.i.readByte();
				_g2.push(new hxd_fmt_hmd_GeometryFormat(tmp,this1));
			}
			g.vertexFormat = _g2;
			g.vertexPosition = this.i.readInt32();
			var _g3 = [];
			var _g4 = 0;
			var _g5 = this.i.readByte();
			while(_g4 < _g5) {
				var k2 = _g4++;
				_g3.push(this.i.readInt32());
			}
			g.indexCounts = _g3;
			g.indexPosition = this.i.readInt32();
			g.bounds = this.readBounds();
			d.geometries.push(g);
		}
		d.materials = [];
		var _g22 = 0;
		var _g31 = this.i.readInt32();
		while(_g22 < _g31) {
			var k3 = _g22++;
			var m = new hxd_fmt_hmd_Material();
			m.props = this.readProps();
			m.name = this.readName();
			m.diffuseTexture = this.readName();
			m.blendMode = hxd_fmt_hmd_Reader.BLEND[this.i.readByte()];
			this.i.readByte();
			this.i.readFloat();
			if(m.props != null && m.props.indexOf(hxd_fmt_hmd_Property.HasExtraTextures) >= 0) {
				m.specularTexture = this.readName();
				m.normalMap = this.readName();
			}
			d.materials.push(m);
		}
		d.models = [];
		var _g41 = 0;
		var _g51 = this.i.readInt32();
		while(_g41 < _g51) {
			var k4 = _g41++;
			var m1 = new hxd_fmt_hmd_Model();
			m1.props = this.readProps();
			m1.name = this.readCachedName();
			m1.parent = this.i.readInt32() - 1;
			m1.follow = this.readCachedName();
			m1.position = this.readPosition();
			m1.geometry = this.i.readInt32() - 1;
			d.models.push(m1);
			if(m1.geometry < 0) {
				continue;
			}
			m1.materials = [];
			var _g42 = 0;
			var _g52 = this.i.readByte();
			while(_g42 < _g52) {
				var k5 = _g42++;
				m1.materials.push(this.i.readInt32());
			}
			m1.skin = this.readSkin();
		}
		d.animations = [];
		var _g6 = 0;
		var _g7 = this.i.readInt32();
		while(_g6 < _g7) {
			var k6 = _g6++;
			var a = new hxd_fmt_hmd_Animation();
			a.props = this.readProps();
			a.name = this.readName();
			a.frames = this.i.readInt32();
			a.sampling = this.i.readFloat();
			a.speed = this.i.readFloat();
			var flags = this.i.readByte();
			a.loop = (flags & 1) != 0;
			a.dataPosition = this.i.readInt32();
			a.objects = [];
			var _g61 = 0;
			var _g71 = this.i.readInt32();
			while(_g61 < _g71) {
				var k7 = _g61++;
				var o = new hxd_fmt_hmd_AnimationObject();
				o.name = this.readCachedName();
				var i = this.i.readByte();
				if(i == null) {
					i = 0;
				}
				var this2 = i;
				o.flags = this2;
				a.objects.push(o);
				if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
					var _g62 = [];
					var _g72 = 0;
					var _g8 = this.i.readByte();
					while(_g72 < _g8) {
						var i1 = _g72++;
						_g62.push(this.readName());
					}
					o.props = _g62;
				}
			}
			if((flags & 2) != 0) {
				a.events = [];
				var _g81 = 0;
				var _g9 = this.i.readInt32();
				while(_g81 < _g9) {
					var k8 = _g81++;
					var e = new hxd_fmt_hmd_AnimationEvent();
					e.frame = this.i.readInt32();
					e.data = this.readCachedName();
					a.events.push(e);
				}
			}
			d.animations.push(a);
		}
		return d;
	}
	,read: function() {
		var h = this.readHeader();
		h.data = this.i.read(this.i.readInt32());
		return h;
	}
	,__class__: hxd_fmt_hmd_Reader
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	getSign: function() {
		return 0;
	}
	,getBytes: function() {
		return null;
	}
	,getText: function() {
		return this.getBytes().toString();
	}
	,open: function() {
	}
	,skip: function(nbytes) {
	}
	,readByte: function() {
		return 0;
	}
	,read: function(out,pos,size) {
	}
	,close: function() {
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw new js__$Boot_HaxeError("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw new js__$Boot_HaxeError("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,exists: function(name) {
		return false;
	}
	,get: function(name) {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_isDirectory: function() {
		return false;
	}
	,get_size: function() {
		return 0;
	}
	,get_path: function() {
		throw new js__$Boot_HaxeError("path() not implemented");
	}
	,get_directory: function() {
		var p = this.get_path().split("/");
		p.pop();
		return p.join("/");
	}
	,get_extension: function() {
		var np = this.name.split(".");
		if(np.length == 1) {
			return "";
		} else {
			return np.pop().toLowerCase();
		}
	}
	,__class__: hxd_fs_FileEntry
	,__properties__: {get_isAvailable:"get_isAvailable",get_isDirectory:"get_isDirectory",get_size:"get_size",get_extension:"get_extension",get_directory:"get_directory",get_path:"get_path"}
};
var hxd_fs_BytesFileEntry = function(path,bytes) {
	this.fullPath = path;
	this.name = path.split("/").pop();
	this.bytes = bytes;
};
$hxClasses["hxd.fs.BytesFileEntry"] = hxd_fs_BytesFileEntry;
hxd_fs_BytesFileEntry.__name__ = "hxd.fs.BytesFileEntry";
hxd_fs_BytesFileEntry.__super__ = hxd_fs_FileEntry;
hxd_fs_BytesFileEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	get_path: function() {
		return this.fullPath;
	}
	,getSign: function() {
		return this.bytes.b[0] | this.bytes.b[1] << 8 | this.bytes.b[2] << 16 | this.bytes.b[3] << 24;
	}
	,getBytes: function() {
		return this.bytes;
	}
	,open: function() {
		this.pos = 0;
	}
	,skip: function(nbytes) {
		this.pos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.pos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.pos,size);
		this.pos += size;
	}
	,close: function() {
	}
	,load: function(onReady) {
		haxe_Timer.delay(onReady,1);
	}
	,loadBitmap: function(onLoaded) {
		var mime;
		switch(haxe_io_Path.extension(this.fullPath).toLowerCase()) {
		case "gif":
			mime = "image/gif";
			break;
		case "jpeg":case "jpg":
			mime = "image/jpeg";
			break;
		case "png":
			mime = "image/png";
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot determine image encoding, try adding an extension to the resource path");
		}
		var img = new Image();
		img.onload = function() {
			var this1 = img;
			onLoaded(this1);
		};
		var tmp = haxe_crypto_Base64.encode(this.bytes);
		img.src = "data:" + mime + ";base64," + tmp;
	}
	,exists: function(name) {
		return false;
	}
	,get: function(name) {
		return null;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry([]);
	}
	,get_size: function() {
		return this.bytes.length;
	}
	,__class__: hxd_fs_BytesFileEntry
});
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs_BytesFileSystem = function() {
};
$hxClasses["hxd.fs.BytesFileSystem"] = hxd_fs_BytesFileSystem;
hxd_fs_BytesFileSystem.__name__ = "hxd.fs.BytesFileSystem";
hxd_fs_BytesFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_BytesFileSystem.prototype = {
	getRoot: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,getBytes: function(path) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,exists: function(path) {
		return this.getBytes(path) != null;
	}
	,get: function(path) {
		var bytes = this.getBytes(path);
		if(bytes == null) {
			throw new js__$Boot_HaxeError("Resource not found '" + path + "'");
		}
		return new hxd_fs_BytesFileEntry(path,bytes);
	}
	,dispose: function() {
	}
	,dir: function(path) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,__class__: hxd_fs_BytesFileSystem
};
var hxd_fs__$EmbedFileSystem_EmbedEntry = function(fs,name,relPath,data) {
	this.fs = fs;
	this.name = name;
	this.relPath = relPath;
	this.data = data;
};
$hxClasses["hxd.fs._EmbedFileSystem.EmbedEntry"] = hxd_fs__$EmbedFileSystem_EmbedEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.__name__ = "hxd.fs._EmbedFileSystem.EmbedEntry";
hxd_fs__$EmbedFileSystem_EmbedEntry.__super__ = hxd_fs_FileEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	getSign: function() {
		var old = this.readPos;
		this.open();
		this.readPos = old;
		return this.bytes.b[0] | this.bytes.b[1] << 8 | this.bytes.b[2] << 16 | this.bytes.b[3] << 24;
	}
	,getBytes: function() {
		if(this.bytes == null) {
			this.open();
		}
		return this.bytes;
	}
	,open: function() {
		if(this.bytes == null) {
			this.bytes = haxe_Resource.getBytes(this.data);
			if(this.bytes == null) {
				throw new js__$Boot_HaxeError("Missing resource " + this.data);
			}
		}
		this.readPos = 0;
	}
	,skip: function(nbytes) {
		this.readPos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.readPos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.readPos,size);
		this.readPos += size;
	}
	,close: function() {
		this.bytes = null;
		this.readPos = 0;
	}
	,load: function(onReady) {
		if(onReady != null) {
			haxe_Timer.delay(onReady,1);
		}
	}
	,loadBitmap: function(onLoaded) {
		var rawData = null;
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(res.name == this.data) {
				rawData = res.data;
				break;
			}
		}
		if(rawData == null) {
			throw new js__$Boot_HaxeError("Missing resource " + this.data);
		}
		var image = new Image();
		image.onload = function(_) {
			var this1 = image;
			onLoaded(this1);
		};
		var extra = "";
		var bytes = rawData.length * 6 >> 3;
		var _g2 = 0;
		var _g3 = (3 - bytes * 4 % 3) % 3;
		while(_g2 < _g3) {
			var i = _g2++;
			extra += "=";
		}
		var tmp = "data:image/" + this.get_extension() + ";base64," + rawData;
		image.src = tmp + extra;
	}
	,get_isDirectory: function() {
		return this.fs.isDirectory(this.relPath);
	}
	,get_path: function() {
		if(this.relPath == ".") {
			return "<root>";
		} else {
			return this.relPath;
		}
	}
	,exists: function(name) {
		return this.fs.exists(this.relPath == "." ? name : this.relPath + "/" + name);
	}
	,get: function(name) {
		return this.fs.get(this.relPath == "." ? name : this.relPath + "/" + name);
	}
	,get_size: function() {
		this.open();
		return this.bytes.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry(this.fs.subFiles(this.relPath));
	}
	,__class__: hxd_fs__$EmbedFileSystem_EmbedEntry
});
var hxd_fs_EmbedFileSystem = function(root) {
	this.root = root;
};
$hxClasses["hxd.fs.EmbedFileSystem"] = hxd_fs_EmbedFileSystem;
hxd_fs_EmbedFileSystem.__name__ = "hxd.fs.EmbedFileSystem";
hxd_fs_EmbedFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_EmbedFileSystem.resolve = function(path) {
	return "R_" + path.replace(hxd_fs_EmbedFileSystem.invalidChars.r,"_");
};
hxd_fs_EmbedFileSystem.prototype = {
	getRoot: function() {
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,"root",".",null);
	}
	,splitPath: function(path) {
		if(path == ".") {
			return [];
		} else {
			return path.split("/");
		}
	}
	,subFiles: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
		}
		if(r == null) {
			throw new js__$Boot_HaxeError(path + " is not a directory");
		}
		var fields = Reflect.fields(r);
		fields.sort(Reflect.compare);
		var _g2 = [];
		var _g3 = 0;
		while(_g3 < fields.length) {
			var name = fields[_g3];
			++_g3;
			_g2.push(this.get(path == "." ? name : path + "/" + name));
		}
		return _g2;
	}
	,isDirectory: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
		}
		if(r != null) {
			return r != true;
		} else {
			return false;
		}
	}
	,exists: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
			if(r == null) {
				return false;
			}
		}
		return true;
	}
	,get: function(path) {
		if(!this.exists(path)) {
			throw new js__$Boot_HaxeError(new hxd_fs_NotFound(path));
		}
		var id = hxd_fs_EmbedFileSystem.resolve(path);
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,path.split("/").pop(),path,id);
	}
	,dispose: function() {
	}
	,dir: function(path) {
		throw new js__$Boot_HaxeError("Not Supported");
	}
	,__class__: hxd_fs_EmbedFileSystem
};
var hxd_fs_FileInput = function(f) {
	this.f = f;
	f.open();
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	skip: function(nbytes) {
		this.f.skip(nbytes);
	}
	,readByte: function() {
		return this.f.readByte();
	}
	,readBytes: function(b,pos,len) {
		this.f.read(b,pos,len);
		return len;
	}
	,close: function() {
		this.f.close();
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$ = {};
$hxClasses["hxd.fs._LoadedBitmap.LoadedBitmap_Impl_"] = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$;
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.__name__ = "hxd.fs._LoadedBitmap.LoadedBitmap_Impl_";
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toNative = function(this1) {
	return this1;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl__$Allocator_BufferFlags_$Impl_$ = {};
$hxClasses["hxd.impl._Allocator.BufferFlags_Impl_"] = hxd_impl__$Allocator_BufferFlags_$Impl_$;
hxd_impl__$Allocator_BufferFlags_$Impl_$.__name__ = "hxd.impl._Allocator.BufferFlags_Impl_";
hxd_impl__$Allocator_BufferFlags_$Impl_$.toInt = function(this1) {
	return this1;
};
var hxd_impl_Allocator = function() {
};
$hxClasses["hxd.impl.Allocator"] = hxd_impl_Allocator;
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
hxd_impl_Allocator.set = function(a) {
	hxd_impl_Allocator.inst = a;
};
hxd_impl_Allocator.get = function() {
	if(hxd_impl_Allocator.inst == null) {
		hxd_impl_Allocator.inst = new hxd_impl_Allocator();
	}
	return hxd_impl_Allocator.inst;
};
hxd_impl_Allocator.prototype = {
	allocBuffer: function(vertices,stride,flags) {
		var tmp;
		switch(flags) {
		case 0:
			tmp = [h3d_BufferFlag.Dynamic];
			break;
		case 1:
			tmp = [h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.Dynamic];
			break;
		}
		return new h3d_Buffer(vertices,stride,tmp);
	}
	,disposeBuffer: function(b) {
		b.dispose();
	}
	,allocIndexBuffer: function(count) {
		return new h3d_Indexes(count);
	}
	,disposeIndexBuffer: function(i) {
		i.dispose();
	}
	,onContextLost: function() {
	}
	,allocFloats: function(count) {
		var length = count;
		if(length == null) {
			length = 0;
		}
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(length);
		return this1;
	}
	,disposeFloats: function(f) {
	}
	,allocIndexes: function(count) {
		var length = count;
		if(length == null) {
			length = 0;
		}
		var this1 = new Array(length);
		return this1;
	}
	,disposeIndexes: function(i) {
	}
	,__class__: hxd_impl_Allocator
};
var hxd_impl_Api = function() { };
$hxClasses["hxd.impl.Api"] = hxd_impl_Api;
hxd_impl_Api.__name__ = "hxd.impl.Api";
hxd_impl_Api.downcast = function(value,c) {
	return js_Boot.__downcastCheck(value,c) ? value : null;
};
var hxd_impl_ArrayIterator = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator"] = hxd_impl_ArrayIterator;
hxd_impl_ArrayIterator.__name__ = "hxd.impl.ArrayIterator";
hxd_impl_ArrayIterator.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator
};
var hxd_impl_ArrayIterator_$h2d_$Object = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h2d_Object"] = hxd_impl_ArrayIterator_$h2d_$Object;
hxd_impl_ArrayIterator_$h2d_$Object.__name__ = "hxd.impl.ArrayIterator_h2d_Object";
hxd_impl_ArrayIterator_$h2d_$Object.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h2d_$Object
};
var hxd_impl_ArrayIterator_$h3d_$scene_$Object = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h3d_scene_Object"] = hxd_impl_ArrayIterator_$h3d_$scene_$Object;
hxd_impl_ArrayIterator_$h3d_$scene_$Object.__name__ = "hxd.impl.ArrayIterator_h3d_scene_Object";
hxd_impl_ArrayIterator_$h3d_$scene_$Object.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h3d_$scene_$Object
};
var hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_fs_FileEntry"] = hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry;
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.__name__ = "hxd.impl.ArrayIterator_hxd_fs_FileEntry";
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry
};
var hxd_impl_ArrayIterator_$hxd_$res_$Any = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_res_Any"] = hxd_impl_ArrayIterator_$hxd_$res_$Any;
hxd_impl_ArrayIterator_$hxd_$res_$Any.__name__ = "hxd.impl.ArrayIterator_hxd_res_Any";
hxd_impl_ArrayIterator_$hxd_$res_$Any.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$res_$Any
};
var hxd_impl_ArrayIterator_$hxd_$snd_$Channel = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_snd_Channel"] = hxd_impl_ArrayIterator_$hxd_$snd_$Channel;
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.__name__ = "hxd.impl.ArrayIterator_hxd_snd_Channel";
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$snd_$Channel
};
var hxd_impl__$UncheckedBytes_UncheckedBytes_$Impl_$ = {};
$hxClasses["hxd.impl._UncheckedBytes.UncheckedBytes_Impl_"] = hxd_impl__$UncheckedBytes_UncheckedBytes_$Impl_$;
hxd_impl__$UncheckedBytes_UncheckedBytes_$Impl_$.__name__ = "hxd.impl._UncheckedBytes.UncheckedBytes_Impl_";
hxd_impl__$UncheckedBytes_UncheckedBytes_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
hxd_impl__$UncheckedBytes_UncheckedBytes_$Impl_$.get = function(this1,i) {
	return this1[i];
};
hxd_impl__$UncheckedBytes_UncheckedBytes_$Impl_$.set = function(this1,i,v) {
	this1[i] = v;
	return v;
};
hxd_impl__$UncheckedBytes_UncheckedBytes_$Impl_$.fromBytes = function(b) {
	var this1 = b.b;
	return this1;
};
var hxd_poly2tri_Edge = function(p1,p2) {
	if(p1 == null || p2 == null) {
		throw new js__$Boot_HaxeError("Edge::new p1 or p2 is null");
	}
	var swap = false;
	if(p1.y > p2.y) {
		swap = true;
	} else if(p1.y == p2.y) {
		if(p1.x == p2.x) {
			throw new js__$Boot_HaxeError("Edge::repeat points " + Std.string(p1));
		}
		swap = p1.x > p2.x;
	}
	if(swap) {
		this.q = p1;
		this.p = p2;
	} else {
		this.p = p1;
		this.q = p2;
	}
	this.q.get_edge_list().push(this);
};
$hxClasses["hxd.poly2tri.Edge"] = hxd_poly2tri_Edge;
hxd_poly2tri_Edge.__name__ = "hxd.poly2tri.Edge";
hxd_poly2tri_Edge.prototype = {
	toString: function() {
		return "Edge(" + Std.string(this.p) + ", " + Std.string(this.q) + ")";
	}
	,__class__: hxd_poly2tri_Edge
};
var hxd_poly2tri_Point = function(x,y) {
	this.x = x;
	this.y = y;
	this.id = hxd_poly2tri_Point.C_ID;
	hxd_poly2tri_Point.C_ID++;
};
$hxClasses["hxd.poly2tri.Point"] = hxd_poly2tri_Point;
hxd_poly2tri_Point.__name__ = "hxd.poly2tri.Point";
hxd_poly2tri_Point.sortPoints = function(points) {
	points.sort(hxd_poly2tri_Point.cmpPoints);
};
hxd_poly2tri_Point.cmpPoints = function(l,r) {
	var ret = l.y - r.y;
	if(ret == 0) {
		ret = l.x - r.x;
	}
	if(ret < 0) {
		return -1;
	}
	if(ret > 0) {
		return 1;
	}
	return 0;
};
hxd_poly2tri_Point.prototype = {
	get_edge_list: function() {
		if(this.edge_list == null) {
			this.edge_list = [];
		}
		return this.edge_list;
	}
	,equals: function(that) {
		if(this.x == that.x) {
			return this.y == that.y;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Point(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxd_poly2tri_Point
	,__properties__: {get_edge_list:"get_edge_list"}
};
var hxd_res__$Any_SingleFileSystem = function(path,bytes) {
	hxd_fs_BytesFileSystem.call(this);
	this.path = path;
	this.bytes = bytes;
};
$hxClasses["hxd.res._Any.SingleFileSystem"] = hxd_res__$Any_SingleFileSystem;
hxd_res__$Any_SingleFileSystem.__name__ = "hxd.res._Any.SingleFileSystem";
hxd_res__$Any_SingleFileSystem.__super__ = hxd_fs_BytesFileSystem;
hxd_res__$Any_SingleFileSystem.prototype = $extend(hxd_fs_BytesFileSystem.prototype,{
	getBytes: function(p) {
		if(p == this.path) {
			return this.bytes;
		} else {
			return null;
		}
	}
	,__class__: hxd_res__$Any_SingleFileSystem
});
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	get_name: function() {
		return this.entry.name;
	}
	,toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
	,__properties__: {get_name:"get_name"}
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.fromBytes = function(path,bytes) {
	var fs = new hxd_res__$Any_SingleFileSystem(path,bytes);
	return new hxd_res_Loader(fs).load(path);
};
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toModel: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Model);
	}
	,toTexture: function() {
		return this.toImage().toTexture();
	}
	,toTile: function() {
		return this.toImage().toTile();
	}
	,toText: function() {
		return this.entry.getBytes().toString();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,toSound: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Sound);
	}
	,toPrefab: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Resource);
	}
	,to: function(c) {
		return this.loader.loadCache(this.entry.get_path(),c);
	}
	,iterator: function() {
		var _g2 = [];
		var _g3 = this.entry.iterator();
		while(_g3.i < _g3.l) {
			var f = _g3.a[_g3.i++];
			_g2.push(new hxd_res_Any(this.loader,f));
		}
		return new hxd_impl_ArrayIterator_$hxd_$res_$Any(_g2);
	}
	,__class__: hxd_res_Any
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font == null) {
			this.font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	,toSdfFont: function(size,channel,alphaCutoff,smoothing) {
		if(smoothing == null) {
			smoothing = 0.03125;
		}
		if(alphaCutoff == null) {
			alphaCutoff = 0.5;
		}
		if(channel == null) {
			channel = 0;
		}
		if(this.sdfFonts == null) {
			this.sdfFonts = [];
		}
		if(size == null) {
			size = this.toFont().size;
		}
		var _g = 0;
		var _g1 = this.sdfFonts;
		while(_g < _g1.length) {
			var font = _g1[_g];
			++_g;
			var _g2 = font.type;
			if(_g2._hx_index == 1) {
				var fsmoothing = _g2.smoothing;
				var falphaCutoff = _g2.alphaCutoff;
				var fchannel = _g2.channel;
				if(font.size == size && fchannel == channel && falphaCutoff == alphaCutoff && fsmoothing == smoothing) {
					return font;
				}
			}
		}
		var font1 = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveSdfTile));
		font1.type = h2d_FontType.SignedDistanceField(channel,alphaCutoff,smoothing);
		font1.resizeTo(size);
		this.sdfFonts.push(font1);
		return font1;
	}
	,resolveSdfTile: function(path) {
		var tex = this.loader.load(path).toTexture();
		tex.set_filter(h3d_mat_Filter.Linear);
		return h2d_Tile.fromTexture(tex);
	}
	,resolveTile: function(path) {
		return this.loader.load(path).toTile();
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_DefaultFont = function() { };
$hxClasses["hxd.res.DefaultFont"] = hxd_res_DefaultFont;
hxd_res_DefaultFont.__name__ = "hxd.res.DefaultFont";
hxd_res_DefaultFont.get = function() {
	var engine = h3d_Engine.CURRENT;
	var fnt = engine.resCache.h[hxd_res_DefaultFont.__id__];
	if(fnt == null) {
		var BYTES = hxd_res_Any.fromBytes("hxd/res/defaultFont.png",haxe_Unserializer.run("s3176:iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAACPBJREFUeJztnelypDoMRp2p%:6v3PNjhrlCLX1aLIPBPlWppI03bCG0QOfn8:m0zbr8KupnS9FDqRKAzUOhAvBRfqO:tfrSZ86H:ET79o6Rhc%JzzNSD7Xn:XyEH9RPtP4X:6GDDj6ttR:Hb62d9pmX8b487StA4:DFlup5z5MSWS%tL:f6eG4BXDppGQdtApJEtPm0zkf427Oo1fAxtfO2hDIruGXCLgnAD:jNyzSsKxa18yBphyqQ1jqwBN1zHmgcU3V3jHui9xaArkS0%XzTohOX%jvGauzvjMrlUJXuqSeV07G0ekgTovWS1t61vr0CQAez7nkj7uFIELJqmdN7RWvzil7hnnXV5qLOzSMAmlcQub9ZRuEsaNoq0w5RZbN0rye1ASzplWyAiGEXQVK3kZOdRcgy9:FLoRogI02WNc7rRQw3jzsZAfWB7skR44%3jdo6Wv2qfr4rFuUCZlftrT1jjpezSih4b75ClQDMvrizz%82uA1wMCqsKvUv3YO045rxma2vjY3mpPUvuV1WKDzbLtqfNu9:AjA6tl69QM3Zn1Wfl1M8G:CUW4s6b%sWIEXWtM:omNeXrnaDRm:OyIsE1UOfQ1gCwMOLdFCqWnj8Grl5nsjVakRjHMj1DgnEcQvw%OV0AE0wGisfqTKrbBYrZ4BiB:T4ldE8dPsMxU2oEWgZZtoAyMCq2GxtLlWCFbEB%PGIYWv1kxECq0%TbDKITjpirVr9SW2zC:skqqKdUp%QwwbILKwlgZk2mkBlmUVgPPOI3IbL0GwASY2PiMdbPrfVF6:vVctIq5SoVqNdxtrvWXt1:EguYHVL:ZV4Q8F781%KVwD25r8UagTyYE4TjkllmfrU4udtI%XZdrRcm5c1T%3cPXjq9RqEYTewIrau1a%ODVSBomgeL4cLudedG%H2pah4KBQx8gSnWMC:8AvDKwS0fXU5n59Uf7gAXA1dfG1TtM1Bm2ZtKi%PCGaVlpXKrf67ngeI%uFXoW1WdvNH0ztuV3vNBvAOrC30wR0LG7kX0:p3MjoCqPYfiQNI3BK%BEhq31vfYtS5UkN5lCD%NGWMSBxAWyyeyKkAJYc2Z6JrfqpvGYF0IzxqNWoDoPrSeNJ8POMgtJg76rtSEyDNErGzUF5F3ZOq9wI2D%VtbuBsaFfkNGwBGMtUmy3BjUAtxs3x3LOk8mi7zWB6Xw7leCNlb%LRXkrk%wEOpESIlezxlvM%uSWuzQXNx1Ofjqd5Aah:qW5PGDfbjpZzRCGlbwZ5T0TqMHMVoLgCP56Nj0fqo7mhLOeMGoDPx4wE0sW64mRmXLSDaCZvxPjSeNnAGKx:hxcw8%a3Zkc7tTqjyWgbs:4d3w8wW:7AC42l3zF:dH9H9SGedwO9rmEEz4nMpCXuznFoSS5tf9x9e24ByFjqodKAQio6EjfP9C8duzLHoZ0r8oD%LzRyAZY1XN2umux8n0L3OkeygcdnDzMYTSvQvc47G7g4q3xL2EqE8jhbAN6H9YDJ6TaxBeCduJNy3AjkrghySay8QXOU84lZSQ8plj:ioYuIG%axvLUrcoRxHHGHXelgKzkTWSxtLK:7whM8UaGLzs3qJ7P5IxNI0axh%hbAgxhWMGJ01M%KVKIASXQcipVR7MEz524XboQNoKVwPZPNhkpRjD5yRdM53B0c0qKDvE4X9PVw78JYWPc7usEo9cm1TAa0%R:hh44n1UXz1sjaB0dbJATdGoB:R1Dv:c4DGktSez33TNqW96MZtVo:R53sPLQxvGseCWu7y2d7Kji70MgQRUIwM5nNb%1bc8HyK%MAHiMtq2q5ypaOS39rdTz9jMaac4kg87eDpSsp4%bx:iS3UZLOqMQPM44Y3jGuSoCVabERyaCsj:90qs7TG1soWePZbICViWharvnSgrfTwYsz0gjckvUApHcDOdwa9waDvIGjCFZ:2vwzfVeGj7W%qs4ns0ettbMASJvG:WfJ%JAGHOVvI6GSxtMEUfNENK%FH%NtNaz1qzif7B79mcC2AdbG8zVxyNqMtrGkTQqZWmHUqvJjDJg%BZ9Rf552I8qtY%a:jUMnEG3j9V1RvWgUryfqFyXql1etX2aP:vGER8JWCCLdxhME4OlMbWTdLQCRhA%qX1WegVrZEbtjCjQjsDnKM200Y8nLjDaAx%WdVgg8:zfQY%1620Q8grcxpRDcfQvwMN2ivYm7s4GSRkGZLuRvV5T3AP1tAe08q8qtY38KJo4Ejgglbxh3awCJQyL35l:AjAKwN:5CKozAqpRm7zibBBUCMDJFi:p5GlMKcJUbGAm4aIkdlPCpttK9xz1RxMhzAdVCkDmnE5H:GURPXLta7ypHcz248%GLWR6Q%cL7ZdHRVOddWHPt1VRWX6O1mERXuNt6HmBmooGXnlB178MX3vIr5nhCejkUbf7VhgyalyWwngcjqsorxxg5xy%oDeDZ:Du0Qub%2aP6M%XVfSFK90D6ihjranoC2pUgUVVe0VdUw2bmeEKyASx1OwvWfQ7dPqi1XlFe1Vd0nbu1C:%HEeEObuSH:LyRKzSW6QZKvjDXDNKxqvIsR19a:624vKKvW9Zy5nTw5swQO2zGbODmDNdmpWwBmJ%hNo7n7WAJ5L703FN4DD:Sr3RcK6uar0XVnHvHUbHeDqadawaLFA3jbTwW6tH2aC%5oqgfLXYRGcOab5SKOVvz8sY75AneZATyQd:qyt1ByFjkGoCrR6u8gXLtc2tn:51qD22s7Pwi5Z5jEryNtS6jy6U5qfS8HZwFTWp0ogWdj3Wu0nmPWJ8K3HO62gvoul:dhKbBPPWmp:fdwBXwXNGa8TY92ruBzVG%GpoqnUXtp9CeCdza4JvZLhDqyqb3hT8RRDtH5VmyavKKREn0XCW1f3WiDKWmpTpf7GTQc:F6OpCdC3guJdp5C8CzkTY9JAg8Ekh:bxaAPxVMf28WgP7XMMrWAovwhO8I2gxkC8DibAFYnC0Ai6OFgjeL4Pmm0M2L0dzAzSJY2cDNy:E8ELJ5MdsLWJwtAIuzBWBxtgAszhaAxdkCsDi:AYnqZwd25SoPAAAAAElFTkSuQmCC"));
		var DESC = hxd_res_Any.fromBytes("hxd/res/defaultFont.fnt",haxe_Unserializer.run("s14030:PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPEZvbnQgc2l6ZT0iMTIiIGZhbWlseT0iUGl4ZWwgT3BlcmF0b3IiIGhlaWdodD0iMTYiIHN0eWxlPSJSZWd1bGFyIj4KIDxDaGFyIHdpZHRoPSI0IiBvZmZzZXQ9IjAgMTMiIHJlY3Q9IjEgMTIgMCAwIiBjb2RlPSIgIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIgMyAxIDkiIGNvZGU9IiEiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNCAzIDMgMyIgY29kZT0iJnF1b3Q7Ii8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjggMyA2IDkiIGNvZGU9IiMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMiIgcmVjdD0iMTUgMSA1IDEzIiBjb2RlPSIkIi8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIxIDMgNyA5IiBjb2RlPSIlIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjI5IDMgNSA5IiBjb2RlPSImYW1wOyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIzNSAzIDEgMyIgY29kZT0iJyIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSIzNyAzIDMgOSIgY29kZT0iKCIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI0MSAzIDMgOSIgY29kZT0iKSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI0NSAzIDUgNSIgY29kZT0iKiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI1MSA1IDUgNSIgY29kZT0iKyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxMiIgcmVjdD0iNTcgMTEgMiAzIiBjb2RlPSIsIi8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDgiIHJlY3Q9IjYwIDcgNCAxIiBjb2RlPSItIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDEyIiByZWN0PSI2NSAxMSAxIDEiIGNvZGU9Ii4iLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjcgMyAzIDkiIGNvZGU9Ii8iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzEgMyA1IDkiIGNvZGU9IjAiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzcgMyAzIDkiIGNvZGU9IjEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMyA1IDkiIGNvZGU9IjIiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODcgMyA1IDkiIGNvZGU9IjMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTMgMyA1IDkiIGNvZGU9IjQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTkgMyA1IDkiIGNvZGU9IjUiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA1IDMgNSA5IiBjb2RlPSI2Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExMSAzIDUgOSIgY29kZT0iNyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTcgMyA1IDkiIGNvZGU9IjgiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAxNSA1IDkiIGNvZGU9IjkiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNiIgcmVjdD0iNyAxNyAxIDciIGNvZGU9IjoiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNiIgcmVjdD0iOSAxNyAyIDkiIGNvZGU9IjsiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTIgMTcgMyA1IiBjb2RlPSImbHQ7Ii8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDciIHJlY3Q9IjE2IDE4IDQgMyIgY29kZT0iPSIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA2IiByZWN0PSIyMSAxNyAzIDUiIGNvZGU9Ij4iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjUgMTUgNSA5IiBjb2RlPSI:Ii8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjMxIDE1IDcgOSIgY29kZT0iQCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzOSAxNSA1IDkiIGNvZGU9IkEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDUgMTUgNSA5IiBjb2RlPSJCIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjUxIDE1IDUgOSIgY29kZT0iQyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI1NyAxNSA1IDkiIGNvZGU9IkQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjMgMTUgNSA5IiBjb2RlPSJFIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjY5IDE1IDUgOSIgY29kZT0iRiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI3NSAxNSA1IDkiIGNvZGU9IkciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMTUgNSA5IiBjb2RlPSJIIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijg3IDE1IDEgOSIgY29kZT0iSSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI4OSAxNSA1IDkiIGNvZGU9IkoiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTUgMTUgNSA5IiBjb2RlPSJLIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEwMSAxNSA1IDkiIGNvZGU9IkwiLz4KIDxDaGFyIHdpZHRoPSI5IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA3IDE1IDcgOSIgY29kZT0iTSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTUgMTUgNSA5IiBjb2RlPSJOIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEyMSAxNSA1IDkiIGNvZGU9Ik8iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAyNyA1IDkiIGNvZGU9IlAiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNyAyNyA1IDkiIGNvZGU9IlEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgMjcgNSA5IiBjb2RlPSJSIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjE5IDI3IDUgOSIgY29kZT0iUyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNSAyNyA1IDkiIGNvZGU9IlQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzEgMjcgNSA5IiBjb2RlPSJVIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjM3IDI3IDUgOSIgY29kZT0iViIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSI0MyAyNyA3IDkiIGNvZGU9IlciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNTEgMjcgNSA5IiBjb2RlPSJYIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjU3IDI3IDUgOSIgY29kZT0iWSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI2MyAyNyA1IDkiIGNvZGU9IloiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjkgMjcgMyA5IiBjb2RlPSJbIi8%CiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjczIDI3IDMgOSIgY29kZT0iXCIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI3NyAyNyAzIDkiIGNvZGU9Il0iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMjcgNSAzIiBjb2RlPSJeIi8%CiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIwIDE0IiByZWN0PSI4NyAzNyA1IDEiIGNvZGU9Il8iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iOTMgMjcgMiAyIiBjb2RlPSJgIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9Ijk2IDI5IDUgNyIgY29kZT0iYSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMDIgMjcgNSA5IiBjb2RlPSJiIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwOCAyOSA1IDciIGNvZGU9ImMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTE0IDI3IDUgOSIgY29kZT0iZCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMjAgMjkgNSA3IiBjb2RlPSJlIi8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEgMzkgNSA5IiBjb2RlPSJmIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjcgNDEgNSA5IiBjb2RlPSJnIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEzIDM5IDUgOSIgY29kZT0iaCIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIxOSAzOSAxIDkiIGNvZGU9ImkiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjEgMzkgNSAxMSIgY29kZT0iaiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNyAzOSA1IDkiIGNvZGU9ImsiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzMgMzkgMSA5IiBjb2RlPSJsIi8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjM1IDQxIDcgNyIgY29kZT0ibSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI0MyA0MSA1IDciIGNvZGU9Im4iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNDkgNDEgNSA3IiBjb2RlPSJvIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjU1IDQxIDUgOSIgY29kZT0icCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI2MSA0MSA1IDkiIGNvZGU9InEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNjcgNDEgNSA3IiBjb2RlPSJyIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjczIDQxIDUgNyIgY29kZT0icyIvPgogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA1IiByZWN0PSI3OSA0MCA1IDgiIGNvZGU9InQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iODUgNDEgNSA3IiBjb2RlPSJ1Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjkxIDQxIDUgNyIgY29kZT0idiIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA2IiByZWN0PSI5NyA0MSA3IDciIGNvZGU9InciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTA1IDQxIDUgNyIgY29kZT0ieCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMTEgNDEgNSA5IiBjb2RlPSJ5Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjExNyA0MSA1IDciIGNvZGU9InoiLz4KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSA1NCA0IDkiIGNvZGU9InsiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNiA1NCAxIDkiIGNvZGU9InwiLz4KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOCA1NCA0IDkiIGNvZGU9In0iLz4KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgNTQgNiAyIiBjb2RlPSJ%Ii8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjIwIDU2IDEgOSIgY29kZT0iwqEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjIgNTQgNSAxMSIgY29kZT0iwqIiLz4KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjggNTQgNiA5IiBjb2RlPSLCoyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzNSA1NCA1IDkiIGNvZGU9IsKlIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQxIDU0IDEgOSIgY29kZT0iwqYiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDMgNTQgMyAxIiBjb2RlPSLCqCIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSI0NyA1NCA3IDkiIGNvZGU9IsKpIi8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjU1IDU2IDYgNSIgY29kZT0iwqsiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgOCIgcmVjdD0iNjIgNTggNSAzIiBjb2RlPSLCrCIvPgogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA0IiByZWN0PSI2OCA1NCA0IDQiIGNvZGU9IsKwIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjczIDU2IDUgNyIgY29kZT0iwrEiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzkgNTQgMiAyIiBjb2RlPSLCtCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI4MiA1NiA1IDkiIGNvZGU9IsK1Ii8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijg4IDU0IDcgOSIgY29kZT0iwrYiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgOCIgcmVjdD0iOTYgNTggMSAxIiBjb2RlPSLCtyIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMCAxMyIgcmVjdD0iOTggNjMgMyAyIiBjb2RlPSLCuCIvPgogPENoYXIgd2lkdGg9IjgiIG9mZnNldD0iMSA2IiByZWN0PSIxMDIgNTYgNiA1IiBjb2RlPSLCuyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMDkgNTYgNSA5IiBjb2RlPSLCvyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMTUgNTEgNSAxMiIgY29kZT0iw4AiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTIxIDUxIDUgMTIiIGNvZGU9IsOBIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjEgNjcgNSAxMiIgY29kZT0iw4IiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iNyA2NyA2IDEyIiBjb2RlPSLDgyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAyIiByZWN0PSIxNCA2OCA1IDExIiBjb2RlPSLDhCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAwIiByZWN0PSIyMCA2NiA1IDEzIiBjb2RlPSLDhSIvPgogPENoYXIgd2lkdGg9IjExIiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjYgNzAgOSA5IiBjb2RlPSLDhiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzNiA3MCA1IDExIiBjb2RlPSLDhyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI0MiA2NyA1IDEyIiBjb2RlPSLDiCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI0OCA2NyA1IDEyIiBjb2RlPSLDiSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI1NCA2NyA1IDEyIiBjb2RlPSLDiiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAyIiByZWN0PSI2MCA2OCA1IDExIiBjb2RlPSLDiyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxIiByZWN0PSI2NiA2NyAyIDEyIiBjb2RlPSLDjCIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSAxIiByZWN0PSI2OSA2NyAyIDEyIiBjb2RlPSLDjSIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxIiByZWN0PSI3MiA2NyAzIDEyIiBjb2RlPSLDjiIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAyIiByZWN0PSI3NiA2OCAzIDExIiBjb2RlPSLDjyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMCA0IiByZWN0PSI4MCA3MCA2IDkiIGNvZGU9IsOQIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9Ijg3IDY3IDYgMTIiIGNvZGU9IsORIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9Ijk0IDY3IDUgMTIiIGNvZGU9IsOSIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjEwMCA2NyA1IDEyIiBjb2RlPSLDkyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMDYgNjcgNSAxMiIgY29kZT0iw5QiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTEyIDY3IDYgMTIiIGNvZGU9IsOVIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9IjExOSA2OCA1IDExIiBjb2RlPSLDliIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxIDg3IDUgNSIgY29kZT0iw5ciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjAgNCIgcmVjdD0iNyA4NSA3IDkiIGNvZGU9IsOYIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjE1IDgyIDUgMTIiIGNvZGU9IsOZIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjIxIDgyIDUgMTIiIGNvZGU9IsOaIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjI3IDgyIDUgMTIiIGNvZGU9IsObIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9IjMzIDgzIDUgMTEiIGNvZGU9IsOcIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjM5IDgyIDUgMTIiIGNvZGU9IsOdIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQ1IDg1IDUgOSIgY29kZT0iw54iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNTEgODUgNSA5IiBjb2RlPSLDnyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI1NyA4NCA1IDEwIiBjb2RlPSLDoCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI2MyA4NCA1IDEwIiBjb2RlPSLDoSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI2OSA4NCA1IDEwIiBjb2RlPSLDoiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI3NSA4NCA2IDEwIiBjb2RlPSLDoyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI4MiA4NSA1IDkiIGNvZGU9IsOkIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9Ijg4IDgzIDUgMTEiIGNvZGU9IsOlIi8%CiA8Q2hhciB3aWR0aD0iMTEiIG9mZnNldD0iMSA2IiByZWN0PSI5NCA4NyA5IDciIGNvZGU9IsOmIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwNCA4NyA1IDkiIGNvZGU9IsOnIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjExMCA4NCA1IDEwIiBjb2RlPSLDqCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSIxMTYgODQgNSAxMCIgY29kZT0iw6kiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMSA5NyA1IDEwIiBjb2RlPSLDqiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI3IDk4IDUgOSIgY29kZT0iw6siLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMyIgcmVjdD0iMTMgOTcgMiAxMCIgY29kZT0iw6wiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgMyIgcmVjdD0iMTYgOTcgMiAxMCIgY29kZT0iw60iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMyIgcmVjdD0iMTkgOTcgMyAxMCIgY29kZT0iw64iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iMjMgOTggMyA5IiBjb2RlPSLDryIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNyA5OCA2IDkiIGNvZGU9IsOwIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjM0IDk3IDYgMTAiIGNvZGU9IsOxIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjQxIDk3IDUgMTAiIGNvZGU9IsOyIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjQ3IDk3IDUgMTAiIGNvZGU9IsOzIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjUzIDk3IDUgMTAiIGNvZGU9IsO0Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjU5IDk3IDYgMTAiIGNvZGU9IsO1Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjY2IDk4IDUgOSIgY29kZT0iw7YiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNzIgMTAwIDUgNSIgY29kZT0iw7ciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjAgNiIgcmVjdD0iNzggMTAwIDcgNyIgY29kZT0iw7giLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iODYgOTcgNSAxMCIgY29kZT0iw7kiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iOTIgOTcgNSAxMCIgY29kZT0iw7oiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iOTggOTcgNSAxMCIgY29kZT0iw7siLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA0IDk4IDUgOSIgY29kZT0iw7wiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMTEwIDk3IDUgMTIiIGNvZGU9IsO9Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExNiA5OCA1IDExIiBjb2RlPSLDviIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxIDExMCA1IDExIiBjb2RlPSLDvyIvPgo8L0ZvbnQ%Cg"));
		var bmp = new hxd_res_BitmapFont(DESC.entry);
		bmp.loader = BYTES.loader;
		fnt = bmp.toFont();
		engine.resCache.set(hxd_res_DefaultFont,fnt);
	}
	return fnt;
};
var hxd_res_Embed = function() { };
$hxClasses["hxd.res.Embed"] = hxd_res_Embed;
hxd_res_Embed.__name__ = "hxd.res.Embed";
var hxd_res__$Image_ImageFormat_$Impl_$ = {};
$hxClasses["hxd.res._Image.ImageFormat_Impl_"] = hxd_res__$Image_ImageFormat_$Impl_$;
hxd_res__$Image_ImageFormat_$Impl_$.__name__ = "hxd.res._Image.ImageFormat_Impl_";
hxd_res__$Image_ImageFormat_$Impl_$.__properties__ = {get_useAsyncDecode:"get_useAsyncDecode"};
hxd_res__$Image_ImageFormat_$Impl_$.get_useAsyncDecode = function(this1) {
	return this1 == 0;
};
hxd_res__$Image_ImageFormat_$Impl_$.toInt = function(this1) {
	return this1;
};
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getFormat: function() {
		this.getSize();
		return this.inf.format;
	}
	,getSize: function() {
		if(this.inf != null) {
			return this.inf;
		}
		var f = new hxd_fs_FileInput(this.entry);
		var width = 0;
		var height = 0;
		var format;
		var bc = 0;
		var head;
		try {
			head = f.readUInt16();
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				head = 0;
			} else {
				throw e;
			}
		}
		switch(head) {
		case 17476:
			format = 4;
			f.skip(10);
			height = f.readInt32();
			width = f.readInt32();
			f.skip(64);
			var fourCC = f.readInt32();
			switch(fourCC & 16777215) {
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				switch(v) {
				case 1:
					bc = 4;
					break;
				case 2:
					bc = 5;
					break;
				default:
					bc = 0;
				}
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				switch(dxt) {
				case 1:
					bc = 1;
					break;
				case 2:case 3:
					bc = 2;
					break;
				case 4:case 5:
					bc = 3;
					break;
				default:
					bc = 0;
				}
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(40);
					var dxgi = f.readInt32();
					switch(dxgi) {
					case 95:
						bc = 6;
						break;
					case 98:
						bc = 7;
						break;
					default:
						throw new js__$Boot_HaxeError(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
				}
			}
			if(bc == 0) {
				throw new js__$Boot_HaxeError(this.entry.get_path() + " has unsupported 4CC " + String.fromCodePoint((fourCC & 255)) + String.fromCodePoint((fourCC >> 8 & 255)) + String.fromCodePoint((fourCC >> 16 & 255)) + String.fromCodePoint((fourCC >>> 24)));
			}
			break;
		case 18759:
			format = 2;
			f.readInt32();
			width = f.readUInt16();
			height = f.readUInt16();
			break;
		case 20617:
			format = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					width = f.readInt32();
					height = f.readInt32();
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			format = 0;
			f.set_bigEndian(true);
			_hx_loop2: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				height = f.readUInt16();
				width = f.readUInt16();
				break _hx_loop2;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				format = 3;
				f.skip(10);
				width = f.readUInt16();
				height = f.readUInt16();
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		this.inf = { width : width, height : height, format : format, bc : bc};
		return this.inf;
	}
	,getPixels: function(fmt,flipY) {
		this.getSize();
		var pixels;
		switch(this.inf.format) {
		case 0:
			var bytes = this.entry.getBytes();
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				throw new js__$Boot_HaxeError("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e1) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes1 = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes1));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,hxd_PixelFormat.BGRA);
			var pdata = png.read();
			format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			if(flipY) {
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
			}
			break;
		case 2:
			var bytes2 = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes2)).read();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			break;
		case 3:
			var bytes3 = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes3)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw new js__$Boot_HaxeError("Not supported " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
			var access = hxd__$Pixels_PixelsARGB_$Impl_$.fromPixels(pixels);
			var p1 = 0;
			var _g = 0;
			var _g1 = h;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g11 = w;
				while(_g2 < _g11) {
					var x = _g2++;
					var c = r.imageData[x + y * w];
					access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
				break;
			case 2:
				break;
			default:
				throw new js__$Boot_HaxeError("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var bytes4 = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes4,hxd_PixelFormat.S3TC(this.inf.bc),128 + (this.inf.bc >= 6 ? 20 : 0));
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		if(flipY != null) {
			pixels.setFlip(flipY);
		}
		return pixels;
	}
	,toBitmap: function() {
		this.getSize();
		var bmp = new hxd_BitmapData(this.inf.width,this.inf.height);
		var pixels = this.getPixels();
		bmp.setPixels(pixels);
		pixels.dispose();
		return bmp;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getSize();
		if(w != s.width || h != s.height) {
			this.tex.resize(w,h);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function() {
		var _gthis = this;
		if(this.getFormat() != 0 && !hxd_res_Image.DEFAULT_ASYNC) {
			var load = function() {
				_gthis.tex.alloc();
				var pixels = _gthis.getPixels(_gthis.tex.format);
				if(pixels.width != _gthis.tex.width || pixels.height != _gthis.tex.height) {
					pixels.makeSquare();
				}
				_gthis.tex.uploadPixels(pixels);
				pixels.dispose();
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			};
			if(this.entry.get_isAvailable()) {
				load();
			} else {
				this.entry.load(load);
			}
		} else {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap(bmp);
				_gthis.tex.alloc();
				if(bmp1.ctx.canvas.width != _gthis.tex.width || bmp1.ctx.canvas.height != _gthis.tex.height) {
					var pixels1 = bmp1.getPixels();
					pixels1.makeSquare();
					_gthis.tex.uploadPixels(pixels1);
					pixels1.dispose();
				} else {
					_gthis.tex.uploadBitmap(bmp1);
				}
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
		}
	}
	,toTexture: function() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getSize();
		var width = this.inf.width;
		var height = this.inf.height;
		if(!hxd_res_Image.ALLOW_NPOT) {
			var tw = 1;
			var th = 1;
			while(tw < width) tw <<= 1;
			while(th < height) th <<= 1;
			width = tw;
			height = th;
		}
		var format = h3d_mat_Texture.nativeFormat;
		if(this.inf.format == 4) {
			format = hxd_PixelFormat.S3TC(this.inf.bc);
		}
		this.tex = new h3d_mat_Texture(width,height,[h3d_mat_TextureFlags.NoAlloc],format);
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		this.loadTexture();
		return this.tex;
	}
	,toTile: function() {
		var size = this.getSize();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,size.width,size.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	cleanCache: function() {
		this.cache = new haxe_ds_StringMap();
	}
	,dir: function(path) {
		var r = [];
		var entries = this.fs.dir(path);
		var _g = 0;
		while(_g < entries.length) {
			var e = entries[_g];
			++_g;
			r.push(new hxd_res_Any(this,e));
		}
		return r;
	}
	,exists: function(path) {
		return this.fs.exists(path);
	}
	,load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var _this = this.cache;
		var res = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			var _this1 = this.cache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,res);
			} else {
				_this1.h[path] = res;
			}
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw new js__$Boot_HaxeError(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,dispose: function() {
		this.cleanCache();
		this.fs.dispose();
	}
	,__class__: hxd_res_Loader
};
var hxd_res_Model = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Model"] = hxd_res_Model;
hxd_res_Model.__name__ = "hxd.res.Model";
hxd_res_Model.__super__ = hxd_res_Resource;
hxd_res_Model.prototype = $extend(hxd_res_Resource.prototype,{
	toHmd: function() {
		var fs = new hxd_fs_FileInput(this.entry);
		var hmd = new hxd_fmt_hmd_Reader(fs).readHeader();
		fs.close();
		return new hxd_fmt_hmd_Library(this,hmd);
	}
	,__class__: hxd_res_Model
});
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__ : true, __constructs__ : ["Fast","Chromatic"]
	,Fast: {_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_FastBytes_$Impl_$ = {};
$hxClasses["hxd.res._NanoJpeg.FastBytes_Impl_"] = hxd_res__$NanoJpeg_FastBytes_$Impl_$;
hxd_res__$NanoJpeg_FastBytes_$Impl_$.__name__ = "hxd.res._NanoJpeg.FastBytes_Impl_";
hxd_res__$NanoJpeg_FastBytes_$Impl_$._new = function(b) {
	var this1 = b;
	return this1;
};
hxd_res__$NanoJpeg_FastBytes_$Impl_$.get = function(this1,i) {
	return this1.b[i];
};
hxd_res__$NanoJpeg_FastBytes_$Impl_$.set = function(this1,i,v) {
	this1.b[i] = v;
};
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	var this1 = new Array(64);
	var this2 = new Array(64);
	var this3 = new Array(64);
	var this4 = new Array(64);
	this.qtab = [this1,this2,this3,this4].slice(0);
	var this5 = new Array(16);
	this.counts = this5;
	var this6 = new Array(64);
	this.block = this6;
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.CF = function(x) {
	var x1 = x + 64 >> 7;
	if(x1 < 0) {
		return 0;
	} else if(x1 > 255) {
		return 255;
	} else {
		return x1;
	}
};
hxd_res_NanoJpeg.njClip = function(x) {
	if(x < 0) {
		return 0;
	} else if(x > 255) {
		return 255;
	} else {
		return x;
	}
};
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	alloc: function(nbytes) {
		return new haxe_io_Bytes(new ArrayBuffer(nbytes));
	}
	,free: function(bytes) {
	}
	,njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njSkip: function(count) {
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
	}
	,syntax: function(flag) {
		if(flag) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
	}
	,get: function(p) {
		return this.bytes.b[this.pos + p];
	}
	,njDecode16: function(p) {
		return this.bytes.b[this.pos + p] << 8 | this.bytes.b[this.pos + (p + 1)];
	}
	,njByteAlign: function() {
		this.bufbits &= 248;
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				if(this.size == 0) {
					throw new js__$Boot_HaxeError("Invalid JPEG file");
				}
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					if((marker & 248) != 208) {
						throw new js__$Boot_HaxeError("Invalid JPEG file");
					}
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njSkipBits: function(bits) {
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
	}
	,njGetBits: function(bits) {
		var r = this.njShowBits(bits);
		this.bufbits -= bits;
		return r;
	}
	,njDecodeLength: function() {
		if(this.size < 2) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
	}
	,njSkipMarker: function() {
		if(this.size < 2) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
	}
	,njDecodeSOF: function() {
		if(this.size < 2) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		if(this.length < 9) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		if(this.length < this.ncomp * 3) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g1 = 0;
		var _g2 = this.ncomp;
		while(_g1 < _g2) {
			var i = _g1++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if(c.ssx == 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if(c.ssy == 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			if((c.qtsel & 252) != 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			if(this.size < 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c1 = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c1.ssx = c1.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g3 = 0;
		var _g4 = this.ncomp;
		while(_g3 < _g4) {
			var i1 = _g3++;
			var c2 = this.comps[i1];
			c2.width = (this.width * c2.ssx + ssxmax - 1) / ssxmax | 0;
			c2.stride = c2.width + 7 & 2147483640;
			c2.height = (this.height * c2.ssy + ssymax - 1) / ssymax | 0;
			c2.stride = this.mbwidth * this.mbsizex * c2.ssx / ssxmax | 0;
			if(c2.width < 3 && c2.ssx != ssxmax || c2.height < 3 && c2.ssy != ssymax) {
				this.notSupported();
			}
			c2.pixels = new haxe_io_Bytes(new ArrayBuffer(c2.stride * (this.mbheight * this.mbsizey * c2.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
	}
	,njDecodeDQT: function() {
		if(this.size < 2) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			if((i & 252) != 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
			if(this.size < 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
		}
		if(this.length != 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
	}
	,njDecodeDHT: function() {
		if(this.size < 2) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			if((i & 236) != 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			if(this.size < 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				if(this.length < currcnt) {
					throw new js__$Boot_HaxeError("Invalid JPEG file");
				}
				remain -= currcnt << 16 - codelen;
				if(remain < 0) {
					throw new js__$Boot_HaxeError("Invalid JPEG file");
				}
				var _g1 = 0;
				var _g11 = currcnt;
				while(_g1 < _g11) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g2 = 0;
					var _g12 = spread;
					while(_g2 < _g12) {
						var j = _g2++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
				if(this.size < 0) {
					throw new js__$Boot_HaxeError("Invalid JPEG file");
				}
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
		if(this.length != 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
	}
	,njDecodeDRI: function() {
		if(this.size < 2) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		if(this.length < 2) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
	}
	,njGetVLC: function(vlc) {
		var value = this.njShowBits(16);
		var bits = vlc.b[value << 1];
		if(bits == 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value = vlc.b[value << 1 | 1];
		this.vlcCode = value;
		bits = value & 15;
		if(bits == 0) {
			return 0;
		}
		var r = this.njShowBits(bits);
		this.bufbits -= bits;
		value = r;
		if(value < 1 << bits - 1) {
			value += (-1 << bits) + 1;
		}
		return value;
	}
	,njRowIDCT: function(bp) {
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val2 = this.block[bp + 5] = val1;
			var val3 = this.block[bp + 4] = val2;
			var val4 = this.block[bp + 3] = val3;
			var val5 = this.block[bp + 2] = val4;
			var val6 = this.block[bp + 1] = val5;
			this.block[bp] = val6;
			return;
		}
		var x0 = (this.block[bp] << 11) + 128;
		var x8 = 565 * (x4 + x5);
		x4 = x8 + 2276 * x4;
		x5 = x8 - 3406 * x5;
		x8 = 2408 * (x6 + x7);
		x6 = x8 - 799 * x6;
		x7 = x8 - 4017 * x7;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2);
		x2 = x1 - 3784 * x2;
		x3 = x1 + 1568 * x3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		this.block[bp] = x7 + x1 >> 8;
		this.block[bp + 1] = x3 + x2 >> 8;
		this.block[bp + 2] = x0 + x4 >> 8;
		this.block[bp + 3] = x8 + x6 >> 8;
		this.block[bp + 4] = x8 - x6 >> 8;
		this.block[bp + 5] = x0 - x4 >> 8;
		this.block[bp + 6] = x3 - x2 >> 8;
		this.block[bp + 7] = x7 - x1 >> 8;
	}
	,njColIDCT: function(bp,out,po,stride) {
		var x1 = this.block[bp + 32] << 8;
		var x2 = this.block[bp + 48];
		var x3 = this.block[bp + 16];
		var x4 = this.block[bp + 8];
		var x5 = this.block[bp + 56];
		var x6 = this.block[bp + 40];
		var x7 = this.block[bp + 24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[bp] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			return;
		}
		var x0 = (this.block[bp] << 8) + 8192;
		var x8 = 565 * (x4 + x5) + 4;
		x4 = x8 + 2276 * x4 >> 3;
		x5 = x8 - 3406 * x5 >> 3;
		x8 = 2408 * (x6 + x7) + 4;
		x6 = x8 - 799 * x6 >> 3;
		x7 = x8 - 4017 * x7 >> 3;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2) + 4;
		x2 = x1 - 3784 * x2 >> 3;
		x3 = x1 + 1568 * x3 >> 3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		var x9 = (x7 + x1 >> 14) + 128;
		out.b[po] = x9 < 0 ? 0 : x9 > 255 ? 255 : x9;
		po += stride;
		var x10 = (x3 + x2 >> 14) + 128;
		out.b[po] = x10 < 0 ? 0 : x10 > 255 ? 255 : x10;
		po += stride;
		var x11 = (x0 + x4 >> 14) + 128;
		out.b[po] = x11 < 0 ? 0 : x11 > 255 ? 255 : x11;
		po += stride;
		var x12 = (x8 + x6 >> 14) + 128;
		out.b[po] = x12 < 0 ? 0 : x12 > 255 ? 255 : x12;
		po += stride;
		var x13 = (x8 - x6 >> 14) + 128;
		out.b[po] = x13 < 0 ? 0 : x13 > 255 ? 255 : x13;
		po += stride;
		var x14 = (x0 - x4 >> 14) + 128;
		out.b[po] = x14 < 0 ? 0 : x14 > 255 ? 255 : x14;
		po += stride;
		var x15 = (x3 - x2 >> 14) + 128;
		out.b[po] = x15 < 0 ? 0 : x15 > 255 ? 255 : x15;
		po += stride;
		var x16 = (x7 - x1 >> 14) + 128;
		out.b[po] = x16 < 0 ? 0 : x16 > 255 ? 255 : x16;
	}
	,njDecodeBlock: function(c,po) {
		var this1 = c.pixels;
		var out = this1;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(bits == 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		while(true) {
			var value2 = this.njShowBits(16);
			var bits1 = at.b[value2 << 1];
			if(bits1 == 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			if(this.bufbits < bits1) {
				this.njShowBits(bits1);
			}
			this.bufbits -= bits1;
			value2 = at.b[value2 << 1 | 1];
			this.vlcCode = value2;
			bits1 = value2 & 15;
			if(bits1 == 0) {
				value = 0;
			} else {
				var r1 = this.njShowBits(bits1);
				this.bufbits -= bits1;
				value2 = r1;
				if(value2 < 1 << bits1 - 1) {
					value2 += (-1 << bits1) + 1;
				}
				value = value2;
			}
			if(this.vlcCode == 0) {
				break;
			}
			if((this.vlcCode & 15) == 0 && this.vlcCode != 240) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			coef += (this.vlcCode >> 4) + 1;
			if(coef > 63) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			this.block[this.njZZ[coef]] = value * qt[coef];
			if(!(coef < 63)) {
				break;
			}
		}
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val2 = this.block[bp + 5] = val1;
			var val3 = this.block[bp + 4] = val2;
			var val4 = this.block[bp + 3] = val3;
			var val5 = this.block[bp + 2] = val4;
			var val6 = this.block[bp + 1] = val5;
			this.block[bp] = val6;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp1 = 8;
		var x01;
		var x81;
		var x11 = this.block[bp1 + 4] << 11;
		var x21 = this.block[bp1 + 6];
		var x31 = this.block[bp1 + 2];
		var x41 = this.block[bp1 + 1];
		var x51 = this.block[bp1 + 7];
		var x61 = this.block[bp1 + 5];
		var x71 = this.block[bp1 + 3];
		if((x11 | x21 | x31 | x41 | x51 | x61 | x71) == 0) {
			var val7 = this.block[bp1 + 7] = this.block[bp1] << 3;
			var val8 = this.block[bp1 + 6] = val7;
			var val9 = this.block[bp1 + 5] = val8;
			var val10 = this.block[bp1 + 4] = val9;
			var val11 = this.block[bp1 + 3] = val10;
			var val12 = this.block[bp1 + 2] = val11;
			var val13 = this.block[bp1 + 1] = val12;
			this.block[bp1] = val13;
		} else {
			x01 = (this.block[bp1] << 11) + 128;
			x81 = 565 * (x41 + x51);
			x41 = x81 + 2276 * x41;
			x51 = x81 - 3406 * x51;
			x81 = 2408 * (x61 + x71);
			x61 = x81 - 799 * x61;
			x71 = x81 - 4017 * x71;
			x81 = x01 + x11;
			x01 -= x11;
			x11 = 1108 * (x31 + x21);
			x21 = x11 - 3784 * x21;
			x31 = x11 + 1568 * x31;
			x11 = x41 + x61;
			x41 -= x61;
			x61 = x51 + x71;
			x51 -= x71;
			x71 = x81 + x31;
			x81 -= x31;
			x31 = x01 + x21;
			x01 -= x21;
			x21 = 181 * (x41 + x51) + 128 >> 8;
			x41 = 181 * (x41 - x51) + 128 >> 8;
			this.block[bp1] = x71 + x11 >> 8;
			this.block[bp1 + 1] = x31 + x21 >> 8;
			this.block[bp1 + 2] = x01 + x41 >> 8;
			this.block[bp1 + 3] = x81 + x61 >> 8;
			this.block[bp1 + 4] = x81 - x61 >> 8;
			this.block[bp1 + 5] = x01 - x41 >> 8;
			this.block[bp1 + 6] = x31 - x21 >> 8;
			this.block[bp1 + 7] = x71 - x11 >> 8;
		}
		var bp2 = 16;
		var x02;
		var x82;
		var x12 = this.block[bp2 + 4] << 11;
		var x22 = this.block[bp2 + 6];
		var x32 = this.block[bp2 + 2];
		var x42 = this.block[bp2 + 1];
		var x52 = this.block[bp2 + 7];
		var x62 = this.block[bp2 + 5];
		var x72 = this.block[bp2 + 3];
		if((x12 | x22 | x32 | x42 | x52 | x62 | x72) == 0) {
			var val14 = this.block[bp2 + 7] = this.block[bp2] << 3;
			var val15 = this.block[bp2 + 6] = val14;
			var val16 = this.block[bp2 + 5] = val15;
			var val17 = this.block[bp2 + 4] = val16;
			var val18 = this.block[bp2 + 3] = val17;
			var val19 = this.block[bp2 + 2] = val18;
			var val20 = this.block[bp2 + 1] = val19;
			this.block[bp2] = val20;
		} else {
			x02 = (this.block[bp2] << 11) + 128;
			x82 = 565 * (x42 + x52);
			x42 = x82 + 2276 * x42;
			x52 = x82 - 3406 * x52;
			x82 = 2408 * (x62 + x72);
			x62 = x82 - 799 * x62;
			x72 = x82 - 4017 * x72;
			x82 = x02 + x12;
			x02 -= x12;
			x12 = 1108 * (x32 + x22);
			x22 = x12 - 3784 * x22;
			x32 = x12 + 1568 * x32;
			x12 = x42 + x62;
			x42 -= x62;
			x62 = x52 + x72;
			x52 -= x72;
			x72 = x82 + x32;
			x82 -= x32;
			x32 = x02 + x22;
			x02 -= x22;
			x22 = 181 * (x42 + x52) + 128 >> 8;
			x42 = 181 * (x42 - x52) + 128 >> 8;
			this.block[bp2] = x72 + x12 >> 8;
			this.block[bp2 + 1] = x32 + x22 >> 8;
			this.block[bp2 + 2] = x02 + x42 >> 8;
			this.block[bp2 + 3] = x82 + x62 >> 8;
			this.block[bp2 + 4] = x82 - x62 >> 8;
			this.block[bp2 + 5] = x02 - x42 >> 8;
			this.block[bp2 + 6] = x32 - x22 >> 8;
			this.block[bp2 + 7] = x72 - x12 >> 8;
		}
		var bp3 = 24;
		var x03;
		var x83;
		var x13 = this.block[bp3 + 4] << 11;
		var x23 = this.block[bp3 + 6];
		var x33 = this.block[bp3 + 2];
		var x43 = this.block[bp3 + 1];
		var x53 = this.block[bp3 + 7];
		var x63 = this.block[bp3 + 5];
		var x73 = this.block[bp3 + 3];
		if((x13 | x23 | x33 | x43 | x53 | x63 | x73) == 0) {
			var val21 = this.block[bp3 + 7] = this.block[bp3] << 3;
			var val22 = this.block[bp3 + 6] = val21;
			var val23 = this.block[bp3 + 5] = val22;
			var val24 = this.block[bp3 + 4] = val23;
			var val25 = this.block[bp3 + 3] = val24;
			var val26 = this.block[bp3 + 2] = val25;
			var val27 = this.block[bp3 + 1] = val26;
			this.block[bp3] = val27;
		} else {
			x03 = (this.block[bp3] << 11) + 128;
			x83 = 565 * (x43 + x53);
			x43 = x83 + 2276 * x43;
			x53 = x83 - 3406 * x53;
			x83 = 2408 * (x63 + x73);
			x63 = x83 - 799 * x63;
			x73 = x83 - 4017 * x73;
			x83 = x03 + x13;
			x03 -= x13;
			x13 = 1108 * (x33 + x23);
			x23 = x13 - 3784 * x23;
			x33 = x13 + 1568 * x33;
			x13 = x43 + x63;
			x43 -= x63;
			x63 = x53 + x73;
			x53 -= x73;
			x73 = x83 + x33;
			x83 -= x33;
			x33 = x03 + x23;
			x03 -= x23;
			x23 = 181 * (x43 + x53) + 128 >> 8;
			x43 = 181 * (x43 - x53) + 128 >> 8;
			this.block[bp3] = x73 + x13 >> 8;
			this.block[bp3 + 1] = x33 + x23 >> 8;
			this.block[bp3 + 2] = x03 + x43 >> 8;
			this.block[bp3 + 3] = x83 + x63 >> 8;
			this.block[bp3 + 4] = x83 - x63 >> 8;
			this.block[bp3 + 5] = x03 - x43 >> 8;
			this.block[bp3 + 6] = x33 - x23 >> 8;
			this.block[bp3 + 7] = x73 - x13 >> 8;
		}
		var bp4 = 32;
		var x04;
		var x84;
		var x14 = this.block[bp4 + 4] << 11;
		var x24 = this.block[bp4 + 6];
		var x34 = this.block[bp4 + 2];
		var x44 = this.block[bp4 + 1];
		var x54 = this.block[bp4 + 7];
		var x64 = this.block[bp4 + 5];
		var x74 = this.block[bp4 + 3];
		if((x14 | x24 | x34 | x44 | x54 | x64 | x74) == 0) {
			var val28 = this.block[bp4 + 7] = this.block[bp4] << 3;
			var val29 = this.block[bp4 + 6] = val28;
			var val30 = this.block[bp4 + 5] = val29;
			var val31 = this.block[bp4 + 4] = val30;
			var val32 = this.block[bp4 + 3] = val31;
			var val33 = this.block[bp4 + 2] = val32;
			var val34 = this.block[bp4 + 1] = val33;
			this.block[bp4] = val34;
		} else {
			x04 = (this.block[bp4] << 11) + 128;
			x84 = 565 * (x44 + x54);
			x44 = x84 + 2276 * x44;
			x54 = x84 - 3406 * x54;
			x84 = 2408 * (x64 + x74);
			x64 = x84 - 799 * x64;
			x74 = x84 - 4017 * x74;
			x84 = x04 + x14;
			x04 -= x14;
			x14 = 1108 * (x34 + x24);
			x24 = x14 - 3784 * x24;
			x34 = x14 + 1568 * x34;
			x14 = x44 + x64;
			x44 -= x64;
			x64 = x54 + x74;
			x54 -= x74;
			x74 = x84 + x34;
			x84 -= x34;
			x34 = x04 + x24;
			x04 -= x24;
			x24 = 181 * (x44 + x54) + 128 >> 8;
			x44 = 181 * (x44 - x54) + 128 >> 8;
			this.block[bp4] = x74 + x14 >> 8;
			this.block[bp4 + 1] = x34 + x24 >> 8;
			this.block[bp4 + 2] = x04 + x44 >> 8;
			this.block[bp4 + 3] = x84 + x64 >> 8;
			this.block[bp4 + 4] = x84 - x64 >> 8;
			this.block[bp4 + 5] = x04 - x44 >> 8;
			this.block[bp4 + 6] = x34 - x24 >> 8;
			this.block[bp4 + 7] = x74 - x14 >> 8;
		}
		var bp5 = 40;
		var x05;
		var x85;
		var x15 = this.block[bp5 + 4] << 11;
		var x25 = this.block[bp5 + 6];
		var x35 = this.block[bp5 + 2];
		var x45 = this.block[bp5 + 1];
		var x55 = this.block[bp5 + 7];
		var x65 = this.block[bp5 + 5];
		var x75 = this.block[bp5 + 3];
		if((x15 | x25 | x35 | x45 | x55 | x65 | x75) == 0) {
			var val35 = this.block[bp5 + 7] = this.block[bp5] << 3;
			var val36 = this.block[bp5 + 6] = val35;
			var val37 = this.block[bp5 + 5] = val36;
			var val38 = this.block[bp5 + 4] = val37;
			var val39 = this.block[bp5 + 3] = val38;
			var val40 = this.block[bp5 + 2] = val39;
			var val41 = this.block[bp5 + 1] = val40;
			this.block[bp5] = val41;
		} else {
			x05 = (this.block[bp5] << 11) + 128;
			x85 = 565 * (x45 + x55);
			x45 = x85 + 2276 * x45;
			x55 = x85 - 3406 * x55;
			x85 = 2408 * (x65 + x75);
			x65 = x85 - 799 * x65;
			x75 = x85 - 4017 * x75;
			x85 = x05 + x15;
			x05 -= x15;
			x15 = 1108 * (x35 + x25);
			x25 = x15 - 3784 * x25;
			x35 = x15 + 1568 * x35;
			x15 = x45 + x65;
			x45 -= x65;
			x65 = x55 + x75;
			x55 -= x75;
			x75 = x85 + x35;
			x85 -= x35;
			x35 = x05 + x25;
			x05 -= x25;
			x25 = 181 * (x45 + x55) + 128 >> 8;
			x45 = 181 * (x45 - x55) + 128 >> 8;
			this.block[bp5] = x75 + x15 >> 8;
			this.block[bp5 + 1] = x35 + x25 >> 8;
			this.block[bp5 + 2] = x05 + x45 >> 8;
			this.block[bp5 + 3] = x85 + x65 >> 8;
			this.block[bp5 + 4] = x85 - x65 >> 8;
			this.block[bp5 + 5] = x05 - x45 >> 8;
			this.block[bp5 + 6] = x35 - x25 >> 8;
			this.block[bp5 + 7] = x75 - x15 >> 8;
		}
		var bp6 = 48;
		var x06;
		var x86;
		var x16 = this.block[bp6 + 4] << 11;
		var x26 = this.block[bp6 + 6];
		var x36 = this.block[bp6 + 2];
		var x46 = this.block[bp6 + 1];
		var x56 = this.block[bp6 + 7];
		var x66 = this.block[bp6 + 5];
		var x76 = this.block[bp6 + 3];
		if((x16 | x26 | x36 | x46 | x56 | x66 | x76) == 0) {
			var val42 = this.block[bp6 + 7] = this.block[bp6] << 3;
			var val43 = this.block[bp6 + 6] = val42;
			var val44 = this.block[bp6 + 5] = val43;
			var val45 = this.block[bp6 + 4] = val44;
			var val46 = this.block[bp6 + 3] = val45;
			var val47 = this.block[bp6 + 2] = val46;
			var val48 = this.block[bp6 + 1] = val47;
			this.block[bp6] = val48;
		} else {
			x06 = (this.block[bp6] << 11) + 128;
			x86 = 565 * (x46 + x56);
			x46 = x86 + 2276 * x46;
			x56 = x86 - 3406 * x56;
			x86 = 2408 * (x66 + x76);
			x66 = x86 - 799 * x66;
			x76 = x86 - 4017 * x76;
			x86 = x06 + x16;
			x06 -= x16;
			x16 = 1108 * (x36 + x26);
			x26 = x16 - 3784 * x26;
			x36 = x16 + 1568 * x36;
			x16 = x46 + x66;
			x46 -= x66;
			x66 = x56 + x76;
			x56 -= x76;
			x76 = x86 + x36;
			x86 -= x36;
			x36 = x06 + x26;
			x06 -= x26;
			x26 = 181 * (x46 + x56) + 128 >> 8;
			x46 = 181 * (x46 - x56) + 128 >> 8;
			this.block[bp6] = x76 + x16 >> 8;
			this.block[bp6 + 1] = x36 + x26 >> 8;
			this.block[bp6 + 2] = x06 + x46 >> 8;
			this.block[bp6 + 3] = x86 + x66 >> 8;
			this.block[bp6 + 4] = x86 - x66 >> 8;
			this.block[bp6 + 5] = x06 - x46 >> 8;
			this.block[bp6 + 6] = x36 - x26 >> 8;
			this.block[bp6 + 7] = x76 - x16 >> 8;
		}
		var bp7 = 56;
		var x07;
		var x87;
		var x17 = this.block[bp7 + 4] << 11;
		var x27 = this.block[bp7 + 6];
		var x37 = this.block[bp7 + 2];
		var x47 = this.block[bp7 + 1];
		var x57 = this.block[bp7 + 7];
		var x67 = this.block[bp7 + 5];
		var x77 = this.block[bp7 + 3];
		if((x17 | x27 | x37 | x47 | x57 | x67 | x77) == 0) {
			var val49 = this.block[bp7 + 7] = this.block[bp7] << 3;
			var val50 = this.block[bp7 + 6] = val49;
			var val51 = this.block[bp7 + 5] = val50;
			var val52 = this.block[bp7 + 4] = val51;
			var val53 = this.block[bp7 + 3] = val52;
			var val54 = this.block[bp7 + 2] = val53;
			var val55 = this.block[bp7 + 1] = val54;
			this.block[bp7] = val55;
		} else {
			x07 = (this.block[bp7] << 11) + 128;
			x87 = 565 * (x47 + x57);
			x47 = x87 + 2276 * x47;
			x57 = x87 - 3406 * x57;
			x87 = 2408 * (x67 + x77);
			x67 = x87 - 799 * x67;
			x77 = x87 - 4017 * x77;
			x87 = x07 + x17;
			x07 -= x17;
			x17 = 1108 * (x37 + x27);
			x27 = x17 - 3784 * x27;
			x37 = x17 + 1568 * x37;
			x17 = x47 + x67;
			x47 -= x67;
			x67 = x57 + x77;
			x57 -= x77;
			x77 = x87 + x37;
			x87 -= x37;
			x37 = x07 + x27;
			x07 -= x27;
			x27 = 181 * (x47 + x57) + 128 >> 8;
			x47 = 181 * (x47 - x57) + 128 >> 8;
			this.block[bp7] = x77 + x17 >> 8;
			this.block[bp7 + 1] = x37 + x27 >> 8;
			this.block[bp7 + 2] = x07 + x47 >> 8;
			this.block[bp7 + 3] = x87 + x67 >> 8;
			this.block[bp7 + 4] = x87 - x67 >> 8;
			this.block[bp7 + 5] = x07 - x47 >> 8;
			this.block[bp7 + 6] = x37 - x27 >> 8;
			this.block[bp7 + 7] = x77 - x17 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x08;
		var x88;
		var x18 = this.block[32] << 8;
		var x28 = this.block[48];
		var x38 = this.block[16];
		var x48 = this.block[8];
		var x58 = this.block[56];
		var x68 = this.block[40];
		var x78 = this.block[24];
		if((x18 | x28 | x38 | x48 | x58 | x68 | x78) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x18 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
		} else {
			x08 = (this.block[0] << 8) + 8192;
			x88 = 565 * (x48 + x58) + 4;
			x48 = x88 + 2276 * x48 >> 3;
			x58 = x88 - 3406 * x58 >> 3;
			x88 = 2408 * (x68 + x78) + 4;
			x68 = x88 - 799 * x68 >> 3;
			x78 = x88 - 4017 * x78 >> 3;
			x88 = x08 + x18;
			x08 -= x18;
			x18 = 1108 * (x38 + x28) + 4;
			x28 = x18 - 3784 * x28 >> 3;
			x38 = x18 + 1568 * x38 >> 3;
			x18 = x48 + x68;
			x48 -= x68;
			x68 = x58 + x78;
			x58 -= x78;
			x78 = x88 + x38;
			x88 -= x38;
			x38 = x08 + x28;
			x08 -= x28;
			x28 = 181 * (x48 + x58) + 128 >> 8;
			x48 = 181 * (x48 - x58) + 128 >> 8;
			var x9 = (x78 + x18 >> 14) + 128;
			out.b[po1] = x9 < 0 ? 0 : x9 > 255 ? 255 : x9;
			po1 += stride;
			var x10 = (x38 + x28 >> 14) + 128;
			out.b[po1] = x10 < 0 ? 0 : x10 > 255 ? 255 : x10;
			po1 += stride;
			var x19 = (x08 + x48 >> 14) + 128;
			out.b[po1] = x19 < 0 ? 0 : x19 > 255 ? 255 : x19;
			po1 += stride;
			var x20 = (x88 + x68 >> 14) + 128;
			out.b[po1] = x20 < 0 ? 0 : x20 > 255 ? 255 : x20;
			po1 += stride;
			var x29 = (x88 - x68 >> 14) + 128;
			out.b[po1] = x29 < 0 ? 0 : x29 > 255 ? 255 : x29;
			po1 += stride;
			var x30 = (x08 - x48 >> 14) + 128;
			out.b[po1] = x30 < 0 ? 0 : x30 > 255 ? 255 : x30;
			po1 += stride;
			var x39 = (x38 - x28 >> 14) + 128;
			out.b[po1] = x39 < 0 ? 0 : x39 > 255 ? 255 : x39;
			po1 += stride;
			var x40 = (x78 - x18 >> 14) + 128;
			out.b[po1] = x40 < 0 ? 0 : x40 > 255 ? 255 : x40;
		}
		var po2 = 1 + po;
		var stride1 = c.stride;
		var x09;
		var x89;
		var x110 = this.block[33] << 8;
		var x210 = this.block[49];
		var x310 = this.block[17];
		var x49 = this.block[9];
		var x59 = this.block[57];
		var x69 = this.block[41];
		var x79 = this.block[25];
		if((x110 | x210 | x310 | x49 | x59 | x69 | x79) == 0) {
			var x50 = (this.block[1] + 32 >> 6) + 128;
			x110 = x50 < 0 ? 0 : x50 > 255 ? 255 : x50;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
		} else {
			x09 = (this.block[1] << 8) + 8192;
			x89 = 565 * (x49 + x59) + 4;
			x49 = x89 + 2276 * x49 >> 3;
			x59 = x89 - 3406 * x59 >> 3;
			x89 = 2408 * (x69 + x79) + 4;
			x69 = x89 - 799 * x69 >> 3;
			x79 = x89 - 4017 * x79 >> 3;
			x89 = x09 + x110;
			x09 -= x110;
			x110 = 1108 * (x310 + x210) + 4;
			x210 = x110 - 3784 * x210 >> 3;
			x310 = x110 + 1568 * x310 >> 3;
			x110 = x49 + x69;
			x49 -= x69;
			x69 = x59 + x79;
			x59 -= x79;
			x79 = x89 + x310;
			x89 -= x310;
			x310 = x09 + x210;
			x09 -= x210;
			x210 = 181 * (x49 + x59) + 128 >> 8;
			x49 = 181 * (x49 - x59) + 128 >> 8;
			var x60 = (x79 + x110 >> 14) + 128;
			out.b[po2] = x60 < 0 ? 0 : x60 > 255 ? 255 : x60;
			po2 += stride1;
			var x70 = (x310 + x210 >> 14) + 128;
			out.b[po2] = x70 < 0 ? 0 : x70 > 255 ? 255 : x70;
			po2 += stride1;
			var x80 = (x09 + x49 >> 14) + 128;
			out.b[po2] = x80 < 0 ? 0 : x80 > 255 ? 255 : x80;
			po2 += stride1;
			var x90 = (x89 + x69 >> 14) + 128;
			out.b[po2] = x90 < 0 ? 0 : x90 > 255 ? 255 : x90;
			po2 += stride1;
			var x91 = (x89 - x69 >> 14) + 128;
			out.b[po2] = x91 < 0 ? 0 : x91 > 255 ? 255 : x91;
			po2 += stride1;
			var x92 = (x09 - x49 >> 14) + 128;
			out.b[po2] = x92 < 0 ? 0 : x92 > 255 ? 255 : x92;
			po2 += stride1;
			var x93 = (x310 - x210 >> 14) + 128;
			out.b[po2] = x93 < 0 ? 0 : x93 > 255 ? 255 : x93;
			po2 += stride1;
			var x94 = (x79 - x110 >> 14) + 128;
			out.b[po2] = x94 < 0 ? 0 : x94 > 255 ? 255 : x94;
		}
		var po3 = 2 + po;
		var stride2 = c.stride;
		var x010;
		var x810;
		var x111 = this.block[34] << 8;
		var x211 = this.block[50];
		var x311 = this.block[18];
		var x410 = this.block[10];
		var x510 = this.block[58];
		var x610 = this.block[42];
		var x710 = this.block[26];
		if((x111 | x211 | x311 | x410 | x510 | x610 | x710) == 0) {
			var x95 = (this.block[2] + 32 >> 6) + 128;
			x111 = x95 < 0 ? 0 : x95 > 255 ? 255 : x95;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
		} else {
			x010 = (this.block[2] << 8) + 8192;
			x810 = 565 * (x410 + x510) + 4;
			x410 = x810 + 2276 * x410 >> 3;
			x510 = x810 - 3406 * x510 >> 3;
			x810 = 2408 * (x610 + x710) + 4;
			x610 = x810 - 799 * x610 >> 3;
			x710 = x810 - 4017 * x710 >> 3;
			x810 = x010 + x111;
			x010 -= x111;
			x111 = 1108 * (x311 + x211) + 4;
			x211 = x111 - 3784 * x211 >> 3;
			x311 = x111 + 1568 * x311 >> 3;
			x111 = x410 + x610;
			x410 -= x610;
			x610 = x510 + x710;
			x510 -= x710;
			x710 = x810 + x311;
			x810 -= x311;
			x311 = x010 + x211;
			x010 -= x211;
			x211 = 181 * (x410 + x510) + 128 >> 8;
			x410 = 181 * (x410 - x510) + 128 >> 8;
			var x96 = (x710 + x111 >> 14) + 128;
			out.b[po3] = x96 < 0 ? 0 : x96 > 255 ? 255 : x96;
			po3 += stride2;
			var x97 = (x311 + x211 >> 14) + 128;
			out.b[po3] = x97 < 0 ? 0 : x97 > 255 ? 255 : x97;
			po3 += stride2;
			var x98 = (x010 + x410 >> 14) + 128;
			out.b[po3] = x98 < 0 ? 0 : x98 > 255 ? 255 : x98;
			po3 += stride2;
			var x99 = (x810 + x610 >> 14) + 128;
			out.b[po3] = x99 < 0 ? 0 : x99 > 255 ? 255 : x99;
			po3 += stride2;
			var x100 = (x810 - x610 >> 14) + 128;
			out.b[po3] = x100 < 0 ? 0 : x100 > 255 ? 255 : x100;
			po3 += stride2;
			var x101 = (x010 - x410 >> 14) + 128;
			out.b[po3] = x101 < 0 ? 0 : x101 > 255 ? 255 : x101;
			po3 += stride2;
			var x102 = (x311 - x211 >> 14) + 128;
			out.b[po3] = x102 < 0 ? 0 : x102 > 255 ? 255 : x102;
			po3 += stride2;
			var x103 = (x710 - x111 >> 14) + 128;
			out.b[po3] = x103 < 0 ? 0 : x103 > 255 ? 255 : x103;
		}
		var po4 = 3 + po;
		var stride3 = c.stride;
		var x011;
		var x811;
		var x112 = this.block[35] << 8;
		var x212 = this.block[51];
		var x312 = this.block[19];
		var x411 = this.block[11];
		var x511 = this.block[59];
		var x611 = this.block[43];
		var x711 = this.block[27];
		if((x112 | x212 | x312 | x411 | x511 | x611 | x711) == 0) {
			var x104 = (this.block[3] + 32 >> 6) + 128;
			x112 = x104 < 0 ? 0 : x104 > 255 ? 255 : x104;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
		} else {
			x011 = (this.block[3] << 8) + 8192;
			x811 = 565 * (x411 + x511) + 4;
			x411 = x811 + 2276 * x411 >> 3;
			x511 = x811 - 3406 * x511 >> 3;
			x811 = 2408 * (x611 + x711) + 4;
			x611 = x811 - 799 * x611 >> 3;
			x711 = x811 - 4017 * x711 >> 3;
			x811 = x011 + x112;
			x011 -= x112;
			x112 = 1108 * (x312 + x212) + 4;
			x212 = x112 - 3784 * x212 >> 3;
			x312 = x112 + 1568 * x312 >> 3;
			x112 = x411 + x611;
			x411 -= x611;
			x611 = x511 + x711;
			x511 -= x711;
			x711 = x811 + x312;
			x811 -= x312;
			x312 = x011 + x212;
			x011 -= x212;
			x212 = 181 * (x411 + x511) + 128 >> 8;
			x411 = 181 * (x411 - x511) + 128 >> 8;
			var x105 = (x711 + x112 >> 14) + 128;
			out.b[po4] = x105 < 0 ? 0 : x105 > 255 ? 255 : x105;
			po4 += stride3;
			var x106 = (x312 + x212 >> 14) + 128;
			out.b[po4] = x106 < 0 ? 0 : x106 > 255 ? 255 : x106;
			po4 += stride3;
			var x107 = (x011 + x411 >> 14) + 128;
			out.b[po4] = x107 < 0 ? 0 : x107 > 255 ? 255 : x107;
			po4 += stride3;
			var x108 = (x811 + x611 >> 14) + 128;
			out.b[po4] = x108 < 0 ? 0 : x108 > 255 ? 255 : x108;
			po4 += stride3;
			var x109 = (x811 - x611 >> 14) + 128;
			out.b[po4] = x109 < 0 ? 0 : x109 > 255 ? 255 : x109;
			po4 += stride3;
			var x113 = (x011 - x411 >> 14) + 128;
			out.b[po4] = x113 < 0 ? 0 : x113 > 255 ? 255 : x113;
			po4 += stride3;
			var x114 = (x312 - x212 >> 14) + 128;
			out.b[po4] = x114 < 0 ? 0 : x114 > 255 ? 255 : x114;
			po4 += stride3;
			var x115 = (x711 - x112 >> 14) + 128;
			out.b[po4] = x115 < 0 ? 0 : x115 > 255 ? 255 : x115;
		}
		var po5 = 4 + po;
		var stride4 = c.stride;
		var x012;
		var x812;
		var x116 = this.block[36] << 8;
		var x213 = this.block[52];
		var x313 = this.block[20];
		var x412 = this.block[12];
		var x512 = this.block[60];
		var x612 = this.block[44];
		var x712 = this.block[28];
		if((x116 | x213 | x313 | x412 | x512 | x612 | x712) == 0) {
			var x117 = (this.block[4] + 32 >> 6) + 128;
			x116 = x117 < 0 ? 0 : x117 > 255 ? 255 : x117;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
		} else {
			x012 = (this.block[4] << 8) + 8192;
			x812 = 565 * (x412 + x512) + 4;
			x412 = x812 + 2276 * x412 >> 3;
			x512 = x812 - 3406 * x512 >> 3;
			x812 = 2408 * (x612 + x712) + 4;
			x612 = x812 - 799 * x612 >> 3;
			x712 = x812 - 4017 * x712 >> 3;
			x812 = x012 + x116;
			x012 -= x116;
			x116 = 1108 * (x313 + x213) + 4;
			x213 = x116 - 3784 * x213 >> 3;
			x313 = x116 + 1568 * x313 >> 3;
			x116 = x412 + x612;
			x412 -= x612;
			x612 = x512 + x712;
			x512 -= x712;
			x712 = x812 + x313;
			x812 -= x313;
			x313 = x012 + x213;
			x012 -= x213;
			x213 = 181 * (x412 + x512) + 128 >> 8;
			x412 = 181 * (x412 - x512) + 128 >> 8;
			var x118 = (x712 + x116 >> 14) + 128;
			out.b[po5] = x118 < 0 ? 0 : x118 > 255 ? 255 : x118;
			po5 += stride4;
			var x119 = (x313 + x213 >> 14) + 128;
			out.b[po5] = x119 < 0 ? 0 : x119 > 255 ? 255 : x119;
			po5 += stride4;
			var x120 = (x012 + x412 >> 14) + 128;
			out.b[po5] = x120 < 0 ? 0 : x120 > 255 ? 255 : x120;
			po5 += stride4;
			var x121 = (x812 + x612 >> 14) + 128;
			out.b[po5] = x121 < 0 ? 0 : x121 > 255 ? 255 : x121;
			po5 += stride4;
			var x122 = (x812 - x612 >> 14) + 128;
			out.b[po5] = x122 < 0 ? 0 : x122 > 255 ? 255 : x122;
			po5 += stride4;
			var x123 = (x012 - x412 >> 14) + 128;
			out.b[po5] = x123 < 0 ? 0 : x123 > 255 ? 255 : x123;
			po5 += stride4;
			var x124 = (x313 - x213 >> 14) + 128;
			out.b[po5] = x124 < 0 ? 0 : x124 > 255 ? 255 : x124;
			po5 += stride4;
			var x125 = (x712 - x116 >> 14) + 128;
			out.b[po5] = x125 < 0 ? 0 : x125 > 255 ? 255 : x125;
		}
		var po6 = 5 + po;
		var stride5 = c.stride;
		var x013;
		var x813;
		var x126 = this.block[37] << 8;
		var x214 = this.block[53];
		var x314 = this.block[21];
		var x413 = this.block[13];
		var x513 = this.block[61];
		var x613 = this.block[45];
		var x713 = this.block[29];
		if((x126 | x214 | x314 | x413 | x513 | x613 | x713) == 0) {
			var x127 = (this.block[5] + 32 >> 6) + 128;
			x126 = x127 < 0 ? 0 : x127 > 255 ? 255 : x127;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
		} else {
			x013 = (this.block[5] << 8) + 8192;
			x813 = 565 * (x413 + x513) + 4;
			x413 = x813 + 2276 * x413 >> 3;
			x513 = x813 - 3406 * x513 >> 3;
			x813 = 2408 * (x613 + x713) + 4;
			x613 = x813 - 799 * x613 >> 3;
			x713 = x813 - 4017 * x713 >> 3;
			x813 = x013 + x126;
			x013 -= x126;
			x126 = 1108 * (x314 + x214) + 4;
			x214 = x126 - 3784 * x214 >> 3;
			x314 = x126 + 1568 * x314 >> 3;
			x126 = x413 + x613;
			x413 -= x613;
			x613 = x513 + x713;
			x513 -= x713;
			x713 = x813 + x314;
			x813 -= x314;
			x314 = x013 + x214;
			x013 -= x214;
			x214 = 181 * (x413 + x513) + 128 >> 8;
			x413 = 181 * (x413 - x513) + 128 >> 8;
			var x128 = (x713 + x126 >> 14) + 128;
			out.b[po6] = x128 < 0 ? 0 : x128 > 255 ? 255 : x128;
			po6 += stride5;
			var x129 = (x314 + x214 >> 14) + 128;
			out.b[po6] = x129 < 0 ? 0 : x129 > 255 ? 255 : x129;
			po6 += stride5;
			var x130 = (x013 + x413 >> 14) + 128;
			out.b[po6] = x130 < 0 ? 0 : x130 > 255 ? 255 : x130;
			po6 += stride5;
			var x131 = (x813 + x613 >> 14) + 128;
			out.b[po6] = x131 < 0 ? 0 : x131 > 255 ? 255 : x131;
			po6 += stride5;
			var x132 = (x813 - x613 >> 14) + 128;
			out.b[po6] = x132 < 0 ? 0 : x132 > 255 ? 255 : x132;
			po6 += stride5;
			var x133 = (x013 - x413 >> 14) + 128;
			out.b[po6] = x133 < 0 ? 0 : x133 > 255 ? 255 : x133;
			po6 += stride5;
			var x134 = (x314 - x214 >> 14) + 128;
			out.b[po6] = x134 < 0 ? 0 : x134 > 255 ? 255 : x134;
			po6 += stride5;
			var x135 = (x713 - x126 >> 14) + 128;
			out.b[po6] = x135 < 0 ? 0 : x135 > 255 ? 255 : x135;
		}
		var po7 = 6 + po;
		var stride6 = c.stride;
		var x014;
		var x814;
		var x136 = this.block[38] << 8;
		var x215 = this.block[54];
		var x315 = this.block[22];
		var x414 = this.block[14];
		var x514 = this.block[62];
		var x614 = this.block[46];
		var x714 = this.block[30];
		if((x136 | x215 | x315 | x414 | x514 | x614 | x714) == 0) {
			var x137 = (this.block[6] + 32 >> 6) + 128;
			x136 = x137 < 0 ? 0 : x137 > 255 ? 255 : x137;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
		} else {
			x014 = (this.block[6] << 8) + 8192;
			x814 = 565 * (x414 + x514) + 4;
			x414 = x814 + 2276 * x414 >> 3;
			x514 = x814 - 3406 * x514 >> 3;
			x814 = 2408 * (x614 + x714) + 4;
			x614 = x814 - 799 * x614 >> 3;
			x714 = x814 - 4017 * x714 >> 3;
			x814 = x014 + x136;
			x014 -= x136;
			x136 = 1108 * (x315 + x215) + 4;
			x215 = x136 - 3784 * x215 >> 3;
			x315 = x136 + 1568 * x315 >> 3;
			x136 = x414 + x614;
			x414 -= x614;
			x614 = x514 + x714;
			x514 -= x714;
			x714 = x814 + x315;
			x814 -= x315;
			x315 = x014 + x215;
			x014 -= x215;
			x215 = 181 * (x414 + x514) + 128 >> 8;
			x414 = 181 * (x414 - x514) + 128 >> 8;
			var x138 = (x714 + x136 >> 14) + 128;
			out.b[po7] = x138 < 0 ? 0 : x138 > 255 ? 255 : x138;
			po7 += stride6;
			var x139 = (x315 + x215 >> 14) + 128;
			out.b[po7] = x139 < 0 ? 0 : x139 > 255 ? 255 : x139;
			po7 += stride6;
			var x140 = (x014 + x414 >> 14) + 128;
			out.b[po7] = x140 < 0 ? 0 : x140 > 255 ? 255 : x140;
			po7 += stride6;
			var x141 = (x814 + x614 >> 14) + 128;
			out.b[po7] = x141 < 0 ? 0 : x141 > 255 ? 255 : x141;
			po7 += stride6;
			var x142 = (x814 - x614 >> 14) + 128;
			out.b[po7] = x142 < 0 ? 0 : x142 > 255 ? 255 : x142;
			po7 += stride6;
			var x143 = (x014 - x414 >> 14) + 128;
			out.b[po7] = x143 < 0 ? 0 : x143 > 255 ? 255 : x143;
			po7 += stride6;
			var x144 = (x315 - x215 >> 14) + 128;
			out.b[po7] = x144 < 0 ? 0 : x144 > 255 ? 255 : x144;
			po7 += stride6;
			var x145 = (x714 - x136 >> 14) + 128;
			out.b[po7] = x145 < 0 ? 0 : x145 > 255 ? 255 : x145;
		}
		var po8 = 7 + po;
		var stride7 = c.stride;
		var x015;
		var x815;
		var x146 = this.block[39] << 8;
		var x216 = this.block[55];
		var x316 = this.block[23];
		var x415 = this.block[15];
		var x515 = this.block[63];
		var x615 = this.block[47];
		var x715 = this.block[31];
		if((x146 | x216 | x316 | x415 | x515 | x615 | x715) == 0) {
			var x147 = (this.block[7] + 32 >> 6) + 128;
			x146 = x147 < 0 ? 0 : x147 > 255 ? 255 : x147;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
		} else {
			x015 = (this.block[7] << 8) + 8192;
			x815 = 565 * (x415 + x515) + 4;
			x415 = x815 + 2276 * x415 >> 3;
			x515 = x815 - 3406 * x515 >> 3;
			x815 = 2408 * (x615 + x715) + 4;
			x615 = x815 - 799 * x615 >> 3;
			x715 = x815 - 4017 * x715 >> 3;
			x815 = x015 + x146;
			x015 -= x146;
			x146 = 1108 * (x316 + x216) + 4;
			x216 = x146 - 3784 * x216 >> 3;
			x316 = x146 + 1568 * x316 >> 3;
			x146 = x415 + x615;
			x415 -= x615;
			x615 = x515 + x715;
			x515 -= x715;
			x715 = x815 + x316;
			x815 -= x316;
			x316 = x015 + x216;
			x015 -= x216;
			x216 = 181 * (x415 + x515) + 128 >> 8;
			x415 = 181 * (x415 - x515) + 128 >> 8;
			var x148 = (x715 + x146 >> 14) + 128;
			out.b[po8] = x148 < 0 ? 0 : x148 > 255 ? 255 : x148;
			po8 += stride7;
			var x149 = (x316 + x216 >> 14) + 128;
			out.b[po8] = x149 < 0 ? 0 : x149 > 255 ? 255 : x149;
			po8 += stride7;
			var x150 = (x015 + x415 >> 14) + 128;
			out.b[po8] = x150 < 0 ? 0 : x150 > 255 ? 255 : x150;
			po8 += stride7;
			var x151 = (x815 + x615 >> 14) + 128;
			out.b[po8] = x151 < 0 ? 0 : x151 > 255 ? 255 : x151;
			po8 += stride7;
			var x152 = (x815 - x615 >> 14) + 128;
			out.b[po8] = x152 < 0 ? 0 : x152 > 255 ? 255 : x152;
			po8 += stride7;
			var x153 = (x015 - x415 >> 14) + 128;
			out.b[po8] = x153 < 0 ? 0 : x153 > 255 ? 255 : x153;
			po8 += stride7;
			var x154 = (x316 - x216 >> 14) + 128;
			out.b[po8] = x154 < 0 ? 0 : x154 > 255 ? 255 : x154;
			po8 += stride7;
			var x155 = (x715 - x146 >> 14) + 128;
			out.b[po8] = x155 < 0 ? 0 : x155 > 255 ? 255 : x155;
		}
	}
	,notSupported: function() {
		throw new js__$Boot_HaxeError("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		if(this.size < 2) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		if(this.length < 4 + 2 * this.ncomp) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			if(this.bytes.b[this.pos] != c.cid) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			if((this.bytes.b[this.pos + 1] & 236) != 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			if(this.size < 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count1 = this.length;
		this.pos += count1;
		this.size -= count1;
		this.length -= count1;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g2 = 0;
			var _g3 = this.ncomp;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var c1 = this.comps[i1];
				var _g21 = 0;
				var _g31 = c1.ssy;
				while(_g21 < _g31) {
					var sby = _g21++;
					var _g22 = 0;
					var _g32 = c1.ssx;
					while(_g22 < _g32) {
						var sbx = _g22++;
						this.njDecodeBlock(c1,(mby * c1.ssy + sby) * c1.stride + mbx * c1.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i2 = r;
				if((i2 & 65528) != 65488 || (i2 & 7) != nextrst) {
					throw new js__$Boot_HaxeError("Invalid JPEG file");
				}
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var this1 = cout;
		var lout = this1;
		var this2 = c.pixels;
		var lin = this2;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g11 = xmax;
			while(_g2 < _g11) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var this1 = out;
		var cout = this1;
		var this2 = c.pixels;
		var cin = this2;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g11 = c.height - 2;
			while(_g2 < _g11) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var this1 = c.pixels;
		var lin = this1;
		var pout = 0;
		var this2 = out;
		var lout = this2;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g11 = c.width;
			while(_g2 < _g11) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var this1 = this.comps[0].pixels;
			var py = this1;
			var this2 = this.comps[1].pixels;
			var pcb = this2;
			var this3 = this.comps[2].pixels;
			var pcr = this3;
			var this4 = pixels;
			var pix = this4;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g2 = 0;
			var _g3 = this.height;
			while(_g2 < _g3) {
				var yy = _g2++;
				var _g21 = 0;
				var _g31 = this.width;
				while(_g21 < _g31) {
					var x = _g21++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw new js__$Boot_HaxeError("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw new js__$Boot_HaxeError("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw new js__$Boot_HaxeError("Invalid JPEG file");
		}
		_hx_loop1: while(true) {
			if(this.size < 2 || this.bytes.b[this.pos] != 255) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			if(this.size < 0) {
				throw new js__$Boot_HaxeError("Invalid JPEG file");
			}
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw new js__$Boot_HaxeError("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw new js__$Boot_HaxeError("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				if(this.size < 2) {
					throw new js__$Boot_HaxeError("Invalid JPEG file");
				}
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				if(this.length > this.size) {
					throw new js__$Boot_HaxeError("Invalid JPEG file");
				}
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				if(this.size < 0) {
					throw new js__$Boot_HaxeError("Invalid JPEG file");
				}
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				if(this.size < 0) {
					throw new js__$Boot_HaxeError("Invalid JPEG file");
				}
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw new js__$Boot_HaxeError("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					if(this.size < 2) {
						throw new js__$Boot_HaxeError("Invalid JPEG file");
					}
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					if(this.length > this.size) {
						throw new js__$Boot_HaxeError("Invalid JPEG file");
					}
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					if(this.size < 0) {
						throw new js__$Boot_HaxeError("Invalid JPEG file");
					}
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					if(this.size < 0) {
						throw new js__$Boot_HaxeError("Invalid JPEG file");
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxd_res_SoundFormat = $hxEnums["hxd.res.SoundFormat"] = { __ename__ : true, __constructs__ : ["Wav","Mp3","OggVorbis"]
	,Wav: {_hx_index:0,__enum__:"hxd.res.SoundFormat",toString:$estr}
	,Mp3: {_hx_index:1,__enum__:"hxd.res.SoundFormat",toString:$estr}
	,OggVorbis: {_hx_index:2,__enum__:"hxd.res.SoundFormat",toString:$estr}
};
hxd_res_SoundFormat.__empty_constructs__ = [hxd_res_SoundFormat.Wav,hxd_res_SoundFormat.Mp3,hxd_res_SoundFormat.OggVorbis];
var hxd_res_Sound = function(entry) {
	this.lastPlay = 0.;
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Sound"] = hxd_res_Sound;
hxd_res_Sound.__name__ = "hxd.res.Sound";
hxd_res_Sound.supportedFormat = function(fmt) {
	switch(fmt._hx_index) {
	case 0:case 1:
		return true;
	case 2:
		return false;
	}
};
hxd_res_Sound.startWorker = function() {
	return false;
};
hxd_res_Sound.__super__ = hxd_res_Resource;
hxd_res_Sound.prototype = $extend(hxd_res_Resource.prototype,{
	getData: function() {
		if(this.data != null) {
			return this.data;
		}
		var bytes = this.entry.getBytes();
		switch(bytes.b[0]) {
		case 73:case 255:
			this.data = new hxd_snd_Mp3Data(bytes);
			break;
		case 79:
			throw new js__$Boot_HaxeError("OGG format requires -lib stb_ogg_sound (for " + this.entry.get_path() + ")");
		case 82:
			this.data = new hxd_snd_WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw new js__$Boot_HaxeError("Unsupported sound format " + this.entry.get_path());
		}
		if(hxd_res_Sound.ENABLE_AUTO_WATCH) {
			this.watch($bind(this,this.watchCallb));
		}
		return this.data;
	}
	,dispose: function() {
		this.stop();
		this.data = null;
	}
	,stop: function() {
		if(this.channel != null) {
			this.channel.stop();
			this.channel = null;
		}
	}
	,play: function(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = Date.now() / 1000;
		this.channel = hxd_snd_Manager.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	,watchCallb: function() {
		var old = this.data;
		this.data = null;
		var data = this.getData();
		if(old != null) {
			if(old.channels != data.channels || old.samples != data.samples || old.sampleFormat != data.sampleFormat || old.samplingRate != data.samplingRate) {
				var manager = hxd_snd_Manager.get();
				var ch = manager.getAll(this);
				while(ch.hasNext()) {
					var ch1 = ch.next();
					ch1.duration = data.get_duration();
					ch1.set_position(ch1.position);
				}
			}
		}
	}
	,__class__: hxd_res_Sound
});
var hxd_snd_ChannelBase = function() {
	this.volume = 1.;
	this.bindedEffects = [];
	this.effects = [];
	this.mute = false;
	this.priority = 0.;
};
$hxClasses["hxd.snd.ChannelBase"] = hxd_snd_ChannelBase;
hxd_snd_ChannelBase.__name__ = "hxd.snd.ChannelBase";
hxd_snd_ChannelBase.prototype = {
	getEffect: function(etype) {
		if(this.effects == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var e1 = js_Boot.__downcastCheck(e,etype) ? e : null;
			if(e1 != null) {
				return e1;
			}
		}
		return null;
	}
	,set_volume: function(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	,fadeTo: function(volume,time,onEnd) {
		if(time == null) {
			time = 1.;
		}
		this.currentFade = { start : Date.now() / 1000, duration : time, startVolume : this.volume, targetVolume : volume, onEnd : onEnd};
	}
	,updateCurrentVolume: function(now) {
		if(this.currentFade != null) {
			var f = this.currentFade;
			var dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	,addEffect: function(e) {
		if(e == null) {
			throw new js__$Boot_HaxeError("Can't add null effect");
		}
		if(this.effects.indexOf(e) >= 0) {
			throw new js__$Boot_HaxeError("effect already added on this channel");
		}
		this.effects.push(e);
		return e;
	}
	,removeEffect: function(e) {
		HxOverrides.remove(this.effects,e);
	}
	,__class__: hxd_snd_ChannelBase
	,__properties__: {set_volume:"set_volume"}
};
var hxd_snd_Channel = function() {
	this.queue = [];
	this.positionChanged = false;
	this.isLoading = false;
	this.isVirtual = false;
	this.lastStamp = 0.0;
	this.audibleVolume = 1.0;
	this.allowVirtual = true;
	this.loop = false;
	this.pause = false;
	this.position = 0.0;
	hxd_snd_ChannelBase.call(this);
	this.id = hxd_snd_Channel.ID++;
};
$hxClasses["hxd.snd.Channel"] = hxd_snd_Channel;
hxd_snd_Channel.__name__ = "hxd.snd.Channel";
hxd_snd_Channel.__super__ = hxd_snd_ChannelBase;
hxd_snd_Channel.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	onEnd: function() {
	}
	,set_position: function(v) {
		this.lastStamp = Date.now() / 1000;
		this.positionChanged = true;
		if(v > this.duration) {
			v = this.duration;
		} else if(v < 0) {
			v = 0;
		}
		return this.position = v;
	}
	,set_pause: function(v) {
		if(!v) {
			this.lastStamp = Date.now() / 1000;
		}
		return this.pause = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.pause && this.currentFade != null) {
			var f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		hxd_snd_ChannelBase.prototype.updateCurrentVolume.call(this,now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
			var _g2 = 0;
			var _g3 = this.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				this.currentVolume *= e1.getVolumeModifier();
			}
		}
	}
	,calcAudibleVolume: function(now) {
		this.updateCurrentVolume(now);
		this.audibleVolume = this.currentVolume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
			var _g2 = 0;
			var _g3 = this.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				this.audibleVolume = e1.applyAudibleVolumeModifier(this.audibleVolume);
			}
		}
	}
	,queueSound: function(sound) {
		this.queue.push(sound);
	}
	,stop: function() {
		if(this.manager != null) {
			this.manager.releaseChannel(this);
		}
	}
	,isReleased: function() {
		return this.manager == null;
	}
	,__class__: hxd_snd_Channel
	,__properties__: $extend(hxd_snd_ChannelBase.prototype.__properties__,{set_pause:"set_pause",set_position:"set_position"})
});
var hxd_snd_ChannelGroup = function(name) {
	hxd_snd_ChannelBase.call(this);
	this.name = name;
};
$hxClasses["hxd.snd.ChannelGroup"] = hxd_snd_ChannelGroup;
hxd_snd_ChannelGroup.__name__ = "hxd.snd.ChannelGroup";
hxd_snd_ChannelGroup.__super__ = hxd_snd_ChannelBase;
hxd_snd_ChannelGroup.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	__class__: hxd_snd_ChannelGroup
});
var hxd_snd_SampleFormat = $hxEnums["hxd.snd.SampleFormat"] = { __ename__ : true, __constructs__ : ["UI8","I16","F32"]
	,UI8: {_hx_index:0,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,I16: {_hx_index:1,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,F32: {_hx_index:2,__enum__:"hxd.snd.SampleFormat",toString:$estr}
};
hxd_snd_SampleFormat.__empty_constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
var hxd_snd_Data = function() { };
$hxClasses["hxd.snd.Data"] = hxd_snd_Data;
hxd_snd_Data.__name__ = "hxd.snd.Data";
hxd_snd_Data.formatBytes = function(format) {
	switch(format._hx_index) {
	case 0:
		return 1;
	case 1:
		return 2;
	case 2:
		return 4;
	}
};
hxd_snd_Data.prototype = {
	isLoading: function() {
		return false;
	}
	,decode: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			var s = "sampleStart = " + sampleStart;
			s += " sampleCount = " + sampleCount;
			s += " outPos = " + outPos;
			s += " bpp = " + bpp;
			s += " out.length = " + out.length;
			throw new js__$Boot_HaxeError(s);
		}
		if(sampleStart + sampleCount >= this.samples) {
			var count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	,resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		var newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		var bpp = this.getBytesPerSample();
		var data = new haxe_io_Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		var out = channels * newSamples;
		var out1;
		switch(format._hx_index) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format,channels,this.samples);
		var data1 = new hxd_snd_WavData(null);
		data1.channels = channels;
		data1.samples = newSamples;
		data1.sampleFormat = format;
		data1.samplingRate = rate;
		data1.rawData = out2;
		return data1;
	}
	,resampleBuffer: function(out,outPos,input,inPos,rate,format,channels,samples) {
		var bpp = this.getBytesPerSample();
		var newSamples = Math.ceil(samples * (rate / this.samplingRate));
		var resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd_snd_SampleFormat.I16 && format == hxd_snd_SampleFormat.I16 && channels == 1 && this.channels == 2) {
			var r = inPos;
			var w = outPos;
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				var sl = input.getUInt16(r);
				r += 2;
				var sr = input.getUInt16(r);
				r += 2;
				var s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) == 0) {
						sl = sl;
					} else {
						sl |= -65536;
					}
					if((sr & 32768) == 0) {
						sr = sr;
					} else {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		var srcChannels = this.channels;
		var commonChannels = channels < srcChannels ? channels : srcChannels;
		var extraChannels = channels - commonChannels;
		var sval = 0.;
		var ival = 0;
		var _g2 = 0;
		var _g11 = newSamples;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var targetSample = i1 / (newSamples - 1) * (samples - 1);
			var isample = targetSample | 0;
			var offset = targetSample - isample;
			var srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			var _g3 = 0;
			var _g12 = commonChannels;
			while(_g3 < _g12) {
				var k = _g3++;
				var sval1;
				var sval2 = 0.;
				switch(this.sampleFormat._hx_index) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					var v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						var v1 = input.getUInt16(srcPos + bpp);
						sval2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				sval = resample ? sval1 + offset * (sval2 - sval1) : sval1;
				switch(format._hx_index) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			var _g21 = 0;
			var _g31 = extraChannels;
			while(_g21 < _g31) {
				var i2 = _g21++;
				switch(format._hx_index) {
				case 0:
					out.b[outPos++] = ival;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,getBytesPerSample: function() {
		var tmp;
		switch(this.sampleFormat._hx_index) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	,load: function(onEnd) {
		onEnd();
	}
	,get_duration: function() {
		return this.samples / this.samplingRate;
	}
	,__class__: hxd_snd_Data
	,__properties__: {get_duration:"get_duration"}
};
var hxd_snd_EffectDriver = function() {
};
$hxClasses["hxd.snd.EffectDriver"] = hxd_snd_EffectDriver;
hxd_snd_EffectDriver.__name__ = "hxd.snd.EffectDriver";
hxd_snd_EffectDriver.prototype = {
	acquire: function() {
	}
	,release: function() {
	}
	,update: function(e) {
	}
	,bind: function(e,source) {
	}
	,apply: function(e,source) {
	}
	,unbind: function(e,source) {
	}
	,__class__: hxd_snd_EffectDriver
};
var hxd_snd_DriverFeature = $hxEnums["hxd.snd.DriverFeature"] = { __ename__ : true, __constructs__ : ["MasterVolume"]
	,MasterVolume: {_hx_index:0,__enum__:"hxd.snd.DriverFeature",toString:$estr}
};
hxd_snd_DriverFeature.__empty_constructs__ = [hxd_snd_DriverFeature.MasterVolume];
var hxd_snd_Driver = function() { };
$hxClasses["hxd.snd.Driver"] = hxd_snd_Driver;
hxd_snd_Driver.__name__ = "hxd.snd.Driver";
hxd_snd_Driver.__isInterface__ = true;
hxd_snd_Driver.prototype = {
	__class__: hxd_snd_Driver
};
var hxd_snd_Effect = function(type) {
	this.refs = 0;
	this.priority = 0;
	this.retainTime = 0.0;
	this.lastStamp = 0.0;
	var managerDriver = hxd_snd_Manager.get().driver;
	if(managerDriver != null) {
		this.driver = managerDriver.getEffectDriver(type);
	}
};
$hxClasses["hxd.snd.Effect"] = hxd_snd_Effect;
hxd_snd_Effect.__name__ = "hxd.snd.Effect";
hxd_snd_Effect.prototype = {
	applyAudibleVolumeModifier: function(v) {
		return v;
	}
	,getVolumeModifier: function() {
		return 1;
	}
	,__class__: hxd_snd_Effect
};
var hxd_snd_Listener = function() {
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector(1,0,0);
	this.up = new h3d_Vector(0,0,1);
};
$hxClasses["hxd.snd.Listener"] = hxd_snd_Listener;
hxd_snd_Listener.__name__ = "hxd.snd.Listener";
hxd_snd_Listener.prototype = {
	syncCamera: function(cam) {
		var _this = this.position;
		var v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this1 = this.direction;
		var x = cam.target.x - cam.pos.x;
		var y = cam.target.y - cam.pos.y;
		var z = cam.target.z - cam.pos.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = z;
		_this1.w = 1.;
		this.direction.normalize();
		var _this2 = this.up;
		var v1 = cam.up;
		_this2.x = v1.x;
		_this2.y = v1.y;
		_this2.z = v1.z;
		_this2.w = v1.w;
	}
	,__class__: hxd_snd_Listener
};
var hxd_snd_Source = function(driver) {
	this.start = 0;
	this.playing = false;
	this.volume = -1.0;
	this.id = hxd_snd_Source.ID++;
	this.handle = driver.createSource();
	this.buffers = [];
};
$hxClasses["hxd.snd.Source"] = hxd_snd_Source;
hxd_snd_Source.__name__ = "hxd.snd.Source";
hxd_snd_Source.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroySource(this.handle);
	}
	,__class__: hxd_snd_Source
};
var hxd_snd_Buffer = function(driver) {
	this.end = 0;
	this.handle = driver.createBuffer();
	this.refs = 0;
	this.lastStop = Date.now() / 1000;
};
$hxClasses["hxd.snd.Buffer"] = hxd_snd_Buffer;
hxd_snd_Buffer.__name__ = "hxd.snd.Buffer";
hxd_snd_Buffer.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroyBuffer(this.handle);
	}
	,__class__: hxd_snd_Buffer
};
var hxd_snd_Manager = function() {
	this.suspended = false;
	this.timeOffset = 0.;
	try {
		this.driver = new hxd_snd_webaudio_Driver();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(typeof(e1) == "string") {
			var e2 = e1;
			this.driver = null;
		} else {
			throw e;
		}
	}
	this.masterVolume = 1.0;
	this.hasMasterVolume = this.driver == null ? true : this.driver.hasFeature(hxd_snd_DriverFeature.MasterVolume);
	this.masterSoundGroup = new hxd_snd_SoundGroup("master");
	this.masterChannelGroup = new hxd_snd_ChannelGroup("master");
	this.listener = new hxd_snd_Listener();
	this.soundBufferMap = new haxe_ds_StringMap();
	this.soundBufferKeys = [];
	this.freeStreamBuffers = [];
	this.effectGC = [];
	this.soundBufferCount = 0;
	if(this.driver != null) {
		this.sources = [];
		var _g = 0;
		var _g1 = hxd_snd_Manager.MAX_SOURCES;
		while(_g < _g1) {
			var i = _g++;
			this.sources.push(new hxd_snd_Source(this.driver));
		}
	}
	this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(24));
	this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * 2));
};
$hxClasses["hxd.snd.Manager"] = hxd_snd_Manager;
hxd_snd_Manager.__name__ = "hxd.snd.Manager";
hxd_snd_Manager.get = function() {
	if(hxd_snd_Manager.instance == null) {
		hxd_snd_Manager.instance = new hxd_snd_Manager();
		hxd_snd_Manager.instance.updateEvent = haxe_MainLoop.add(($_=hxd_snd_Manager.instance,$bind($_,$_.update)));
		hxd_snd_Manager.instance.updateEvent.isBlocking = false;
	}
	return hxd_snd_Manager.instance;
};
hxd_snd_Manager.regEffect = function(list,e) {
	var l = list;
	while(l != null) {
		if(l == e) {
			return list;
		}
		l = l.next;
	}
	e.next = list;
	return e;
};
hxd_snd_Manager.prototype = {
	getTmpBytes: function(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	,getResampleBytes: function(size) {
		if(this.resampleBytes.length < size) {
			this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.resampleBytes;
	}
	,stopAll: function() {
		while(this.channels != null) this.channels.stop();
	}
	,stopAllNotLooping: function() {
		var c = this.channels;
		while(c != null) {
			var n = c.next;
			if(!c.loop) {
				c.stop();
			}
			c = n;
		}
	}
	,stopByName: function(name) {
		var c = this.channels;
		while(c != null) {
			var n = c.next;
			if(c.soundGroup != null && c.soundGroup.name == name) {
				c.stop();
			}
			c = n;
		}
	}
	,getAll: function(sound) {
		var ch = this.channels;
		var result = [];
		while(ch != null) {
			if(ch.sound == sound) {
				result.push(ch);
			}
			ch = ch.next;
		}
		return new hxd_impl_ArrayIterator_$hxd_$snd_$Channel(result);
	}
	,cleanCache: function() {
		var i = 0;
		while(i < this.soundBufferKeys.length) {
			var k = this.soundBufferKeys[i];
			var _this = this.soundBufferMap;
			var b = __map_reserved[k] != null ? _this.getReserved(k) : _this.h[k];
			++i;
			if(b.refs > 0) {
				continue;
			}
			this.soundBufferMap.remove(k);
			HxOverrides.remove(this.soundBufferKeys,k);
			--i;
			b.dispose();
			--this.soundBufferCount;
		}
	}
	,dispose: function() {
		this.stopAll();
		if(this.driver != null) {
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				s.dispose();
			}
			var _this = this.soundBufferMap;
			var b = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(b.hasNext()) {
				var b1 = b.next();
				b1.dispose();
			}
			var _g2 = 0;
			var _g3 = this.freeStreamBuffers;
			while(_g2 < _g3.length) {
				var b2 = _g3[_g2];
				++_g2;
				b2.dispose();
			}
			var _g4 = 0;
			var _g5 = this.effectGC;
			while(_g4 < _g5.length) {
				var e = _g5[_g4];
				++_g4;
				e.driver.release();
			}
			this.driver.dispose();
		}
		this.sources = null;
		this.soundBufferMap = null;
		this.soundBufferKeys = null;
		this.freeStreamBuffers = null;
		this.effectGC = null;
		this.updateEvent.stop();
		hxd_snd_Manager.instance = null;
	}
	,play: function(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		var sdat = sound.getData();
		if(sdat.samples == 0) {
			throw new js__$Boot_HaxeError(Std.string(sound) + " has no samples");
		}
		var c = new hxd_snd_Channel();
		c.sound = sound;
		c.duration = sdat.get_duration();
		c.manager = this;
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.isLoading = sdat.isLoading();
		c.isVirtual = this.driver == null;
		this.channels = c;
		return c;
	}
	,updateVirtualChannels: function(now) {
		var c = this.channels;
		while(c != null) {
			if(c.pause || !c.isVirtual || c.isLoading) {
				c = c.next;
				continue;
			}
			var _g = c;
			var a = now - c.lastStamp;
			_g.set_position(_g.position + (a < 0.0 ? 0.0 : a));
			c.lastStamp = now;
			var next = c.next;
			while(c.position >= c.duration) {
				var _g1 = c;
				_g1.set_position(_g1.position - c.duration);
				c.onEnd();
				if(next != null && next.manager == null) {
					next = null;
				}
				if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
				} else if(!c.loop) {
					this.releaseChannel(c);
					break;
				}
			}
			c = next;
		}
	}
	,update: function() {
		if(this.timeOffset != 0) {
			var c = this.channels;
			while(c != null) {
				c.lastStamp += this.timeOffset;
				if(c.currentFade != null) {
					c.currentFade.start += this.timeOffset;
				}
				c = c.next;
			}
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g11 = s.buffers;
				while(_g2 < _g11.length) {
					var b = _g11[_g2];
					++_g2;
					b.lastStop += this.timeOffset;
				}
			}
			this.timeOffset = 0;
		}
		this.now = Date.now() / 1000;
		if(this.driver == null) {
			this.updateVirtualChannels(this.now);
			return;
		}
		var _g3 = 0;
		var _g12 = this.sources;
		while(_g3 < _g12.length) {
			var s1 = _g12[_g3];
			++_g3;
			var c1 = s1.channel;
			if(c1 == null) {
				continue;
			}
			if(c1.positionChanged) {
				this.releaseSource(s1);
				continue;
			}
			var lastBuffer = null;
			var count = this.driver.getProcessedBuffers(s1.handle);
			var _g4 = 0;
			var _g13 = count;
			while(_g4 < _g13) {
				var i = _g4++;
				var b1 = this.unqueueBuffer(s1);
				if(b1 == null) {
					continue;
				}
				lastBuffer = b1;
				if(b1.isEnd) {
					c1.sound = b1.sound;
					c1.duration = b1.sound.getData().get_duration();
					c1.set_position(c1.duration);
					c1.positionChanged = false;
					c1.onEnd();
					s1.start = 0;
				}
			}
			if(s1.buffers.length == 0) {
				if(!lastBuffer.isEnd) {
					c1.set_position((lastBuffer.start + lastBuffer.samples) / lastBuffer.sampleRate);
					this.releaseSource(s1);
				} else if(c1.queue.length > 0) {
					c1.sound = c1.queue[0];
					c1.duration = c1.sound.getData().get_duration();
					c1.set_position(0);
					this.releaseSource(s1);
				} else if(c1.loop) {
					c1.set_position(0);
					this.releaseSource(s1);
				} else {
					this.releaseChannel(c1);
				}
				continue;
			}
			c1.sound = s1.buffers[0].sound;
			c1.duration = c1.sound.getData().get_duration();
			var playedSamples = this.driver.getPlayedSampleCount(s1.handle);
			if(playedSamples < 0) {
				haxe_Log.trace("playedSamples should positive : bug in driver",{ fileName : "hxd/snd/Manager.hx", lineNumber : 360, className : "hxd.snd.Manager", methodName : "update"});
				playedSamples = 0;
			}
			c1.set_position((s1.start + playedSamples) / s1.buffers[0].sampleRate);
			c1.positionChanged = false;
			if(s1.buffers.length < hxd_snd_Manager.BUFFER_QUEUE_LENGTH) {
				var b2 = s1.buffers[s1.buffers.length - 1];
				if(!b2.isEnd) {
					this.queueBuffer(s1,b2.sound,b2.start + b2.samples);
				} else if(c1.queue.length > 0) {
					var snd = c1.queue[0];
					if(this.queueBuffer(s1,snd,0)) {
						c1.queue.shift();
					}
				} else if(c1.loop) {
					this.queueBuffer(s1,b2.sound,0);
				}
			}
		}
		var c2 = this.channels;
		while(c2 != null) {
			c2.calcAudibleVolume(this.now);
			if(c2.isLoading && !c2.sound.getData().isLoading()) {
				c2.isLoading = false;
			}
			c2.isVirtual = this.suspended || c2.pause || c2.mute || c2.channelGroup.mute || c2.allowVirtual && c2.audibleVolume < hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD || c2.isLoading;
			c2 = c2.next;
		}
		var list = this.channels;
		var cmp = $bind(this,this.sortChannel);
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g5 = 0;
					var _g14 = insize;
					while(_g5 < _g14) {
						var i1 = _g5++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.channels = tmp;
		var audibleCount = 0;
		var c3 = this.channels;
		while(c3 != null && !c3.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c3.isVirtual = true;
			} else if(c3.soundGroup.maxAudible >= 0) {
				if(c3.soundGroup.lastUpdate != this.now) {
					c3.soundGroup.lastUpdate = this.now;
					c3.soundGroup.numAudible = 0;
				}
				if(++c3.soundGroup.numAudible > c3.soundGroup.maxAudible) {
					c3.isVirtual = true;
					--audibleCount;
				}
			}
			c3 = c3.next;
		}
		var _g21 = 0;
		var _g31 = this.sources;
		while(_g21 < _g31.length) {
			var s2 = _g31[_g21];
			++_g21;
			if(s2.channel == null || !s2.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s2);
		}
		var c4 = this.channels;
		while(c4 != null) {
			if(c4.source != null || c4.isVirtual) {
				c4 = c4.next;
				continue;
			}
			var s3 = null;
			var _g41 = 0;
			var _g51 = this.sources;
			while(_g41 < _g51.length) {
				var s21 = _g51[_g41];
				++_g41;
				if(s21.channel == null) {
					s3 = s21;
					break;
				}
			}
			if(s3 == null) {
				throw new js__$Boot_HaxeError("could not get a source");
			}
			s3.channel = c4;
			c4.source = s3;
			this.checkTargetFormat(c4.sound.getData(),c4.soundGroup.mono);
			s3.start = Math.floor(c4.position * this.targetRate);
			if(s3.start < 0) {
				s3.start = 0;
			}
			this.queueBuffer(s3,c4.sound,s3.start);
			c4.positionChanged = false;
			c4 = c4.next;
		}
		var usedEffects = null;
		var volume = this.hasMasterVolume ? 1. : this.masterVolume;
		var _g42 = 0;
		var _g52 = this.sources;
		while(_g42 < _g52.length) {
			var s4 = _g52[_g42];
			++_g42;
			var c5 = s4.channel;
			if(c5 == null) {
				continue;
			}
			var v = c5.currentVolume * volume;
			if(s4.volume != v) {
				if(v < 0) {
					v = 0;
				}
				s4.volume = v;
				this.driver.setSourceVolume(s4.handle,v);
			}
			if(!s4.playing) {
				this.driver.playSource(s4.handle);
				s4.playing = true;
			}
			var i2 = c5.bindedEffects.length;
			while(--i2 >= 0) {
				var e1 = c5.bindedEffects[i2];
				if(c5.effects.indexOf(e1) < 0 && c5.channelGroup.effects.indexOf(e1) < 0) {
					this.unbindEffect(c5,s4,e1);
				}
			}
			var _g43 = 0;
			var _g53 = c5.channelGroup.effects;
			while(_g43 < _g53.length) {
				var e2 = _g53[_g43];
				++_g43;
				if(c5.bindedEffects.indexOf(e2) < 0) {
					this.bindEffect(c5,s4,e2);
				}
			}
			var _g6 = 0;
			var _g7 = c5.effects;
			while(_g6 < _g7.length) {
				var e3 = _g7[_g6];
				++_g6;
				if(c5.bindedEffects.indexOf(e3) < 0) {
					this.bindEffect(c5,s4,e3);
				}
			}
			var _g8 = 0;
			var _g9 = c5.bindedEffects;
			while(_g8 < _g9.length) {
				var e4 = _g9[_g8];
				++_g8;
				usedEffects = hxd_snd_Manager.regEffect(usedEffects,e4);
			}
		}
		var list1 = usedEffects;
		var cmp1 = $bind(this,this.sortEffect);
		if(list1 == null) {
			usedEffects = null;
		} else {
			var insize1 = 1;
			var nmerges1;
			var psize1 = 0;
			var qsize1 = 0;
			var p1;
			var q1;
			var e5;
			var tail1;
			while(true) {
				p1 = list1;
				list1 = null;
				tail1 = null;
				nmerges1 = 0;
				while(p1 != null) {
					++nmerges1;
					q1 = p1;
					psize1 = 0;
					var _g10 = 0;
					var _g15 = insize1;
					while(_g10 < _g15) {
						var i3 = _g10++;
						++psize1;
						q1 = q1.next;
						if(q1 == null) {
							break;
						}
					}
					qsize1 = insize1;
					while(psize1 > 0 || qsize1 > 0 && q1 != null) {
						if(psize1 == 0) {
							e5 = q1;
							q1 = q1.next;
							--qsize1;
						} else if(qsize1 == 0 || q1 == null || cmp1(p1,q1) <= 0) {
							e5 = p1;
							p1 = p1.next;
							--psize1;
						} else {
							e5 = q1;
							q1 = q1.next;
							--qsize1;
						}
						if(tail1 != null) {
							tail1.next = e5;
						} else {
							list1 = e5;
						}
						tail1 = e5;
					}
					p1 = q1;
				}
				tail1.next = null;
				if(nmerges1 <= 1) {
					break;
				}
				insize1 *= 2;
			}
			usedEffects = list1;
		}
		var e6 = usedEffects;
		while(e6 != null) {
			e6.driver.update(e6);
			e6 = e6.next;
		}
		var _g61 = 0;
		var _g71 = this.sources;
		while(_g61 < _g71.length) {
			var s5 = _g71[_g61];
			++_g61;
			var c6 = s5.channel;
			if(c6 == null) {
				continue;
			}
			var _g62 = 0;
			var _g72 = c6.bindedEffects;
			while(_g62 < _g72.length) {
				var e7 = _g72[_g62];
				++_g62;
				e7.driver.apply(e7,s5.handle);
			}
		}
		var _g81 = 0;
		var _g91 = this.effectGC;
		while(_g81 < _g91.length) {
			var e8 = _g91[_g81];
			++_g81;
			if(this.now - e8.lastStamp > e8.retainTime) {
				e8.driver.release();
				HxOverrides.remove(this.effectGC,e8);
				break;
			}
		}
		this.updateVirtualChannels(this.now);
		this.listener.direction.normalize();
		this.listener.up.normalize();
		if(this.hasMasterVolume) {
			this.driver.setMasterVolume(this.masterVolume);
		}
		this.driver.setListenerParams(this.listener.position,this.listener.direction,this.listener.up,this.listener.velocity);
		this.driver.update();
		if(this.soundBufferCount >= hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE) {
			var now = Date.now() / 1000;
			var i4 = 0;
			while(i4 < this.soundBufferKeys.length) {
				var k = this.soundBufferKeys[i4];
				var _this = this.soundBufferMap;
				var b3 = __map_reserved[k] != null ? _this.getReserved(k) : _this.h[k];
				++i4;
				if(b3.refs > 0 || b3.lastStop + 60.0 > now) {
					continue;
				}
				this.soundBufferMap.remove(k);
				HxOverrides.remove(this.soundBufferKeys,k);
				--i4;
				b3.dispose();
				--this.soundBufferCount;
			}
		}
	}
	,progressiveDecodeBuffer: function(s,snd,start) {
		var data = snd.getData();
		var samples = Math.ceil(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT / hxd_snd_Manager.BUFFER_STREAM_SPLIT);
		if(s.streamStart != start || s.streamSound != snd) {
			s.streamSound = snd;
			s.streamStart = start;
			s.streamPos = start;
		}
		var end = start + hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(s.streamPos == end) {
			return true;
		}
		var bpp = data.getBytesPerSample();
		var reqSize = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * bpp;
		if(s.streamBuffer == null || s.streamBuffer.length < reqSize) {
			s.streamBuffer = new haxe_io_Bytes(new ArrayBuffer(reqSize));
			s.streamPos = start;
		}
		var remain = end - s.streamPos;
		if(remain > samples) {
			remain = samples;
		}
		data.decode(s.streamBuffer,(s.streamPos - start) * bpp,s.streamPos,remain);
		s.streamPos += remain;
		return s.streamPos == end;
	}
	,queueBuffer: function(s,snd,start) {
		var data = snd.getData();
		var sgroup = s.channel.soundGroup;
		var b = null;
		if(data.get_duration() <= hxd_snd_Manager.STREAM_DURATION) {
			b = this.getSoundBuffer(snd,sgroup);
			this.driver.queueBuffer(s.handle,b.handle,start,true);
		} else {
			if(s.buffers.length > 0 && hxd_snd_Manager.BUFFER_STREAM_SPLIT > 1 && !this.progressiveDecodeBuffer(s,snd,start)) {
				return false;
			}
			b = this.getStreamBuffer(s,snd,sgroup,start);
			this.driver.queueBuffer(s.handle,b.handle,0,b.isEnd);
		}
		s.buffers.push(b);
		return true;
	}
	,unqueueBuffer: function(s) {
		var b = s.buffers.shift();
		if(b == null) {
			return null;
		}
		this.driver.unqueueBuffer(s.handle,b.handle);
		if(b.isStream) {
			this.freeStreamBuffers.unshift(b);
		} else if(--b.refs == 0) {
			b.lastStop = Date.now() / 1000;
		}
		return b;
	}
	,bindEffect: function(c,s,e) {
		if(e.refs == 0 && !HxOverrides.remove(this.effectGC,e)) {
			e.driver.acquire();
		}
		++e.refs;
		e.driver.bind(e,s.handle);
		c.bindedEffects.push(e);
	}
	,unbindEffect: function(c,s,e) {
		e.driver.unbind(e,s.handle);
		HxOverrides.remove(c.bindedEffects,e);
		if(--e.refs == 0) {
			e.lastStamp = this.now;
			this.effectGC.push(e);
		}
	}
	,releaseSource: function(s) {
		if(s.channel != null) {
			var _g = 0;
			var _g1 = s.channel.bindedEffects.slice();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.unbindEffect(s.channel,s,e);
			}
			s.channel.bindedEffects = [];
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			this.driver.stopSource(s.handle);
			s.volume = -1.0;
		}
		while(s.buffers.length > 0) this.unqueueBuffer(s);
	}
	,checkTargetFormat: function(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		var tmp;
		switch(dat.sampleFormat._hx_index) {
		case 0:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 1:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		case 2:
			tmp = hxd_snd_SampleFormat.F32;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	,getSoundBuffer: function(snd,grp) {
		var _gthis = this;
		var data = snd.getData();
		var mono = grp.mono;
		var key = snd.entry.get_path();
		if(mono && data.channels != 1) {
			key += "mono";
		}
		var _this = this.soundBufferMap;
		var b = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = false;
			b.isEnd = true;
			b.sound = snd;
			data.load(function() {
				_gthis.fillSoundBuffer(b,data,mono);
			});
			var _this1 = this.soundBufferMap;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,b);
			} else {
				_this1.h[key] = b;
			}
			this.soundBufferKeys.push(key);
			++this.soundBufferCount;
		}
		++b.refs;
		return b;
	}
	,fillSoundBuffer: function(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		var length = dat.samples * dat.getBytesPerSample();
		var bytes = this.getTmpBytes(length);
		dat.decode(bytes,0,0,dat.samples);
		this.driver.setBufferData(buf.handle,bytes,length,this.targetFormat,this.targetChannels,this.targetRate);
		buf.sampleRate = this.targetRate;
		buf.samples = dat.samples;
	}
	,getStreamBuffer: function(src,snd,grp,start) {
		var data = snd.getData();
		var b = this.freeStreamBuffers.shift();
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = true;
		}
		var samples = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(start + samples >= data.samples) {
			samples = data.samples - start;
			b.isEnd = true;
		} else {
			b.isEnd = false;
		}
		b.sound = snd;
		b.samples = samples;
		b.start = start;
		var size = samples * data.getBytesPerSample();
		var bytes;
		if(src.streamSound == snd && src.streamStart == start) {
			while(!this.progressiveDecodeBuffer(src,snd,start)) {
			}
			bytes = src.streamBuffer;
		} else {
			bytes = this.getTmpBytes(size);
			data.decode(bytes,0,start,samples);
		}
		if(!this.checkTargetFormat(data,grp.mono)) {
			var size1 = Math.ceil(samples * (this.targetRate / data.samplingRate)) * this.targetChannels;
			var size2;
			switch(this.targetFormat._hx_index) {
			case 0:
				size2 = 1;
				break;
			case 1:
				size2 = 2;
				break;
			case 2:
				size2 = 4;
				break;
			}
			size = size1 * size2;
			var resampleBytes = this.getResampleBytes(size);
			data.resampleBuffer(resampleBytes,0,bytes,0,this.targetRate,this.targetFormat,this.targetChannels,samples);
			bytes = resampleBytes;
		}
		this.driver.setBufferData(b.handle,bytes,size,this.targetFormat,this.targetChannels,this.targetRate);
		b.sampleRate = this.targetRate;
		return b;
	}
	,sortChannel: function(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleVolume != b.audibleVolume) {
			if(a.audibleVolume < b.audibleVolume) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	,sortEffect: function(a,b) {
		return b.priority - a.priority;
	}
	,releaseChannel: function(c) {
		if(c.manager == null) {
			return;
		}
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			var prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		var _g = 0;
		var _g1 = c.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.manager = null;
		c.effects = null;
		c.bindedEffects = null;
		c.currentFade = null;
		var snd = c.sound;
		if(snd != null && snd.channel == c) {
			snd.channel = null;
		}
	}
	,__class__: hxd_snd_Manager
};
var hxd_snd_Mp3Data = function(bytes) {
	var mp = new format_mp3_Reader(new haxe_io_BytesInput(bytes)).read();
	this.samples = mp.sampleCount;
	var frame = mp.frames[0].data;
	var lame = -1;
	var _g = 0;
	var _g1 = frame.length - 24;
	while(_g < _g1) {
		var i = _g++;
		if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
			lame = i;
			break;
		}
	}
	if(lame >= 0) {
		var startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
		var start = startEnd >> 12;
		var end = startEnd & 4095;
		this.samples -= start + end + 1152;
	}
	var header = mp.frames[0].header;
	this.sampleFormat = hxd_snd_SampleFormat.F32;
	this.samplingRate = format_mp3_MPEG.srEnum2Num(header.samplingRate);
	this.channels = header.channelMode == format_mp3_ChannelMode.Mono ? 1 : 2;
	var ctx = hxd_snd_webaudio_Context.get();
	if(ctx == null) {
		return;
	}
	ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
	var decodedRate = ctx.sampleRate | 0;
	this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
	this.samplingRate = decodedRate;
};
$hxClasses["hxd.snd.Mp3Data"] = hxd_snd_Mp3Data;
hxd_snd_Mp3Data.__name__ = "hxd.snd.Mp3Data";
hxd_snd_Mp3Data.__super__ = hxd_snd_Data;
hxd_snd_Mp3Data.prototype = $extend(hxd_snd_Data.prototype,{
	isLoading: function() {
		return this.buffer == null;
	}
	,load: function(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	,processBuffer: function(buf) {
		var left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe_io_Bytes.ofData(left.buffer);
			return;
		}
		var right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		var join = new Float32Array(left.length * 2);
		var w = 0;
		var _g = 0;
		var _g1 = buf.length;
		while(_g < _g1) {
			var i = _g++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe_io_Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
	,__class__: hxd_snd_Mp3Data
});
var hxd_snd_SoundGroup = function(name) {
	this.name = name;
	this.maxAudible = -1;
	this.volume = 1;
	this.mono = false;
};
$hxClasses["hxd.snd.SoundGroup"] = hxd_snd_SoundGroup;
hxd_snd_SoundGroup.__name__ = "hxd.snd.SoundGroup";
hxd_snd_SoundGroup.prototype = {
	__class__: hxd_snd_SoundGroup
};
var hxd_snd_WavData = function(bytes) {
	if(bytes != null) {
		this.init(new format_wav_Reader(new haxe_io_BytesInput(bytes)).read());
	}
};
$hxClasses["hxd.snd.WavData"] = hxd_snd_WavData;
hxd_snd_WavData.__name__ = "hxd.snd.WavData";
hxd_snd_WavData.__super__ = hxd_snd_Data;
hxd_snd_WavData.prototype = $extend(hxd_snd_Data.prototype,{
	init: function(d) {
		var h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		var tmp;
		switch(h.bitsPerSample) {
		case 8:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_WavData
});
var hxd_snd_effect_LowPass = function() {
	hxd_snd_Effect.call(this,"lowpass");
	this.priority = 100;
	this.gainHF = 1.0;
};
$hxClasses["hxd.snd.effect.LowPass"] = hxd_snd_effect_LowPass;
hxd_snd_effect_LowPass.__name__ = "hxd.snd.effect.LowPass";
hxd_snd_effect_LowPass.__super__ = hxd_snd_Effect;
hxd_snd_effect_LowPass.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_LowPass
});
var hxd_snd_effect_Pitch = function(value) {
	if(value == null) {
		value = 1.0;
	}
	hxd_snd_Effect.call(this,"pitch");
	this.value = value;
};
$hxClasses["hxd.snd.effect.Pitch"] = hxd_snd_effect_Pitch;
hxd_snd_effect_Pitch.__name__ = "hxd.snd.effect.Pitch";
hxd_snd_effect_Pitch.__super__ = hxd_snd_Effect;
hxd_snd_effect_Pitch.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_Pitch
});
var hxd_snd_effect_Spatialization = function() {
	hxd_snd_Effect.call(this,"spatialization");
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector();
	this.referenceDistance = 1.0;
	this.rollOffFactor = 1.0;
};
$hxClasses["hxd.snd.effect.Spatialization"] = hxd_snd_effect_Spatialization;
hxd_snd_effect_Spatialization.__name__ = "hxd.snd.effect.Spatialization";
hxd_snd_effect_Spatialization.__super__ = hxd_snd_Effect;
hxd_snd_effect_Spatialization.prototype = $extend(hxd_snd_Effect.prototype,{
	getVolumeModifier: function() {
		if(this.fadeDistance == null) {
			return 1.;
		}
		var _this = hxd_snd_Manager.get().listener.position;
		var v = this.position;
		var dx = v.x - _this.x;
		var dy = v.y - _this.y;
		var dz = v.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		if(this.maxDistance != null) {
			dist -= this.maxDistance;
		} else {
			dist -= this.referenceDistance;
		}
		var volume = 1 - dist / this.fadeDistance;
		if(volume > 1) {
			volume = 1;
		}
		if(volume < 0) {
			volume = 0;
		}
		return volume;
	}
	,applyAudibleVolumeModifier: function(v) {
		var _this = hxd_snd_Manager.get().listener.position;
		var v1 = this.position;
		var dx = v1.x - _this.x;
		var dy = v1.y - _this.y;
		var dz = v1.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		var b = this.referenceDistance;
		dist = dist < b ? b : dist;
		if(this.maxDistance != null) {
			var b1 = this.maxDistance;
			dist = dist > b1 ? b1 : dist;
		}
		var volume = this.referenceDistance / (this.referenceDistance + this.rollOffFactor * (dist - this.referenceDistance));
		return v * volume;
	}
	,__class__: hxd_snd_effect_Spatialization
});
var hxd_snd_webaudio_BufferHandle = function() {
};
$hxClasses["hxd.snd.webaudio.BufferHandle"] = hxd_snd_webaudio_BufferHandle;
hxd_snd_webaudio_BufferHandle.__name__ = "hxd.snd.webaudio.BufferHandle";
hxd_snd_webaudio_BufferHandle.prototype = {
	__class__: hxd_snd_webaudio_BufferHandle
};
var hxd_snd_webaudio_SourceHandle = function() {
	this.buffers = [];
	this.sampleOffset = 0;
	this.pitch = 1;
	this.firstPlay = true;
};
$hxClasses["hxd.snd.webaudio.SourceHandle"] = hxd_snd_webaudio_SourceHandle;
hxd_snd_webaudio_SourceHandle.__name__ = "hxd.snd.webaudio.SourceHandle";
hxd_snd_webaudio_SourceHandle.prototype = {
	updateDestination: function() {
		this.destination = this.gain;
		if(this.lowPass != null) {
			this.lowPass.connect(this.destination);
			this.destination = this.lowPass;
		}
		if(this.panner != null) {
			this.panner.connect(this.destination);
			this.destination = this.panner;
		}
		this.gain.connect(hxd_snd_webaudio_Context.destination);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.node != null) {
				b.restart(this);
			}
		}
	}
	,applyPitch: function() {
		var t = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			t = b.readjust(t,this);
		}
	}
	,__class__: hxd_snd_webaudio_SourceHandle
};
var hxd_snd_webaudio_BufferPlayback = function() {
};
$hxClasses["hxd.snd.webaudio.BufferPlayback"] = hxd_snd_webaudio_BufferPlayback;
hxd_snd_webaudio_BufferPlayback.__name__ = "hxd.snd.webaudio.BufferPlayback";
hxd_snd_webaudio_BufferPlayback.prototype = {
	get_currentSample: function() {
		if(this.consumed) {
			return this.buffer.samples;
		}
		if(this.node == null || !this.dirty || this.node.context.currentTime < this.lastTime) {
			return 0;
		}
		this.lastSamples += Math.floor((this.node.context.currentTime - this.lastTime) * this.buffer.inst.sampleRate * this.node.playbackRate.value);
		this.lastTime = this.node.context.currentTime;
		return this.lastSamples;
	}
	,set: function(buf,grainOffset) {
		this.buffer = buf;
		this.offset = isNaN(grainOffset) ? 0 : grainOffset;
		this.dirty = false;
		this.consumed = false;
		this.starts = 0;
		this.ends = 0;
	}
	,start: function(ctx,source,time) {
		this.dirty = true;
		this.consumed = false;
		if(this.node != null) {
			this.stop();
		}
		if(source.firstPlay && this.buffer.samples > 10) {
			source.firstPlay = false;
			var _g = [];
			var _g1 = 0;
			var _g2 = this.buffer.inst.numberOfChannels;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.buffer.inst.getChannelData(i));
			}
			var channels = _g;
			var j = 0;
			var fade = 0.;
			while(j < 10) {
				var i1 = 0;
				while(i1 < channels.length) {
					channels[i1][j] *= fade;
					++i1;
				}
				++j;
				fade += 0.1;
				if(fade > 1) {
					fade = 1;
				}
			}
		}
		this.node = ctx.createBufferSource();
		this.node.buffer = this.buffer.inst;
		this.node.addEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.connect(source.destination);
		this.node.playbackRate.value = source.pitch;
		this.node.start(time,this.offset);
		this.lastSamples = 0;
		this.lastTime = time;
		this.starts = time;
		return this.ends = time + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,readjust: function(time,source) {
		if(this.consumed || this.node == null) {
			return this.ends;
		}
		var ctx = source.driver.ctx;
		var shiftTime = ctx.currentTime;
		this.node.playbackRate.setValueAtTime(source.pitch,shiftTime);
		var elapsed = shiftTime - this.starts;
		if(elapsed < 0) {
			return this.start(ctx,source,time == 0 ? shiftTime : time);
		}
		this.starts = shiftTime - elapsed / source.pitch;
		return this.ends = this.starts + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,restart: function(source) {
		if(this.consumed || this.node == null) {
			return;
		}
		var ctx = hxd_snd_webaudio_Context.get();
		if(ctx.currentTime > this.starts) {
			this.offset += (ctx.currentTime - this.starts) * source.pitch;
			this.start(ctx,source,ctx.currentTime);
		} else {
			this.start(ctx,source,this.starts);
		}
	}
	,stop: function(immediate) {
		if(immediate == null) {
			immediate = true;
		}
		if(this.node != null) {
			this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
			if(immediate) {
				this.node.disconnect();
			} else {
				this.node.stop();
			}
			this.node = null;
		}
	}
	,onBufferConsumed: function(e) {
		this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.disconnect();
		this.node = null;
		this.consumed = true;
	}
	,clear: function() {
		this.buffer = null;
		this.node = null;
	}
	,__class__: hxd_snd_webaudio_BufferPlayback
	,__properties__: {get_currentSample:"get_currentSample"}
};
var hxd_snd_webaudio_Context = function() { };
$hxClasses["hxd.snd.webaudio.Context"] = hxd_snd_webaudio_Context;
hxd_snd_webaudio_Context.__name__ = "hxd.snd.webaudio.Context";
hxd_snd_webaudio_Context.get = function() {
	if(hxd_snd_webaudio_Context.ctx == null) {
		try {
			hxd_snd_webaudio_Context.ctx = new AudioContext();
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			try {
				hxd_snd_webaudio_Context.ctx = new window.webkitAudioContext();
			} catch( e2 ) {
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				hxd_snd_webaudio_Context.ctx = null;
			}
		}
		if(hxd_snd_webaudio_Context.ctx == null) {
			throw new js__$Boot_HaxeError("WebAudio API not available in this browser!");
		}
		if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
			hxd_snd_webaudio_Context.waitForPageInput();
		}
		hxd_snd_webaudio_Context.ctx.addEventListener("statechange",function(_) {
			if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
				hxd_snd_webaudio_Context.waitForPageInput();
			}
		});
		hxd_snd_webaudio_Context.bufferPool = [];
		hxd_snd_webaudio_Context.gainPool = [];
		hxd_snd_webaudio_Context.masterGain = hxd_snd_webaudio_Context.ctx.createGain();
		hxd_snd_webaudio_Context.masterGain.connect(hxd_snd_webaudio_Context.ctx.destination);
		hxd_snd_webaudio_Context.destination = hxd_snd_webaudio_Context.masterGain;
	}
	return hxd_snd_webaudio_Context.ctx;
};
hxd_snd_webaudio_Context.getGain = function() {
	if(hxd_snd_webaudio_Context.gainPool.length != 0) {
		return hxd_snd_webaudio_Context.gainPool.pop();
	} else {
		return hxd_snd_webaudio_Context.ctx.createGain();
	}
};
hxd_snd_webaudio_Context.putGain = function(gain) {
	hxd_snd_webaudio_Context.gainPool.push(gain);
	gain.gain.value = 1;
};
hxd_snd_webaudio_Context.waitForPageInput = function() {
	if(!hxd_snd_webaudio_Context.suspended) {
		window.document.addEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = true;
	}
};
hxd_snd_webaudio_Context.resumeContext = function(_) {
	if(hxd_snd_webaudio_Context.suspended) {
		if(hxd_snd_webaudio_Context.ctx != null) {
			hxd_snd_webaudio_Context.ctx.resume();
		}
		window.document.removeEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = false;
	}
};
hxd_snd_webaudio_Context.getBuffer = function(channels,sampleCount,rate) {
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == channels && pool.samples == sampleCount && pool.rate == rate) {
			if(pool.pool.length != 0) {
				return pool.pool.pop();
			} else {
				return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
			}
		}
	}
	var pool1 = new hxd_snd_webaudio__$Context_BufferPool(channels,sampleCount,rate);
	hxd_snd_webaudio_Context.bufferPool.push(pool1);
	return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
};
hxd_snd_webaudio_Context.putBuffer = function(buf) {
	var rate = buf.sampleRate | 0;
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == buf.numberOfChannels && pool.samples == buf.length && pool.rate == rate) {
			pool.pool.push(buf);
			break;
		}
	}
};
var hxd_snd_webaudio__$Context_BufferPool = function(channels,samples,rate) {
	this.pool = [];
	this.channels = channels;
	this.samples = samples;
	this.rate = rate;
};
$hxClasses["hxd.snd.webaudio._Context.BufferPool"] = hxd_snd_webaudio__$Context_BufferPool;
hxd_snd_webaudio__$Context_BufferPool.__name__ = "hxd.snd.webaudio._Context.BufferPool";
hxd_snd_webaudio__$Context_BufferPool.prototype = {
	__class__: hxd_snd_webaudio__$Context_BufferPool
};
var hxd_snd_webaudio_Driver = function() {
	this.playbackPool = [];
	this.ctx = hxd_snd_webaudio_Context.get();
};
$hxClasses["hxd.snd.webaudio.Driver"] = hxd_snd_webaudio_Driver;
hxd_snd_webaudio_Driver.__name__ = "hxd.snd.webaudio.Driver";
hxd_snd_webaudio_Driver.__interfaces__ = [hxd_snd_Driver];
hxd_snd_webaudio_Driver.prototype = {
	getBuffer: function(channels,sampleCount,rate) {
		return hxd_snd_webaudio_Context.getBuffer(channels,sampleCount,rate);
	}
	,putBuffer: function(buf) {
		hxd_snd_webaudio_Context.putBuffer(buf);
	}
	,getGain: function() {
		if(hxd_snd_webaudio_Context.gainPool.length != 0) {
			return hxd_snd_webaudio_Context.gainPool.pop();
		} else {
			return hxd_snd_webaudio_Context.ctx.createGain();
		}
	}
	,putGain: function(gain) {
		hxd_snd_webaudio_Context.gainPool.push(gain);
		gain.gain.value = 1;
	}
	,hasFeature: function(d) {
		return true;
	}
	,setMasterVolume: function(value) {
		hxd_snd_webaudio_Context.masterGain.gain.value = value;
	}
	,setListenerParams: function(position,direction,up,velocity) {
		this.ctx.listener.setPosition(-position.x,position.y,position.z);
		this.ctx.listener.setOrientation(-direction.x,direction.y,direction.z,-up.x,up.y,up.z);
	}
	,createSource: function() {
		var s = new hxd_snd_webaudio_SourceHandle();
		s.driver = this;
		s.gain = hxd_snd_webaudio_Context.gainPool.length != 0 ? hxd_snd_webaudio_Context.gainPool.pop() : hxd_snd_webaudio_Context.ctx.createGain();
		s.updateDestination();
		return s;
	}
	,playSource: function(source) {
		if(!source.playing) {
			source.playing = true;
			if(source.buffers.length != 0) {
				var time = this.ctx.currentTime;
				var _g = 0;
				var _g1 = source.buffers;
				while(_g < _g1.length) {
					var b = _g1[_g];
					++_g;
					if(b.consumed) {
						continue;
					}
					time = b.start(this.ctx,source,time);
				}
			}
		}
	}
	,stopSource: function(source) {
		source.playing = false;
		source.sampleOffset = 0;
	}
	,setSourceVolume: function(source,value) {
		source.gain.gain.value = value;
	}
	,destroySource: function(source) {
		this.stopSource(source);
		source.gain.disconnect();
		source.driver = null;
		var gain = source.gain;
		hxd_snd_webaudio_Context.gainPool.push(gain);
		gain.gain.value = 1;
		source.gain = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.stop();
			b.clear();
			this.playbackPool.push(b);
		}
		source.buffers = [];
	}
	,createBuffer: function() {
		var b = new hxd_snd_webaudio_BufferHandle();
		b.samples = 0;
		return b;
	}
	,setBufferData: function(buffer,data,size,format,channelCount,samplingRate) {
		var sampleCount;
		switch(format._hx_index) {
		case 0:
			sampleCount = 1;
			break;
		case 1:
			sampleCount = 2;
			break;
		case 2:
			sampleCount = 4;
			break;
		}
		var sampleCount1 = size / sampleCount / channelCount | 0;
		buffer.samples = sampleCount1;
		if(sampleCount1 == 0) {
			return;
		}
		if(buffer.inst == null) {
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		} else if(buffer.inst.sampleRate != samplingRate || buffer.inst.numberOfChannels != channelCount || buffer.inst.length != sampleCount1) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		}
		switch(format._hx_index) {
		case 0:
			var ui8 = new Uint8Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = ui8[i] / 255;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g2 = 0;
				var _g11 = sampleCount1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					left[i1] = ui8[r] / 255;
					right[i1] = ui8[r + 1] / 255;
					r += channelCount;
				}
			}
			break;
		case 1:
			var i16 = new Int16Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn1 = buffer.inst.getChannelData(0);
				var _g3 = 0;
				var _g12 = sampleCount1;
				while(_g3 < _g12) {
					var i2 = _g3++;
					chn1[i2] = i16[i2] / 32768;
				}
			} else {
				var left1 = buffer.inst.getChannelData(0);
				var right1 = buffer.inst.getChannelData(1);
				var r1 = 0;
				var _g4 = 0;
				var _g13 = sampleCount1;
				while(_g4 < _g13) {
					var i3 = _g4++;
					left1[i3] = i16[r1] / 32768;
					right1[i3] = i16[r1 + 1] / 32768;
					r1 += channelCount;
				}
			}
			break;
		case 2:
			var f32 = new Float32Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn2 = buffer.inst.getChannelData(0);
				var _g5 = 0;
				var _g14 = sampleCount1;
				while(_g5 < _g14) {
					var i4 = _g5++;
					chn2[i4] = f32[i4];
				}
			} else {
				var left2 = buffer.inst.getChannelData(0);
				var right2 = buffer.inst.getChannelData(1);
				var r2 = 0;
				var _g6 = 0;
				var _g15 = sampleCount1;
				while(_g6 < _g15) {
					var i5 = _g6++;
					left2[i5] = f32[r2];
					right2[i5] = f32[r2 + 1];
					r2 += channelCount;
				}
			}
			break;
		}
	}
	,destroyBuffer: function(buffer) {
		if(buffer.inst != null) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
		}
		buffer.inst = null;
	}
	,queueBuffer: function(source,buffer,sampleStart,endOfStream) {
		var buf = this.playbackPool.length != 0 ? this.playbackPool.pop() : new hxd_snd_webaudio_BufferPlayback();
		if(buffer.inst == null) {
			return;
		}
		buf.set(buffer,sampleStart / buffer.inst.length * buffer.inst.duration);
		buffer.isEnd = endOfStream;
		source.buffers.push(buf);
		if(source.playing) {
			if(source.buffers.length != 1) {
				var t = source.buffers[source.buffers.length - 2].ends;
				var tmp = this.ctx;
				var tmp1;
				if(isFinite(t)) {
					var b = this.ctx.currentTime;
					tmp1 = t < b ? b : t;
				} else {
					tmp1 = this.ctx.currentTime;
				}
				buf.start(tmp,source,tmp1);
			} else {
				buf.start(this.ctx,source,this.ctx.currentTime);
			}
		}
	}
	,unqueueBuffer: function(source,buffer) {
		var i = 0;
		while(i < source.buffers.length) {
			var b = source.buffers[i];
			if(b.buffer == buffer) {
				source.buffers.splice(i,1);
				b.stop(!buffer.isEnd);
				b.clear();
				this.playbackPool.push(b);
				break;
			}
		}
		if(buffer.isEnd || !source.playing) {
			source.sampleOffset = 0;
		} else {
			source.sampleOffset += buffer.samples;
		}
	}
	,getProcessedBuffers: function(source) {
		var cnt = 0;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				++cnt;
			}
		}
		return cnt;
	}
	,getPlayedSampleCount: function(source) {
		var consumed = 0;
		var buf = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				consumed += b.buffer.samples;
			} else if(b.dirty) {
				buf = b;
				break;
			}
		}
		if(buf != null) {
			return source.sampleOffset + consumed + buf.get_currentSample();
		}
		return source.sampleOffset + consumed;
	}
	,update: function() {
	}
	,dispose: function() {
	}
	,getEffectDriver: function(type) {
		switch(type) {
		case "lowpass":
			return new hxd_snd_webaudio_LowPassDriver();
		case "pitch":
			return new hxd_snd_webaudio_PitchDriver();
		case "spatialization":
			return new hxd_snd_webaudio_SpatializationDriver();
		default:
			return new hxd_snd_EffectDriver();
		}
	}
	,get_masterGain: function() {
		return hxd_snd_webaudio_Context.masterGain;
	}
	,set_destination: function(node) {
		return hxd_snd_webaudio_Context.destination = node;
	}
	,get_destination: function() {
		return hxd_snd_webaudio_Context.destination;
	}
	,__class__: hxd_snd_webaudio_Driver
	,__properties__: {set_destination:"set_destination",get_destination:"get_destination",get_masterGain:"get_masterGain"}
};
var hxd_snd_webaudio_LowPassDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.LowPassDriver"] = hxd_snd_webaudio_LowPassDriver;
hxd_snd_webaudio_LowPassDriver.__name__ = "hxd.snd.webaudio.LowPassDriver";
hxd_snd_webaudio_LowPassDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_LowPassDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createBiquadFilter();
		node.type = "lowpass";
		return node;
	}
	,bind: function(e,source) {
		source.lowPass = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		var min = 40;
		var max = source.driver.ctx.sampleRate / 2;
		var octaves = Math.log(max / min) / Math.LN2;
		source.lowPass.frequency.value = max * Math.pow(2,octaves * (e.gainHF - 1));
	}
	,unbind: function(e,source) {
		this.pool.push(source.lowPass);
		source.lowPass.disconnect();
		source.lowPass = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_LowPassDriver
});
var hxd_snd_webaudio_PitchDriver = function() {
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.PitchDriver"] = hxd_snd_webaudio_PitchDriver;
hxd_snd_webaudio_PitchDriver.__name__ = "hxd.snd.webaudio.PitchDriver";
hxd_snd_webaudio_PitchDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_PitchDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	apply: function(e,source) {
		if(source.pitch != e.value) {
			source.pitch = e.value;
			source.applyPitch();
		}
	}
	,unbind: function(e,source) {
		source.pitch = 1;
		source.applyPitch();
	}
	,__class__: hxd_snd_webaudio_PitchDriver
});
var hxd_snd_webaudio_SpatializationDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.SpatializationDriver"] = hxd_snd_webaudio_SpatializationDriver;
hxd_snd_webaudio_SpatializationDriver.__name__ = "hxd.snd.webaudio.SpatializationDriver";
hxd_snd_webaudio_SpatializationDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_SpatializationDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createPanner();
		return node;
	}
	,bind: function(e,source) {
		source.panner = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		source.panner.setPosition(-e.position.x,e.position.y,e.position.z);
		source.panner.setOrientation(-e.direction.x,e.direction.y,e.direction.z);
		source.panner.rolloffFactor = e.rollOffFactor;
		source.panner.refDistance = e.referenceDistance;
		var maxDist = e.maxDistance == null ? 3.40282347e38 : e.maxDistance;
		source.panner.maxDistance = maxDist;
	}
	,unbind: function(e,source) {
		this.pool.push(source.panner);
		source.panner.disconnect();
		source.panner = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_SpatializationDriver
});
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__ : true, __constructs__ : ["TVoid","TInt","TBool","TFloat","TString","TVec","TMat3","TMat4","TMat3x4","TBytes","TSampler2D","TSampler2DArray","TSamplerCube","TStruct","TFun","TArray","TBuffer","TChannel"]
	,TVoid: {_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TSampler2D: {_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size) { return {_hx_index:16,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
};
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__ : true, __constructs__ : ["VInt","VFloat","VBool"]
	,VInt: {_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__ : true, __constructs__ : ["SConst","SVar"]
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw new js__$Boot_HaxeError(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__ : true, __constructs__ : ["Global","Input","Param","Var","Local","Output","Function"]
	,Global: {_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__ : true, __constructs__ : ["Const","Private","Nullable","PerObject","Name","Shared","Precision","Range","Ignore","PerInstance"]
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["max"],$_)
	,Private: {_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Shared: {_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__ : true, __constructs__ : ["Low","Medium","High"]
	,Low: {_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__ : true, __constructs__ : ["CNull","CBool","CInt","CFloat","CString"]
	,CNull: {_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_ExprDef = $hxEnums["hxsl.ExprDef"] = { __ename__ : true, __constructs__ : ["EConst","EIdent","EParenthesis","EField","EBinop","EUnop","ECall","EBlock","EVars","EFunction","EIf","EDiscard","EFor","EReturn","EBreak","EContinue","EArray","EArrayDecl","ESwitch","EWhile","EMeta"]
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(i) { return {_hx_index:1,i:i,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["i"],$_)
	,EParenthesis: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:3,e:e,f:f,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:4,op:op,e1:e1,e2:e2,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,e1) { return {_hx_index:5,op:op,e1:e1,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["op","e1"],$_)
	,ECall: ($_=function(e,args) { return {_hx_index:6,e:e,args:args,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e","args"],$_)
	,EBlock: ($_=function(el) { return {_hx_index:7,el:el,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,EVars: ($_=function(v) { return {_hx_index:8,v:v,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EFunction: ($_=function(f) { return {_hx_index:9,f:f,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["f"],$_)
	,EIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,EDiscard: {_hx_index:11,__enum__:"hxsl.ExprDef",toString:$estr}
	,EFor: ($_=function(v,loop,block) { return {_hx_index:12,v:v,loop:loop,block:block,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["v","loop","block"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:13,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EBreak: {_hx_index:14,__enum__:"hxsl.ExprDef",toString:$estr}
	,EContinue: {_hx_index:15,__enum__:"hxsl.ExprDef",toString:$estr}
	,EArray: ($_=function(e,eindex) { return {_hx_index:16,e:e,eindex:eindex,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e","eindex"],$_)
	,EArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,ESwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["e","cases","def"],$_)
	,EWhile: ($_=function(cond,loop,normalWhile) { return {_hx_index:19,cond:cond,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["cond","loop","normalWhile"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:20,name:name,args:args,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_.__params__ = ["name","args","e"],$_)
};
hxsl_ExprDef.__empty_constructs__ = [hxsl_ExprDef.EDiscard,hxsl_ExprDef.EBreak,hxsl_ExprDef.EContinue];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__ : true, __constructs__ : ["Vertex","Fragment","Init","Helper"]
	,Vertex: {_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__ : true, __constructs__ : ["Radians","Degrees","Sin","Cos","Tan","Asin","Acos","Atan","Pow","Exp","Log","Exp2","Log2","Sqrt","Inversesqrt","Abs","Sign","Floor","Ceil","Fract","Mod","Min","Max","Clamp","Mix","Step","Smoothstep","Length","Distance","Dot","Cross","Normalize","LReflect","Texture","TextureLod","Texel","TexelLod","ToInt","ToFloat","ToBool","Vec2","Vec3","Vec4","IVec2","IVec3","IVec4","BVec2","BVec3","BVec4","Mat2","Mat3","Mat4","Mat3x4","Saturate","Pack","Unpack","PackNormal","UnpackNormal","ScreenToUv","UvToScreen","DFdx","DFdy","Fwidth","ChannelRead","ChannelReadLod","ChannelFetch","ChannelFetchLod","Trace","VertexID","InstanceID","FragCoord"]
	,Radians: {_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TexelLod: {_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetchLod: {_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
	,FragCoord: {_hx_index:70,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TexelLod,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelFetchLod,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__ : true, __constructs__ : ["X","Y","Z","W"]
	,X: {_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__ : true, __constructs__ : ["TConst","TVar","TGlobal","TParenthesis","TBlock","TBinop","TUnop","TVarDecl","TCall","TSwiz","TIf","TDiscard","TReturn","TFor","TContinue","TBreak","TArray","TArrayDecl","TSwitch","TWhile","TMeta"]
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["m","args","e"],$_)
};
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g._hx_index) {
	case 1:
		var _g1 = 0;
		var _g11 = v.qualifiers;
		while(_g1 < _g11.length) {
			var q = _g11[_g1];
			++_g1;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 17:
		var _g12 = _g.size;
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	var tmp;
	if(_g._hx_index == 17) {
		var _g1 = _g.size;
		tmp = true;
	} else {
		tmp = false;
	}
	if(tmp) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g2 = 0;
		var _g3 = v.qualifiers;
		while(_g2 < _g3.length) {
			var q = _g3[_g2];
			++_g2;
			if(q._hx_index == 0) {
				var _g21 = q.max;
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isStruct = function(v) {
	var _g = v.type;
	if(_g._hx_index == 13) {
		var _g1 = _g.vl;
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.isArray = function(v) {
	var _g = v.type;
	if(_g._hx_index == 15) {
		var _g2 = _g.size;
		var _g1 = _g.t;
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isSampler = function(t) {
	switch(t._hx_index) {
	case 10:case 11:case 12:
		return true;
	case 17:
		var _g = t.size;
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var t1 = t.t;
		var size = t.size;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var s = t.size;
		var t2 = t.t;
		var tmp = hxsl_Tools.toString(t2) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v1 = s.v;
			tmp1 = v1.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var s1 = t.size;
		var t3 = t.t;
		var tmp2 = "buffer " + hxsl_Tools.toString(t3) + "[";
		var tmp3;
		switch(s1._hx_index) {
		case 0:
			var i1 = s1.v;
			tmp3 = "" + i1;
			break;
		case 1:
			var v2 = s1.v;
			tmp3 = v2.name;
			break;
		}
		return tmp2 + tmp3 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index],1,null);
	}
};
hxsl_Tools.toType = function(t) {
	switch(t._hx_index) {
	case 0:
		return hxsl_Type.TInt;
	case 1:
		return hxsl_Type.TFloat;
	case 2:
		return hxsl_Type.TBool;
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		return false;
	case 1:
		var _g9 = _g.v;
		return false;
	case 2:
		var _g5 = _g.g;
		return false;
	case 3:
		var e1 = _g.e;
		return hxsl_Tools.hasSideEffect(e1);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e2)) {
				return true;
			}
		}
		return false;
	case 5:
		var _g33 = _g.e2;
		var _g32 = _g.e1;
		var _g31 = _g.op;
		switch(_g31._hx_index) {
		case 4:
			return true;
		case 20:
			var _g34 = _g31.op;
			return true;
		default:
			var e21 = _g33;
			var e11 = _g32;
			if(!hxsl_Tools.hasSideEffect(e11)) {
				return hxsl_Tools.hasSideEffect(e21);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var _g17 = _g.op;
		var e12 = _g.e1;
		return hxsl_Tools.hasSideEffect(e12);
	case 7:
		var _g25 = _g.init;
		var _g24 = _g.v;
		return true;
	case 8:
		var _g36 = _g.args;
		var _g35 = _g.e;
		return true;
	case 9:
		var _g20 = _g.regs;
		var e3 = _g.e;
		return hxsl_Tools.hasSideEffect(e3);
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 12:
		var _g13 = _g.e;
		return true;
	case 13:
		var _g21 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 16:
		var index = _g.index;
		var e4 = _g.e;
		if(!hxsl_Tools.hasSideEffect(e4)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el1 = _g.el;
		var _g2 = 0;
		while(_g2 < el1.length) {
			var e5 = el1[_g2];
			++_g2;
			if(hxsl_Tools.hasSideEffect(e5)) {
				return true;
			}
		}
		return false;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e6 = _g.e;
		var _g3 = 0;
		while(_g3 < cases.length) {
			var c = cases[_g3];
			++_g3;
			var _g4 = 0;
			var _g11 = c.values;
			while(_g4 < _g11.length) {
				var v = _g11[_g4];
				++_g4;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e6)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var _g12 = _g.normalWhile;
		var loop1 = _g.loop;
		var e7 = _g.e;
		if(!hxsl_Tools.hasSideEffect(e7)) {
			return hxsl_Tools.hasSideEffect(loop1);
		} else {
			return true;
		}
		break;
	case 20:
		var _g7 = _g.args;
		var _g6 = _g.m;
		var e8 = _g.e;
		return hxsl_Tools.hasSideEffect(e8);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		break;
	case 1:
		var _g9 = _g.v;
		break;
	case 2:
		var _g5 = _g.g;
		break;
	case 3:
		var e1 = _g.e;
		f(e1);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			f(e2);
		}
		break;
	case 5:
		var _g31 = _g.op;
		var e21 = _g.e2;
		var e11 = _g.e1;
		f(e11);
		f(e21);
		break;
	case 6:
		var _g17 = _g.op;
		var e12 = _g.e1;
		f(e12);
		break;
	case 7:
		var _g24 = _g.v;
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var args = _g.args;
		var e3 = _g.e;
		f(e3);
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			f(a);
		}
		break;
	case 9:
		var _g20 = _g.regs;
		var e4 = _g.e;
		f(e4);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e5 = _g.e;
		if(e5 != null) {
			f(e5);
		}
		break;
	case 13:
		var _g21 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		f(it);
		f(loop);
		break;
	case 11:case 14:case 15:
		break;
	case 16:
		var index = _g.index;
		var e6 = _g.e;
		f(e6);
		f(index);
		break;
	case 17:
		var el1 = _g.el;
		var _g3 = 0;
		while(_g3 < el1.length) {
			var e7 = el1[_g3];
			++_g3;
			f(e7);
		}
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e8 = _g.e;
		f(e8);
		var _g4 = 0;
		while(_g4 < cases.length) {
			var c = cases[_g4];
			++_g4;
			var _g6 = 0;
			var _g11 = c.values;
			while(_g6 < _g11.length) {
				var v = _g11[_g6];
				++_g6;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var _g12 = _g.normalWhile;
		var loop1 = _g.loop;
		var e9 = _g.e;
		f(e9);
		f(loop1);
		break;
	case 20:
		var _g7 = _g.args;
		var _g61 = _g.m;
		var e10 = _g.e;
		f(e10);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		ed = e.e;
		break;
	case 1:
		var _g9 = _g.v;
		ed = e.e;
		break;
	case 2:
		var _g5 = _g.g;
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g11 = 0;
		while(_g11 < el.length) {
			var e2 = el[_g11];
			++_g11;
			_g1.push(f(e2));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var e21 = _g.e2;
		var e11 = _g.e1;
		var op = _g.op;
		ed = hxsl_TExprDef.TBinop(op,f(e11),f(e21));
		break;
	case 6:
		var e12 = _g.e1;
		var op1 = _g.op;
		ed = hxsl_TExprDef.TUnop(op1,f(e12));
		break;
	case 7:
		var init = _g.init;
		var v = _g.v;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var args = _g.args;
		var e3 = _g.e;
		var ed1 = f(e3);
		var _g2 = [];
		var _g12 = 0;
		while(_g12 < args.length) {
			var a = args[_g12];
			++_g12;
			_g2.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g2);
		break;
	case 9:
		var c = _g.regs;
		var e4 = _g.e;
		ed = hxsl_TExprDef.TSwiz(f(e4),c);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e5 = _g.e;
		ed = hxsl_TExprDef.TReturn(e5 != null ? f(e5) : null);
		break;
	case 13:
		var loop = _g.loop;
		var it = _g.it;
		var v1 = _g.v;
		ed = hxsl_TExprDef.TFor(v1,f(it),f(loop));
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var index = _g.index;
		var e6 = _g.e;
		ed = hxsl_TExprDef.TArray(f(e6),f(index));
		break;
	case 17:
		var el1 = _g.el;
		var _g3 = [];
		var _g13 = 0;
		while(_g13 < el1.length) {
			var e7 = el1[_g13];
			++_g13;
			_g3.push(f(e7));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g3);
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e8 = _g.e;
		var ed2 = f(e8);
		var _g4 = [];
		var _g14 = 0;
		while(_g14 < cases.length) {
			var c1 = cases[_g14];
			++_g14;
			var _g15 = [];
			var _g21 = 0;
			var _g31 = c1.values;
			while(_g21 < _g31.length) {
				var v2 = _g31[_g21];
				++_g21;
				_g15.push(f(v2));
			}
			_g4.push({ values : _g15, expr : f(c1.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed2,_g4,def == null ? null : f(def));
		break;
	case 19:
		var normalWhile = _g.normalWhile;
		var loop1 = _g.loop;
		var e9 = _g.e;
		ed = hxsl_TExprDef.TWhile(f(e9),f(loop1),normalWhile);
		break;
	case 20:
		var e10 = _g.e;
		var args1 = _g.args;
		var m = _g.m;
		ed = hxsl_TExprDef.TMeta(m,args1,f(e10));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 2:case 4:case 10:case 11:case 12:
		return 0;
	case 5:
		var _g1 = t.t;
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 13:
		var vl = t.vl;
		var s1 = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s1 += hxsl_Tools.size(v.type);
		}
		return s1;
	case 14:
		var _g8 = t.variants;
		return 0;
	case 15:
		var _g10 = t.size;
		var _g9 = t.t;
		switch(_g10._hx_index) {
		case 0:
			var t1 = _g9;
			var v1 = _g10.v;
			return hxsl_Tools.size(t1) * v1;
		case 1:
			var _g11 = _g10.v;
			return 0;
		}
		break;
	case 16:
		var _g5 = t.size;
		if(_g5._hx_index == 0) {
			var t2 = t.t;
			var v2 = _g5.v;
			return hxsl_Tools.size(t2) * v2;
		} else {
			return 0;
		}
		break;
	case 17:
		var n1 = t.size;
		return n1;
	}
};
hxsl_Tools.evalConst = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var c = _g.c;
		switch(c._hx_index) {
		case 0:
			return null;
		case 1:
			var b = c.b;
			return b;
		case 2:
			var i = c.v;
			return i;
		case 3:
			var f = c.v;
			return f;
		case 4:
			var s = c.v;
			return s;
		}
		break;
	case 8:
		var _g3 = _g.args;
		var _g2 = _g.e;
		var _g6 = _g2.t;
		var _g5 = _g2.p;
		var _g4 = _g2.e;
		if(_g4._hx_index == 2) {
			switch(_g4.g._hx_index) {
			case 40:case 41:case 42:
				var args = _g3;
				var _g1 = [];
				var _g11 = 0;
				while(_g11 < args.length) {
					var a = args[_g11];
					++_g11;
					_g1.push(hxsl_Tools.evalConst(a));
				}
				var vals = _g1;
				if(vals.length == 1) {
					return new h3d_Vector(vals[0],vals[0],vals[0],vals[0]);
				}
				return new h3d_Vector(vals[0],vals[1],vals[2],vals[3]);
			default:
				throw new js__$Boot_HaxeError("Unhandled constant init " + hxsl_Printer.toString(e));
			}
		} else {
			throw new js__$Boot_HaxeError("Unhandled constant init " + hxsl_Printer.toString(e));
		}
		break;
	default:
		throw new js__$Boot_HaxeError("Unhandled constant init " + hxsl_Printer.toString(e));
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index];
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_Tools3 = function() { };
$hxClasses["hxsl.Tools3"] = hxsl_Tools3;
hxsl_Tools3.__name__ = "hxsl.Tools3";
hxsl_Tools3.toString = function(s) {
	return hxsl_Printer.shaderToString(s);
};
var hxsl_Tools4 = function() { };
$hxClasses["hxsl.Tools4"] = hxsl_Tools4;
hxsl_Tools4.__name__ = "hxsl.Tools4";
hxsl_Tools4.toString = function(e) {
	return hxsl_Printer.toString(e);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["hxsl.BatchShader"] = hxsl_BatchShader;
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	get_Batch_Count: function() {
		return this.Batch_Count__;
	}
	,set_Batch_Count: function(_v) {
		this.constModified = true;
		return this.Batch_Count__ = _v;
	}
	,get_Batch_Buffer: function() {
		return this.Batch_Buffer__;
	}
	,set_Batch_Buffer: function(_v) {
		return this.Batch_Buffer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw new js__$Boot_HaxeError("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_Count__;
		case 1:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(hxsl_BatchShader.prototype);
		s.shader = this.shader;
		s.Batch_Count__ = this.Batch_Count__;
		s.Batch_Buffer__ = this.Batch_Buffer__;
		return s;
	}
	,__class__: hxsl_BatchShader
	,__properties__: {set_Batch_Buffer:"set_Batch_Buffer",get_Batch_Buffer:"get_Batch_Buffer",set_Batch_Count:"set_Batch_Count",get_Batch_Count:"get_Batch_Count"}
});
var hxsl_SearchMap = function() {
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.constsToGlobal = false;
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_IntMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.set = function(c) {
	hxsl_Cache.INST = c;
};
hxsl_Cache.clear = function() {
	hxsl_Cache.INST = null;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var _this = this.linkShaders;
		var shader = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars = new haxe_ds_StringMap();
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g2 = 0;
			var _g3 = args.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v1 = __map_reserved[path] != null ? outVars.getReserved(path) : outVars.h[path];
			if(v1 != null) {
				return v1;
			}
			v1 = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v1);
			} else {
				var _g21 = parent.type;
				if(_g21._hx_index == 13) {
					var vl = _g21.vl;
					vl.push(v1);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			}
			if(__map_reserved[path] != null) {
				outVars.setReserved(path,v1);
			} else {
				outVars.h[path] = v1;
			}
			return v1;
		};
		var makeOutExpr1 = null;
		makeOutExpr1 = function(v2,rem1) {
			switch(v2._hx_index) {
			case 0:
				var v3 = v2.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v3)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var size1 = v2.size;
				var vname = v2.v;
				var v4 = __map_reserved[vname] != null ? outVars.getReserved(vname) : outVars.h[vname];
				if(v4 != null) {
					return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
				}
				var path1 = vname.split(".");
				var parent1 = null;
				while(path1.length > 1) {
					var parent2 = path1.shift();
					parent1 = makeVar(parent2,hxsl_Type.TStruct([]),parent1);
				}
				if(size1 != null) {
					rem1 = size1;
				}
				var v5 = path1.shift();
				v4 = makeVar(v5,rem1 == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem1,hxsl_VecType.VFloat),parent1);
				return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
			case 2:
				var v6 = v2.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v6,3)]), t : tvec4, p : pos};
			case 3:
				var v7 = v2.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v7,1)]), t : tvec4, p : pos};
			case 4:
				var args1 = v2.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args1,makeOutExpr1);
			case 5:
				var args2 = v2.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args2,makeOutExpr1);
			case 6:
				var args3 = v2.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args3,makeOutExpr1);
			case 7:
				var comps = v2.swiz;
				var v8 = v2.a;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr1(v8,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v9) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr1(v9,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars1) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g22 = [];
			var _g31 = 0;
			while(_g31 < vars1.length) {
				var v10 = vars1[_g31];
				++_g31;
				_g22.push(makeOutput(v10));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g22), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		var _this1 = this.linkShaders;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,shader);
		} else {
			_this1.h[key] = shader;
		}
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,batchMode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			if(c.next == null) {
				c.next = new haxe_ds_IntMap();
			}
			var cs = c.next.h[i.id];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.next.h[i.id] = cs;
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,batchMode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,batchMode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s11,s2) {
			return s2.p - s11.p;
		});
		var _g1 = 0;
		while(_g1 < shaderDatas.length) {
			var s3 = shaderDatas[_g1];
			++_g1;
			hxsl_Printer.check(s3.inst.shader);
		}
		var linker = new hxsl_Linker(batchMode);
		var s4;
		try {
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < shaderDatas.length) {
				var s5 = shaderDatas[_g3];
				++_g3;
				_g2.push(s5.inst.shader);
			}
			s4 = linker.link(_g2);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof hxsl_Error)) {
				var e2 = e1;
				var _g21 = [];
				var _g31 = 0;
				while(_g31 < shaderDatas.length) {
					var s6 = shaderDatas[_g31];
					++_g31;
					_g21.push(hxsl_Printer.shaderToString(s6.inst.shader));
				}
				var shaders1 = _g21;
				e2.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw new js__$Boot_HaxeError(e2);
			} else {
				throw e;
			}
		}
		var _g22 = [];
		var _g32 = 0;
		while(_g32 < shaderDatas.length) {
			var s7 = shaderDatas[_g32];
			++_g32;
			_g22.push(s7.inst.shader);
		}
		hxsl_Printer.check(s4,_g22);
		var paramVars = new haxe_ds_IntMap();
		var _g4 = 0;
		var _g5 = linker.allVars;
		while(_g4 < _g5.length) {
			var v = _g5[_g4];
			++_g4;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g41 = v.v.type;
				if(_g41._hx_index == 13) {
					var _g51 = _g41.vl;
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = s4;
		var s8;
		try {
			s8 = new hxsl_Splitter().split(s4);
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof hxsl_Error)) {
				var e5 = e4;
				e5.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s4);
				throw new js__$Boot_HaxeError(e5);
			} else {
				throw e3;
			}
		}
		if(batchMode) {
			var _g6 = 0;
			var _g7 = s8.vertex.vars;
			while(_g6 < _g7.length) {
				var v1 = _g7[_g6];
				++_g6;
				if(v1.qualifiers != null && v1.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					v1.kind = hxsl_VarKind.Local;
				}
			}
		}
		hxsl_Printer.check(s8.vertex,[prev]);
		hxsl_Printer.check(s8.fragment,[prev]);
		var prev1 = s8;
		var s9 = new hxsl_Dce().dce(s8.vertex,s8.fragment);
		hxsl_Printer.check(s9.vertex,[prev1.vertex]);
		hxsl_Printer.check(s9.fragment,[prev1.fragment]);
		var r = this.buildRuntimeShader(s9.vertex,s9.fragment,paramVars);
		var _g61 = [];
		var _g7_l = shaders;
		var _g7_last = null;
		while(_g7_l != _g7_last) {
			var s10 = _g7_l.s;
			_g7_l = _g7_l.next;
			var s12 = s10;
			_g61.push(new hxsl_ShaderInstanceDesc(s12.shader,s12.constBits));
		}
		r.spec = { instances : _g61, signature : null};
		var _g8 = 0;
		var _g9 = shaderDatas.length;
		while(_g8 < _g9) {
			var i1 = _g8++;
			var s13 = shaderDatas[shaderDatas.length - 1 - i1];
			r.spec.instances[s13.index].index = i1;
		}
		var _g10 = [];
		var _g11 = 0;
		var _g12 = r.spec.instances;
		while(_g11 < _g12.length) {
			var i2 = _g12[_g11];
			++_g11;
			_g10.push(i2.shader.data.name + "_" + i2.bits + "_" + i2.index);
		}
		var signParts = _g10;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		r.batchMode = batchMode;
		var key = r.signature;
		var _this = this.byID;
		var r2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			var key1 = r.signature;
			var _this1 = this.byID;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,r);
			} else {
				_this1.h[key1] = r;
			}
		}
		return r;
	}
	,buildRuntimeShader: function(vertex,fragment,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		hxsl_Printer.check(r.vertex.data,[vertex]);
		hxsl_Printer.check(r.fragment.data,[fragment]);
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p1 = s.params;
		while(p1 != null) {
			if(p1.perObjectGlobal != null) {
				r.globals.h[p1.perObjectGlobal.gid] = true;
			}
			p1 = p1.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind,this.constsToGlobal);
		var textures = [];
		c.consts = flat.consts;
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _g6 = _g4.size;
					var _g5 = _g4.t;
					if(_g5._hx_index == 5) {
						if(_g5.size == 4) {
							if(_g5.t._hx_index == 1) {
								if(_g6._hx_index == 0) {
									var size = _g6.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					} else {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			case 2:
				var out1 = [];
				var _g7 = 0;
				while(_g7 < alloc.length) {
					var a1 = alloc[_g7];
					++_g7;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						continue;
					}
					out1.push(new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type));
				}
				var _g11 = 0;
				var _g21 = out1.length - 1;
				while(_g11 < _g21) {
					var i1 = _g11++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g31 = g1.type;
				if(_g31._hx_index == 15) {
					var _g51 = _g31.size;
					var _g41 = _g31.t;
					var t = _g41;
					if(hxsl_Tools.isSampler(t)) {
						textures.push({ t : t, all : out1});
						c.texturesCount += out1.length;
					} else {
						switch(_g41._hx_index) {
						case 5:
							if(_g41.size == 4) {
								if(_g41.t._hx_index == 1) {
									if(_g51._hx_index == 0) {
										var size1 = _g51.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw new js__$Boot_HaxeError("assert");
									}
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
							break;
						case 16:
							var _g10 = _g41.size;
							var _g9 = _g41.t;
							c.buffers = out1[0];
							c.bufferCount = out1.length;
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			var _g8 = 1;
			var _g12 = textures.length;
			while(_g8 < _g12) {
				var i2 = _g8++;
				var prevAll = textures[i2 - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i2].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	,makeBatchShader: function(rt) {
		var sh = this.batchShaders.h[rt.id];
		if(sh == null) {
			sh = this.createBatchShader(rt);
			this.batchShaders.h[rt.id] = sh;
		}
		var shader = Object.create(hxsl_BatchShader.prototype);
		shader.shader = sh;
		return shader;
	}
	,createBatchShader: function(rt) {
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(rt.spec.signature,0,8);
		var declVar = function(name,t,kind) {
			return { id : hxsl_Tools.allocVarId(), type : t, name : name, kind : kind};
		};
		var pos = null;
		var vcount = declVar("Batch_Count",hxsl_Type.TInt,hxsl_VarKind.Param);
		var vbuffer = declVar("Batch_Buffer",hxsl_Type.TBuffer(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SVar(vcount)),hxsl_VarKind.Param);
		var voffset = declVar("Batch_Offset",hxsl_Type.TInt,hxsl_VarKind.Local);
		var ebuffer = { e : hxsl_TExprDef.TVar(vbuffer), p : pos, t : vbuffer.type};
		var eoffset = { e : hxsl_TExprDef.TVar(voffset), p : pos, t : voffset.type};
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var countBits = 16;
		vcount.qualifiers = [hxsl_VarQualifier.Const(1 << countBits)];
		s.data = { name : "batchShader_" + id, vars : [vcount,vbuffer,voffset], funs : []};
		var stride = rt.vertex.paramsSize + rt.fragment.paramsSize;
		var parentVars = new haxe_ds_ObjectMap();
		var swiz = [[hxsl_Component.X],[hxsl_Component.Y],[hxsl_Component.Z],[hxsl_Component.W]];
		var readOffset = function(index) {
			return { e : hxsl_TExprDef.TArray(ebuffer,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,eoffset,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos}), t : tvec4, p : pos};
		};
		var extractVar = function(v,offset) {
			var vreal = declVar(v.name,v.type,hxsl_VarKind.Local);
			if(v.perObjectGlobal != null) {
				var path = v.perObjectGlobal.path.split(".");
				path.pop();
				var cur = vreal;
				while(path.length > 0) {
					var key = path.join(".");
					var name1 = path.pop();
					var vp = parentVars.h[path.__id__];
					if(vp == null) {
						vp = declVar(name1,hxsl_Type.TStruct([]),hxsl_VarKind.Local);
						parentVars.set(path,vp);
					}
					var _g = vp.type;
					if(_g._hx_index == 13) {
						var vl = _g.vl;
						vl.push(cur);
					}
					cur.parent = vp;
					cur = vp;
				}
			}
			s.data.vars.push(vreal);
			var index1 = (v.pos >> 2) + offset;
			var extract;
			var _g1 = v.type;
			switch(_g1._hx_index) {
			case 3:
				var v1 = v.type;
				var extract1 = readOffset(index1);
				extract = { p : pos, t : v1, e : hxsl_TExprDef.TSwiz(extract1,swiz[v.pos & 3])};
				break;
			case 5:
				var _g2 = _g1.t;
				switch(_g1.size) {
				case 2:
					if(_g2._hx_index == 1) {
						var swiz1;
						switch(v.pos & 3) {
						case 0:
							swiz1 = [hxsl_Component.X,hxsl_Component.Y];
							break;
						case 1:
							swiz1 = [hxsl_Component.Y,hxsl_Component.Z];
							break;
						default:
							swiz1 = [hxsl_Component.Z,hxsl_Component.W];
						}
						var v2 = v.type;
						var extract2 = hxsl_TExprDef.TSwiz(readOffset(index1),swiz1);
						extract = { p : pos, t : v2, e : extract2};
					} else {
						throw new js__$Boot_HaxeError("Unsupported batch var type " + Std.string(v.type));
					}
					break;
				case 3:
					if(_g2._hx_index == 1) {
						var v3 = v.type;
						var extract3 = readOffset(index1);
						extract = { p : pos, t : v3, e : hxsl_TExprDef.TSwiz(extract3,(v.pos & 3) == 0 ? [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z] : [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W])};
					} else {
						throw new js__$Boot_HaxeError("Unsupported batch var type " + Std.string(v.type));
					}
					break;
				case 4:
					if(_g2._hx_index == 1) {
						extract = readOffset(index1);
					} else {
						throw new js__$Boot_HaxeError("Unsupported batch var type " + Std.string(v.type));
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported batch var type " + Std.string(v.type));
				}
				break;
			case 7:
				var v4 = v.type;
				var extract4 = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4), t : hxsl_Type.TVoid, p : pos},[readOffset(index1),readOffset(index1 + 1),readOffset(index1 + 2),readOffset(index1 + 3)]);
				extract = { p : pos, t : v4, e : extract4};
				break;
			default:
				throw new js__$Boot_HaxeError("Unsupported batch var type " + Std.string(v.type));
			}
			return { p : pos, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(vreal), p : pos, t : v.type},extract), t : hxsl_Type.TVoid};
		};
		var exprs = [];
		var p = rt.vertex.params;
		while(p != null) {
			exprs.push(extractVar(p,0));
			p = p.next;
		}
		var p1 = rt.fragment.params;
		while(p1 != null) {
			exprs.push(extractVar(p1,rt.vertex.paramsSize));
			p1 = p1.next;
		}
		exprs.unshift({ p : pos, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,eoffset,{ p : pos, t : hxsl_Type.TInt, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,{ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.InstanceID), t : hxsl_Type.TInt, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), p : pos, t : hxsl_Type.TInt})}), t : hxsl_Type.TVoid});
		var fv = declVar("init",hxsl_Type.TFun([]),hxsl_VarKind.Function);
		var f = { kind : hxsl_FunctionKind.Init, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(exprs), p : pos, t : hxsl_Type.TVoid}};
		s.data.funs.push(f);
		s.consts = new hxsl_ShaderConst(vcount,0,countBits);
		s.consts.globalId = 0;
		return s;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__ : true, __constructs__ : ["Unknown","R","G","B","A","PackedFloat","PackedNormal"]
	,Unknown: {_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var size = t.size;
			var t1 = t.t;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				var _g11 = size.v;
				tmp1 = size;
				break;
			case 1:
				var v1 = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v1));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v1),init);
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v2 = _g.v;
			tmp = hxsl_TExprDef.TFor(this.tvar(v2),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = s.funs;
		while(_g4 < _g5.length) {
			var f = _g5[_g4];
			++_g4;
			_g3.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g3};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_Exit = function() {
};
$hxClasses["hxsl._Dce.Exit"] = hxsl__$Dce_Exit;
hxsl__$Dce_Exit.__name__ = "hxsl._Dce.Exit";
hxsl__$Dce_Exit.prototype = {
	__class__: hxsl__$Dce_Exit
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	debug: function(msg,pos) {
	}
	,dce: function(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		var _g1 = vertex.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g2 = 0;
		var _g3 = fragment.vars;
		while(_g2 < _g3.length) {
			var v1 = _g3[_g2];
			++_g2;
			var i1 = this.get(v1);
			if(v1.kind == hxsl_VarKind.Output) {
				i1.keep = true;
			}
		}
		var _g4 = 0;
		var _g5 = vertex.funs;
		while(_g4 < _g5.length) {
			var f = _g5[_g4];
			++_g4;
			this.check(f.expr,[],[]);
		}
		var _g6 = 0;
		var _g7 = fragment.funs;
		while(_g6 < _g7.length) {
			var f1 = _g7[_g6];
			++_g6;
			this.check(f1.expr,[],[]);
		}
		var outExprs = [];
		while(true) {
			var v2 = this.used.iterator();
			while(v2.hasNext()) {
				var v3 = v2.next();
				if(v3.keep) {
					this.markRec(v3);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			var _g8 = 0;
			while(_g8 < inputs.length) {
				var v4 = inputs[_g8];
				++_g8;
				this.markRec(v4);
			}
			outExprs = [];
			var _g9 = 0;
			var _g10 = vertex.funs;
			while(_g9 < _g10.length) {
				var f2 = _g10[_g9];
				++_g9;
				outExprs.push(this.mapExpr(f2.expr,false));
			}
			var _g11 = 0;
			var _g12 = fragment.funs;
			while(_g11 < _g12.length) {
				var f3 = _g12[_g11];
				++_g11;
				outExprs.push(this.mapExpr(f3.expr,false));
			}
			this.markAsKeep = false;
			var _g13 = 0;
			while(_g13 < outExprs.length) {
				var e = outExprs[_g13];
				++_g13;
				this.checkBranches(e);
			}
			if(!this.markAsKeep) {
				break;
			}
		}
		var _g81 = 0;
		var _g91 = vertex.funs;
		while(_g81 < _g91.length) {
			var f4 = _g91[_g81];
			++_g81;
			f4.expr = outExprs.shift();
		}
		var _g101 = 0;
		var _g111 = fragment.funs;
		while(_g101 < _g111.length) {
			var f5 = _g111[_g101];
			++_g101;
			f5.expr = outExprs.shift();
		}
		var v5 = this.used.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			if(v6.used) {
				continue;
			}
			if(v6.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v6.v);
			HxOverrides.remove(fragment.vars,v6.v);
		}
		return { fragment : fragment, vertex : vertex};
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = [];
			var _g1 = 0;
			var _g11 = el.length;
			while(_g1 < _g11) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _g13 = _g.e2;
			var _g12 = _g.e1;
			var _g111 = _g.op;
			switch(_g111._hx_index) {
			case 4:
				var _g16 = _g12.t;
				var _g15 = _g12.p;
				var _g14 = _g12.e;
				switch(_g14._hx_index) {
				case 1:
					var e1 = _g13;
					var v1 = _g14.v;
					var v2 = this.get(v1);
					writeTo.push(v2);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v2) < 0) {
						isAffected.push(v2);
					}
					break;
				case 9:
					var _g19 = _g14.regs;
					var _g18 = _g14.e;
					var _g22 = _g18.t;
					var _g21 = _g18.p;
					var _g20 = _g18.e;
					if(_g20._hx_index == 1) {
						var e2 = _g13;
						var v3 = _g20.v;
						var v4 = this.get(v3);
						writeTo.push(v4);
						this.check(e2,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v4) < 0) {
							isAffected.push(v4);
						}
					} else {
						var f = $bind(this,this.check);
						var writeTo1 = writeTo;
						var isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e3) {
							f(e3,writeTo1,isAffected1);
						});
					}
					break;
				default:
					var f1 = $bind(this,this.check);
					var writeTo2 = writeTo;
					var isAffected2 = isAffected;
					hxsl_Tools.iter(e,function(e4) {
						f1(e4,writeTo2,isAffected2);
					});
				}
				break;
			case 20:
				var _g24 = _g111.op;
				var _g27 = _g12.t;
				var _g26 = _g12.p;
				var _g25 = _g12.e;
				switch(_g25._hx_index) {
				case 1:
					var e5 = _g13;
					var v5 = _g25.v;
					var v6 = this.get(v5);
					writeTo.push(v6);
					this.check(e5,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v6) < 0) {
						isAffected.push(v6);
					}
					break;
				case 9:
					var _g30 = _g25.regs;
					var _g29 = _g25.e;
					var _g33 = _g29.t;
					var _g32 = _g29.p;
					var _g31 = _g29.e;
					if(_g31._hx_index == 1) {
						var e6 = _g13;
						var v7 = _g31.v;
						var v8 = this.get(v7);
						writeTo.push(v8);
						this.check(e6,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v8) < 0) {
							isAffected.push(v8);
						}
					} else {
						var f2 = $bind(this,this.check);
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e7) {
							f2(e7,writeTo3,isAffected3);
						});
					}
					break;
				default:
					var f3 = $bind(this,this.check);
					var writeTo4 = writeTo;
					var isAffected4 = isAffected;
					hxsl_Tools.iter(e,function(e8) {
						f3(e8,writeTo4,isAffected4);
					});
				}
				break;
			default:
				var f4 = $bind(this,this.check);
				var writeTo5 = writeTo;
				var isAffected5 = isAffected;
				hxsl_Tools.iter(e,function(e9) {
					f4(e9,writeTo5,isAffected5);
				});
			}
			break;
		case 7:
			var init = _g.init;
			var v9 = _g.v;
			if(init != null) {
				writeTo.push(this.get(v9));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var f5 = $bind(this,this.check);
				var writeTo6 = writeTo;
				var isAffected6 = isAffected;
				hxsl_Tools.iter(e,function(e10) {
					f5(e10,writeTo6,isAffected6);
				});
			}
			break;
		case 8:
			var _g36 = _g.args;
			var _g35 = _g.e;
			var _g39 = _g35.t;
			var _g38 = _g35.p;
			var _g37 = _g35.e;
			if(_g37._hx_index == 2) {
				switch(_g37.g._hx_index) {
				case 63:
					if(_g36.length == 3) {
						var _g56 = _g36[2];
						var _g54 = _g36[0];
						var _g59 = _g54.t;
						var _g58 = _g54.p;
						var _g57 = _g54.e;
						if(_g57._hx_index == 1) {
							var _g63 = _g56.t;
							var _g62 = _g56.p;
							var _g61 = _g56.e;
							if(_g61._hx_index == 0) {
								var _g64 = _g61.c;
								if(_g64._hx_index == 2) {
									var c = _g57.v;
									var uv = _g36[1];
									var cid = _g64.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var f6 = $bind(this,this.check);
									var writeTo7 = writeTo;
									var isAffected7 = isAffected;
									hxsl_Tools.iter(e,function(e11) {
										f6(e11,writeTo7,isAffected7);
									});
								}
							} else {
								var f7 = $bind(this,this.check);
								var writeTo8 = writeTo;
								var isAffected8 = isAffected;
								hxsl_Tools.iter(e,function(e12) {
									f7(e12,writeTo8,isAffected8);
								});
							}
						} else {
							var f8 = $bind(this,this.check);
							var writeTo9 = writeTo;
							var isAffected9 = isAffected;
							hxsl_Tools.iter(e,function(e13) {
								f8(e13,writeTo9,isAffected9);
							});
						}
					} else {
						var f9 = $bind(this,this.check);
						var writeTo10 = writeTo;
						var isAffected10 = isAffected;
						hxsl_Tools.iter(e,function(e14) {
							f9(e14,writeTo10,isAffected10);
						});
					}
					break;
				case 64:
					if(_g36.length == 4) {
						var _g44 = _g36[3];
						var _g41 = _g36[0];
						var _g47 = _g41.t;
						var _g46 = _g41.p;
						var _g45 = _g41.e;
						if(_g45._hx_index == 1) {
							var _g51 = _g44.t;
							var _g50 = _g44.p;
							var _g49 = _g44.e;
							if(_g49._hx_index == 0) {
								var _g52 = _g49.c;
								if(_g52._hx_index == 2) {
									var c1 = _g45.v;
									var uv1 = _g36[1];
									var lod = _g36[2];
									var cid1 = _g52.v;
									this.check(uv1,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid1] == null) {
										this.channelVars[cid1] = c1;
										this.link(c1,writeTo);
									} else {
										this.link(this.channelVars[cid1],writeTo);
									}
								} else {
									var f10 = $bind(this,this.check);
									var writeTo11 = writeTo;
									var isAffected11 = isAffected;
									hxsl_Tools.iter(e,function(e15) {
										f10(e15,writeTo11,isAffected11);
									});
								}
							} else {
								var f11 = $bind(this,this.check);
								var writeTo12 = writeTo;
								var isAffected12 = isAffected;
								hxsl_Tools.iter(e,function(e16) {
									f11(e16,writeTo12,isAffected12);
								});
							}
						} else {
							var f12 = $bind(this,this.check);
							var writeTo13 = writeTo;
							var isAffected13 = isAffected;
							hxsl_Tools.iter(e,function(e17) {
								f12(e17,writeTo13,isAffected13);
							});
						}
					} else {
						var f13 = $bind(this,this.check);
						var writeTo14 = writeTo;
						var isAffected14 = isAffected;
						hxsl_Tools.iter(e,function(e18) {
							f13(e18,writeTo14,isAffected14);
						});
					}
					break;
				default:
					var f14 = $bind(this,this.check);
					var writeTo15 = writeTo;
					var isAffected15 = isAffected;
					hxsl_Tools.iter(e,function(e19) {
						f14(e19,writeTo15,isAffected15);
					});
				}
			} else {
				var f15 = $bind(this,this.check);
				var writeTo16 = writeTo;
				var isAffected16 = isAffected;
				hxsl_Tools.iter(e,function(e20) {
					f15(e20,writeTo16,isAffected16);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var e21 = _g.econd;
			var affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			var len = affect.length;
			var _g2 = 0;
			while(_g2 < writeTo.length) {
				var v10 = writeTo[_g2];
				++_g2;
				if(affect.indexOf(v10) < 0) {
					affect.push(v10);
				}
			}
			this.check(e21,affect,isAffected);
			var _g17 = 0;
			var _g23 = len;
			while(_g17 < _g23) {
				var i1 = _g17++;
				var v11 = affect[i1];
				if(isAffected.indexOf(v11) < 0) {
					isAffected.push(v11);
				}
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v12 = _g.v;
			var affect1 = [];
			this.check(loop,writeTo,affect1);
			this.check(it,affect1,isAffected);
			var _g3 = 0;
			while(_g3 < affect1.length) {
				var v13 = affect1[_g3];
				++_g3;
				if(isAffected.indexOf(v13) < 0) {
					isAffected.push(v13);
				}
			}
			break;
		default:
			var f16 = $bind(this,this.check);
			var writeTo17 = writeTo;
			var isAffected17 = isAffected;
			hxsl_Tools.iter(e,function(e22) {
				f16(e22,writeTo17,isAffected17);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var _g3 = _g.eelse;
			var _g2 = _g.eif;
			var cond = _g.econd;
			var writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _g12 = _g.e2;
			var _g11 = _g.e1;
			var _g10 = _g.op;
			switch(_g10._hx_index) {
			case 4:
				var _g15 = _g11.t;
				var _g14 = _g11.p;
				var _g13 = _g11.e;
				switch(_g13._hx_index) {
				case 1:
					var v = _g13.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e3) {
							return _gthis.mapExpr(e3,true);
						});
					}
					break;
				case 9:
					var _g18 = _g13.regs;
					var _g17 = _g13.e;
					var _g21 = _g17.t;
					var _g20 = _g17.p;
					var _g19 = _g17.e;
					if(_g19._hx_index == 1) {
						var v1 = _g19.v;
						if(!this.get(v1).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e4) {
								return _gthis.mapExpr(e4,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e5) {
							return _gthis.mapExpr(e5,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e6) {
						return _gthis.mapExpr(e6,true);
					});
				}
				break;
			case 20:
				var _g23 = _g10.op;
				var _g26 = _g11.t;
				var _g25 = _g11.p;
				var _g24 = _g11.e;
				switch(_g24._hx_index) {
				case 1:
					var v2 = _g24.v;
					if(!this.get(v2).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e7) {
							return _gthis.mapExpr(e7,true);
						});
					}
					break;
				case 9:
					var _g29 = _g24.regs;
					var _g28 = _g24.e;
					var _g32 = _g28.t;
					var _g31 = _g28.p;
					var _g30 = _g28.e;
					if(_g30._hx_index == 1) {
						var v3 = _g30.v;
						if(!this.get(v3).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e8) {
								return _gthis.mapExpr(e8,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e9) {
							return _gthis.mapExpr(e9,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e10) {
						return _gthis.mapExpr(e10,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e11) {
					return _gthis.mapExpr(e11,true);
				});
			}
			break;
		case 7:
			var _g6 = _g.init;
			var v4 = _g.v;
			if(!this.get(v4).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e12) {
					return _gthis.mapExpr(e12,true);
				});
			}
			break;
		case 8:
			var _g35 = _g.args;
			var _g34 = _g.e;
			var _g38 = _g34.t;
			var _g37 = _g34.p;
			var _g36 = _g34.e;
			if(_g36._hx_index == 2) {
				switch(_g36.g._hx_index) {
				case 63:
					if(_g35.length == 3) {
						var _g59 = _g35[2];
						var _g57 = _g35[0];
						var _g62 = _g59.t;
						var _g61 = _g59.p;
						var _g60 = _g59.e;
						if(_g60._hx_index == 0) {
							var _g63 = _g60.c;
							if(_g63._hx_index == 2) {
								var uv = _g35[1];
								var cid = _g63.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e13) {
									return _gthis.mapExpr(e13,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e14) {
								return _gthis.mapExpr(e14,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e15) {
							return _gthis.mapExpr(e15,true);
						});
					}
					break;
				case 64:
					if(_g35.length == 4) {
						var _g43 = _g35[3];
						var _g40 = _g35[0];
						var _g46 = _g43.t;
						var _g45 = _g43.p;
						var _g44 = _g43.e;
						if(_g44._hx_index == 0) {
							var _g47 = _g44.c;
							if(_g47._hx_index == 2) {
								var uv1 = _g35[1];
								var lod = _g35[2];
								var cid1 = _g47.v;
								var c1 = this.channelVars[cid1];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c1), t : c1.type, p : e.p},this.mapExpr(uv1,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e16) {
									return _gthis.mapExpr(e16,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e17) {
								return _gthis.mapExpr(e17,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e18) {
							return _gthis.mapExpr(e18,true);
						});
					}
					break;
				case 65:
					if(_g35.length == 3) {
						var _g51 = _g35[2];
						var _g49 = _g35[0];
						var _g54 = _g51.t;
						var _g53 = _g51.p;
						var _g52 = _g51.e;
						if(_g52._hx_index == 0) {
							var _g55 = _g52.c;
							if(_g55._hx_index == 2) {
								var pos = _g35[1];
								var cid2 = _g55.v;
								var c2 = this.channelVars[cid2];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c2), t : c2.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e19) {
									return _gthis.mapExpr(e19,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e20) {
								return _gthis.mapExpr(e20,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e21) {
							return _gthis.mapExpr(e21,true);
						});
					}
					break;
				case 66:
					if(_g35.length == 4) {
						var _g68 = _g35[3];
						var _g65 = _g35[0];
						var _g71 = _g68.t;
						var _g70 = _g68.p;
						var _g69 = _g68.e;
						if(_g69._hx_index == 0) {
							var _g72 = _g69.c;
							if(_g72._hx_index == 2) {
								var pos1 = _g35[1];
								var lod1 = _g35[2];
								var cid3 = _g72.v;
								var c3 = this.channelVars[cid3];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c3), t : c3.type, p : e.p},this.mapExpr(pos1,true),this.mapExpr(lod1,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e22) {
									return _gthis.mapExpr(e22,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e23) {
								return _gthis.mapExpr(e23,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e24) {
							return _gthis.mapExpr(e24,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e25) {
						return _gthis.mapExpr(e25,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e26) {
					return _gthis.mapExpr(e26,true);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var econd = _g.eif;
			var e27 = _g.econd;
			var e28 = this.mapExpr(e27,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e28.t, p : e28.p};
			}
			return { e : hxsl_TExprDef.TIf(e28,econd1,eelse1), p : e28.p, t : e28.t};
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v5 = _g.v;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v5,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e29) {
				return _gthis.mapExpr(e29,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		var _g = v.type;
		var v21;
		if(_g._hx_index == 17) {
			var _g1 = _g.size;
			v21 = true;
		} else {
			v21 = false;
		}
		v2 = { id : v21 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g2 = v2.type;
		switch(_g2._hx_index) {
		case 13:
			var vl = _g2.vl;
			var _g21 = [];
			var _g3 = 0;
			while(_g3 < vl.length) {
				var v1 = vl[_g3];
				++_g3;
				_g21.push(this.mapVar(v1));
			}
			v2.type = hxsl_Type.TStruct(_g21);
			break;
		case 15:
			var _g8 = _g2.size;
			if(_g8._hx_index == 1) {
				var t = _g2.t;
				var vs = _g8.v;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g22 = c.c;
						if(_g22._hx_index == 2) {
							var v3 = _g22.v;
							var _g23 = v2.type;
							var tmp;
							if(_g23._hx_index == 15) {
								var _g4 = _g23.size;
								var _g31 = _g23.t;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v3)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v3));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g24 = v2.type;
					var tmp1;
					if(_g24._hx_index == 15) {
						var _g41 = _g24.size;
						var _g32 = _g24.t;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					v2.type = tmp1 ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		case 16:
			var _g5 = _g2.size;
			if(_g5._hx_index == 1) {
				var t1 = _g2.t;
				var vs1 = _g5.v;
				var c1 = this.constants.h[vs1.id];
				if(c1 != null) {
					if(c1 == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
					} else if(c1._hx_index == 0) {
						var _g25 = c1.c;
						if(_g25._hx_index == 2) {
							var v4 = _g25.v;
							var _g26 = v2.type;
							var tmp2;
							if(_g26._hx_index == 15) {
								var _g42 = _g26.size;
								var _g33 = _g26.t;
								tmp2 = true;
							} else {
								tmp2 = false;
							}
							v2.type = tmp2 ? hxsl_Type.TArray(t1,hxsl_SizeDecl.SConst(v4)) : hxsl_Type.TBuffer(t1,hxsl_SizeDecl.SConst(v4));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
					}
				} else {
					var vs21 = this.mapVar(vs1);
					var _g27 = v2.type;
					var tmp3;
					if(_g27._hx_index == 15) {
						var _g43 = _g27.size;
						var _g34 = _g27.t;
						tmp3 = true;
					} else {
						tmp3 = false;
					}
					v2.type = tmp3 ? hxsl_Type.TArray(t1,hxsl_SizeDecl.SVar(vs21)) : hxsl_Type.TBuffer(t1,hxsl_SizeDecl.SVar(vs21));
				}
			}
			break;
		default:
		}
		return v2;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g11 = 0;
			var _g21 = f.args;
			while(_g11 < _g21.length) {
				var a = _g21[_g11];
				++_g11;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(!this.inlineCalls || f.kind != hxsl_FunctionKind.Helper) {
				funs.push(f21);
			}
			this.funMap.set(f21.ref,f);
		}
		var _g22 = 0;
		var _g3 = funs.length;
		while(_g22 < _g3) {
			var i = _g22++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g4 = [];
		var _g5 = 0;
		var _g6 = s.vars;
		while(_g5 < _g6.length) {
			var v = _g6[_g5];
			++_g5;
			_g4.push(this.mapVar(v));
		}
		return { name : s1, vars : _g4, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g._hx_index == 12) {
			var _g1 = _g.e;
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var econd = _g1.econd;
							var eif = _g1.eif;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var eelse = _g.eelse;
			var eif1 = _g.eif;
			var cond = _g.econd;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif2 = this.handleReturn(eif1,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif2,this.handleReturn(eelse,isFinal)), t : eif2.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v2 = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v2 == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v2,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				var _g = args[0];
				var _g3 = _g.t;
				var _g2 = _g.p;
				var _g1 = _g.e;
				if(_g1._hx_index == 0) {
					var _g4 = _g1.c;
					if(_g4._hx_index == 2) {
						var i = _g4.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			var i1;
			var _g5 = args[0].e;
			if(_g5._hx_index == 0) {
				var _g11 = _g5.c;
				if(_g11._hx_index == 2) {
					var i2 = _g11.v;
					i1 = i2;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw new js__$Boot_HaxeError("assert");
			}
			var channel = oldArgs[0];
			var _g31 = channel.e;
			var channel1;
			if(_g31._hx_index == 1) {
				var v = _g31.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g51 = channel.t;
			if(_g51._hx_index == 17) {
				var i3 = _g51.size;
				count = i3;
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i1 & 7,null);
			var targs = [channel];
			var _g7 = 1;
			var _g8 = args.length;
			while(_g7 < _g8) {
				var i4 = _g7++;
				targs.push(args[i4]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i1 >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			var args1 = args;
			var _g6 = 0;
			while(_g6 < args1.length) {
				var a = args1[_g6];
				++_g6;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,ifBlock: function(e) {
		var tmp;
		if(e != null) {
			var _g = e.e;
			var tmp1;
			if(_g._hx_index == 10) {
				var _g3 = _g.eelse;
				var _g2 = _g.eif;
				var _g1 = _g.econd;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return e;
		}
		return { e : hxsl_TExprDef.TBlock([e]), t : e.t, p : e.p};
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var _g26 = _g.c;
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			var _g4 = _g.g;
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var _g11 = _g1.c;
				d = e2.e;
			} else {
				d = hxsl_TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			var el = _g.el;
			var out = [];
			var last = el.length - 1;
			var _g2 = 0;
			var _g12 = el.length;
			while(_g2 < _g12) {
				var i = _g2++;
				var isVal1 = isVal && i == last;
				var e3 = this.evalExpr(el[i],isVal1);
				var _g3 = e3.e;
				switch(_g3._hx_index) {
				case 0:
					var _g21 = _g3.c;
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				case 1:
					var _g13 = _g3.v;
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				default:
					out.push(e3);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			var e12 = this.evalExpr(e11);
			var e22 = this.evalExpr(e21);
			switch(op._hx_index) {
			case 0:
				var _g5 = e22.e;
				var _g14 = e12.e;
				if(_g14._hx_index == 0) {
					var _g22 = _g14.c;
					switch(_g22._hx_index) {
					case 2:
						if(_g5._hx_index == 0) {
							var _g7 = _g5.c;
							if(_g7._hx_index == 2) {
								var a = _g22.v;
								var b = _g7.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g5._hx_index == 0) {
							var _g41 = _g5.c;
							if(_g41._hx_index == 3) {
								var a1 = _g22.v;
								var b1 = _g41.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a1 + b1));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 1:
				var _g6 = e22.e;
				var _g15 = e12.e;
				if(_g15._hx_index == 0) {
					var _g23 = _g15.c;
					switch(_g23._hx_index) {
					case 2:
						if(_g6._hx_index == 0) {
							var _g71 = _g6.c;
							if(_g71._hx_index == 2) {
								var a2 = _g23.v;
								var b2 = _g71.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a2 * b2 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g6._hx_index == 0) {
							var _g42 = _g6.c;
							if(_g42._hx_index == 3) {
								var a3 = _g23.v;
								var b3 = _g42.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a3 * b3));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 2:
				var _g8 = e22.e;
				var _g16 = e12.e;
				if(_g16._hx_index == 0) {
					var _g24 = _g16.c;
					switch(_g24._hx_index) {
					case 2:
						if(_g8._hx_index == 0) {
							var _g72 = _g8.c;
							if(_g72._hx_index == 2) {
								var a4 = _g24.v;
								var b4 = _g72.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a4 / b4 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g8._hx_index == 0) {
							var _g43 = _g8.c;
							if(_g43._hx_index == 3) {
								var a5 = _g24.v;
								var b5 = _g43.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a5 / b5));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 3:
				var _g9 = e22.e;
				var _g17 = e12.e;
				if(_g17._hx_index == 0) {
					var _g25 = _g17.c;
					switch(_g25._hx_index) {
					case 2:
						if(_g9._hx_index == 0) {
							var _g73 = _g9.c;
							if(_g73._hx_index == 2) {
								var a6 = _g25.v;
								var b6 = _g73.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a6 - b6 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g9._hx_index == 0) {
							var _g44 = _g9.c;
							if(_g44._hx_index == 3) {
								var a7 = _g25.v;
								var b7 = _g44.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a7 - b7));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 5:
				var _g10 = e22.e;
				var _g18 = e12.e;
				if(_g18._hx_index == 0) {
					var _g27 = _g18.c;
					switch(_g27._hx_index) {
					case 0:
						d = _g10._hx_index == 0 ? _g10.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g91 = _g27.b;
						if(_g10._hx_index == 0) {
							var _g101 = _g10.c;
							switch(_g101._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a8 = _g91;
								var b8 = _g101.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a8 == b8 ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g121 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g131 = _g10.c;
							switch(_g131._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a9 = _g121;
								var b9 = _g131.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a9 - b9 == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g61 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g74 = _g10.c;
							switch(_g74._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a10 = _g61;
								var b10 = _g74.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a10 > b10 ? 1 : a10 == b10 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g31 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g45 = _g10.c;
							switch(_g45._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a11 = _g31;
								var b11 = _g45.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a11 > b11 ? 1 : a11 == b11 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 6:
				var _g19 = e22.e;
				var _g110 = e12.e;
				if(_g110._hx_index == 0) {
					var _g28 = _g110.c;
					switch(_g28._hx_index) {
					case 0:
						d = _g19._hx_index == 0 ? _g19.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g92 = _g28.b;
						if(_g19._hx_index == 0) {
							var _g102 = _g19.c;
							switch(_g102._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a12 = _g92;
								var b12 = _g102.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a12 == b12 ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g122 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g132 = _g19.c;
							switch(_g132._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a13 = _g122;
								var b13 = _g132.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a13 - b13 != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g62 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g75 = _g19.c;
							switch(_g75._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a14 = _g62;
								var b14 = _g75.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a14 > b14 ? 1 : a14 == b14 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g32 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g46 = _g19.c;
							switch(_g46._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a15 = _g32;
								var b15 = _g46.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a15 > b15 ? 1 : a15 == b15 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 7:
				var _g20 = e22.e;
				var _g111 = e12.e;
				if(_g111._hx_index == 0) {
					var _g29 = _g111.c;
					switch(_g29._hx_index) {
					case 0:
						d = _g20._hx_index == 0 ? _g20.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g93 = _g29.b;
						if(_g20._hx_index == 0) {
							var _g103 = _g20.c;
							switch(_g103._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a16 = _g93;
								var b16 = _g103.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a16 == b16 ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g123 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g133 = _g20.c;
							switch(_g133._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a17 = _g123;
								var b17 = _g133.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a17 - b17 > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g63 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g76 = _g20.c;
							switch(_g76._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a18 = _g63;
								var b18 = _g76.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a18 > b18 ? 1 : a18 == b18 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g33 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g47 = _g20.c;
							switch(_g47._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a19 = _g33;
								var b19 = _g47.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a19 > b19 ? 1 : a19 == b19 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 8:
				var _g30 = e22.e;
				var _g112 = e12.e;
				if(_g112._hx_index == 0) {
					var _g210 = _g112.c;
					switch(_g210._hx_index) {
					case 0:
						d = _g30._hx_index == 0 ? _g30.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g94 = _g210.b;
						if(_g30._hx_index == 0) {
							var _g104 = _g30.c;
							switch(_g104._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a20 = _g94;
								var b20 = _g104.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a20 == b20 ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g124 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g134 = _g30.c;
							switch(_g134._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a21 = _g124;
								var b21 = _g134.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a21 - b21 >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g64 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g77 = _g30.c;
							switch(_g77._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a22 = _g64;
								var b22 = _g77.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a22 > b22 ? 1 : a22 == b22 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g34 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g48 = _g30.c;
							switch(_g48._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a23 = _g34;
								var b23 = _g48.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a23 > b23 ? 1 : a23 == b23 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 9:
				var _g35 = e22.e;
				var _g113 = e12.e;
				if(_g113._hx_index == 0) {
					var _g211 = _g113.c;
					switch(_g211._hx_index) {
					case 0:
						d = _g35._hx_index == 0 ? _g35.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g95 = _g211.b;
						if(_g35._hx_index == 0) {
							var _g105 = _g35.c;
							switch(_g105._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a24 = _g95;
								var b24 = _g105.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a24 == b24 ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g125 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g135 = _g35.c;
							switch(_g135._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a25 = _g125;
								var b25 = _g135.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a25 - b25 < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g65 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g78 = _g35.c;
							switch(_g78._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a26 = _g65;
								var b26 = _g78.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a26 > b26 ? 1 : a26 == b26 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g36 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g49 = _g35.c;
							switch(_g49._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a27 = _g36;
								var b27 = _g49.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a27 > b27 ? 1 : a27 == b27 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 10:
				var _g37 = e22.e;
				var _g114 = e12.e;
				if(_g114._hx_index == 0) {
					var _g212 = _g114.c;
					switch(_g212._hx_index) {
					case 0:
						d = _g37._hx_index == 0 ? _g37.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g96 = _g212.b;
						if(_g37._hx_index == 0) {
							var _g106 = _g37.c;
							switch(_g106._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a28 = _g96;
								var b28 = _g106.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a28 == b28 ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g126 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g136 = _g37.c;
							switch(_g136._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a29 = _g126;
								var b29 = _g136.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a29 - b29 <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g66 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g79 = _g37.c;
							switch(_g79._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a30 = _g66;
								var b30 = _g79.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a30 > b30 ? 1 : a30 == b30 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g38 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g410 = _g37.c;
							switch(_g410._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a31 = _g38;
								var b31 = _g410.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a31 > b31 ? 1 : a31 == b31 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 11:
				var _g39 = e22.e;
				var _g115 = e12.e;
				if(_g115._hx_index == 0) {
					var _g213 = _g115.c;
					if(_g213._hx_index == 2) {
						if(_g39._hx_index == 0) {
							var _g411 = _g39.c;
							if(_g411._hx_index == 2) {
								var a32 = _g213.v;
								var b32 = _g411.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a32 & b32));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 12:
				var _g40 = e22.e;
				var _g116 = e12.e;
				if(_g116._hx_index == 0) {
					var _g214 = _g116.c;
					if(_g214._hx_index == 2) {
						if(_g40._hx_index == 0) {
							var _g412 = _g40.c;
							if(_g412._hx_index == 2) {
								var a33 = _g214.v;
								var b33 = _g412.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a33 | b33));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 13:
				var _g50 = e22.e;
				var _g117 = e12.e;
				if(_g117._hx_index == 0) {
					var _g215 = _g117.c;
					if(_g215._hx_index == 2) {
						if(_g50._hx_index == 0) {
							var _g413 = _g50.c;
							if(_g413._hx_index == 2) {
								var a34 = _g215.v;
								var b34 = _g413.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a34 ^ b34));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 14:
				var _g51 = e22.e;
				var _g118 = e12.e;
				if(_g118._hx_index == 0) {
					var _g216 = _g118.c;
					if(_g216._hx_index == 1) {
						var _g310 = _g216.b;
						if(_g51._hx_index == 0) {
							var _g414 = _g51.c;
							if(_g414._hx_index == 1) {
								var a35 = _g310;
								var b35 = _g414.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a35 && b35));
							} else {
								var a36 = _g310;
								d = a36 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a36)) : e22.e;
							}
						} else {
							var a37 = _g310;
							d = a37 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a37)) : e22.e;
						}
					} else if(_g51._hx_index == 0) {
						var _g67 = _g51.c;
						if(_g67._hx_index == 1) {
							var a38 = _g67.b;
							d = a38 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a38)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g51._hx_index == 0) {
					var _g81 = _g51.c;
					if(_g81._hx_index == 1) {
						var a39 = _g81.b;
						d = a39 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a39)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 15:
				var _g52 = e22.e;
				var _g119 = e12.e;
				if(_g119._hx_index == 0) {
					var _g217 = _g119.c;
					if(_g217._hx_index == 1) {
						var _g311 = _g217.b;
						if(_g52._hx_index == 0) {
							var _g415 = _g52.c;
							if(_g415._hx_index == 1) {
								var a40 = _g311;
								var b36 = _g415.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a40 || b36));
							} else {
								var a41 = _g311;
								d = a41 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a41)) : e22.e;
							}
						} else {
							var a42 = _g311;
							d = a42 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a42)) : e22.e;
						}
					} else if(_g52._hx_index == 0) {
						var _g68 = _g52.c;
						if(_g68._hx_index == 1) {
							var a43 = _g68.b;
							d = a43 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a43)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g52._hx_index == 0) {
					var _g82 = _g52.c;
					if(_g82._hx_index == 1) {
						var a44 = _g82.b;
						d = a44 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a44)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 16:
				var _g53 = e22.e;
				var _g120 = e12.e;
				if(_g120._hx_index == 0) {
					var _g218 = _g120.c;
					if(_g218._hx_index == 2) {
						if(_g53._hx_index == 0) {
							var _g416 = _g53.c;
							if(_g416._hx_index == 2) {
								var a45 = _g218.v;
								var b37 = _g416.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a45 << b37));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 17:
				var _g54 = e22.e;
				var _g127 = e12.e;
				if(_g127._hx_index == 0) {
					var _g219 = _g127.c;
					if(_g219._hx_index == 2) {
						if(_g54._hx_index == 0) {
							var _g417 = _g54.c;
							if(_g417._hx_index == 2) {
								var a46 = _g219.v;
								var b38 = _g417.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a46 >> b38));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 18:
				var _g55 = e22.e;
				var _g128 = e12.e;
				if(_g128._hx_index == 0) {
					var _g220 = _g128.c;
					if(_g220._hx_index == 2) {
						if(_g55._hx_index == 0) {
							var _g418 = _g55.c;
							if(_g418._hx_index == 2) {
								var a47 = _g220.v;
								var b39 = _g418.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a47 >>> b39));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 19:
				var _g56 = e22.e;
				var _g129 = e12.e;
				if(_g129._hx_index == 0) {
					var _g221 = _g129.c;
					switch(_g221._hx_index) {
					case 2:
						if(_g56._hx_index == 0) {
							var _g710 = _g56.c;
							if(_g710._hx_index == 2) {
								var a48 = _g221.v;
								var b40 = _g710.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a48 % b40 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g56._hx_index == 0) {
							var _g419 = _g56.c;
							if(_g419._hx_index == 3) {
								var a49 = _g221.v;
								var b41 = _g419.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a49 % b41));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 20:
				var _g57 = op.op;
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 22:
				throw new js__$Boot_HaxeError("assert");
			case 23:
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 6:
			var e4 = _g.e1;
			var op1 = _g.op;
			var e5 = this.evalExpr(e4);
			var _g58 = e5.e;
			if(_g58._hx_index == 0) {
				var c1 = _g58.c;
				switch(op1._hx_index) {
				case 2:
					if(c1._hx_index == 1) {
						var b42 = c1.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b42));
					} else {
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				case 3:
					switch(c1._hx_index) {
					case 2:
						var i1 = c1.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i1));
						break;
					case 3:
						var f = c1.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op1,e5);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op1,e5);
			}
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v1),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var eargs = _g.args;
			var c2 = _g.e;
			var c3 = this.evalExpr(c2);
			var _g59 = [];
			var _g130 = 0;
			while(_g130 < eargs.length) {
				var a50 = eargs[_g130];
				++_g130;
				_g59.push(this.evalExpr(a50));
			}
			var args = _g59;
			var _g222 = c3.e;
			switch(_g222._hx_index) {
			case 1:
				if(!this.inlineCalls) {
					d = hxsl_TExprDef.TCall(c3,args);
				} else {
					var v3 = _g222.v;
					if(this.funMap.h.__keys__[v3.__id__] != null) {
						var f1 = this.funMap.h[v3.__id__];
						var outExprs = [];
						var undo = [];
						var _g223 = 0;
						var _g312 = f1.args.length;
						while(_g223 < _g312) {
							var i2 = _g223++;
							var v4 = [f1.args[i2]];
							var e6 = args[i2];
							var _g224 = e6.e;
							switch(_g224._hx_index) {
							case 0:
								var _g107 = _g224.c;
								var old = [this.constants.h[v4[0].id]];
								undo.push((function(old1,v5) {
									return function() {
										if(old1[0] == null) {
											_gthis.constants.remove(v5[0].id);
										} else {
											_gthis.constants.h[v5[0].id] = old1[0];
										}
									};
								})(old,v4));
								this.constants.h[v4[0].id] = e6.e;
								break;
							case 1:
								var _g313 = _g224.v;
								var _g97 = _g313.type;
								var _g83 = _g313.qualifiers;
								var _g711 = _g313.parent;
								var _g69 = _g313.name;
								var _g420 = _g313.id;
								switch(_g313.kind._hx_index) {
								case 0:case 1:case 2:
									var old2 = [this.constants.h[v4[0].id]];
									undo.push((function(old3,v6) {
										return function() {
											if(old3[0] == null) {
												_gthis.constants.remove(v6[0].id);
											} else {
												_gthis.constants.h[v6[0].id] = old3[0];
											}
										};
									})(old2,v4));
									this.constants.h[v4[0].id] = e6.e;
									break;
								default:
									var old4 = [this.varMap.h[v4[0].__id__]];
									if(old4[0] == null) {
										undo.push((function(v7) {
											return function() {
												_gthis.varMap.remove(v7[0]);
											};
										})(v4));
									} else {
										this.varMap.remove(v4[0]);
										undo.push((function(old5,v8) {
											return function() {
												_gthis.varMap.set(v8[0],old5[0]);
											};
										})(old4,v4));
									}
									var v21 = this.mapVar(v4[0]);
									outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e6), t : hxsl_Type.TVoid, p : e6.p});
								}
								break;
							default:
								var old6 = [this.varMap.h[v4[0].__id__]];
								if(old6[0] == null) {
									undo.push((function(v9) {
										return function() {
											_gthis.varMap.remove(v9[0]);
										};
									})(v4));
								} else {
									this.varMap.remove(v4[0]);
									undo.push((function(old7,v10) {
										return function() {
											_gthis.varMap.set(v10[0],old7[0]);
										};
									})(old6,v4));
								}
								var v22 = this.mapVar(v4[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v22,e6), t : hxsl_Type.TVoid, p : e6.p});
							}
						}
						var e7 = this.handleReturn(this.evalExpr(f1.expr,false),true);
						var _g421 = 0;
						while(_g421 < undo.length) {
							var u = undo[_g421];
							++_g421;
							u();
						}
						var _g510 = e7.e;
						if(_g510._hx_index == 4) {
							var el1 = _g510.el;
							var _g511 = 0;
							while(_g511 < el1.length) {
								var e8 = el1[_g511];
								++_g511;
								outExprs.push(e8);
							}
						} else {
							outExprs.push(e7);
						}
						d = hxsl_TExprDef.TBlock(outExprs);
					} else {
						d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
					}
				}
				break;
			case 2:
				var g = _g222.g;
				var v11 = this.evalCall(g,args,eargs,e.p);
				d = v11 != null ? v11 : hxsl_TExprDef.TCall(c3,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
			}
			break;
		case 9:
			var r = _g.regs;
			var e9 = _g.e;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e9),r.slice());
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			var econd1 = this.evalExpr(econd);
			var _g60 = econd1.e;
			if(_g60._hx_index == 0) {
				var _g137 = _g60.c;
				if(_g137._hx_index == 1) {
					var b43 = _g137.b;
					d = b43 ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g70 = eelse.e;
						if(_g70._hx_index == 0 && _g70.c._hx_index == 0) {
							eelse = null;
						}
					}
					eif = this.ifBlock(eif);
					eelse = this.ifBlock(eelse);
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g80 = eelse.e;
					if(_g80._hx_index == 0 && _g80.c._hx_index == 0) {
						eelse = null;
					}
				}
				eif = this.ifBlock(eif);
				eelse = this.ifBlock(eelse);
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e10 = _g.e;
			d = hxsl_TExprDef.TReturn(e10 == null ? null : this.evalExpr(e10));
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v12 = _g.v;
			var v23 = this.mapVar(v12);
			var it1 = this.evalExpr(it);
			var e13;
			var _g84 = it1.e;
			if(_g84._hx_index == 5) {
				var _g314 = _g84.e2;
				var _g225 = _g84.e1;
				if(_g84.op._hx_index == 21) {
					var _g610 = _g225.t;
					var _g512 = _g225.p;
					var _g422 = _g225.e;
					if(_g422._hx_index == 0) {
						var _g712 = _g422.c;
						if(_g712._hx_index == 2) {
							var _g1110 = _g314.t;
							var _g108 = _g314.p;
							var _g98 = _g314.e;
							if(_g98._hx_index == 0) {
								var _g1210 = _g98.c;
								if(_g1210._hx_index == 2) {
									var start = _g712.v;
									var len = _g1210.v;
									if(this.unrollLoops) {
										var out1 = [];
										var _g85 = start;
										var _g138 = len;
										while(_g85 < _g138) {
											var i3 = _g85++;
											this.constants.h[v12.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i3));
											out1.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v12.id);
										e13 = hxsl_TExprDef.TBlock(out1);
									} else {
										e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
									}
								} else {
									e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
								}
							} else {
								e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
							}
						} else {
							e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
						}
					} else {
						e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
					}
				} else {
					e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
				}
			} else {
				e13 = hxsl_TExprDef.TFor(v23,it1,this.ifBlock(this.evalExpr(loop,false)));
			}
			this.varMap.remove(v12);
			d = e13;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e23 = _g.index;
			var e14 = _g.e;
			var e15 = this.evalExpr(e14);
			var e24 = this.evalExpr(e23);
			var _g86 = e24.e;
			var _g139 = e15.e;
			if(_g139._hx_index == 17) {
				if(_g86._hx_index == 0) {
					var _g315 = _g86.c;
					if(_g315._hx_index == 2) {
						var el2 = _g139.el;
						var i4 = _g315.v;
						d = i4 >= 0 && i4 < el2.length ? el2[i4].e : hxsl_TExprDef.TArray(e15,e24);
					} else {
						d = hxsl_TExprDef.TArray(e15,e24);
					}
				} else {
					d = hxsl_TExprDef.TArray(e15,e24);
				}
			} else {
				d = hxsl_TExprDef.TArray(e15,e24);
			}
			break;
		case 17:
			var el3 = _g.el;
			var _g87 = [];
			var _g140 = 0;
			while(_g140 < el3.length) {
				var e16 = el3[_g140];
				++_g140;
				_g87.push(this.evalExpr(e16));
			}
			d = hxsl_TExprDef.TArrayDecl(_g87);
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e17 = _g.e;
			var e18 = this.evalExpr(e17);
			var _g88 = [];
			var _g141 = 0;
			while(_g141 < cases.length) {
				var c4 = cases[_g141];
				++_g141;
				var _g142 = [];
				var _g226 = 0;
				var _g316 = c4.values;
				while(_g226 < _g316.length) {
					var v13 = _g316[_g226];
					++_g226;
					_g142.push(this.evalExpr(v13));
				}
				_g88.push({ values : _g142, expr : this.evalExpr(c4.expr,isVal)});
			}
			var cases1 = _g88;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g227 = e18.e;
			if(_g227._hx_index == 0) {
				var c5 = _g227.c;
				if(c5._hx_index == 2) {
					var val = c5.v;
					var _g228 = 0;
					while(_g228 < cases1.length) {
						var c6 = cases1[_g228];
						++_g228;
						var _g229 = 0;
						var _g317 = c6.values;
						while(_g229 < _g317.length) {
							var v14 = _g317[_g229];
							++_g229;
							var _g230 = v14.e;
							if(_g230._hx_index == 0) {
								var cst = _g230.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c6.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c6.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw new js__$Boot_HaxeError("Unsupported switch constant " + Std.string(c5));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e18,cases1,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var normalWhile = _g.normalWhile;
			var loop1 = _g.loop;
			var cond = _g.e;
			var cond1 = this.evalExpr(cond);
			var loop2 = this.evalExpr(loop1,false);
			d = hxsl_TExprDef.TWhile(cond1,this.ifBlock(loop2),normalWhile);
			break;
		case 20:
			var e19 = _g.e;
			var args1 = _g.args;
			var name = _g.m;
			var e25;
			if(name == "unroll") {
				var old8 = this.unrollLoops;
				this.unrollLoops = true;
				e25 = this.evalExpr(e19,isVal);
				this.unrollLoops = false;
			} else {
				e25 = this.evalExpr(e19,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args1,e25);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__ : true, __constructs__ : ["AIndex","AOffset"]
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a","stride","delta"],$_)
};
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	flatten: function(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			var p = s.funs[0].expr.p;
			var gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			var s1 = s.name;
			var s2 = s.vars.slice();
			var _g = [];
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			var _g3 = 0;
			var _g4 = s.vars;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				var _g31 = v.type;
				if(_g31._hx_index == 9) {
					var _g41 = _g31.size;
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g5 = 0;
		var _g11 = s.vars;
		while(_g5 < _g11.length) {
			var v1 = _g11[_g5];
			++_g5;
			this.gatherVar(v1);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl_Type.TSampler2DArray));
		this.packBuffers(allVars);
		var _g21 = [];
		var _g32 = 0;
		var _g42 = s.funs;
		while(_g32 < _g42.length) {
			var f1 = _g42[_g32];
			++_g32;
			_g21.push(this.mapFun(f1,$bind(this,this.mapExpr)));
		}
		var funs = _g21;
		var _g51 = 0;
		while(_g51 < textures.length) {
			var t = textures[_g51];
			++_g51;
			t.pos >>= 2;
		}
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			e = a == null ? e : this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			break;
		case 16:
			var _g1 = _g.e;
			var _g5 = _g1.t;
			var _g3 = _g1.e;
			if(_g3._hx_index == 1) {
				var eindex = _g.index;
				var vp = _g1.p;
				var v1 = _g3.v;
				var _g2 = eindex.e;
				var e1;
				if(_g2._hx_index == 0) {
					var _g11 = _g2.c;
					if(_g11._hx_index == 2) {
						var _g21 = _g11.v;
						e1 = true;
					} else {
						e1 = false;
					}
				} else {
					e1 = false;
				}
				if(!e1) {
					var a1 = this.varMap.h[v1.__id__];
					if(a1 == null) {
						e = e;
					} else {
						var _g31 = v1.type;
						if(_g31._hx_index == 15) {
							var _g51 = _g31.size;
							var t = _g31.t;
							var stride = this.varSize(t,a1.t);
							if(stride == 0 || (stride & 3) != 0) {
								throw new js__$Boot_HaxeError(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride >>= 2;
							eindex = this.mapExpr(eindex);
							var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
							e = this.access(a1,t,vp,hxsl_ARead.AOffset(a1,stride,stride == 1 ? toInt : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,toInt,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mapConsts: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 2:
				var v = c.v;
				return this.allocConst(v,e.p);
			case 3:
				var v1 = c.v;
				return this.allocConst(v1,e.p);
			default:
				return e;
			}
			break;
		case 2:
			var g = _g.g;
			switch(g._hx_index) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 26:
				this.allocConst(2.0,e.p);
				this.allocConst(3.0,e.p);
				break;
			case 54:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 55:
				this.allocConsts([1,0.00392156862745098,1.5378700499807768e-005,6.0308629411010845e-008],e.p);
				break;
			case 56:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 57:
				this.allocConst(0.5,e.p);
				break;
			case 58:
				this.allocConsts([0.5,0.5],e.p);
				this.allocConsts([0.5,-0.5],e.p);
				break;
			case 59:
				this.allocConsts([2,-2],e.p);
				this.allocConsts([-1,1],e.p);
				break;
			default:
			}
			break;
		case 5:
			var _g12 = _g.e2;
			var _g11 = _g.e1;
			if(_g.op._hx_index == 1) {
				var _g14 = _g12.p;
				var _g13 = _g12.e;
				if(_g12.t._hx_index == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			var _g17 = _g.args;
			var _g16 = _g.e;
			var _g20 = _g16.t;
			var _g19 = _g16.p;
			var _g18 = _g16.e;
			if(_g18._hx_index == 2) {
				if(_g18.g._hx_index == 42) {
					if(_g17.length == 2) {
						var _g23 = _g17[1];
						var _g22 = _g17[0];
						var _g26 = _g22.t;
						var _g25 = _g22.p;
						var _g24 = _g22.e;
						if(_g24._hx_index == 1) {
							var _g27 = _g24.v;
							var _g33 = _g27.type;
							var _g32 = _g27.qualifiers;
							var _g31 = _g27.parent;
							var _g30 = _g27.name;
							var _g28 = _g27.id;
							switch(_g27.kind._hx_index) {
							case 0:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g59 = _g23.t;
											var _g58 = _g23.p;
											var _g57 = _g23.e;
											if(_g57._hx_index == 0) {
												var _g60 = _g57.c;
												if(_g60._hx_index == 2) {
													if(_g60.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g38 = _g23.t;
											var _g37 = _g23.p;
											var _g36 = _g23.e;
											if(_g36._hx_index == 0) {
												var _g39 = _g36.c;
												if(_g39._hx_index == 2) {
													if(_g39.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g52 = _g23.t;
											var _g51 = _g23.p;
											var _g50 = _g23.e;
											if(_g50._hx_index == 0) {
												var _g53 = _g50.c;
												if(_g53._hx_index == 2) {
													if(_g53.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g45 = _g23.t;
											var _g44 = _g23.p;
											var _g43 = _g23.e;
											if(_g43._hx_index == 0) {
												var _g46 = _g43.c;
												if(_g46._hx_index == 2) {
													if(_g46.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g2 = _g.index;
			var _g1 = _g.e;
			var _g5 = _g2.t;
			var _g4 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 0) {
				var _g6 = _g3.c;
				if(_g6._hx_index == 2) {
					var _g7 = _g6.v;
					var ea = _g1;
					var eindex = _g2;
					return { e : hxsl_TExprDef.TArray(this.mapConsts(ea),eindex), t : e.t, p : e.p};
				} else {
					var ea1 = _g1;
					var eindex1 = _g2;
					var _g8 = ea1.t;
					if(_g8._hx_index == 15) {
						var _g21 = _g8.size;
						var t = _g8.t;
						var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				var ea2 = _g1;
				var eindex2 = _g2;
				var _g9 = ea2.t;
				if(_g9._hx_index == 15) {
					var _g29 = _g9.size;
					var t1 = _g9.t;
					var stride1 = this.varSize(t1,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride1,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	,allocConst: function(v,p) {
		var index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	,allocConsts: function(va,p) {
		var _gthis = this;
		var pad = va.length - 1 & 3;
		var index = -1;
		var _g = 0;
		var _g1 = this.consts.length - (va.length - 1);
		while(_g < _g1) {
			var i = _g++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			var found = true;
			var _g2 = 0;
			var _g11 = va.length;
			while(_g2 < _g11) {
				var j = _g2++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			var _g21 = 0;
			while(_g21 < va.length) {
				var v = va[_g21];
				++_g21;
				this.consts.push(v);
			}
		}
		switch(va.length) {
		case 1:
			return { e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,mkInt: function(v,pos) {
		return { e : hxsl_TExprDef.TConst(hxsl_Const.CInt(v)), t : hxsl_Type.TInt, p : pos};
	}
	,readIndex: function(a,index,pos) {
		return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a.g), t : a.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a.pos >> 2) + index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a.t), p : pos};
	}
	,readOffset: function(a,stride,delta,index,pos) {
		var index1 = (a.pos >> 2) + index;
		var offset = index1 == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
		return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a.g), t : a.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a.t), p : pos};
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp1 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp2 = hxsl_Type.TFun([]);
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a1.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a2 = acc.a;
				var index = a2.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a2.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a3 = acc.a;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a3.g), t : a3.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a3.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a3.t), p : pos};
				break;
			case 1:
				var delta1 = acc.delta;
				var stride1 = acc.stride;
				var a4 = acc.a;
				var index1 = (a4.pos >> 2) + 1;
				var offset1 = index1 == 0 ? delta1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a4.g), t : a4.g.type, p : pos},offset1), t : hxsl_Type.TVec(4,a4.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc._hx_index) {
			case 0:
				var a5 = acc.a;
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a5.g), t : a5.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a5.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a5.t), p : pos};
				break;
			case 1:
				var delta2 = acc.delta;
				var stride2 = acc.stride;
				var a6 = acc.a;
				var index2 = (a6.pos >> 2) + 2;
				var offset2 = index2 == 0 ? delta2 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a6.g), t : a6.g.type, p : pos},offset2), t : hxsl_Type.TVec(4,a6.t), p : pos};
				break;
			}
			var tmp6;
			switch(acc._hx_index) {
			case 0:
				var a7 = acc.a;
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a7.g), t : a7.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a7.pos >> 2) + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a7.t), p : pos};
				break;
			case 1:
				var delta3 = acc.delta;
				var stride3 = acc.stride;
				var a8 = acc.a;
				var index3 = (a8.pos >> 2) + 3;
				var offset3 = index3 == 0 ? delta3 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta3,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a8.g), t : a8.g.type, p : pos},offset3), t : hxsl_Type.TVec(4,a8.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp1, t : tmp2, p : pos},[tmp3,tmp4,tmp5,tmp6]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp7 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp8 = hxsl_Type.TFun([]);
			var tmp9;
			switch(acc._hx_index) {
			case 0:
				var a9 = acc.a;
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a9.g), t : a9.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a9.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a9.t), p : pos};
				break;
			case 1:
				var delta4 = acc.delta;
				var stride4 = acc.stride;
				var a10 = acc.a;
				var index4 = a10.pos >> 2;
				var offset4 = index4 == 0 ? delta4 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta4,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index4)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a10.g), t : a10.g.type, p : pos},offset4), t : hxsl_Type.TVec(4,a10.t), p : pos};
				break;
			}
			var tmp10;
			switch(acc._hx_index) {
			case 0:
				var a11 = acc.a;
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a11.g), t : a11.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a11.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a11.t), p : pos};
				break;
			case 1:
				var delta5 = acc.delta;
				var stride5 = acc.stride;
				var a12 = acc.a;
				var index5 = (a12.pos >> 2) + 1;
				var offset5 = index5 == 0 ? delta5 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta5,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index5)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a12.g), t : a12.g.type, p : pos},offset5), t : hxsl_Type.TVec(4,a12.t), p : pos};
				break;
			}
			var tmp11;
			switch(acc._hx_index) {
			case 0:
				var a13 = acc.a;
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a13.g), t : a13.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a13.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a13.t), p : pos};
				break;
			case 1:
				var delta6 = acc.delta;
				var stride6 = acc.stride;
				var a14 = acc.a;
				var index6 = (a14.pos >> 2) + 2;
				var offset6 = index6 == 0 ? delta6 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta6,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index6)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a14.g), t : a14.g.type, p : pos},offset6), t : hxsl_Type.TVec(4,a14.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp7, t : tmp8, p : pos},[tmp9,tmp10,tmp11]), t : hxsl_Type.TMat3x4, p : pos};
		case 15:
			var _g1 = t.size;
			if(_g1._hx_index == 0) {
				var t1 = t.t;
				var len = _g1.v;
				var stride7 = a.size / len | 0;
				var _g = [];
				var _g11 = 0;
				var _g2 = len;
				while(_g11 < _g2) {
					var i = _g11++;
					var a15 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride7 * i,stride7);
					_g.push(this.access(a15,t1,pos,hxsl_ARead.AIndex(a15)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				if(hxsl_Tools.isSampler(t)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a16 = acc.a;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a16.g), t : a16.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a16.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a16.t), p : pos};
						break;
					case 1:
						var delta7 = acc.delta;
						var stride8 = acc.stride;
						var a17 = acc.a;
						var index7 = a17.pos >> 2;
						var offset7 = index7 == 0 ? delta7 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta7,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index7)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a17.g), t : a17.g.type, p : pos},offset7), t : hxsl_Type.TVec(4,a17.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e1;
				switch(acc._hx_index) {
				case 0:
					var a18 = acc.a;
					e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a18.g), t : a18.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a18.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a18.t), p : pos};
					break;
				case 1:
					var delta8 = acc.delta;
					var stride9 = acc.stride;
					var a19 = acc.a;
					var index8 = a19.pos >> 2;
					var offset8 = index8 == 0 ? delta8 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta8,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index8)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a19.g), t : a19.g.type, p : pos},offset8), t : hxsl_Type.TVec(4,a19.t), p : pos};
					break;
				}
				if(size == 4) {
					if((a.pos & 3) != 0) {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					var sw = [];
					var _g3 = 0;
					var _g12 = size;
					while(_g3 < _g12) {
						var i1 = _g3++;
						sw.push(hxsl_Tools.SWIZ[i1 + (a.pos & 3)]);
					}
					e1 = { e : hxsl_TExprDef.TSwiz(e1,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e1.t = hxsl_Type.TFloat;
					e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size1 = t.size;
						e1.t = hxsl_Type.TVec(size1,hxsl_VecType.VFloat);
						e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size1 - 2]), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
					}
					break;
				default:
				}
				return e1;
			}
			break;
		default:
			if(hxsl_Tools.isSampler(t)) {
				var e2;
				switch(acc._hx_index) {
				case 0:
					var a20 = acc.a;
					e2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a20.g), t : a20.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a20.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a20.t), p : pos};
					break;
				case 1:
					var delta9 = acc.delta;
					var stride10 = acc.stride;
					var a21 = acc.a;
					var index9 = a21.pos >> 2;
					var offset9 = index9 == 0 ? delta9 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta9,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index9)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a21.g), t : a21.g.type, p : pos},offset9), t : hxsl_Type.TVec(4,a21.t), p : pos};
					break;
				}
				e2.t = t;
				return e2;
			}
			var size2 = this.varSize(t,a.t);
			if(size2 > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			var e3;
			switch(acc._hx_index) {
			case 0:
				var a22 = acc.a;
				e3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a22.g), t : a22.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a22.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a22.t), p : pos};
				break;
			case 1:
				var delta10 = acc.delta;
				var stride11 = acc.stride;
				var a23 = acc.a;
				var index10 = a23.pos >> 2;
				var offset10 = index10 == 0 ? delta10 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta10,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index10)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a23.g), t : a23.g.type, p : pos},offset10), t : hxsl_Type.TVec(4,a23.t), p : pos};
				break;
			}
			if(size2 == 4) {
				if((a.pos & 3) != 0) {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				var sw1 = [];
				var _g4 = 0;
				var _g13 = size2;
				while(_g4 < _g13) {
					var i2 = _g4++;
					sw1.push(hxsl_Tools.SWIZ[i2 + (a.pos & 3)]);
				}
				e3 = { e : hxsl_TExprDef.TSwiz(e3,sw1), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e3.t = hxsl_Type.TFloat;
				e3 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e3]), t : t, p : pos};
				break;
			case 5:
				if(t.t._hx_index == 0) {
					var size3 = t.size;
					e3.t = hxsl_Type.TVec(size3,hxsl_VecType.VFloat);
					e3 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size3 - 2]), t : hxsl_Type.TFun([]), p : pos},[e3]), t : t, p : pos};
				}
				break;
			default:
			}
			return e3;
		}
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _g13 = _g.args;
			var _g12 = _g.e;
			var _g16 = _g12.t;
			var _g15 = _g12.p;
			var _g14 = _g12.e;
			if(_g14._hx_index == 2) {
				if(_g14.g._hx_index == 52) {
					if(_g13.length == 1) {
						var _g18 = _g13[0];
						var _g21 = _g18.t;
						var _g20 = _g18.p;
						var _g19 = _g18.e;
						if(_g19._hx_index == 8) {
							var _g22 = _g19.e;
							var _g26 = _g22.t;
							var _g25 = _g22.p;
							var _g24 = _g22.e;
							if(_g24._hx_index == 2) {
								if(_g24.g._hx_index == 51) {
									var args = _g19.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g11 = rem;
										while(_g1 < _g11) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g2 = e.e;
										if(_g2._hx_index == 8) {
											var _g4 = _g2.args;
											var e1 = _g2.e;
											emat = e1;
										} else {
											throw new js__$Boot_HaxeError("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g23 = _g.index;
			var _g17 = _g.e;
			var _g5 = _g17.t;
			var _g41 = _g17.p;
			var _g3 = _g17.e;
			if(_g3._hx_index == 17) {
				var _g9 = _g23.t;
				var _g8 = _g23.p;
				var _g7 = _g23.e;
				if(_g7._hx_index == 0) {
					var _g10 = _g7.c;
					if(_g10._hx_index == 2) {
						var el = _g3.el;
						var i1 = _g10.v;
						if(i1 >= 0 && i1 < el.length) {
							return el[i1];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			if(v.type != t) {
				var tmp;
				if(t == hxsl_Type.TSampler2D) {
					var _g1 = v.type;
					if(_g1._hx_index == 17) {
						var _g11 = _g1.size;
						tmp = true;
					} else {
						tmp = false;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,alloc.length << 2,1);
			a.v = v;
			this.varMap.set(v,a);
			alloc.push(a);
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(alloc.length));
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(vars) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : "buffers", type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			var tmp;
			if(_g1._hx_index == 16) {
				var _g2 = _g1.size;
				var _g11 = _g1.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				var a = new hxsl__$Flatten_Alloc(g,null,alloc.length,1);
				a.v = v;
				alloc.push(a);
				this.outVars.push(v);
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0)),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var tmp;
			if(!hxsl_Tools.isSampler(v.type)) {
				var _g1 = v.type;
				if(_g1._hx_index == 16) {
					var _g2 = _g1.size;
					var _g11 = _g1.t;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var size = this.varSize(v.type,t);
			var best = null;
			var _g3 = 0;
			while(_g3 < alloc.length) {
				var a = alloc[_g3];
				++_g3;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a1 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a1);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a2 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a2.v = v;
				this.varMap.set(v,a2);
				alloc.push(a2);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a3 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a3);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var t2 = v.t;
			var n = v.size;
			if(t == t2) {
				return n;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			var _g3 = v.size;
			if(_g3._hx_index == 0) {
				var at = v.t;
				var n1 = _g3.v;
				return this.varSize(at,t) * n1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.gatherVar(v1);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl__$Globals_GlobalSlot_$Impl_$ = {};
$hxClasses["hxsl._Globals.GlobalSlot_Impl_"] = hxsl__$Globals_GlobalSlot_$Impl_$;
hxsl__$Globals_GlobalSlot_$Impl_$.__name__ = "hxsl._Globals.GlobalSlot_Impl_";
hxsl__$Globals_GlobalSlot_$Impl_$._new = function(name) {
	var this1 = hxsl_Globals.allocID(name);
	return this1;
};
hxsl__$Globals_GlobalSlot_$Impl_$.toInt = function(this1) {
	return this1;
};
hxsl__$Globals_GlobalSlot_$Impl_$.set = function(this1,globals,v) {
	globals.map.h[this1] = v;
};
hxsl__$Globals_GlobalSlot_$Impl_$.get = function(this1,globals) {
	return globals.map.h[this1];
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var _this = hxsl_Globals.MAP;
	var id = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		var _this1 = hxsl_Globals.MAP;
		if(__map_reserved[path] != null) {
			_this1.setReserved(path,id);
		} else {
			_this1.h[path] = id;
		}
	}
	return id;
};
hxsl_Globals.getIDName = function(id) {
	return hxsl_Globals.ALL[id];
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,get: function(path) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		return this1.h[key];
	}
	,fastSet: function(id,v) {
		this.map.h[id] = v;
	}
	,fastGet: function(id) {
		return this.map.h[id];
	}
	,resetChannels: function() {
		this.maxChannels = 0;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw new js__$Boot_HaxeError("Too many unique channels");
		}
		var i1 = this.maxChannels++;
		this.channels[i1] = t;
		return i1;
	}
	,__class__: hxsl_Globals
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxsl_GlslOut = function() {
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.compile = function(s) {
	var out = new hxsl_GlslOut();
	out.glES = 1;
	out.version = 100;
	return out.run(s);
};
hxsl_GlslOut.prototype = {
	get_isES: function() {
		return this.glES != null;
	}
	,get_isES2: function() {
		if(this.glES != null) {
			return this.glES <= 2;
		} else {
			return false;
		}
	}
	,add: function(v) {
		this.buf.b += Std.string(v);
	}
	,ident: function(v) {
		var v1 = this.varName(v);
		this.buf.b += Std.string(v1);
	}
	,decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var k = t.t;
			var size = t.size;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += Std.string("sampler2D");
			break;
		case 11:
			this.buf.b += Std.string("sampler2DArray");
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += Std.string("samplerCube");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			var _g7 = t.variants;
			this.buf.b += Std.string("function");
			break;
		case 15:
			var size1 = t.size;
			var t1 = t.t;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size1._hx_index) {
			case 0:
				var _g1 = size1.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v1 = _g1;
						this.buf.b += Std.string(v1);
					}
				} else {
					var v2 = _g1;
					this.buf.b += Std.string(v2);
				}
				break;
			case 1:
				var v3 = size1.v;
				var v4 = this.varName(v3);
				this.buf.b += Std.string(v4);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var _g5 = t.size;
			var _g4 = t.t;
			throw new js__$Boot_HaxeError("assert");
		case 17:
			var n1 = t.size;
			this.buf.b += Std.string("channel" + n1);
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var size = _g.size;
			var t = _g.t;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g1 = size.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _g1;
						this.buf.b += Std.string(n);
					}
				} else {
					var n1 = _g1;
					this.buf.b += Std.string(n1);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var size1 = _g.size;
			var t1 = _g.t;
			this.buf.b += Std.string("uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t1,size1);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t1,size1);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v3 = this.varName(v);
			this.buf.b += Std.string(v3);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var _g3 = _g.args;
			var _g2 = _g.m;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			var _g2 = args[0].t;
			switch(_g2._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				var _g11 = _g2.size;
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:case 36:
			return "texelFetch";
		case 50:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			this.decl("#extension GL_OES_standard_derivatives:enable");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS.get(g);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v1 = c.v;
				this.buf.b += Std.string("\"" + v1 + "\"");
				break;
			}
			break;
		case 1:
			var v2 = _g.v;
			var v3 = this.varName(v2);
			this.buf.b += Std.string(v3);
			break;
		case 2:
			var g = _g.g;
			var v4 = hxsl_GlslOut.GLOBALS.get(g);
			this.buf.b += Std.string(v4);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e2,t2);
				this.newLine(e2);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			var _g2 = e21.t;
			var _g11 = e11.t;
			switch(op._hx_index) {
			case 1:
				if(_g11._hx_index == 5) {
					if(_g11.size == 3) {
						if(_g11.t._hx_index == 1) {
							if(_g2._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								var tmp;
								if(op._hx_index == 20) {
									var _g3 = op.op;
									tmp = true;
								} else {
									tmp = false;
								}
								if(tmp) {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e11,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e21,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								var v5 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v5);
								this.buf.b += Std.string(" ");
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							var v6 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v6);
							this.buf.b += Std.string(" ");
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v7 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v7);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v8 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v8);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 5:
				if(_g11._hx_index == 5) {
					var _g31 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g5 = _g2.t;
						var _g4 = _g2.size;
						var n = _g11.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v9;
						switch(op._hx_index) {
						case 5:
							v9 = "equal";
							break;
						case 6:
							v9 = "notEqual";
							break;
						case 7:
							v9 = "greaterThan";
							break;
						case 8:
							v9 = "greaterThanEqual";
							break;
						case 9:
							v9 = "lessThan";
							break;
						case 10:
							v9 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v9);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v10 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v10);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v11 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v11);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 6:
				if(_g11._hx_index == 5) {
					var _g17 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g19 = _g2.t;
						var _g18 = _g2.size;
						var n1 = _g11.size;
						this.buf.b += Std.string("vec" + n1 + "(");
						var v12;
						switch(op._hx_index) {
						case 5:
							v12 = "equal";
							break;
						case 6:
							v12 = "notEqual";
							break;
						case 7:
							v12 = "greaterThan";
							break;
						case 8:
							v12 = "greaterThanEqual";
							break;
						case 9:
							v12 = "lessThan";
							break;
						case 10:
							v12 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v12);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v13 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v13);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v14 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v14);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 7:
				if(_g11._hx_index == 5) {
					var _g24 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g26 = _g2.t;
						var _g25 = _g2.size;
						var n2 = _g11.size;
						this.buf.b += Std.string("vec" + n2 + "(");
						var v15;
						switch(op._hx_index) {
						case 5:
							v15 = "equal";
							break;
						case 6:
							v15 = "notEqual";
							break;
						case 7:
							v15 = "greaterThan";
							break;
						case 8:
							v15 = "greaterThanEqual";
							break;
						case 9:
							v15 = "lessThan";
							break;
						case 10:
							v15 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v15);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v16 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v16);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v17 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v17);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 8:
				if(_g11._hx_index == 5) {
					var _g7 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g9 = _g2.t;
						var _g8 = _g2.size;
						var n3 = _g11.size;
						this.buf.b += Std.string("vec" + n3 + "(");
						var v18;
						switch(op._hx_index) {
						case 5:
							v18 = "equal";
							break;
						case 6:
							v18 = "notEqual";
							break;
						case 7:
							v18 = "greaterThan";
							break;
						case 8:
							v18 = "greaterThanEqual";
							break;
						case 9:
							v18 = "lessThan";
							break;
						case 10:
							v18 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v18);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v19 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v19);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v20 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v20);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 9:
				if(_g11._hx_index == 5) {
					var _g111 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g13 = _g2.t;
						var _g12 = _g2.size;
						var n4 = _g11.size;
						this.buf.b += Std.string("vec" + n4 + "(");
						var v21;
						switch(op._hx_index) {
						case 5:
							v21 = "equal";
							break;
						case 6:
							v21 = "notEqual";
							break;
						case 7:
							v21 = "greaterThan";
							break;
						case 8:
							v21 = "greaterThanEqual";
							break;
						case 9:
							v21 = "lessThan";
							break;
						case 10:
							v21 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v21);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v22 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v22);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v23 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v23);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 10:
				if(_g11._hx_index == 5) {
					var _g28 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g30 = _g2.t;
						var _g29 = _g2.size;
						var n5 = _g11.size;
						this.buf.b += Std.string("vec" + n5 + "(");
						var v24;
						switch(op._hx_index) {
						case 5:
							v24 = "equal";
							break;
						case 6:
							v24 = "notEqual";
							break;
						case 7:
							v24 = "greaterThan";
							break;
						case 8:
							v24 = "greaterThanEqual";
							break;
						case 9:
							v24 = "lessThan";
							break;
						case 10:
							v24 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v24);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v25 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v25);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v26 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v26);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e11,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e21,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					var tmp1;
					if(op._hx_index == 20) {
						var _g6 = op.op;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v27 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v27);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g11._hx_index == 5) {
						if(_g11.size == 3) {
							if(_g11.t._hx_index == 1) {
								if(_g2._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									var tmp2;
									if(op._hx_index == 20) {
										var _g10 = op.op;
										tmp2 = true;
									} else {
										tmp2 = false;
									}
									if(tmp2) {
										this.addValue(e11,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e11,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e21,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" ");
									var v28 = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v28);
									this.buf.b += Std.string(" ");
									this.addValue(e21,tabs);
								}
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								var v29 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v29);
								this.buf.b += Std.string(" ");
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							var v30 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v30);
							this.buf.b += Std.string(" ");
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v31 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v31);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						var tmp3;
						if(op._hx_index == 20) {
							var _g14 = op.op;
							tmp3 = true;
						} else {
							tmp3 = false;
						}
						if(tmp3) {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v32 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v32);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
					break;
				default:
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v33 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v33);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			default:
				this.addValue(e11,tabs);
				this.buf.b += Std.string(" ");
				var v34 = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v34);
				this.buf.b += Std.string(" ");
				this.addValue(e21,tabs);
			}
			break;
		case 6:
			var e12 = _g.e1;
			var op1 = _g.op;
			var _this = this.buf;
			var _this1 = _this.b;
			var tmp4;
			switch(op1._hx_index) {
			case 0:
				tmp4 = "++";
				break;
			case 1:
				tmp4 = "--";
				break;
			case 2:
				tmp4 = "!";
				break;
			case 3:
				tmp4 = "-";
				break;
			case 4:
				tmp4 = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp4);
			this.addValue(e12,tabs);
			break;
		case 7:
			var init = _g.init;
			var v35 = _g.v;
			this.locals.h[v35.id] = v35;
			if(init != null) {
				var v36 = this.varName(v35);
				this.buf.b += Std.string(v36);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _g35 = _g.args;
			var _g34 = _g.e;
			var _g38 = _g34.t;
			var _g37 = _g34.p;
			var _g36 = _g34.e;
			if(_g36._hx_index == 2) {
				var _g39 = _g36.g;
				switch(_g39._hx_index) {
				case 35:
					var args = _g35;
					var g1 = _g39;
					var v37 = this.getFunName(g1,args,e.t);
					this.buf.b += Std.string(v37);
					this.buf.b += Std.string("(");
					var _g15 = 0;
					while(_g15 < args.length) {
						var e3 = args[_g15];
						++_g15;
						this.addValue(e3,tabs);
						this.buf.b += Std.string(", ");
					}
					this.buf.b += Std.string("0)");
					break;
				case 53:
					if(_g35.length == 1) {
						var e4 = _g35[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e4,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v38 = _g34;
						var args1 = _g35;
						var _g16 = v38.e;
						if(_g16._hx_index == 2) {
							var g2 = _g16.g;
							var v39 = this.getFunName(g2,args1,e.t);
							this.buf.b += Std.string(v39);
						} else {
							this.addValue(v38,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g21 = 0;
						while(_g21 < args1.length) {
							var e5 = args1[_g21];
							++_g21;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e5,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				default:
					var args2 = _g35;
					var v40 = _g34;
					var _g20 = v40.e;
					if(_g20._hx_index == 2) {
						var g3 = _g20.g;
						var v41 = this.getFunName(g3,args2,e.t);
						this.buf.b += Std.string(v41);
					} else {
						this.addValue(v40,tabs);
					}
					this.buf.b += Std.string("(");
					var first1 = true;
					var _g22 = 0;
					while(_g22 < args2.length) {
						var e6 = args2[_g22];
						++_g22;
						if(first1) {
							first1 = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e6,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var args3 = _g35;
				var v42 = _g34;
				var _g23 = v42.e;
				if(_g23._hx_index == 2) {
					var g4 = _g23.g;
					var v43 = this.getFunName(g4,args3,e.t);
					this.buf.b += Std.string(v43);
				} else {
					this.addValue(v42,tabs);
				}
				this.buf.b += Std.string("(");
				var first2 = true;
				var _g27 = 0;
				while(_g27 < args3.length) {
					var e7 = args3[_g27];
					++_g27;
					if(first2) {
						first2 = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e7,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var regs = _g.regs;
			var e8 = _g.e;
			if(e8.t._hx_index == 3) {
				var _g32 = 0;
				while(_g32 < regs.length) {
					var r = regs[_g32];
					++_g32;
					if(r != hxsl_Component.X) {
						throw new js__$Boot_HaxeError("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e8,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				this.addValue(e8,tabs);
				this.buf.b += Std.string(".");
				var _g33 = 0;
				while(_g33 < regs.length) {
					var r1 = regs[_g33];
					++_g33;
					var _this2 = this.buf;
					var _this3 = _this2.b;
					var tmp5;
					switch(r1._hx_index) {
					case 0:
						tmp5 = "x";
						break;
					case 1:
						tmp5 = "y";
						break;
					case 2:
						tmp5 = "z";
						break;
					case 3:
						tmp5 = "w";
						break;
					}
					_this2.b = _this3 + Std.string(tmp5);
				}
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e9 = _g.e;
			if(e9 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e9,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v44 = _g.v;
			this.locals.h[v44.id] = v44;
			var _g40 = it.e;
			if(_g40._hx_index == 5) {
				if(_g40.op._hx_index == 21) {
					var e22 = _g40.e2;
					var e13 = _g40.e1;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v44.name + "=");
					this.addValue(e13,tabs);
					this.buf.b += Std.string(";" + v44.name + "<");
					this.addValue(e22,tabs);
					this.buf.b += Std.string(";" + v44.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var index = _g.index;
			var e10 = _g.e;
			this.addValue(e10,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el1 = _g.el;
			var _g41 = e.t;
			if(_g41._hx_index == 15) {
				var _g210 = _g41.size;
				var t = _g41.t;
				this.addType(t);
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			this.buf.b += Std.string("[" + el1.length + "]");
			this.buf.b += Std.string("(");
			var first3 = true;
			var _g310 = 0;
			while(_g310 < el1.length) {
				var e14 = el1[_g310];
				++_g310;
				if(first3) {
					first3 = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e14,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			var _g161 = _g.def;
			var _g151 = _g.cases;
			var _g141 = _g.e;
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _g112 = _g.loop;
			var _g101 = _g.e;
			if(_g.normalWhile == false) {
				var e15 = _g101;
				var loop1 = _g112;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop1,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e15,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var e16 = _g101;
				var loop2 = _g112;
				this.buf.b += Std.string("while( ");
				this.addValue(e16,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop2,tabs);
			}
			break;
		case 20:
			var _g71 = _g.args;
			var _g61 = _g.m;
			var e17 = _g.e;
			this.addExpr(e17,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		var _this = hxsl_GlslOut.KWDS;
		if(__map_reserved[n] != null ? _this.existsReserved(n) : _this.h.hasOwnProperty(n)) {
			n = "_" + n;
		}
		var _this1 = this.allNames;
		if(__map_reserved[n] != null ? _this1.existsReserved(n) : _this1.h.hasOwnProperty(n)) {
			var k = 2;
			n += "_";
			while(true) {
				var _this2 = this.allNames;
				var key = n + k;
				if(!(__map_reserved[key] != null ? _this2.existsReserved(key) : _this2.h.hasOwnProperty(key))) {
					break;
				}
				++k;
			}
			n += k;
		}
		this.varNames.h[v.id] = n;
		var value = v.id;
		var _this3 = this.allNames;
		if(__map_reserved[n] != null) {
			_this3.setReserved(n,value);
		} else {
			_this3.h[n] = value;
		}
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var _g1 = _g.el;
			return true;
		case 13:
			var _g6 = _g.it;
			var _g5 = _g.v;
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			var _g2 = _g.e;
			if(_g.normalWhile == true) {
				var loop1 = _g.loop;
				return this.isBlock(loop1);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			var _g = v.type;
			var tmp;
			if(_g._hx_index == 16) {
				var _g2 = _g.size;
				var _g1 = _g.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.buf.b += Std.string("layout(std140) ");
			}
			this.buf.b += Std.string("uniform ");
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g11 = 0;
			var _g21 = v.qualifiers;
			while(_g11 < _g21.length) {
				var q = _g21[_g11];
				++_g11;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		this.decl("precision mediump float;");
		if(s.funs.length != 1) {
			throw new js__$Boot_HaxeError("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		this.initVars(s);
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g2 = 0;
		while(_g2 < locals.length) {
			var v = locals[_g2];
			++_g2;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g3 = 0;
		var _g4 = this.exprValues;
		while(_g3 < _g4.length) {
			var e1 = _g4[_g3];
			++_g3;
			this.buf.b += Std.string(e1);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
	,__properties__: {get_isES2:"get_isES2",get_isES:"get_isES"}
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.read = new haxe_ds_IntMap();
	this.write = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(batchMode) {
	if(batchMode == null) {
		batchMode = false;
	}
	this.debugDepth = 0;
	this.batchMode = batchMode;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	debug: function(msg,pos) {
	}
	,error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p) {
		switch(v.kind._hx_index) {
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 2:case 6:
			throw new js__$Boot_HaxeError("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g1 = v2.type;
		var _g2 = v.type;
		if(_g2._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var fl1 = _g2.vl;
				var fl2 = _g1.vl;
				var _g11 = 0;
				while(_g11 < fl1.length) {
					var f1 = fl1[_g11];
					++_g11;
					var ft = null;
					var _g12 = 0;
					while(_g12 < fl2.length) {
						var f2 = fl2[_g12];
						++_g12;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var _this = this.varMap;
		var v2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g2 = 0;
			var _g11 = v2.merged;
			while(_g2 < _g11.length) {
				var vm = _g11[_g2];
				++_g2;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			if(!(v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				tmp = v1.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || v1.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var _this1 = this.varMap;
					var key1 = key + k;
					var a = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
					if(a == null) {
						break;
					}
					var _g21 = 0;
					var _g3 = a.merged;
					while(_g21 < _g3.length) {
						var vm1 = _g3[_g21];
						++_g21;
						if(vm1 == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var vid = this.allVars.length + 1;
		var v21 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a1 = new hxsl__$Linker_AllocatedVar();
		a1.v = v21;
		a1.merged = [v];
		a1.path = key;
		a1.id = vid;
		a1.parent = parent;
		a1.instanceIndex = this.curInstance;
		this.allVars.push(a1);
		var _this2 = this.varMap;
		if(__map_reserved[key] != null) {
			_this2.setReserved(key,a1);
		} else {
			_this2.h[key] = a1;
		}
		var _g4 = v21.type;
		if(_g4._hx_index == 13) {
			var vl = _g4.vl;
			var _g5 = [];
			var _g12 = 0;
			while(_g12 < vl.length) {
				var v3 = vl[_g12];
				++_g12;
				_g5.push(this.allocVar(v3,p,key,a1).v);
			}
			v21.type = hxsl_Type.TStruct(_g5);
		}
		return a1;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.write.h.hasOwnProperty(v1.id)) {
					this.curShader.read.h[v1.id] = v1;
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _g11 = _g1.v;
					var v2 = _g11;
					if(!this.locals.h.hasOwnProperty(v2.id)) {
						var e21 = this.mapExprVar(e2);
						var v3 = this.allocVar(v2,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v3.id] = v3;
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v3.v), t : v3.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v4 = _g11;
						if(!this.locals.h.hasOwnProperty(v4.id)) {
							var e11 = this.mapExprVar(e1);
							var e22 = this.mapExprVar(e2);
							var v5 = this.allocVar(v4,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v5.id] = v5;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e22), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _g3 = _g1.regs;
					var _g2 = _g1.e;
					var _g6 = _g2.t;
					var _g5 = _g2.p;
					var _g4 = _g2.e;
					if(_g4._hx_index == 1) {
						var v6 = _g4.v;
						if(!this.locals.h.hasOwnProperty(v6.id)) {
							var e12 = this.mapExprVar(e1);
							var e23 = this.mapExprVar(e2);
							var v7 = this.allocVar(v6,e12.p);
							if(this.curShader != null) {
								this.curShader.write.h[v7.id] = v7;
							}
							return { e : hxsl_TExprDef.TBinop(op,e12,e23), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				var _g8 = op.op;
				switch(_g1._hx_index) {
				case 1:
					var v8 = _g1.v;
					if(!this.locals.h.hasOwnProperty(v8.id)) {
						var e13 = this.mapExprVar(e1);
						var e24 = this.mapExprVar(e2);
						var v9 = this.allocVar(v8,e13.p);
						if(this.curShader != null) {
							this.curShader.write.h[v9.id] = v9;
						}
						return { e : hxsl_TExprDef.TBinop(op,e13,e24), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _g111 = _g1.regs;
					var _g10 = _g1.e;
					var _g14 = _g10.t;
					var _g13 = _g10.p;
					var _g12 = _g10.e;
					if(_g12._hx_index == 1) {
						var v10 = _g12.v;
						if(!this.locals.h.hasOwnProperty(v10.id)) {
							var e14 = this.mapExprVar(e1);
							var e25 = this.mapExprVar(e2);
							var v11 = this.allocVar(v10,e14.p);
							if(this.curShader != null) {
								this.curShader.write.h[v11.id] = v11;
							}
							return { e : hxsl_TExprDef.TBinop(op,e14,e25), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var _g61 = _g.init;
			var v12 = _g.v;
			this.locals.h[v12.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var _g41 = _g.loop;
			var _g31 = _g.it;
			var v13 = _g.v;
			this.locals.h[v13.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var r = s.read.iterator();
		while(r.hasNext()) {
			var r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d2 = s.deps.keys();
			while(d2.hasNext()) {
				var d3 = d2.next();
				if(d3.vertex == null) {
					d3.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g1 = 0;
		while(_g1 < deps.length) {
			var d2 = deps[_g1];
			++_g1;
			this.collect(d2,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	,uniqueLocals: function(expr,locals) {
		var _g = expr.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var _g1 = new haxe_ds_StringMap();
			var k = locals.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				if(__map_reserved[k1] != null) {
					_g1.setReserved(k1,true);
				} else {
					_g1.h[k1] = true;
				}
			}
			var locals1 = _g1;
			var _g11 = 0;
			while(_g11 < el.length) {
				var e = el[_g11];
				++_g11;
				this.uniqueLocals(e,locals1);
			}
			break;
		case 7:
			var _g3 = _g.init;
			var v = _g.v;
			var key = v.name;
			if(__map_reserved[key] != null ? locals.existsReserved(key) : locals.h.hasOwnProperty(key)) {
				var k2 = 2;
				while(true) {
					var key1 = v.name + k2;
					if(!(__map_reserved[key1] != null ? locals.existsReserved(key1) : locals.h.hasOwnProperty(key1))) {
						break;
					}
					++k2;
				}
				v.name += k2;
			}
			var key2 = v.name;
			if(__map_reserved[key2] != null) {
				locals.setReserved(key2,true);
			} else {
				locals.h[key2] = true;
			}
			break;
		default:
			var f = $bind(this,this.uniqueLocals);
			var locals2 = locals;
			hxsl_Tools.iter(expr,function(expr1) {
				f(expr1,locals2);
			});
		}
	}
	,link: function(shadersData) {
		var _gthis = this;
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = new haxe_ds_ObjectMap();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shadersData.length) {
			var s = shadersData[_g1];
			++_g1;
			var s1 = s;
			var sreal = s1;
			if(dupShaders.h.__keys__[s1.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s1);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g2 = 0;
		while(_g2 < shadersData.length) {
			var s2 = shadersData[_g2];
			++_g2;
			this.isBatchShader = this.batchMode && StringTools.startsWith(s2.name,"batchShader_");
			var _g21 = 0;
			var _g3 = s2.vars;
			while(_g21 < _g3.length) {
				var v = _g3[_g21];
				++_g21;
				var v2 = this.allocVar(v,null);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g4 = 0;
			var _g5 = s2.funs;
			while(_g4 < _g5.length) {
				var f = _g5[_g4];
				++_g4;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var _g31 = 0;
		while(_g31 < shadersData.length) {
			var s3 = shadersData[_g31];
			++_g31;
			var _g32 = 0;
			var _g41 = s3.funs;
			while(_g32 < _g41.length) {
				var f1 = _g41[_g32];
				++_g32;
				var v3 = this.allocVar(f1.ref,f1.expr.p);
				if(v3.kind == null) {
					throw new js__$Boot_HaxeError("assert");
				}
				switch(v3.kind._hx_index) {
				case 0:case 1:
					this.addShader(s3.name + "." + (v3.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v3.kind == hxsl_FunctionKind.Vertex,f1.expr,priority);
					break;
				case 2:
					var prio;
					var status;
					switch(f1.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g42 = f1.expr.e;
					if(_g42._hx_index == 4) {
						var el = _g42.el;
						var index = 0;
						var _g43 = 0;
						while(_g43 < el.length) {
							var e = el[_g43];
							++_g43;
							this.addShader(s3.name + "." + f1.ref.name + index++,status,e,prio[0]++);
						}
					} else {
						this.addShader(s3.name + "." + f1.ref.name,status,f1.expr,prio[0]++);
					}
					break;
				case 3:
					throw new js__$Boot_HaxeError("Unexpected helper function in linker " + v3.v.name);
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g44 = 0;
		while(_g44 < outVars.length) {
			var v4 = outVars[_g44];
			++_g44;
			this.buildDependency(entry,this.allocVar(v4,null),false);
		}
		var _g51 = 0;
		var _g6 = this.shaders;
		while(_g51 < _g6.length) {
			var s4 = _g6[_g51];
			++_g51;
			if(s4.hasDiscard) {
				this.initDependencies(s4);
				entry.deps.set(s4,true);
			}
		}
		var _g7 = 0;
		var _g8 = this.shaders;
		while(_g7 < _g8.length) {
			var s5 = _g8[_g7];
			++_g7;
			if(s5.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var r = s5.read.iterator();
			while(r.hasNext()) {
				var r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s5.vertex = false;
			}
		}
		var v5 = [];
		var f2 = [];
		this.collect(entry,v5,true);
		this.collect(entry,f2,false);
		if(f2.pop() != entry) {
			throw new js__$Boot_HaxeError("assert");
		}
		var _g9 = 0;
		var _g10 = this.shaders;
		while(_g9 < _g10.length) {
			var s6 = _g10[_g9];
			++_g9;
			s6.marked = null;
		}
		var _g11 = 0;
		var _g12 = v5.concat(f2);
		while(_g11 < _g12.length) {
			var s7 = _g12[_g11];
			++_g11;
			var d = s7.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s7.name + " is unreachable",null);
				}
			}
			s7.marked = true;
		}
		var outVars1 = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v6) {
			if(varMap_h.hasOwnProperty(v6.id)) {
				return;
			}
			varMap_h[v6.id] = true;
			if(v6.v.parent != null) {
				addVar(v6.parent);
			} else {
				outVars1.push(v6.v);
			}
		};
		var _g13 = 0;
		var _g14 = v5.concat(f2);
		while(_g13 < _g14.length) {
			var s8 = _g14[_g13];
			++_g13;
			var v7 = s8.read.iterator();
			while(v7.hasNext()) {
				var v8 = v7.next();
				addVar(v8);
			}
			var v9 = s8.write.iterator();
			while(v9.hasNext()) {
				var v10 = v9.next();
				addVar(v10);
			}
		}
		var cleanVar = null;
		cleanVar = function(v11) {
			var _g15 = v11.type;
			if(_g15._hx_index == 13) {
				var vl = _g15.vl;
				if(v11.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g151 = 0;
					while(_g151 < vl.length) {
						var v12 = vl[_g151];
						++_g151;
						if(varMap_h.hasOwnProperty(v12.id)) {
							cleanVar(v12);
							vout.push(v12);
						}
					}
					v11.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g152 = 0;
		while(_g152 < outVars1.length) {
			var v13 = outVars1[_g152];
			++_g152;
			cleanVar(v13);
		}
		var build = function(kind,name,a) {
			var v14 = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars1.push(v14);
			var exprs = [];
			var _g16 = 0;
			while(_g16 < a.length) {
				var s9 = a[_g16];
				++_g16;
				var _g161 = s9.body.e;
				if(_g161._hx_index == 4) {
					var el1 = _g161.el;
					var _g162 = 0;
					while(_g162 < el1.length) {
						var e1 = el1[_g162];
						++_g162;
						exprs.push(e1);
					}
				} else {
					exprs.push(s9.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v14, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = [build(hxsl_FunctionKind.Vertex,"vertex",v5),build(hxsl_FunctionKind.Fragment,"fragment",f2)];
		var s10 = dupShaders.keys();
		while(s10.hasNext()) {
			var s11 = s10.next();
			var sreal1 = dupShaders.h[s11.__id__];
			if(s11 == sreal1) {
				continue;
			}
			var _g163 = 0;
			var _g17 = s11.vars.length;
			while(_g163 < _g17) {
				var i = _g163++;
				this.allocVar(s11.vars[i],null).merged.unshift(sreal1.vars[i]);
			}
		}
		return { name : "out", vars : outVars1, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__ : true, __constructs__ : ["Const","Value","PackNormal","PackFloat","Vec2","Vec3","Vec4","Swiz"]
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a","swiz"],$_)
};
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	case 23:
		return " in ";
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.check = function(s,from) {
	try {
		var vars = new haxe_ds_IntMap();
		var regVars = [];
		var regVar = null;
		regVar = function(v,reg) {
			if(reg) {
				if(vars.h.hasOwnProperty(v.id)) {
					throw new js__$Boot_HaxeError("Duplicate var " + v.id);
				}
				vars.h[v.id] = v;
				regVars.push(v);
			} else {
				vars.remove(v.id);
			}
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				var _g1 = 0;
				while(_g1 < vl.length) {
					var v1 = vl[_g1];
					++_g1;
					regVar(v1,reg);
				}
			}
		};
		var checkExpr = null;
		checkExpr = function(e) {
			var _g2 = e.e;
			switch(_g2._hx_index) {
			case 1:
				var v2 = _g2.v;
				if(!vars.h.hasOwnProperty(v2.id)) {
					throw new js__$Boot_HaxeError("Unbound var " + v2.name + "@" + v2.id);
				}
				break;
			case 4:
				var el = _g2.el;
				var old = regVars;
				regVars = [];
				var _g3 = 0;
				while(_g3 < el.length) {
					var e1 = el[_g3];
					++_g3;
					checkExpr(e1);
				}
				var _g11 = 0;
				while(_g11 < regVars.length) {
					var v3 = regVars[_g11];
					++_g11;
					regVar(v3,false);
				}
				regVars = old;
				break;
			case 7:
				var init = _g2.init;
				var v4 = _g2.v;
				if(init != null) {
					checkExpr(init);
				}
				regVar(v4,true);
				break;
			case 13:
				var loop = _g2.loop;
				var it = _g2.it;
				var v5 = _g2.v;
				checkExpr(it);
				regVar(v5,true);
				checkExpr(loop);
				regVar(v5,false);
				break;
			default:
				hxsl_Tools.iter(e,checkExpr);
			}
		};
		var _g4 = 0;
		var _g12 = s.vars;
		while(_g4 < _g12.length) {
			var v6 = _g12[_g4];
			++_g4;
			regVar(v6,true);
		}
		var _g21 = 0;
		var _g31 = s.funs;
		while(_g21 < _g31.length) {
			var f = _g31[_g21];
			++_g21;
			var _g22 = 0;
			var _g32 = f.args;
			while(_g22 < _g32.length) {
				var v7 = _g32[_g22];
				++_g22;
				regVar(v7,true);
			}
			checkExpr(f.expr);
			var _g41 = 0;
			var _g5 = f.args;
			while(_g41 < _g5.length) {
				var v8 = _g5[_g41];
				++_g41;
				regVar(v8,false);
			}
		}
	} catch( e2 ) {
		var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
		if(typeof(e3) == "string") {
			var msg = e3 + "\n    in\n" + hxsl_Printer.shaderToString(s,true);
			if(from != null) {
				var _g13 = [];
				var _g23 = 0;
				while(_g23 < from.length) {
					var s1 = from[_g23];
					++_g23;
					_g13.push(hxsl_Printer.shaderToString(s1,true));
				}
				msg += "\n    from\n\n" + _g13.join("\n\n");
			}
			throw new js__$Boot_HaxeError(msg);
		} else {
			throw e2;
		}
	}
};
hxsl_Printer.prototype = {
	add: function(v) {
		this.buffer.b += Std.string(v);
	}
	,shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,hxsl_VarKind.Var);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g2 = 0;
		var _g3 = s.funs;
		while(_g2 < _g3.length) {
			var f = _g3[_g2];
			++_g2;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,varString: function(v) {
		this.buffer = new StringBuf();
		this.addVar(v,null);
		return this.buffer.b;
	}
	,funString: function(f) {
		this.buffer = new StringBuf();
		this.addFun(f);
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index].toLowerCase() + "p";
					break;
				case 7:
					var max1 = q.max;
					var min = q.min;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@var ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g2 = v.type;
		if(_g2._hx_index == 13) {
			var vl = _g2.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g3 = 0;
			while(_g3 < vl.length) {
				var v2 = vl[_g3];
				++_g3;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v2,v2.kind,tabs,v2);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v3 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v3);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v1 = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v1);
			break;
		case 3:
			var e1 = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e2,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			this.addExpr(e11,tabs);
			var v2 = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v2);
			this.addExpr(e21,tabs);
			break;
		case 6:
			var e3 = _g.e1;
			var op1 = _g.op;
			var _this = this.buffer;
			var _this1 = _this.b;
			var tmp;
			switch(op1._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addExpr(e3,tabs);
			break;
		case 7:
			var init = _g.init;
			var v3 = _g.v;
			this.addVar(v3,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var el1 = _g.args;
			var e4 = _g.e;
			this.addExpr(e4,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g2 = 0;
			while(_g2 < el1.length) {
				var e5 = el1[_g2];
				++_g2;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e5,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var regs = _g.regs;
			var e6 = _g.e;
			this.addExpr(e6,tabs);
			this.buffer.b += Std.string(".");
			var _g3 = 0;
			while(_g3 < regs.length) {
				var r = regs[_g3];
				++_g3;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var cond = _g.econd;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e7 = _g.e;
			this.buffer.b += Std.string("return");
			if(e7 != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e7,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v4 = _g.v;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v4);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e22 = _g.index;
			var e12 = _g.e;
			this.addExpr(e12,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e22,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el2 = _g.el;
			this.buffer.b += Std.string("[");
			var first1 = true;
			var _g4 = 0;
			while(_g4 < el2.length) {
				var e8 = el2[_g4];
				++_g4;
				if(first1) {
					first1 = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e8,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e9 = _g.e;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e9,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g5 = 0;
			while(_g5 < cases.length) {
				var c1 = cases[_g5];
				++_g5;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first2 = true;
				var _g6 = 0;
				var _g11 = c1.values;
				while(_g6 < _g11.length) {
					var v5 = _g11[_g6];
					++_g6;
					if(first2) {
						first2 = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v5,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c1.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _g111 = _g.loop;
			var _g10 = _g.e;
			if(_g.normalWhile == false) {
				var e10 = _g10;
				var loop1 = _g111;
				var old1 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop1,tabs);
				tabs = old1;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e10,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var e13 = _g10;
				var loop2 = _g111;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e13,tabs);
				var old2 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop2,tabs);
				tabs = old2;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var e14 = _g.e;
			var args = _g.args;
			var m = _g.m;
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first3 = true;
				var _g7 = 0;
				while(_g7 < args.length) {
					var c2 = args[_g7];
					++_g7;
					if(first3) {
						first3 = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c2);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e14,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	clone: function(resetGID) {
		if(resetGID == null) {
			resetGID = false;
		}
		var p = new hxsl_AllocParam(this.name,this.pos,this.instance,this.index,this.type);
		if(this.perObjectGlobal != null) {
			p.perObjectGlobal = this.perObjectGlobal.clone(resetGID);
		}
		if(this.next != null) {
			p.next = this.next.clone(resetGID);
		}
		return p;
	}
	,__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	clone: function(resetGID) {
		if(resetGID == null) {
			resetGID = false;
		}
		var g = new hxsl_AllocGlobal(this.pos,this.path,this.type);
		if(this.next != null) {
			g.next = this.next.clone(resetGID);
		}
		if(resetGID) {
			g.gid = 0;
		}
		return g;
	}
	,__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	hasGlobal: function(gid) {
		return this.globals.h.hasOwnProperty(gid);
	}
	,__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
	this.tid = 1;
	this.uid = 1;
};
$hxClasses["hxsl.Serializer"] = hxsl_Serializer;
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.run = function(s) {
	return new hxsl_Serializer().serialize(s);
};
hxsl_Serializer.prototype = {
	writeArr: function(arr,f) {
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f(v);
		}
	}
	,readArr: function(f) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return _g;
	}
	,readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,writeVarInt: function(id) {
		if(id < 128) {
			this.out.addByte(id);
		} else {
			var n = id >> 8;
			if(n >= 127) {
				this.out.addByte(255);
				this.out.addInt32(n);
			} else {
				this.out.addByte(n | 128);
				this.out.addByte(id & 255);
			}
		}
	}
	,writeID: function(id) {
		var id2 = this.idMap.h[id];
		if(id2 == null) {
			id2 = this.uid++;
			this.idMap.h[id] = id2;
		}
		this.writeVarInt(id2);
	}
	,readID: function() {
		return this.readVarInt();
	}
	,writeTID: function(t) {
		var tid = this.typeIdMap.get(t);
		if(tid != null) {
			this.writeVarInt(tid);
			return false;
		}
		tid = this.tid++;
		this.typeIdMap.set(t,tid);
		this.writeVarInt(tid);
		return true;
	}
	,writeType: function(t) {
		this.out.addByte(t._hx_index);
		switch(t._hx_index) {
		case 5:
			var t1 = t.t;
			var size = t.size;
			this.out.addByte(size | t1._hx_index << 3);
			break;
		case 0:case 1:case 2:case 3:case 4:case 6:case 7:case 8:case 10:case 11:case 12:
			break;
		case 9:
			var size1 = t.size;
			this.out.addInt32(size1);
			break;
		case 13:
			var vl = t.vl;
			if(this.writeTID(t)) {
				var f = $bind(this,this.writeVar);
				this.writeVarInt(vl.length);
				var _g = 0;
				while(_g < vl.length) {
					var v = vl[_g];
					++_g;
					f(v);
				}
			}
			break;
		case 14:
			var variants = t.variants;
			break;
		case 15:
			var size2 = t.size;
			var t2 = t.t;
			this.writeType(t2);
			switch(size2._hx_index) {
			case 0:
				var v1 = size2.v;
				this.out.addByte(0);
				this.writeVarInt(v1);
				break;
			case 1:
				var v2 = size2.v;
				this.writeVar(v2);
				break;
			}
			break;
		case 16:
			var size3 = t.size;
			var t3 = t.t;
			this.writeType(t3);
			switch(size3._hx_index) {
			case 0:
				var v3 = size3.v;
				this.out.addByte(0);
				this.writeVarInt(v3);
				break;
			case 1:
				var v4 = size3.v;
				this.writeVar(v4);
				break;
			}
			break;
		case 17:
			var size4 = t.size;
			this.out.addByte(size4);
			break;
		}
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl_Type.TSampler2D;
		case 11:
			return hxsl_Type.TSampler2DArray;
		case 12:
			return hxsl_Type.TSamplerCube;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t1 = this.readType();
			var v1 = this.readVar();
			return hxsl_Type.TArray(t1,v1 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v1));
		case 16:
			var t2 = this.readType();
			var v2 = this.readVar();
			return hxsl_Type.TBuffer(t2,v2 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v2));
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,writeString: function(s) {
		var bytes = haxe_io_Bytes.ofString(s);
		this.writeVarInt(bytes.length);
		this.out.add(bytes);
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,writeVar: function(v) {
		if(v == null) {
			this.out.addByte(0);
			return;
		}
		this.writeID(v.id);
		if(this.varMap.h.hasOwnProperty(v.id)) {
			return;
		}
		this.varMap.h[v.id] = v;
		this.writeString(v.name);
		this.writeType(v.type);
		this.out.addByte(v.kind._hx_index);
		this.writeVar(v.parent);
		if(v.qualifiers == null) {
			this.out.addByte(0);
		} else {
			this.out.addByte(v.qualifiers.length);
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				this.out.addByte(q._hx_index);
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					this.out.addInt32(max == null ? 0 : max);
					break;
				case 1:case 2:case 3:case 5:case 8:
					break;
				case 4:
					var n = q.n;
					this.writeString(n);
					break;
				case 6:
					var p = q.p;
					this.out.addByte(p._hx_index);
					break;
				case 7:
					var max1 = q.max;
					var min = q.min;
					this.out.addDouble(min);
					this.out.addDouble(max1);
					break;
				case 9:
					var v1 = q.v;
					this.out.addInt32(v1);
					break;
				}
			}
		}
	}
	,writeFun: function(f) {
		this.out.addByte(f.kind._hx_index);
		this.writeVar(f.ref);
		var arr = f.args;
		var f1 = $bind(this,this.writeVar);
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f1(v);
		}
		this.writeType(f.ret);
		this.writeExpr(f.expr);
	}
	,writeConst: function(c) {
		this.out.addByte(c._hx_index);
		switch(c._hx_index) {
		case 0:
			break;
		case 1:
			var b = c.b;
			this.out.addByte(b ? 1 : 0);
			break;
		case 2:
			var v = c.v;
			this.out.addInt32(v);
			break;
		case 3:
			var v1 = c.v;
			this.out.addDouble(v1);
			break;
		case 4:
			var v2 = c.v;
			this.writeString(v2);
			break;
		}
	}
	,writeExpr: function(e) {
		var _gthis = this;
		if(e == null) {
			this.out.addByte(0);
			return;
		}
		this.out.addByte(e.e._hx_index + 1);
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.writeConst(c);
			break;
		case 1:
			var v = _g.v;
			this.writeVar(v);
			break;
		case 2:
			var g = _g.g;
			this.out.addByte(g._hx_index);
			break;
		case 3:
			var e1 = _g.e;
			this.writeExpr(e1);
			break;
		case 4:
			var el = _g.el;
			var f = $bind(this,this.writeExpr);
			this.writeVarInt(el.length);
			var _g1 = 0;
			while(_g1 < el.length) {
				var v1 = el[_g1];
				++_g1;
				f(v1);
			}
			break;
		case 5:
			var e2 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			if(op._hx_index == 20) {
				var op1 = op.op;
				this.out.addByte(op1._hx_index | 128);
			} else {
				this.out.addByte(op._hx_index);
			}
			this.writeExpr(e11);
			this.writeExpr(e2);
			break;
		case 6:
			var e12 = _g.e1;
			var op2 = _g.op;
			this.out.addByte(op2._hx_index);
			this.writeExpr(e12);
			break;
		case 7:
			var init = _g.init;
			var v2 = _g.v;
			this.writeVar(v2);
			this.writeExpr(init);
			break;
		case 8:
			var args = _g.args;
			var e3 = _g.e;
			this.writeExpr(e3);
			var f1 = $bind(this,this.writeExpr);
			this.writeVarInt(args.length);
			var _g2 = 0;
			while(_g2 < args.length) {
				var v3 = args[_g2];
				++_g2;
				f1(v3);
			}
			break;
		case 9:
			var regs = _g.regs;
			var e4 = _g.e;
			this.writeExpr(e4);
			if(regs.length == 0) {
				throw new js__$Boot_HaxeError("assert");
			}
			var bits = regs.length - 1;
			var k = 2;
			var _g3 = 0;
			while(_g3 < regs.length) {
				var r = regs[_g3];
				++_g3;
				bits |= r._hx_index << k;
				k += 2;
			}
			this.out.addByte(bits & 255);
			this.out.addByte(bits >> 8);
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.writeExpr(econd);
			this.writeExpr(eif);
			this.writeExpr(eelse);
			break;
		case 11:
			break;
		case 12:
			var e5 = _g.e;
			this.writeExpr(e5);
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v4 = _g.v;
			this.writeVar(v4);
			this.writeExpr(it);
			this.writeExpr(loop);
			break;
		case 14:
			break;
		case 15:
			break;
		case 16:
			var index = _g.index;
			var e6 = _g.e;
			this.writeExpr(e6);
			this.writeExpr(index);
			break;
		case 17:
			var el1 = _g.el;
			var f2 = $bind(this,this.writeExpr);
			this.writeVarInt(el1.length);
			var _g4 = 0;
			while(_g4 < el1.length) {
				var v5 = el1[_g4];
				++_g4;
				f2(v5);
			}
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e7 = _g.e;
			this.writeExpr(e7);
			this.writeVarInt(cases.length);
			var _g5 = 0;
			while(_g5 < cases.length) {
				var v6 = cases[_g5];
				++_g5;
				var arr = v6.values;
				var f3 = $bind(_gthis,_gthis.writeExpr);
				_gthis.writeVarInt(arr.length);
				var _g6 = 0;
				while(_g6 < arr.length) {
					var v7 = arr[_g6];
					++_g6;
					f3(v7);
				}
				_gthis.writeExpr(v6.expr);
			}
			this.writeExpr(def);
			break;
		case 19:
			var normalWhile = _g.normalWhile;
			var loop1 = _g.loop;
			var e8 = _g.e;
			this.writeExpr(e8);
			this.writeExpr(loop1);
			this.out.addByte(normalWhile ? 1 : 0);
			break;
		case 20:
			var e9 = _g.e;
			var args1 = _g.args;
			var m = _g.m;
			this.writeString(m);
			var f4 = $bind(this,this.writeConst);
			this.writeVarInt(args1.length);
			var _g7 = 0;
			while(_g7 < args1.length) {
				var v8 = args1[_g7];
				++_g7;
				f4(v8);
			}
			this.writeExpr(e9);
			break;
		}
		this.writeType(e.t);
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f1 = $bind(this,this.readExpr);
			var _g3 = [];
			var _g11 = 0;
			var _g21 = this.readVarInt();
			while(_g11 < _g21) {
				var i1 = _g11++;
				_g3.push(f1());
			}
			e = hxsl_TExprDef.TCall(e1,_g3);
			break;
		case 9:
			var e2 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g4 = [];
				var _g12 = 0;
				var _g22 = (bits & 3) + 1;
				while(_g12 < _g22) {
					var i2 = _g12++;
					_g4.push(hxsl_Serializer.REGS[bits >> i2 * 2 + 2 & 3]);
				}
				swiz = _g4;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e2,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f2 = $bind(this,this.readExpr);
			var _g5 = [];
			var _g13 = 0;
			var _g23 = this.readVarInt();
			while(_g13 < _g23) {
				var i3 = _g13++;
				_g5.push(f2());
			}
			e = hxsl_TExprDef.TArrayDecl(_g5);
			break;
		case 18:
			var e3 = this.readExpr();
			var _g6 = [];
			var _g14 = 0;
			var _g24 = this.readVarInt();
			while(_g14 < _g24) {
				var i4 = _g14++;
				var f3 = $bind(_gthis,_gthis.readExpr);
				var _g7 = [];
				var _g15 = 0;
				var _g25 = _gthis.readVarInt();
				while(_g15 < _g25) {
					var i5 = _g15++;
					_g7.push(f3());
				}
				_g6.push({ values : _g7, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e3,_g6,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e4 = this.readString();
			var f4 = $bind(this,this.readConst);
			var _g8 = [];
			var _g16 = 0;
			var _g26 = this.readVarInt();
			while(_g16 < _g26) {
				var i6 = _g16++;
				_g8.push(f4());
			}
			e = hxsl_TExprDef.TMeta(e4,_g8,this.readExpr());
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 16 & 255)) {
			throw new js__$Boot_HaxeError("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f1 = $bind(this,this.readFun);
		var _g3 = [];
		var _g11 = 0;
		var _g21 = this.readVarInt();
		while(_g11 < _g21) {
			var i1 = _g11++;
			_g3.push(f1());
		}
		return { name : tmp, vars : tmp1, funs : _g3};
	}
	,serialize: function(s) {
		this.varMap = new haxe_ds_IntMap();
		this.idMap = new haxe_ds_IntMap();
		this.typeIdMap = new haxe_ds_EnumValueMap();
		this.out = new haxe_io_BytesBuffer();
		this.out.addByte(hxsl_Serializer.SIGN & 255);
		this.out.addByte(hxsl_Serializer.SIGN >> 8 & 255);
		this.out.addByte(hxsl_Serializer.SIGN >> 16 & 255);
		this.writeString(s.name);
		var arr = s.vars;
		var f = $bind(this,this.writeVar);
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f(v);
		}
		var arr1 = s.funs;
		var f1 = $bind(this,this.writeFun);
		this.writeVarInt(arr1.length);
		var _g1 = 0;
		while(_g1 < arr1.length) {
			var v1 = arr1[_g1];
			++_g1;
			f1(v1);
		}
		return haxe_crypto_Base64.encode(this.out.getBytes(),false);
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		return new hxsl_ShaderList(s,shaders);
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	return shaders;
};
hxsl_ShaderList.prototype = {
	clone: function() {
		return new hxsl_ShaderList(this.s.clone(),this.next == null ? null : this.next.clone());
	}
	,iterator: function() {
		return new hxsl__$ShaderList_ShaderIterator(this,null);
	}
	,iterateTo: function(s) {
		return new hxsl__$ShaderList_ShaderIterator(this,s);
	}
	,__class__: hxsl_ShaderList
};
var hxsl__$ShaderList_ShaderIterator = function(l,last) {
	this.l = l;
	this.last = last;
};
$hxClasses["hxsl._ShaderList.ShaderIterator"] = hxsl__$ShaderList_ShaderIterator;
hxsl__$ShaderList_ShaderIterator.__name__ = "hxsl._ShaderList.ShaderIterator";
hxsl__$ShaderList_ShaderIterator.prototype = {
	hasNext: function() {
		return this.l != this.last;
	}
	,next: function() {
		var s = this.l.s;
		this.l = this.l.next;
		return s;
	}
	,__class__: hxsl__$ShaderList_ShaderIterator
};
var hxsl_ShaderInstance = function(shader) {
	this.id = hxsl_Tools.allocVarId();
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = new hxsl_Serializer().unserialize(src);
	this.initialize();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,getInstance: function(constBits) {
		var i = this.instanceCache.h[constBits];
		if(i == null) {
			return this.makeInstance(constBits);
		} else {
			return i;
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var _g = c.v.type;
			var tmp;
			switch(_g._hx_index) {
			case 1:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				var _g1 = _g.size;
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var i = new hxsl_ShaderInstance($eval.eval(this.data));
		hxsl_Printer.check(i.shader,[this.data]);
		this.paramsCount = 0;
		var _g2 = 0;
		var _g11 = this.data.vars;
		while(_g2 < _g11.length) {
			var v = _g11[_g2];
			++_g2;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addSelfParam: function(i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.addSelfParam(i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[v.id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,browseVar: function(v,path) {
		v.id = hxsl_Tools.allocVarId();
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var vs = vl[_g1];
				++_g1;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	split: function(s) {
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g2 = 0;
		var _g3 = Lambda.array(vvars);
		while(_g2 < _g3.length) {
			var inf = _g3[_g2];
			++_g2;
			var v = inf.v;
			switch(v.kind._hx_index) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v.kind._hx_index) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					var ninf = this.get(nv);
					v.kind = hxsl_VarKind.Local;
					var p = vfun.expr.p;
					var e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						var old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						var np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		var finits = [];
		var todo = [];
		var inf1 = fvars.iterator();
		while(inf1.hasNext()) {
			var inf2 = inf1.next();
			var v1 = inf2.v;
			switch(v1.kind._hx_index) {
			case 1:
				var nv1 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Var, type : v1.type};
				this.uniqueName(nv1);
				var i = vvars.h[v1.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v1);
					vvars.h[v1.id] = i;
				}
				i.read++;
				var vp = new hxsl__$Splitter_VarProps(nv1);
				vp.write = 1;
				vvars.h[nv1.id] = vp;
				var fp = new hxsl__$Splitter_VarProps(nv1);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv1), t : v1.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : vfun.expr.p}), t : v1.type, p : vfun.expr.p});
				this.varMap.set(v1,nv1);
				inf2.local = true;
				break;
			case 3:
				if(inf2.write > 0) {
					var nv2 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Local, type : v1.type};
					this.uniqueName(nv2);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv2,{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v1,nv2);
				}
				break;
			default:
			}
		}
		var _g4 = 0;
		while(_g4 < todo.length) {
			var v2 = todo[_g4];
			++_g4;
			fvars.h[v2.v.id] = v2;
		}
		var v3 = vvars.iterator();
		while(v3.hasNext()) {
			var v4 = v3.next();
			this.checkVar(v4,true,vvars,vfun.expr.p);
		}
		var v5 = fvars.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			this.checkVar(v6,false,vvars,ffun.expr.p);
		}
		var v7 = this.varMap.keys();
		while(v7.hasNext()) {
			var v8 = v7.next();
			var v21 = this.varMap.h[this.varMap.h[v8.__id__].__id__];
			if(v21 != null) {
				this.varMap.set(v8,v21);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		var _g5 = ffun.expr.e;
		if(_g5._hx_index == 4) {
			var el = _g5.el;
			var _g51 = 0;
			while(_g51 < finits.length) {
				var e1 = finits[_g51];
				++_g51;
				el.unshift(e1);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		var _g7 = [];
		var v9 = vvars.iterator();
		while(v9.hasNext()) {
			var v10 = v9.next();
			if(!v10.local) {
				_g7.push(v10.v);
			}
		}
		var vvars1 = _g7;
		var _g8 = [];
		var v11 = fvars.iterator();
		while(v11.hasNext()) {
			var v12 = v11.next();
			if(!v12.local) {
				_g8.push(v12.v);
			}
		}
		var fvars1 = _g8;
		vvars1.sort(function(v13,v22) {
			return v13.id - v22.id;
		});
		fvars1.sort(function(v14,v23) {
			return v14.id - v23.id;
		});
		return { vertex : { name : "vertex", vars : vvars1, funs : [vfun]}, fragment : { name : "fragment", vars : fvars1, funs : [ffun]}};
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw new js__$Boot_HaxeError(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw new js__$Boot_HaxeError(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			var v21 = this.varMap.h[v1.__id__];
			if(v21 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v21,this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v3 = _g.v;
			var v22 = this.varMap.h[v3.__id__];
			if(v22 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v22,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				return this.get(v2);
			}
			var oldName = v.name;
			this.uniqueName(v);
			if(v.kind == hxsl_VarKind.Local && oldName != v.name) {
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
				this.varMap.set(v,nv);
				v.name = oldName;
				v = nv;
			}
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		var key = v.name;
		var _this = this.varNames;
		var n = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(true) {
				var _this1 = this.varNames;
				var key1 = prefix + k;
				if(!(__map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1))) {
					break;
				}
				++k;
			}
			v.name = prefix + k;
		}
		var key2 = v.name;
		var _this2 = this.varNames;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,v);
		} else {
			_this2.h[key2] = v;
		}
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _g9 = _g.e2;
			var _g8 = _g.e1;
			var _g7 = _g.op;
			switch(_g7._hx_index) {
			case 4:
				var _g12 = _g8.t;
				var _g11 = _g8.p;
				var _g10 = _g8.e;
				switch(_g10._hx_index) {
				case 1:
					var e1 = _g9;
					var v1 = _g10.v;
					var inf1 = this.get(v1);
					inf1.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g15 = _g10.regs;
					var _g14 = _g10.e;
					var _g18 = _g14.t;
					var _g17 = _g14.p;
					var _g16 = _g14.e;
					if(_g16._hx_index == 1) {
						var e2 = _g9;
						var v2 = _g16.v;
						var inf2 = this.get(v2);
						inf2.write++;
						this.checkExpr(e2);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _g20 = _g7.op;
				var _g23 = _g8.t;
				var _g22 = _g8.p;
				var _g21 = _g8.e;
				switch(_g21._hx_index) {
				case 1:
					var e3 = _g9;
					var v3 = _g21.v;
					var inf3 = this.get(v3);
					if(inf3.write == 0) {
						inf3.requireInit = true;
					}
					inf3.read++;
					inf3.write++;
					this.checkExpr(e3);
					break;
				case 9:
					var _g26 = _g21.regs;
					var _g25 = _g21.e;
					var _g29 = _g25.t;
					var _g28 = _g25.p;
					var _g27 = _g25.e;
					if(_g27._hx_index == 1) {
						var e4 = _g9;
						var v4 = _g27.v;
						var inf4 = this.get(v4);
						if(inf4.write == 0) {
							inf4.requireInit = true;
						}
						inf4.read++;
						inf4.write++;
						this.checkExpr(e4);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var init = _g.init;
			var v5 = _g.v;
			var inf5 = this.get(v5);
			inf5.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf5.write++;
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v6 = _g.v;
			this.checkExpr(it);
			var inf6 = this.get(v6);
			inf6.local = true;
			inf6.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var hxsl_ChannelTools = function() { };
$hxClasses["hxsl.ChannelTools"] = hxsl_ChannelTools;
hxsl_ChannelTools.__name__ = "hxsl.ChannelTools";
hxsl_ChannelTools.isPackedFormat = function(c) {
	return c.format == h3d_mat_Texture.nativeFormat;
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
Math.__name__ = "Math";
var me_miltage_Constants = function() { };
$hxClasses["me.miltage.Constants"] = me_miltage_Constants;
me_miltage_Constants.__name__ = "me.miltage.Constants";
var me_miltage_Game = function() {
	this.mousePVec = new box2D_common_math_B2Vec2();
	this.lastMouse = new box2D_common_math_B2Vec2();
	this.types = [me_miltage_ItemType.TOASTER,me_miltage_ItemType.TELEVISION,me_miltage_ItemType.CLEAVER,me_miltage_ItemType.ANVIL];
	h2d_Scene.call(this);
	this.initWorld();
	this.typeIndex = 0;
	this.spawnTime = 1.5;
	this.items = [];
	var room = new h2d_Bitmap(hxd_Res.get_loader().loadCache("room.png",hxd_res_Image).toTile(),this);
	room.posChanged = true;
	room.scaleX = 0.5;
	room.posChanged = true;
	room.scaleY = 0.5;
	var junior = new h2d_Bitmap(hxd_Res.get_loader().loadCache("junior.png",hxd_res_Image).toTile().center(),this);
	junior.posChanged = true;
	junior.scaleX = 0.5;
	junior.posChanged = true;
	junior.scaleY = 0.5;
	junior.posChanged = true;
	junior.x = this.width / 2;
	junior.posChanged = true;
	junior.y = this.height - 130;
};
$hxClasses["me.miltage.Game"] = me_miltage_Game;
me_miltage_Game.__name__ = "me.miltage.Game";
me_miltage_Game.__super__ = h2d_Scene;
me_miltage_Game.prototype = $extend(h2d_Scene.prototype,{
	update: function(dt) {
		this.world.step(0.016666666666666666,3,3);
		this.world.clearForces();
		this.world.drawDebugData();
		if(this.spawnTime > 0) {
			this.spawnTime -= dt;
		} else {
			var item = new me_miltage_Item(this.getNextType(),this.world,this);
			this.items.push(item);
			this.spawnTime = 6;
		}
		if(hxd_Key.isPressed(0)) {
			this.lastMouse = this.mousePVec.copy();
			var body = this.getBodyAtMouse();
			if(body != null) {
				body.setLinearVelocity(new box2D_common_math_B2Vec2(0,0));
				body.applyImpulse(new box2D_common_math_B2Vec2(Math.random() * 4 - 2,-5),body.getWorldCenter());
			}
		}
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item1 = _g1[_g];
			++_g;
			item1.update(dt);
		}
	}
	,getNextType: function() {
		var type = this.types[this.typeIndex];
		this.typeIndex++;
		if(this.typeIndex >= this.types.length) {
			this.typeIndex = 0;
		}
		return type;
	}
	,getBodyAtMouse: function(includeStatic) {
		if(includeStatic == null) {
			includeStatic = false;
		}
		var _gthis = this;
		var mouseXWorldPhys = this.get_mouseX() / 100;
		var mouseYWorldPhys = this.get_mouseY() / 100;
		this.mousePVec.set(mouseXWorldPhys,mouseYWorldPhys);
		var aabb = new box2D_collision_B2AABB();
		aabb.lowerBound.set(mouseXWorldPhys - 0.001,mouseYWorldPhys - 0.001);
		aabb.upperBound.set(mouseXWorldPhys + 0.001,mouseYWorldPhys + 0.001);
		var body = null;
		var fixture;
		var getBodyCallback = function(fixture1) {
			var shape = fixture1.getShape();
			if(fixture1.getBody().getType() != 0 || includeStatic) {
				var inside = shape.testPoint(fixture1.getBody().getTransform(),_gthis.mousePVec);
				if(inside) {
					body = fixture1.getBody();
					return false;
				}
			}
			return true;
		};
		this.world.queryAABB(getBodyCallback,aabb);
		return body;
	}
	,initWorld: function() {
		this.world = new box2D_dynamics_B2World(new box2D_common_math_B2Vec2(0,2),true);
		var bxFixDef = new box2D_dynamics_B2FixtureDef();
		var bxPolygonShape = new box2D_collision_shapes_B2PolygonShape();
		bxPolygonShape.setAsBox(this.width / 100,1);
		bxFixDef.shape = bxPolygonShape;
		var bodyDef = new box2D_dynamics_B2BodyDef();
		bodyDef.type = 0;
		bodyDef.position.set(this.width / 2 / 100,this.height / 100);
		this.world.createBody(bodyDef).createFixture(bxFixDef);
		bxPolygonShape.setAsBox(1,this.height * 10 / 100);
		bodyDef.position.set(1,this.height / 2 / 100);
		this.world.createBody(bodyDef).createFixture(bxFixDef);
		bxPolygonShape.setAsBox(1,this.height * 10 / 100);
		bodyDef.position.set(this.width / 100 - 1,this.height / 2 / 100);
		this.world.createBody(bodyDef).createFixture(bxFixDef);
		var dbgDraw = new box2D_dynamics_B2HeapsDebugDraw();
		var dbgSprite = new h2d_Graphics(this);
		dbgDraw.setSprite(dbgSprite);
		dbgDraw.setDrawScale(100);
		dbgDraw.setFillAlpha(0.3);
		dbgDraw.setLineThickness(1.0);
		dbgDraw.setFlags(box2D_dynamics_B2DebugDraw.e_shapeBit | box2D_dynamics_B2DebugDraw.e_jointBit);
		this.world.setDebugDraw(dbgDraw);
	}
	,__class__: me_miltage_Game
});
var me_miltage_ItemType = $hxEnums["me.miltage.ItemType"] = { __ename__ : true, __constructs__ : ["CLEAVER","ANVIL","TOASTER","TELEVISION"]
	,CLEAVER: {_hx_index:0,__enum__:"me.miltage.ItemType",toString:$estr}
	,ANVIL: {_hx_index:1,__enum__:"me.miltage.ItemType",toString:$estr}
	,TOASTER: {_hx_index:2,__enum__:"me.miltage.ItemType",toString:$estr}
	,TELEVISION: {_hx_index:3,__enum__:"me.miltage.ItemType",toString:$estr}
};
me_miltage_ItemType.__empty_constructs__ = [me_miltage_ItemType.CLEAVER,me_miltage_ItemType.ANVIL,me_miltage_ItemType.TOASTER,me_miltage_ItemType.TELEVISION];
var me_miltage_Item = function(type,world,scene) {
	this.type = type;
	var bodyDef = new box2D_dynamics_B2BodyDef();
	bodyDef.position.set(scene.width / 2 / 100,1);
	bodyDef.linearDamping = 0.5;
	bodyDef.type = 2;
	var circle = new box2D_collision_shapes_B2CircleShape(0.6);
	var fixture = new box2D_dynamics_B2FixtureDef();
	var tmp;
	switch(type._hx_index) {
	case 0:
		tmp = 0.6;
		break;
	case 1:
		tmp = 2.0;
		break;
	case 2:
		tmp = 0.8;
		break;
	case 3:
		tmp = 1.2;
		break;
	}
	fixture.density = tmp;
	fixture.shape = circle;
	fixture.filter.categoryBits = 2;
	fixture.filter.maskBits = 1;
	this.body = world.createBody(bodyDef);
	this.body.createFixture(fixture);
	this.sprite = new h2d_Bitmap(this.getTile().center(),scene);
	var _this = this.sprite;
	_this.posChanged = true;
	_this.scaleX = 0.5;
	var _this1 = this.sprite;
	_this1.posChanged = true;
	_this1.scaleY = 0.5;
};
$hxClasses["me.miltage.Item"] = me_miltage_Item;
me_miltage_Item.__name__ = "me.miltage.Item";
me_miltage_Item.prototype = {
	update: function(dt) {
		var pos = this.body.getWorldCenter();
		var _this = this.sprite;
		_this.posChanged = true;
		_this.x = pos.x * 100;
		var _this1 = this.sprite;
		_this1.posChanged = true;
		_this1.y = pos.y * 100;
		var _this2 = this.sprite;
		var v = this.body.getAngle();
		_this2.posChanged = true;
		_this2.rotation = v;
	}
	,getTile: function() {
		switch(this.type._hx_index) {
		case 0:
			return hxd_Res.get_loader().loadCache("cleaver.png",hxd_res_Image).toTile();
		case 1:
			return hxd_Res.get_loader().loadCache("anvil.png",hxd_res_Image).toTile();
		case 2:
			return hxd_Res.get_loader().loadCache("toaster.png",hxd_res_Image).toTile();
		case 3:
			return hxd_Res.get_loader().loadCache("television.png",hxd_res_Image).toTile();
		}
	}
	,__class__: me_miltage_Item
};
var me_miltage_Title = function() {
	h2d_Scene.call(this);
	this.timeElapsed = 0;
	var room = new h2d_Bitmap(hxd_Res.get_loader().loadCache("room.png",hxd_res_Image).toTile(),this);
	room.posChanged = true;
	room.scaleX = 0.5;
	room.posChanged = true;
	room.scaleY = 0.5;
	var junior = new h2d_Bitmap(hxd_Res.get_loader().loadCache("junior.png",hxd_res_Image).toTile().center(),this);
	junior.posChanged = true;
	junior.scaleX = 0.5;
	junior.posChanged = true;
	junior.scaleY = 0.5;
	junior.posChanged = true;
	junior.x = this.width / 2;
	junior.posChanged = true;
	junior.y = this.height - 130;
	this.radial = new h2d_Bitmap(hxd_Res.get_loader().loadCache("radial.png",hxd_res_Image).toTile().center(),this);
	var _this = this.radial;
	_this.posChanged = true;
	_this.scaleX = 0.5;
	var _this1 = this.radial;
	_this1.posChanged = true;
	_this1.scaleY = 0.5;
	var _this2 = this.radial;
	_this2.posChanged = true;
	_this2.x = this.width / 2;
	var _this3 = this.radial;
	_this3.posChanged = true;
	_this3.y = this.height / 2;
	this.title = new h2d_Bitmap(hxd_Res.get_loader().loadCache("title.png",hxd_res_Image).toTile().center(),this);
	var _this4 = this.title;
	_this4.posChanged = true;
	_this4.scaleX = 0.5;
	var _this5 = this.title;
	_this5.posChanged = true;
	_this5.scaleY = 0.5;
	var _this6 = this.title;
	_this6.posChanged = true;
	_this6.x = this.width / 2;
	var _this7 = this.title;
	_this7.posChanged = true;
	_this7.y = this.height / 2;
};
$hxClasses["me.miltage.Title"] = me_miltage_Title;
me_miltage_Title.__name__ = "me.miltage.Title";
me_miltage_Title.__super__ = h2d_Scene;
me_miltage_Title.prototype = $extend(h2d_Scene.prototype,{
	update: function(dt) {
		this.timeElapsed += dt;
		var _g = this.radial;
		_g.posChanged = true;
		_g.rotation += dt / 4;
		var _this = this.radial;
		var v = 0.5 + Math.sin(this.timeElapsed) * 0.1;
		_this.posChanged = true;
		_this.scaleX = v;
		var _this1 = this.radial;
		var v1 = 0.5 + Math.sin(this.timeElapsed) * 0.1;
		_this1.posChanged = true;
		_this1.scaleY = v1;
		var _this2 = this.title;
		var v2 = this.height / 2 + Math.sin(this.timeElapsed * 4) * this.height * 0.01;
		_this2.posChanged = true;
		_this2.y = v2;
	}
	,__class__: me_miltage_Title
});
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
haxe_Resource.content = [{ name : "R_television_png", data : ""},{ name : "R_radial_png", data : ""},{ name : "R_title_png", data : ""},{ name : "R_room_png", data : ""},{ name : "R_junior_png", data : ""},{ name : "R_cleaver_png", data : ""},{ name : "R_toaster_png", data : ""},{ name : "R_anvil_png", data : ""}];
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
haxe_MainLoop.add(hxd_System.updateCursor,-1);
var hx__registerFont;
hx__registerFont = function(name,data) {
	var s = window.document.createElement("style");
	s.type = "text/css";
	s.innerHTML = "@font-face{ font-family: " + name + "; src: url('data:font/ttf;base64," + data + "') format('truetype'); }";
	window.document.getElementsByTagName("head")[0].appendChild(s);
	var div = window.document.createElement("div");
	div.style.fontFamily = name;
	div.style.opacity = 0;
	div.style.width = "1px";
	div.style.height = "1px";
	div.style.position = "fixed";
	div.style.bottom = "0px";
	div.style.right = "0px";
	div.innerHTML = ".";
	div.className = "hx__loadFont";
	window.document.body.appendChild(div);
};
js_Boot.__toStr = ({ }).toString;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
box2D_collision_B2Collision.b2_nullFeature = 255;
box2D_collision_B2Collision.s_incidentEdge = box2D_collision_B2Collision.makeClipPointVector();
box2D_collision_B2Collision.s_clipPoints1 = box2D_collision_B2Collision.makeClipPointVector();
box2D_collision_B2Collision.s_clipPoints2 = box2D_collision_B2Collision.makeClipPointVector();
box2D_collision_B2Collision.s_edgeAO = [];
box2D_collision_B2Collision.s_edgeBO = [];
box2D_collision_B2Collision.s_localTangent = new box2D_common_math_B2Vec2();
box2D_collision_B2Collision.s_localNormal = new box2D_common_math_B2Vec2();
box2D_collision_B2Collision.s_planePoint = new box2D_common_math_B2Vec2();
box2D_collision_B2Collision.s_normal = new box2D_common_math_B2Vec2();
box2D_collision_B2Collision.s_tangent = new box2D_common_math_B2Vec2();
box2D_collision_B2Collision.s_tangent2 = new box2D_common_math_B2Vec2();
box2D_collision_B2Collision.s_v11 = new box2D_common_math_B2Vec2();
box2D_collision_B2Collision.s_v12 = new box2D_common_math_B2Vec2();
box2D_collision_B2Collision.b2CollidePolyTempVec = new box2D_common_math_B2Vec2();
box2D_collision_B2Distance.b2_gjkCalls = 0;
box2D_collision_B2Distance.b2_gjkIters = 0;
box2D_collision_B2Distance.b2_gjkMaxIters = 0;
box2D_collision_B2Distance.s_simplex = new box2D_collision_B2Simplex();
box2D_collision_B2Distance.s_saveA = [];
box2D_collision_B2Distance.s_saveB = [];
box2D_collision_B2DynamicTreeNode.currentID = 0;
box2D_collision_B2TimeOfImpact.b2_toiCalls = 0;
box2D_collision_B2TimeOfImpact.b2_toiIters = 0;
box2D_collision_B2TimeOfImpact.b2_toiMaxIters = 0;
box2D_collision_B2TimeOfImpact.b2_toiRootIters = 0;
box2D_collision_B2TimeOfImpact.b2_toiMaxRootIters = 0;
box2D_collision_B2TimeOfImpact.s_cache = new box2D_collision_B2SimplexCache();
box2D_collision_B2TimeOfImpact.s_distanceInput = new box2D_collision_B2DistanceInput();
box2D_collision_B2TimeOfImpact.s_xfA = new box2D_common_math_B2Transform();
box2D_collision_B2TimeOfImpact.s_xfB = new box2D_common_math_B2Transform();
box2D_collision_B2TimeOfImpact.s_fcn = new box2D_collision_B2SeparationFunction();
box2D_collision_B2TimeOfImpact.s_distanceOutput = new box2D_collision_B2DistanceOutput();
box2D_collision_shapes_B2Shape.e_hitCollide = 1;
box2D_collision_shapes_B2Shape.e_missCollide = 0;
box2D_collision_shapes_B2Shape.e_startsInsideCollide = -1;
box2D_collision_shapes_B2PolygonShape.s_mat = new box2D_common_math_B2Mat22();
box2D_common_B2Settings.VERSION = "2.1alpha";
box2D_common_B2Settings.USHRT_MAX = 65535;
box2D_common_B2Settings.b2_pi = Math.PI;
box2D_common_B2Settings.b2_maxManifoldPoints = 2;
box2D_common_B2Settings.b2_aabbExtension = 0.1;
box2D_common_B2Settings.b2_aabbMultiplier = 2.0;
box2D_common_B2Settings.b2_polygonRadius = 0.01;
box2D_common_B2Settings.b2_linearSlop = 0.005;
box2D_common_B2Settings.b2_angularSlop = 0.011111111111111112 * Math.PI;
box2D_common_B2Settings.b2_toiSlop = 0.04;
box2D_common_B2Settings.b2_maxTOIContactsPerIsland = 32;
box2D_common_B2Settings.b2_maxTOIJointsPerIsland = 32;
box2D_common_B2Settings.b2_velocityThreshold = 1.0;
box2D_common_B2Settings.b2_maxLinearCorrection = 0.2;
box2D_common_B2Settings.b2_maxAngularCorrection = 0.044444444444444446 * Math.PI;
box2D_common_B2Settings.b2_maxTranslation = 2.0;
box2D_common_B2Settings.b2_maxTranslationSquared = 4.0;
box2D_common_B2Settings.b2_maxRotation = 0.5 * Math.PI;
box2D_common_B2Settings.b2_maxRotationSquared = 0.5 * Math.PI * (0.5 * Math.PI);
box2D_common_B2Settings.b2_contactBaumgarte = 0.2;
box2D_common_B2Settings.b2_timeToSleep = 0.5;
box2D_common_B2Settings.b2_linearSleepTolerance = 0.01;
box2D_common_B2Settings.b2_angularSleepTolerance = 0.011111111111111112 * Math.PI;
box2D_common_math_B2Math.b2Vec2_zero = new box2D_common_math_B2Vec2(0.0,0.0);
box2D_common_math_B2Math.b2Mat22_identity = box2D_common_math_B2Mat22.fromVV(new box2D_common_math_B2Vec2(1.0,0.0),new box2D_common_math_B2Vec2(0.0,1.0));
box2D_common_math_B2Math.b2Transform_identity = new box2D_common_math_B2Transform(box2D_common_math_B2Math.b2Vec2_zero,box2D_common_math_B2Math.b2Mat22_identity);
box2D_dynamics_B2Body.s_xf1 = new box2D_common_math_B2Transform();
box2D_dynamics_B2Body.e_islandFlag = 1;
box2D_dynamics_B2Body.e_awakeFlag = 2;
box2D_dynamics_B2Body.e_allowSleepFlag = 4;
box2D_dynamics_B2Body.e_bulletFlag = 8;
box2D_dynamics_B2Body.e_fixedRotationFlag = 16;
box2D_dynamics_B2Body.e_activeFlag = 32;
box2D_dynamics_B2Body.b2_staticBody = 0;
box2D_dynamics_B2Body.b2_kinematicBody = 1;
box2D_dynamics_B2Body.b2_dynamicBody = 2;
box2D_dynamics_B2ContactFilter.b2_defaultFilter = new box2D_dynamics_B2ContactFilter();
box2D_dynamics_B2ContactListener.b2_defaultListener = new box2D_dynamics_B2ContactListener();
box2D_dynamics_B2ContactManager.s_evalCP = new box2D_collision_B2ContactPoint();
box2D_dynamics_B2DebugDraw.e_shapeBit = 1;
box2D_dynamics_B2DebugDraw.e_jointBit = 2;
box2D_dynamics_B2DebugDraw.e_aabbBit = 4;
box2D_dynamics_B2DebugDraw.e_pairBit = 8;
box2D_dynamics_B2DebugDraw.e_centerOfMassBit = 16;
box2D_dynamics_B2DebugDraw.e_controllerBit = 32;
box2D_dynamics_B2Island.s_impulse = new box2D_dynamics_B2ContactImpulse();
box2D_dynamics_B2World.s_timestep2 = new box2D_dynamics_B2TimeStep();
box2D_dynamics_B2World.s_xf = new box2D_common_math_B2Transform();
box2D_dynamics_B2World.s_backupA = new box2D_common_math_B2Sweep();
box2D_dynamics_B2World.s_backupB = new box2D_common_math_B2Sweep();
box2D_dynamics_B2World.s_timestep = new box2D_dynamics_B2TimeStep();
box2D_dynamics_B2World.s_queue = [];
box2D_dynamics_B2World.s_jointColor = new box2D_common_B2Color(0.5,0.8,0.8);
box2D_dynamics_B2World.e_newFixture = 1;
box2D_dynamics_B2World.e_locked = 2;
box2D_dynamics_contacts_B2Contact.e_sensorFlag = 1;
box2D_dynamics_contacts_B2Contact.e_continuousFlag = 2;
box2D_dynamics_contacts_B2Contact.e_islandFlag = 4;
box2D_dynamics_contacts_B2Contact.e_toiFlag = 8;
box2D_dynamics_contacts_B2Contact.e_touchingFlag = 16;
box2D_dynamics_contacts_B2Contact.e_enabledFlag = 32;
box2D_dynamics_contacts_B2Contact.e_filterFlag = 64;
box2D_dynamics_contacts_B2Contact.s_input = new box2D_collision_B2TOIInput();
box2D_dynamics_contacts_B2PositionSolverManifold.circlePointA = new box2D_common_math_B2Vec2();
box2D_dynamics_contacts_B2PositionSolverManifold.circlePointB = new box2D_common_math_B2Vec2();
box2D_dynamics_contacts_B2ContactSolver.staticFix = box2D_common_B2Settings.b2_maxManifoldPoints;
box2D_dynamics_contacts_B2ContactSolver.s_worldManifold = new box2D_collision_B2WorldManifold();
box2D_dynamics_contacts_B2ContactSolver.s_psm = new box2D_dynamics_contacts_B2PositionSolverManifold();
box2D_dynamics_joints_B2PulleyJoint.b2_minPulleyLength = 2.0;
box2D_dynamics_joints_B2RevoluteJoint.tImpulse = new box2D_common_math_B2Vec2();
format_gif_Tools.LN2 = Math.log(2);
format_mp3_MPEG.V1 = 3;
format_mp3_MPEG.V2 = 2;
format_mp3_MPEG.V25 = 0;
format_mp3_MPEG.Reserved = 1;
format_mp3_MPEG.V1_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.V2_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.SamplingRates = [[format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_Bad]];
format_mp3_CLayer.LReserved = 0;
format_mp3_CLayer.LLayer3 = 1;
format_mp3_CLayer.LLayer2 = 2;
format_mp3_CLayer.LLayer1 = 3;
format_mp3_CChannelMode.CStereo = 0;
format_mp3_CChannelMode.CJointStereo = 1;
format_mp3_CChannelMode.CDualChannel = 2;
format_mp3_CChannelMode.CMono = 3;
format_mp3_CEmphasis.ENone = 0;
format_mp3_CEmphasis.EMs50_15 = 1;
format_mp3_CEmphasis.EReserved = 2;
format_mp3_CEmphasis.ECCIT_J17 = 3;
h2d_RenderContext.BUFFERING = false;
h2d_col_Matrix.tmp = new h2d_col_Matrix();
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_Matrix.tmp = new h3d_Matrix();
h3d_Matrix.lumR = 0.212671;
h3d_Matrix.lumG = 0.71516;
h3d_Matrix.lumB = 0.072169;
h3d_Matrix.SQ13 = 0.57735026918962576450914878050196;
h3d_anim_Animation.EPSILON = 0.000001;
h3d_col_ObjectCollider.TMP_RAY = new h3d_col_Ray();
h3d_col_ObjectCollider.TMP_MAT = new h3d_Matrix();
h3d_impl_InputNames.UID = 0;
h3d_impl_InputNames.CACHE = new haxe_ds_StringMap();
h3d_impl_GlDriver.UID = 0;
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.STREAM_POS = 1;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g11 = [];
			var _g2 = 0;
			var _g3 = i;
			while(_g2 < _g3) {
				var k = _g2++;
				_g11.push(36064 + k);
			}
			_g.push(_g11);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.MAX_MEMORY = 4294967296.;
h3d_impl_MemoryManager.MAX_BUFFERS = 65536;
h3d_impl_MemoryManager.SIZE = 65533;
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__.slice();
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Pass.enableLights_bits = 1;
h3d_mat_Pass.enableLights_offset = 0;
h3d_mat_Pass.enableLights_mask = 1;
h3d_mat_Pass.dynamicParameters_bits = 1;
h3d_mat_Pass.dynamicParameters_offset = 1;
h3d_mat_Pass.dynamicParameters_mask = 2;
h3d_mat_Pass.isStatic_bits = 1;
h3d_mat_Pass.isStatic_offset = 2;
h3d_mat_Pass.isStatic_mask = 4;
h3d_mat_Pass.batchMode_bits = 1;
h3d_mat_Pass.batchMode_offset = 3;
h3d_mat_Pass.batchMode_mask = 8;
h3d_mat_Pass.culling_bits = 2;
h3d_mat_Pass.culling_offset = 0;
h3d_mat_Pass.culling_mask = 3;
h3d_mat_Pass.depthWrite_bits = 1;
h3d_mat_Pass.depthWrite_offset = 2;
h3d_mat_Pass.depthWrite_mask = 4;
h3d_mat_Pass.depthTest_bits = 3;
h3d_mat_Pass.depthTest_offset = 3;
h3d_mat_Pass.depthTest_mask = 56;
h3d_mat_Pass.blendSrc_bits = 4;
h3d_mat_Pass.blendSrc_offset = 6;
h3d_mat_Pass.blendSrc_mask = 960;
h3d_mat_Pass.blendDst_bits = 4;
h3d_mat_Pass.blendDst_offset = 10;
h3d_mat_Pass.blendDst_mask = 15360;
h3d_mat_Pass.blendAlphaSrc_bits = 4;
h3d_mat_Pass.blendAlphaSrc_offset = 14;
h3d_mat_Pass.blendAlphaSrc_mask = 245760;
h3d_mat_Pass.blendAlphaDst_bits = 4;
h3d_mat_Pass.blendAlphaDst_offset = 18;
h3d_mat_Pass.blendAlphaDst_mask = 3932160;
h3d_mat_Pass.blendOp_bits = 3;
h3d_mat_Pass.blendOp_offset = 22;
h3d_mat_Pass.blendOp_mask = 29360128;
h3d_mat_Pass.blendAlphaOp_bits = 3;
h3d_mat_Pass.blendAlphaOp_offset = 25;
h3d_mat_Pass.blendAlphaOp_mask = 234881024;
h3d_mat_Pass.wireframe_bits = 1;
h3d_mat_Pass.wireframe_offset = 28;
h3d_mat_Pass.wireframe_mask = 268435456;
h3d_mat_Pass.reserved_bits = 1;
h3d_mat_Pass.reserved_offset = 29;
h3d_mat_Pass.reserved_mask = 536870912;
h3d_mat_Stencil.readMask_bits = 8;
h3d_mat_Stencil.readMask_offset = 0;
h3d_mat_Stencil.readMask_mask = 255;
h3d_mat_Stencil.writeMask_bits = 8;
h3d_mat_Stencil.writeMask_offset = 8;
h3d_mat_Stencil.writeMask_mask = 65280;
h3d_mat_Stencil.reference_bits = 8;
h3d_mat_Stencil.reference_offset = 16;
h3d_mat_Stencil.reference_mask = 16711680;
h3d_mat_Stencil.frontTest_bits = 3;
h3d_mat_Stencil.frontTest_offset = 0;
h3d_mat_Stencil.frontTest_mask = 7;
h3d_mat_Stencil.frontPass_bits = 3;
h3d_mat_Stencil.frontPass_offset = 3;
h3d_mat_Stencil.frontPass_mask = 56;
h3d_mat_Stencil.frontSTfail_bits = 3;
h3d_mat_Stencil.frontSTfail_offset = 6;
h3d_mat_Stencil.frontSTfail_mask = 448;
h3d_mat_Stencil.frontDPfail_bits = 3;
h3d_mat_Stencil.frontDPfail_offset = 9;
h3d_mat_Stencil.frontDPfail_mask = 3584;
h3d_mat_Stencil.backTest_bits = 3;
h3d_mat_Stencil.backTest_offset = 12;
h3d_mat_Stencil.backTest_mask = 28672;
h3d_mat_Stencil.backPass_bits = 3;
h3d_mat_Stencil.backPass_offset = 15;
h3d_mat_Stencil.backPass_mask = 229376;
h3d_mat_Stencil.backSTfail_bits = 3;
h3d_mat_Stencil.backSTfail_offset = 18;
h3d_mat_Stencil.backSTfail_mask = 1835008;
h3d_mat_Stencil.backDPfail_bits = 3;
h3d_mat_Stencil.backDPfail_offset = 21;
h3d_mat_Stencil.backDPfail_mask = 14680064;
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_mat_Texture.checkerTextureKeys = new haxe_ds_IntMap();
h3d_mat_Texture.noiseTextureKeys = new haxe_ds_IntMap();
h3d_mat_Texture.genTextureKeys = new haxe_ds_StringMap();
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_shader_ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d_pass__$Border_BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass__$Copy_ArrayCopyShader.SRC = "HXSLHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQsCAAALBWxheWVyAQIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFAQYEAggFDAkDIQ4CAgoLCQMpDgICCQUKCQMmDgECCwEDBQsFDAUMAA";
h3d_pass__$Copy_CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d_pass_Default.__meta__ = { fields : { cameraView : { global : ["camera.view"]}, cameraNear : { global : ["camera.zNear"]}, cameraFar : { global : ["camera.zFar"]}, cameraProj : { global : ["camera.proj"]}, cameraPos : { global : ["camera.position"]}, cameraProjDiag : { global : ["camera.projDiag"]}, cameraProjFlip : { global : ["camera.projFlip"]}, cameraViewProj : { global : ["camera.viewProj"]}, cameraInverseViewProj : { global : ["camera.inverseViewProj"]}, globalTime : { global : ["global.time"]}, pixelSize : { global : ["global.pixelSize"]}, globalModelView : { global : ["global.modelView"]}, globalModelViewInverse : { global : ["global.modelViewInverse"]}}};
h3d_pass__$HardwarePick_FixedColor.SRC = "HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA";
h3d_pass_ShaderManager.STRICT = true;
h3d_scene_Object.ROT2RAD = -0.017453292519943295769236907684886;
h3d_scene_Object.tmpMat = new h3d_Matrix();
h3d_scene_Object.tmpVec = new h3d_Vector();
h3d_scene__$Object_ObjectFlags_$Impl_$.FPosChanged = 1;
h3d_scene__$Object_ObjectFlags_$Impl_$.FVisible = 2;
h3d_scene__$Object_ObjectFlags_$Impl_$.FCulled = 4;
h3d_scene__$Object_ObjectFlags_$Impl_$.FFollowPositionOnly = 8;
h3d_scene__$Object_ObjectFlags_$Impl_$.FLightCameraCenter = 16;
h3d_scene__$Object_ObjectFlags_$Impl_$.FAllocated = 32;
h3d_scene__$Object_ObjectFlags_$Impl_$.FAlwaysSync = 64;
h3d_scene__$Object_ObjectFlags_$Impl_$.FInheritCulled = 128;
h3d_scene__$Object_ObjectFlags_$Impl_$.FNoSerialize = 256;
h3d_scene__$Object_ObjectFlags_$Impl_$.FIgnoreBounds = 512;
h3d_scene__$Object_ObjectFlags_$Impl_$.FIgnoreCollide = 1024;
h3d_scene__$Object_ObjectFlags_$Impl_$.FIgnoreParentTransform = 2048;
h3d_scene__$Object_ObjectFlags_$Impl_$.FCullingColliderInherited = 4096;
h3d_shader_AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGgEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCHZpZXdwb3J0BQwCAAAcDm91dHB1dFBvc2l0aW9uBQwEAAAdCF9faW5pdF9fDgYAAB4GdmVydGV4DgYAAB8IZnJhZ21lbnQOBgAAAwIdAAAFBgYEAgsFDAkDKg4DAgIFCgIJAwEDAAAAAAAA8D8DBQwFDAsCEAIFAwYECgIMBQwAAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwISBQsDAwYECgIMBQwEAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwITBQsDAwYECgIMBQw5AAUKCgILBQw5AAUKBQoABgQCDAUMAgsFDAUMAAYEAg8FCgsCFgIGAAYBAgMFCgoCFwUMOQAFCgUKCgIXBQwRAAUKBQoCAwUKBQoFCgYEAg0FDAsCEAIGAQIRBQwCBAUMBQwCBAUMBQwFDAYEAg4FDAkDIQ4CAgoKAg8FCgUMBQwGgQINBQwCDgUMBQwAAB4AAAUFCCADdG1wBQsEAAAJAykOAgoCDAUMEQAFCgEDAAAAAAAA8D8DBQsABgQCHAUMCQMqDgMJAx0OAgIgBQsCFAULAwkDHQ4CAiAFCwIVBQsDCgIMBQw5AAUKBQwFDAYECgIcBQwRAAUKBgEEBgAKAhwFDBEABQoKAhsFDBEABQoFCgUKCgIbBQw5AAUKBQoFCgsCGQIGgwoCHAUMEQAFCgIaBQoFCgAABgQCBgUMAhwFDAUMAAEfAAAFAgsGDgIYAgYJCgINBQwMAAMBA/yp8dJNYlA/AwICDAAAAAYEAgcFDAINBQwFDAA";
h3d_shader_BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d_shader_Blur.SRC = "HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA";
h3d_shader_ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA";
h3d_shader_DirShadow.SRC = "HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EgEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFCnBjZlF1YWxpdHkBAgABAAAAAAAGCHBjZlNjYWxlAwIAAAcJc2hhZG93UmVzBQoCAAAICXNoYWRvd01hcBEBAgAACQpzaGFkb3dQcm9qCAIAAAoKc2hhZG93QmlhcwMCAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwGc2hhZG93AwQAAA0JZGlyU2hhZG93AwQAAA4OcG9pc3NvbkRpc2tMb3cPBQwABAIAAA8PcG9pc3NvbkRpc2tIaWdoDwUMAAwCAAAQE3BvaXNzb25EaXNrVmVyeUhpZ2gPBQwAQAIAABEEcmFuZA4GAAASCGZyYWdtZW50DgYAAAIDEQETAXYDBAAAAwUCCBQCZHADBAAACQMdDgIJAyoOAQITAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhQDAwEDUPwYc9Fd5UADAwMAAAESAAAFAgsCAQIFAQsCBAIFBwYEAgwDAQMAAAAAAADwPwMDCBUJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgWCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBcIc2hhZG93VXYFCgQAAAkDOg4BCgIWBQsRAAUKBQoACBgEek1heAMEAAAJAzUOAQoCFgULCAADAwAIGQNyb3QDBAAABgEGAQkCEQ4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwATBAIFAQEDAQECAQAAAAEFAggaDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAABBAAwMADhsBaQEEAAAGFQECAAAAAAEBAgQAAAABDwEAAAUECBwGb2Zmc2V0BQoEAAAGAQYBChECDg8FDAAEAhsBBQwRAAUKAhUFCgUKAgYDBQoABgQCHAUKCQMoDgIGAwYBCQMDDgECGQMDCgIcBQoAAAMDBgEJAwIOAQIZAwMKAhwFCgQAAwMDBgAGAQkDAw4BAhkDAwoCHAUKBAADAwYBCQMCDgECGQMDCgIcBQoAAAMDAwUKBQoIHQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCHAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAh0DAgaDAgwDAhoDAwAAAAAAAQECAgAAAAEFAggeDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAChAAwMADh8BaQEEAAAGFQECAAAAAAEBAgwAAAABDwEAAAUECCAGb2Zmc2V0BQoEAAAGAQYBChECDw8FDAAMAh8BBQwRAAUKAhUFCgUKAgYDBQoABgQCIAUKCQMoDgIGAwYBCQMDDgECGQMDCgIgBQoAAAMDBgEJAwIOAQIZAwMKAiAFCgQAAwMDBgAGAQkDAw4BAhkDAwoCIAUKBAADAwYBCQMCDgECGQMDCgIgBQoAAAMDAwUKBQoIIQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCIAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiEDAgaDAgwDAh4DAwAAAAAAAQECAwAAAAEFAggiDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAAFBAAwMADiMBaQEEAAAGFQECAAAAAAEBAkAAAAABDwEAAAUECCQGb2Zmc2V0BQoEAAAGAQYBChECEA8FDABAAiMBBQwRAAUKAhUFCgUKAgYDBQoABgQCJAUKCQMoDgIGAwYBCQMDDgECGQMDCgIkBQoAAAMDBgEJAwIOAQIZAwMKAiQFCgQAAwMDBgAGAQkDAw4BAhkDAwoCJAUKBAADAwYBCQMCDgECGQMDCgIkBQoAAAMDAwUKBQoIJQVkZXB0aAMEAAAJA0AOAwIIEQEGAAIXBQoCJAUKBQoBAwAAAAAAAAAAAwMACwYHBgMCGAMCCgMDAiUDAgaDAgwDAiIDAwAAAAAAAAAACwICAgUFCCYJc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIJwVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCJgULEQAFCgUKAwAIKAR6TWF4AwQAAAkDNQ4BCgImBQsIAAMDAAgpBWRlbHRhAwQAAAYDCQMVDgIEBgACJwMCCgMDAwIoAwMCKAMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAikDAwMDAwAFBAgqCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCsIc2hhZG93VXYFCgQAAAkDOg4BCgIqBQsRAAUKBQoACCwFZGVwdGgDBAAACQM/DgICCBEBCgIrBQoRAAUKAwAGBAIMAwsGBwYDCgIqBQsIAAMCCgMDAiwDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
h3d_shader_GenTexture.SRC = "HXSLFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMbDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMqDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA";
h3d_shader_LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d_shader_CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d_shader_NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d_shader_Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsDAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_SignedDistanceField.SRC = "HXSLHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA4BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEAthbHBoYUN1dG9mZgMCAAARCXNtb290aGluZwMCAAASBm1lZGlhbg4GAAATCGZyYWdtZW50DgYAAAIDEgMUAXIDBAAAFQFnAwQAABYBYgMEAAADBQENCQMWDgIJAxUOAgIUAwIVAwMJAxUOAgkDFg4CAhQDAhUDAwIWAwMDAAABEwAABQQIFw10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgYCGRpc3RhbmNlAwQAAAAABgQCGAMLBgUCDwEBAgAAAAABAgoCFwUMAAADCwYFAg8BAQIBAAAAAQIKAhcFDAQAAwsGBQIPAQECAgAAAAECCgIXBQwIAAMLBgUCDwEBAgMAAAABAgoCFwUMDAADCQISDgMKAhcFDAAAAwoCFwUMBAADCgIXBQwIAAMDAwMDAwMGBAIMBQwJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGg4DBgMCEAMCEQMDBgACEAMCEQMDAhgDAwUMBQwA";
h3d_shader_SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UFARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIAA";
h3d_shader_Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbggBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAUNYm9uZXNNYXRyaXhlcw8IBAIAAQgGBWlucHV0DQEEBwhwb3NpdGlvbgULAQYACAZub3JtYWwFCwEGAAkHd2VpZ2h0cwULAQYACgdpbmRleGVzCQQAAAABBgABAAALEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADAZ2ZXJ0ZXgOBgAAAQAMAAAFAgYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAAAAQgFCwULCgIJBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCgkEAAAABAABCAULBQsKAgkFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAgAAQgFCwULCgIJBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAAAAABCAYFCwULCgIJBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgIKCQQAAAAEAAEIBgULBQsKAgkFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAACAABCAYFCwULCgIJBQsIAAMFCwULBQsFCwA";
h3d_shader_SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIBgVpbnB1dA0BBQcIcG9zaXRpb24FCwEGAAgGbm9ybWFsBQsBBgAJB3RhbmdlbnQFCwEGAAoHd2VpZ2h0cwULAQYACwdpbmRleGVzCQQAAAABBgABAAAMEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADQZ2ZXJ0ZXgOBgAAAQANAAAFAwYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAAAAQgFCwULCgIKBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCwkEAAAABAABCAULBQsKAgoFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAgAAQgFCwULCgIKBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgILCQQAAAAEAAEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAACAABCAYFCwULCgIKBQsIAAMFCwULBQsFCwYEAgwFDAkDKg4CCQMfDgEGAAYABgEEBgEKAgkFC5IABQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAQAAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAgAAQgGBQsFCwoCCgULCAADBQsFCwULCgIMBQwMAAMFDAUMAA";
h3d_shader_SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d_shader_Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d_shader_UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Charset.ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
hxd_Charset.LATIN1 = "¡¢£¤¥¦§¨©ª«¬-®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿœæŒÆ€";
hxd_Charset.CYRILLIC = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя—";
hxd_Charset.POLISH = "ĄĆĘŁŃÓŚŹŻąćęłńóśźż";
hxd_Charset.TURKISH = "ÂÇĞIİÎÖŞÜÛâçğıİîöşüû";
hxd_Charset.JP_KANA = "　あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわゐゑをんがぎぐげござじずぜぞだぢづでどばびぶべぼぱぴぷぺぽゃゅょアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヰヱヲンガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポヴャぇっッュョァィゥェォ・ー「」、。『』“”！：？％＆（）－０１２３４５６７８９";
hxd_Charset.UNICODE_SPECIALS = "�□";
hxd_Charset.DEFAULT_CHARS = hxd_Charset.ASCII + hxd_Charset.LATIN1;
hxd_Key.BACKSPACE = 8;
hxd_Key.TAB = 9;
hxd_Key.ENTER = 13;
hxd_Key.SHIFT = 16;
hxd_Key.CTRL = 17;
hxd_Key.ALT = 18;
hxd_Key.ESCAPE = 27;
hxd_Key.SPACE = 32;
hxd_Key.PGUP = 33;
hxd_Key.PGDOWN = 34;
hxd_Key.END = 35;
hxd_Key.HOME = 36;
hxd_Key.LEFT = 37;
hxd_Key.UP = 38;
hxd_Key.RIGHT = 39;
hxd_Key.DOWN = 40;
hxd_Key.INSERT = 45;
hxd_Key.DELETE = 46;
hxd_Key.QWERTY_EQUALS = 187;
hxd_Key.QWERTY_MINUS = 189;
hxd_Key.QWERTY_TILDE = 192;
hxd_Key.QWERTY_BRACKET_LEFT = 219;
hxd_Key.QWERTY_BRACKET_RIGHT = 221;
hxd_Key.QWERTY_SEMICOLON = 186;
hxd_Key.QWERTY_QUOTE = 222;
hxd_Key.QWERTY_BACKSLASH = 220;
hxd_Key.QWERTY_COMMA = 188;
hxd_Key.QWERTY_PERIOD = 190;
hxd_Key.QWERTY_SLASH = 191;
hxd_Key.INTL_BACKSLASH = 226;
hxd_Key.LEFT_WINDOW_KEY = 91;
hxd_Key.RIGHT_WINDOW_KEY = 92;
hxd_Key.CONTEXT_MENU = 93;
hxd_Key.PAUSE_BREAK = 19;
hxd_Key.CAPS_LOCK = 20;
hxd_Key.NUM_LOCK = 144;
hxd_Key.SCROLL_LOCK = 145;
hxd_Key.NUMBER_0 = 48;
hxd_Key.NUMBER_1 = 49;
hxd_Key.NUMBER_2 = 50;
hxd_Key.NUMBER_3 = 51;
hxd_Key.NUMBER_4 = 52;
hxd_Key.NUMBER_5 = 53;
hxd_Key.NUMBER_6 = 54;
hxd_Key.NUMBER_7 = 55;
hxd_Key.NUMBER_8 = 56;
hxd_Key.NUMBER_9 = 57;
hxd_Key.NUMPAD_0 = 96;
hxd_Key.NUMPAD_1 = 97;
hxd_Key.NUMPAD_2 = 98;
hxd_Key.NUMPAD_3 = 99;
hxd_Key.NUMPAD_4 = 100;
hxd_Key.NUMPAD_5 = 101;
hxd_Key.NUMPAD_6 = 102;
hxd_Key.NUMPAD_7 = 103;
hxd_Key.NUMPAD_8 = 104;
hxd_Key.NUMPAD_9 = 105;
hxd_Key.A = 65;
hxd_Key.B = 66;
hxd_Key.C = 67;
hxd_Key.D = 68;
hxd_Key.E = 69;
hxd_Key.F = 70;
hxd_Key.G = 71;
hxd_Key.H = 72;
hxd_Key.I = 73;
hxd_Key.J = 74;
hxd_Key.K = 75;
hxd_Key.L = 76;
hxd_Key.M = 77;
hxd_Key.N = 78;
hxd_Key.O = 79;
hxd_Key.P = 80;
hxd_Key.Q = 81;
hxd_Key.R = 82;
hxd_Key.S = 83;
hxd_Key.T = 84;
hxd_Key.U = 85;
hxd_Key.V = 86;
hxd_Key.W = 87;
hxd_Key.X = 88;
hxd_Key.Y = 89;
hxd_Key.Z = 90;
hxd_Key.F1 = 112;
hxd_Key.F2 = 113;
hxd_Key.F3 = 114;
hxd_Key.F4 = 115;
hxd_Key.F5 = 116;
hxd_Key.F6 = 117;
hxd_Key.F7 = 118;
hxd_Key.F8 = 119;
hxd_Key.F9 = 120;
hxd_Key.F10 = 121;
hxd_Key.F11 = 122;
hxd_Key.F12 = 123;
hxd_Key.F13 = 124;
hxd_Key.F14 = 125;
hxd_Key.F15 = 126;
hxd_Key.F16 = 127;
hxd_Key.F17 = 128;
hxd_Key.F18 = 129;
hxd_Key.F19 = 130;
hxd_Key.F20 = 131;
hxd_Key.F21 = 132;
hxd_Key.F22 = 133;
hxd_Key.F23 = 134;
hxd_Key.F24 = 135;
hxd_Key.NUMPAD_MULT = 106;
hxd_Key.NUMPAD_ADD = 107;
hxd_Key.NUMPAD_ENTER = 108;
hxd_Key.NUMPAD_SUB = 109;
hxd_Key.NUMPAD_DOT = 110;
hxd_Key.NUMPAD_DIV = 111;
hxd_Key.MOUSE_LEFT = 0;
hxd_Key.MOUSE_RIGHT = 1;
hxd_Key.MOUSE_MIDDLE = 2;
hxd_Key.MOUSE_BACK = 3;
hxd_Key.MOUSE_FORWARD = 4;
hxd_Key.MOUSE_WHEEL_UP = 5;
hxd_Key.MOUSE_WHEEL_DOWN = 6;
hxd_Key.LOC_LEFT = 256;
hxd_Key.LOC_RIGHT = 512;
hxd_Key.LSHIFT = 272;
hxd_Key.RSHIFT = 528;
hxd_Key.LCTRL = 273;
hxd_Key.RCTRL = 529;
hxd_Key.LALT = 274;
hxd_Key.RALT = 530;
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Math.PI = 3.14159265358979323;
hxd_Math.EPSILON = 1e-10;
hxd__$Pixels_Channel_$Impl_$.R = 0;
hxd__$Pixels_Channel_$Impl_$.G = 1;
hxd__$Pixels_Channel_$Impl_$.B = 2;
hxd__$Pixels_Channel_$Impl_$.A = 3;
hxd_Pixels.S3TC_SIZES = [0,-1,1,1,-1,1,1,1];
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = Date.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DFloat = 1;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DVec2 = 2;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DVec3 = 3;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DVec4 = 4;
hxd_fmt_hmd__$Data_GeometryDataFormat_$Impl_$.DBytes4 = 9;
hxd_fmt_hmd_Position.QTMP = new h3d_Quat();
hxd_fmt_hmd_Data.CURRENT_VERSION = 3;
hxd_fmt_hmd_Reader.BLEND = h2d_BlendMode.__empty_constructs__.slice();
hxd_fmt_hmd_Reader.CULLING = h3d_mat_Face.__empty_constructs__.slice();
hxd_fs_EmbedFileSystem.invalidChars = new EReg("[^A-Za-z0-9_]","g");
hxd_impl__$Allocator_BufferFlags_$Impl_$.Dynamic = 0;
hxd_impl__$Allocator_BufferFlags_$Impl_$.UniformDynamic = 1;
hxd_poly2tri_Point.C_ID = 0;
hxd_res_Resource.LIVE_UPDATE = true;
hxd_res__$Image_ImageFormat_$Impl_$.Jpg = 0;
hxd_res__$Image_ImageFormat_$Impl_$.Png = 1;
hxd_res__$Image_ImageFormat_$Impl_$.Gif = 2;
hxd_res__$Image_ImageFormat_$Impl_$.Tga = 3;
hxd_res__$Image_ImageFormat_$Impl_$.Dds = 4;
hxd_res_Image.ALLOW_NPOT = true;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.DEFAULT_ASYNC = false;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxd_res_NanoJpeg.BLOCKSIZE = 64;
hxd_res_NanoJpeg.W1 = 2841;
hxd_res_NanoJpeg.W2 = 2676;
hxd_res_NanoJpeg.W3 = 2408;
hxd_res_NanoJpeg.W5 = 1609;
hxd_res_NanoJpeg.W6 = 1108;
hxd_res_NanoJpeg.W7 = 565;
hxd_res_NanoJpeg.CF4A = -9;
hxd_res_NanoJpeg.CF4B = 111;
hxd_res_NanoJpeg.CF4C = 29;
hxd_res_NanoJpeg.CF4D = -3;
hxd_res_NanoJpeg.CF3A = 28;
hxd_res_NanoJpeg.CF3B = 109;
hxd_res_NanoJpeg.CF3C = -9;
hxd_res_NanoJpeg.CF3X = 104;
hxd_res_NanoJpeg.CF3Y = 27;
hxd_res_NanoJpeg.CF3Z = -3;
hxd_res_NanoJpeg.CF2A = 139;
hxd_res_NanoJpeg.CF2B = -11;
hxd_res_Sound.ENABLE_AUTO_WATCH = true;
hxd_snd_Channel.ID = 0;
hxd_snd_Source.ID = 0;
hxd_snd_Manager.STREAM_DURATION = 5.;
hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT = 44100;
hxd_snd_Manager.BUFFER_QUEUE_LENGTH = 2;
hxd_snd_Manager.MAX_SOURCES = 16;
hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE = 256;
hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD = 1e-5;
hxd_snd_Manager.BUFFER_STREAM_SPLIT = 16;
hxd_snd_webaudio_BufferPlayback.FADE_SAMPLES = 10;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXICAQtCYXRjaF9Db3VudAECAAEAAAABAAIMQmF0Y2hfQnVmZmVyEAUMAQIAAAA";
hxsl_GlslOut.KWD_LIST = ["input","output","discard","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			if(__map_reserved[k] != null) {
				_g.setReserved(k,true);
			} else {
				_g.h[k] = true;
			}
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var m = new haxe_ds_EnumValueMap();
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			m.set(g,n);
		}
	}
	m.set(hxsl_TGlobal.ToInt,"int");
	m.set(hxsl_TGlobal.ToFloat,"float");
	m.set(hxsl_TGlobal.ToBool,"bool");
	m.set(hxsl_TGlobal.LReflect,"reflect");
	m.set(hxsl_TGlobal.Mat3x4,"_mat3x4");
	m.set(hxsl_TGlobal.VertexID,"gl_VertexID");
	m.set(hxsl_TGlobal.InstanceID,"gl_InstanceID");
	m.set(hxsl_TGlobal.IVec2,"ivec2");
	m.set(hxsl_TGlobal.IVec3,"ivec3");
	m.set(hxsl_TGlobal.IVec4,"ivec4");
	m.set(hxsl_TGlobal.BVec2,"bvec2");
	m.set(hxsl_TGlobal.BVec3,"bvec3");
	m.set(hxsl_TGlobal.BVec4,"bvec4");
	m.set(hxsl_TGlobal.FragCoord,"gl_FragCoord");
	{
		var g1 = m.iterator();
		while(g1.hasNext()) {
			var g2 = g1.next();
			var _this = hxsl_GlslOut.KWDS;
			if(__map_reserved[g2] != null) {
				_this.setReserved(g2,true);
			} else {
				_this.h[g2] = true;
			}
		}
	}
	$r = m;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9139229;
hxsl_SharedShader.UNROLL_LOOPS = false;
me_miltage_Constants.PPM = 100;
me_miltage_Constants.SPAWN_TIME = 6;
{
	Main.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=game.js.map